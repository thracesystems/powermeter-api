/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProjectApi.h
 *
 * 
 */

#ifndef POWERMETER_API_ProjectApi_H_
#define POWERMETER_API_ProjectApi_H_


#include "../ApiClient.h"

#include "Design.h"
#include "DesignInstance.h"
#include "DesignMaster.h"
#include "DesignSupplyInst.h"
#include "DesignVersion.h"
#include "PCBInstance.h"
#include "PackageInstance.h"
#include "PackageSupplyInst.h"
#include "PagedContribDevice.h"
#include "Project.h"
#include "Scenario.h"
#include "ScenarioHierarchy.h"
#include "ScenarioMaster.h"
#include "ScenarioModeUtil.h"
#include "ScenarioModeUtilConfig.h"
#include "ScenarioParam.h"
#include "ScenarioParamConfig.h"
#include "ScenarioVersion.h"
#include "SimMaster.h"
#include "SupplyInstConfig.h"
#include "SwaggerContrib.h"
#include "UpdateData.h"
#include "VRInstance.h"
#include "VRSupplyInst.h"
#include "WLMMaster.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  ProjectApi 
{
public:

    explicit ProjectApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ProjectApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update project access
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<void> projectAccessCreate(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a copy of project
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<void> projectClone(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Compute a contributor device
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="deviceid"></param>
    /// <param name="p"> (optional, default to 0.0)</param>
    /// <param name="v"> (optional, default to 0.0)</param>
    /// <param name="t"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<SwaggerContrib>> projectContribDeviceComputeList(
        int32_t projectid,
        int32_t deviceid,
        boost::optional<double> p,
        boost::optional<double> v,
        boost::optional<int32_t> t
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a contributor devices
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SwaggerContrib>> projectContribDeviceCreate(
        int32_t projectid,
        std::shared_ptr<SwaggerContrib> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a contributor devices
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="deviceid"></param>
    pplx::task<void> projectContribDeviceDelete(
        int32_t projectid,
        int32_t deviceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of contributor devices
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="number"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PagedContribDevice>> projectContribDeviceList(
        int32_t projectid,
        boost::optional<int32_t> page,
        boost::optional<int32_t> number
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a contributor device
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="deviceid"></param>
    pplx::task<std::shared_ptr<SwaggerContrib>> projectContribDeviceRead(
        int32_t projectid,
        int32_t deviceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a contributor devices
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="deviceid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SwaggerContrib>> projectContribDeviceUpdate(
        int32_t projectid,
        int32_t deviceid,
        std::shared_ptr<SwaggerContrib> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a project
    /// </remarks>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Project>> projectCreate(
        std::shared_ptr<Project> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a project
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<void> projectDelete(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update design access
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    pplx::task<void> projectDesignAccessCreate(
        int32_t projectid,
        int32_t masterdesignid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a copy of design
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    pplx::task<std::shared_ptr<DesignMaster>> projectDesignClone(
        int32_t projectid,
        int32_t masterdesignid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a design, return master design
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignMaster>> projectDesignCreate(
        int32_t projectid,
        std::shared_ptr<Design> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a master design
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    pplx::task<void> projectDesignDelete(
        int32_t projectid,
        int32_t masterdesignid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of designs that can be instantiated in the given design
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignMaster>>> projectDesignInstantiableList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of master designs in projects
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="name">Design name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<DesignMaster>>> projectDesignList(
        int32_t projectid,
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a master design
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    pplx::task<std::shared_ptr<DesignMaster>> projectDesignRead(
        int32_t projectid,
        int32_t masterdesignid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a design master
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignMaster>> projectDesignUpdate(
        int32_t projectid,
        int32_t masterdesignid,
        std::shared_ptr<DesignMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of design versions
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignVersion>>> projectDesignVersionsList(
        int32_t projectid,
        int32_t masterdesignid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of projects
    /// </remarks>
    /// <param name="name">Project name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Project>>> projectList(
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<void> projectPermissionsList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<void> projectPermissionsUpdate(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a project
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::shared_ptr<Project>> projectRead(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Add a reference
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Project>> projectReferenceCreate(
        int32_t projectid,
        std::shared_ptr<Project> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a reference
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="refid"></param>
    pplx::task<void> projectReferenceDelete(
        int32_t projectid,
        int32_t refid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of refernced projects
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::vector<std::shared_ptr<Project>>> projectReferenceList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a reference
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="refid"></param>
    pplx::task<std::shared_ptr<Project>> projectReferenceRead(
        int32_t projectid,
        int32_t refid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of projects referenceable by this project
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::vector<std::shared_ptr<Project>>> projectReferenceableList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update project datasheet access
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> projectScenarioAccessCreate(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Commit a version
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioVersion>> projectScenarioCommitCreate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<ScenarioVersion> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> projectScenarioDelete(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario PC instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignInstance>> projectScenarioDesignCreate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<DesignInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario Design instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<void> projectScenarioDesignDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario Designs
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignInstance>>> projectScenarioDesignList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioParamConfig>> projectScenarioDesignParamConfigCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid,
        std::shared_ptr<ScenarioParamConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    /// <param name="configid"></param>
    pplx::task<void> projectScenarioDesignParamConfigDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioParamConfig>>> projectScenarioDesignParamConfigList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<ScenarioParamConfig>> projectScenarioDesignParamConfigRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioParamConfig>> projectScenarioDesignParamConfigUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid,
        int32_t configid,
        std::shared_ptr<ScenarioParamConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioParam>> projectScenarioDesignParamCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        std::shared_ptr<ScenarioParam> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioParam>>> projectScenarioDesignParamList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get datasheet design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioParam>>> projectScenarioDesignParamRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create datasheet supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="paramid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioParam>> projectScenarioDesignParamUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t paramid,
        std::shared_ptr<ScenarioParam> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get project scenario power
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<void> projectScenarioDesignPowerList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get project scenario power distribution
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<void> projectScenarioDesignPowerdistributionList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scenario Design
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<std::shared_ptr<DesignInstance>> projectScenarioDesignRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="designinstid"></param>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="dsigninstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioDesignSupplyConfigCreate(
        utility::string_t designinstid,
        int32_t projectid,
        int32_t scenarioid,
        int32_t dsigninstid,
        int32_t supplyid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<void> projectScenarioDesignSupplyConfigDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyInstConfig>>> projectScenarioDesignSupplyConfigList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioDesignSupplyConfigRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioDesignSupplyConfigUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="designinstid"></param>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="dsigninstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignSupplyInst>> projectScenarioDesignSupplyCreate(
        utility::string_t designinstid,
        int32_t projectid,
        int32_t scenarioid,
        int32_t dsigninstid,
        int32_t supplyid,
        std::shared_ptr<DesignSupplyInst> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignSupplyInst>>> projectScenarioDesignSupplyRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Compute project scenario steady state thermal
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<void> projectScenarioDesignThermalList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario Design instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignInstance>> projectScenarioDesignUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        std::shared_ptr<DesignInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioModeUtilConfig>> projectScenarioDesignUtilizationConfigCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid,
        std::shared_ptr<ScenarioModeUtilConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    /// <param name="configid"></param>
    pplx::task<void> projectScenarioDesignUtilizationConfigDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioModeUtilConfig>>> projectScenarioDesignUtilizationConfigList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<ScenarioModeUtilConfig>> projectScenarioDesignUtilizationConfigRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioModeUtilConfig>> projectScenarioDesignUtilizationConfigUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid,
        int32_t configid,
        std::shared_ptr<ScenarioModeUtilConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioModeUtil>> projectScenarioDesignUtilizationCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid,
        std::shared_ptr<ScenarioModeUtil> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioModeUtil>>> projectScenarioDesignUtilizationList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design config data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<ScenarioModeUtil>> projectScenarioDesignUtilizationRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioModeUtil>> projectScenarioDesignUtilizationUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t modeid,
        std::shared_ptr<ScenarioModeUtil> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario PCB package supply instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyinstid"></param>
    pplx::task<std::shared_ptr<DesignSupplyInst>> projectScenarioHierarchyDesignSupplyRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario PCB package supply instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="designinstid"></param>
    /// <param name="supplyinstid"></param>
    pplx::task<std::shared_ptr<DesignSupplyInst>> projectScenarioHierarchyDesignSupplyUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t designinstid,
        int32_t supplyinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario PCBs
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::shared_ptr<ScenarioHierarchy>> projectScenarioHierarchyList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario PCB package supply instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyinstid"></param>
    pplx::task<std::shared_ptr<PackageSupplyInst>> projectScenarioHierarchyPackageSupplyRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update scenario PCB package supply instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyinstid"></param>
    pplx::task<std::shared_ptr<PackageSupplyInst>> projectScenarioHierarchyPackageSupplyUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create datasheet PCB package supply instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyinstid"></param>
    pplx::task<std::shared_ptr<VRSupplyInst>> projectScenarioHierarchyVrSupplyRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create datasheet PCB package supply instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyinstid"></param>
    pplx::task<std::shared_ptr<VRSupplyInst>> projectScenarioHierarchyVrSupplyUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::shared_ptr<ScenarioMaster>> projectScenarioLibraryClone(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioMaster>> projectScenarioLibraryCreate(
        int32_t projectid,
        std::shared_ptr<ScenarioMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> projectScenarioLibraryDelete(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of project scenarios
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioMaster>>> projectScenarioLibraryList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scenarios
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioMaster>>> projectScenarioLibraryRead(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ScenarioMaster>> projectScenarioLibraryUpdate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<ScenarioMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get List of design versions
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioVersion>>> projectScenarioLibraryVersionList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario Package instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageInstance>> projectScenarioPackageCreate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<PackageInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario Package instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    pplx::task<void> projectScenarioPackageDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario Packages
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<PackageInstance>>> projectScenarioPackageList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get project scenario power
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    pplx::task<void> projectScenarioPackagePowerList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scenario Pckage
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    pplx::task<std::shared_ptr<PackageInstance>> projectScenarioPackageRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create datasheet supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioPackageSupplyConfigCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<void> projectScenarioPackageSupplyConfigDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyInstConfig>>> projectScenarioPackageSupplyConfigList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioPackageSupplyConfigRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioPackageSupplyConfigUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario Package instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="packinstid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageInstance>> projectScenarioPackageUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t packinstid,
        std::shared_ptr<PackageInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario PC instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCBInstance>> projectScenarioPcbCreate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<PCBInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a datasheet PCB instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    pplx::task<void> projectScenarioPcbDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario PCBs
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<PCBInstance>>> projectScenarioPcbList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get project scenario power
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    pplx::task<void> projectScenarioPcbPowerList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a datasheet PCB
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    pplx::task<std::shared_ptr<PCBInstance>> projectScenarioPcbRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioPcbSupplyConfigCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid,
        int32_t supplyid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create datasheet supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<void> projectScenarioPcbSupplyConfigDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyInstConfig>>> projectScenarioPcbSupplyConfigList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get datasheet design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioPcbSupplyConfigRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create datasheet supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioPcbSupplyConfigUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a datasheet PCB instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="pcbinstid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCBInstance>> projectScenarioPcbUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t pcbinstid,
        std::shared_ptr<PCBInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get project scenario power
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> projectScenarioPowerList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="resolution"></param>
    pplx::task<void> projectScenarioPowerdistributionDownloadRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t resolution
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::shared_ptr<Scenario>> projectScenarioRead(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a datasheet trend
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> projectScenarioTrendList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Scenario>> projectScenarioUpdate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<Scenario> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::shared_ptr<UpdateData>> projectScenarioUpdateList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get List of design versions
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<ScenarioVersion>>> projectScenarioVersionList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario PC instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<VRInstance>> projectScenarioVrCreate(
        int32_t projectid,
        int32_t scenarioid,
        std::shared_ptr<VRInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario VR instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    pplx::task<void> projectScenarioVrDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario VRs
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<std::shared_ptr<VRInstance>>> projectScenarioVrList(
        int32_t projectid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get project scenario power
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    pplx::task<void> projectScenarioVrPowerList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scenario VR
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    pplx::task<std::shared_ptr<VRInstance>> projectScenarioVrRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioVrSupplyConfigCreate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<void> projectScenarioVrSupplyConfigDelete(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyInstConfig>>> projectScenarioVrSupplyConfigList(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scenario design supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioVrSupplyConfigRead(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create scenario supply data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SupplyInstConfig>> projectScenarioVrSupplyConfigUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        int32_t supplyid,
        int32_t configid,
        std::shared_ptr<SupplyInstConfig> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario VR instance
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="vrinstid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<VRInstance>> projectScenarioVrUpdate(
        int32_t projectid,
        int32_t scenarioid,
        int32_t vrinstid,
        std::shared_ptr<VRInstance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a simulation
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="simid"></param>
    pplx::task<void> projectSimulationCloneCreate(
        int32_t projectid,
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new simulation
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<SimMaster>>> projectSimulationCreate(
        int32_t projectid,
        std::shared_ptr<SimMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a simulation
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="simid"></param>
    pplx::task<void> projectSimulationDelete(
        int32_t projectid,
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of simulations
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::vector<std::shared_ptr<SimMaster>>> projectSimulationList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of simulations
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="simid"></param>
    pplx::task<std::vector<std::shared_ptr<SimMaster>>> projectSimulationRead(
        int32_t projectid,
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a simulation
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="simid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SimMaster>> projectSimulationUpdate(
        int32_t projectid,
        int32_t simid,
        std::shared_ptr<SimMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="simid"></param>
    pplx::task<std::shared_ptr<UpdateData>> projectSimulationUpdateList(
        int32_t projectid,
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a project
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Project>> projectUpdate(
        int32_t projectid,
        std::shared_ptr<Project> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of {current, last update} times for current project
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::shared_ptr<UpdateData>> projectUpdateTimes(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<void> projectVerilogCreate(
        utility::string_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a contributor devices
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<WLMMaster>> projectWireLoadCreate(
        int32_t projectid,
        std::shared_ptr<WLMMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete wire load data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="wlmid"></param>
    pplx::task<void> projectWireLoadDelete(
        int32_t projectid,
        int32_t wlmid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of wire load data
    /// </remarks>
    /// <param name="projectid"></param>
    pplx::task<std::vector<std::shared_ptr<WLMMaster>>> projectWireLoadList(
        int32_t projectid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get wire load data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="wlmid"></param>
    pplx::task<std::shared_ptr<WLMMaster>> projectWireLoadRead(
        int32_t projectid,
        int32_t wlmid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update wireload data
    /// </remarks>
    /// <param name="projectid"></param>
    /// <param name="wlmid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<WLMMaster>> projectWireLoadUpdate(
        int32_t projectid,
        int32_t wlmid,
        std::shared_ptr<WLMMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of {current, last update} times for all projects
    /// </remarks>
    pplx::task<std::shared_ptr<UpdateData>> projectsUpdateTimes(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_ProjectApi_H_ */

