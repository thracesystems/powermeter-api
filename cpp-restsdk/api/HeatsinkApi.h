/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HeatsinkApi.h
 *
 * 
 */

#ifndef POWERMETER_API_HeatsinkApi_H_
#define POWERMETER_API_HeatsinkApi_H_


#include "../ApiClient.h"

#include "Heatsink.h"
#include "HeatsinkMaster.h"
#include "HeatsinkVersion.h"
#include "UpdateData.h"


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  HeatsinkApi 
{
public:

    explicit HeatsinkApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~HeatsinkApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a heat sink
    /// </remarks>
    /// <param name="heatsinkmasterid"></param>
    pplx::task<std::shared_ptr<HeatsinkMaster>> haetsinkLibraryClone(
        int32_t heatsinkmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Commit a version
    /// </remarks>
    /// <param name="heatsinkid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<HeatsinkVersion>> heatsinkCommitCreate(
        int32_t heatsinkid,
        std::shared_ptr<HeatsinkVersion> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a heatsink
    /// </remarks>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<HeatsinkMaster>> heatsinkLibraryCreate(
        std::shared_ptr<HeatsinkMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a heatsink
    /// </remarks>
    /// <param name="heatsinkmasterid"></param>
    pplx::task<void> heatsinkLibraryDelete(
        int32_t heatsinkmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of heat sinks
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<HeatsinkMaster>>> heatsinkLibraryList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a heatsink
    /// </remarks>
    /// <param name="heatsinkmasterid"></param>
    pplx::task<std::shared_ptr<HeatsinkMaster>> heatsinkLibraryRead(
        int32_t heatsinkmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a heatsink
    /// </remarks>
    /// <param name="heatsinkmasterid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<HeatsinkMaster>> heatsinkLibraryUpdate(
        int32_t heatsinkmasterid,
        std::shared_ptr<HeatsinkMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    pplx::task<std::shared_ptr<UpdateData>> heatsinkLibraryUpdateList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get Heatsink versions
    /// </remarks>
    /// <param name="heatsinkmasterid"></param>
    pplx::task<std::shared_ptr<HeatsinkVersion>> heatsinkLibraryVersionList(
        int32_t heatsinkmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="heatsinkid"></param>
    pplx::task<void> heatsinkPermissionsList(
        int32_t heatsinkid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="heatsinkid"></param>
    pplx::task<void> heatsinkPermissionsUpdate(
        int32_t heatsinkid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a heatsink
    /// </remarks>
    /// <param name="heatsinkid"></param>
    pplx::task<std::shared_ptr<Heatsink>> heatsinkRead(
        int32_t heatsinkid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Restore a heatsink version as current version
    /// </remarks>
    /// <param name="heatsinkid"></param>
    pplx::task<std::shared_ptr<Heatsink>> heatsinkRestoreCreate(
        int32_t heatsinkid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a heatsink
    /// </remarks>
    /// <param name="heatsinkid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Heatsink>> heatsinkUpdate(
        int32_t heatsinkid,
        std::shared_ptr<Heatsink> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="heatsinkid"></param>
    pplx::task<std::shared_ptr<UpdateData>> heatsinkUpdateList(
        int32_t heatsinkid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get Heatsink versions
    /// </remarks>
    /// <param name="heatsinkid"></param>
    pplx::task<std::vector<std::shared_ptr<HeatsinkVersion>>> heatsinkVersionList(
        int32_t heatsinkid
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_HeatsinkApi_H_ */

