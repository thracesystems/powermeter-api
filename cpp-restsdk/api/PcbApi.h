/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PcbApi.h
 *
 * 
 */

#ifndef POWERMETER_API_PcbApi_H_
#define POWERMETER_API_PcbApi_H_


#include "../ApiClient.h"

#include "PCB.h"
#include "PCBMaster.h"
#include "PCBSupply.h"
#include "PCBVersionSerialzer.h"
#include "UpdateData.h"


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  PcbApi 
{
public:

    explicit PcbApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PcbApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Commit a version
    /// </remarks>
    /// <param name="pcbid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCBVersionSerialzer>> pcbCommitCreate(
        int32_t pcbid,
        std::shared_ptr<PCBVersionSerialzer> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Copy a PCB
    /// </remarks>
    /// <param name="pcbmasterid"></param>
    pplx::task<std::shared_ptr<PCBMaster>> pcbLibraryClone(
        int32_t pcbmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a PCB
    /// </remarks>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCBMaster>> pcbLibraryCreate(
        std::shared_ptr<PCBMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete PCB
    /// </remarks>
    /// <param name="pcbmasterid"></param>
    pplx::task<void> pcbLibraryDelete(
        int32_t pcbmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of PCB
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<PCBMaster>>> pcbLibraryList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a PCB
    /// </remarks>
    /// <param name="pcbmasterid"></param>
    pplx::task<std::shared_ptr<PCBMaster>> pcbLibraryRead(
        int32_t pcbmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update PCB
    /// </remarks>
    /// <param name="pcbmasterid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCBMaster>> pcbLibraryUpdate(
        int32_t pcbmasterid,
        std::shared_ptr<PCBMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    pplx::task<std::shared_ptr<UpdateData>> pcbLibraryUpdateList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get PCB versions
    /// </remarks>
    /// <param name="pcbmasterid"></param>
    pplx::task<std::shared_ptr<PCBVersionSerialzer>> pcbLibraryVersionList(
        int32_t pcbmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<void> pcbPermissionsList(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<void> pcbPermissionsUpdate(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a PCB
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<std::shared_ptr<PCB>> pcbRead(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Restore a pcb version as current version
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<std::shared_ptr<PCB>> pcbRestoreCreate(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Copy a PCB supply
    /// </remarks>
    /// <param name="pcbid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<PCBSupply>> pcbSupplyClone(
        int32_t pcbid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create PCB supplies
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<std::shared_ptr<PCBSupply>> pcbSupplyCreate(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete PCB supply
    /// </remarks>
    /// <param name="pcbid"></param>
    /// <param name="supplyid"></param>
    pplx::task<void> pcbSupplyDelete(
        int32_t pcbid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of PCB supplies
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<std::vector<std::shared_ptr<PCBSupply>>> pcbSupplyList(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a PCB supply
    /// </remarks>
    /// <param name="pcbid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<PCBSupply>> pcbSupplyRead(
        int32_t pcbid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update PCB supply
    /// </remarks>
    /// <param name="pcbid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCBSupply>> pcbSupplyUpdate(
        int32_t pcbid,
        int32_t supplyid,
        std::shared_ptr<PCBSupply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a PCB
    /// </remarks>
    /// <param name="pcbid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PCB>> pcbUpdate(
        int32_t pcbid,
        std::shared_ptr<PCB> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<std::shared_ptr<UpdateData>> pcbUpdateList(
        int32_t pcbid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get PCB versions
    /// </remarks>
    /// <param name="pcbid"></param>
    pplx::task<std::vector<std::shared_ptr<PCBVersionSerialzer>>> pcbVersionList(
        int32_t pcbid
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_PcbApi_H_ */

