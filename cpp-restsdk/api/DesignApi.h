/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DesignApi.h
 *
 * 
 */

#ifndef POWERMETER_API_DesignApi_H_
#define POWERMETER_API_DesignApi_H_


#include "../ApiClient.h"

#include "ComputePower_1.h"
#include "ComputePower_2.h"
#include "ComputedContributorPower.h"
#include "ComputedContributorPower_1.h"
#include "ComputedPower.h"
#include "ComputedPowerArc.h"
#include "ContribPower.h"
#include "Dashboard.h"
#include "DashboardColumn.h"
#include "DashboardRow.h"
#include "Design.h"
#include "DesignData.h"
#include "DesignFF.h"
#include "DesignLatch.h"
#include "DesignMaster.h"
#include "DesignPin.h"
#include "DesignPinEnergy.h"
#include "DesignScenario.h"
#include "DesignScenarioConfig.h"
#include "DesignScenarioModeUtil.h"
#include "DesignScenarioSupply.h"
#include "DesignSensor.h"
#include "DesignStateTable.h"
#include "DesignTrend.h"
#include "DesignVersion.h"
#include "Hier.h"
#include "Instance.h"
#include "InstanceSupply.h"
#include "LeakagePower.h"
#include "Mode.h"
#include "PagedDesignPinEnergy.h"
#include "PagedInstance.h"
#include "PagedLeakagePower.h"
#include "Param.h"
#include "PinCap.h"
#include "PinEnergy.h"
#include "PinState.h"
#include "PinStateArc.h"
#include "Power.h"
#include "Supply.h"
#include "SupplyModeState.h"
#include "UpdateData.h"
#include <vector>
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  DesignApi 
{
public:

    explicit DesignApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DesignApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete hierarchy groups
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> apiDesignHierarchyDeleteAll(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete all instances
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> apiDesignInstanceDeleteAll(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete design modes
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> apiDesignModeDeleteAll(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete params
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> apiDesignParameterDeleteAll(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete supplies
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> apiDesignSupplyDeleteAll(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Commit a version
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignVersion>> designCommitCreate(
        int32_t designid,
        std::shared_ptr<DesignVersion> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="process"></param>
    /// <param name="rc"></param>
    /// <param name="voltage"></param>
    /// <param name="temperature"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<ComputedPower>>> designComputepowerCreate(
        int32_t designid,
        utility::string_t process,
        utility::string_t rc,
        double voltage,
        int32_t temperature,
        std::vector<std::shared_ptr<PinState>> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="process"></param>
    /// <param name="rc"></param>
    /// <param name="voltage"></param>
    /// <param name="temperature"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ComputedPowerArc>> designComputepowerarcCreate(
        int32_t designid,
        utility::string_t process,
        utility::string_t rc,
        double voltage,
        int32_t temperature,
        std::vector<std::shared_ptr<PinStateArc>> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get device data
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    /// <param name="p">Process name</param>
    /// <param name="v">Voltage</param>
    /// <param name="t">Temperature</param>
    pplx::task<std::shared_ptr<ComputedContributorPower_1>> designContribpowerCompute1List(
        int32_t designid,
        int32_t powerid,
        utility::string_t p,
        double v,
        int32_t t
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get device data
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    /// <param name="p">Process name</param>
    /// <param name="v">Voltage</param>
    /// <param name="t">Temperature</param>
    pplx::task<std::shared_ptr<ComputedContributorPower>> designContribpowerComputeList(
        int32_t designid,
        int32_t powerid,
        utility::string_t p,
        double v,
        int32_t t
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new contributor power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ContribPower>> designContribpowerCreate(
        int32_t designid,
        std::shared_ptr<ContribPower> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a contributor power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    pplx::task<void> designContribpowerDelete(
        int32_t designid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of contributor powers
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<ContribPower>>> designContribpowerList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a contributor power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    pplx::task<std::shared_ptr<ContribPower>> designContribpowerRead(
        int32_t designid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a contributor power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ContribPower>> designContribpowerUpdate(
        int32_t designid,
        int32_t powerid,
        std::shared_ptr<ContribPower> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update design dashboard access
    /// </remarks>
    /// <param name="dashboardid"></param>
    /// <param name="designid"></param>
    /// <param name="projectid"></param>
    /// <param name="masterdesignid"></param>
    pplx::task<void> designDashboardAccessCreate(
        utility::string_t dashboardid,
        utility::string_t designid,
        int32_t projectid,
        int32_t masterdesignid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a dashboard
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<std::shared_ptr<Dashboard>> designDashboardCloneCreate(
        int32_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a dashboard column
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DashboardColumn>> designDashboardColumnCreate(
        int32_t designid,
        int32_t dashboardid,
        std::shared_ptr<DashboardColumn> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a dashboard column
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="columnid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DashboardColumn>> designDashboardColumnDelete(
        int32_t designid,
        int32_t dashboardid,
        int32_t columnid,
        std::shared_ptr<DashboardColumn> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get dashboard columns
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<std::vector<std::shared_ptr<DashboardColumn>>> designDashboardColumnList(
        int32_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a dashboard column
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="columnid"></param>
    pplx::task<std::shared_ptr<DashboardColumn>> designDashboardColumnRead(
        int32_t designid,
        int32_t dashboardid,
        int32_t columnid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a dashboard column
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="columnid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DashboardColumn>> designDashboardColumnUpdate(
        int32_t designid,
        int32_t dashboardid,
        int32_t columnid,
        std::shared_ptr<DashboardColumn> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a dashboards
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Dashboard>> designDashboardCreate(
        int32_t designid,
        std::shared_ptr<Dashboard> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a dashboard
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<std::shared_ptr<Dashboard>> designDashboardDataList(
        int32_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a dashboards
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<void> designDashboardDelete(
        int32_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a list of dashboards
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<Dashboard>>> designDashboardList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a dashboard
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<std::shared_ptr<Dashboard>> designDashboardRead(
        int32_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a dashboard row
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DashboardRow>> designDashboardRowCreate(
        int32_t designid,
        int32_t dashboardid,
        std::shared_ptr<DashboardRow> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a dashboard column
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="rowid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DashboardRow>> designDashboardRowDelete(
        int32_t designid,
        int32_t dashboardid,
        int32_t rowid,
        std::shared_ptr<DashboardRow> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get dashboard rows
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<std::vector<std::shared_ptr<DashboardRow>>> designDashboardRowList(
        int32_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a dashboard row
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="rowid"></param>
    pplx::task<std::shared_ptr<DashboardRow>> designDashboardRowRead(
        int32_t designid,
        int32_t dashboardid,
        int32_t rowid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a dashboard row
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="rowid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DashboardRow>> designDashboardRowUpdate(
        int32_t designid,
        int32_t dashboardid,
        int32_t rowid,
        std::shared_ptr<DashboardRow> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a dashboards
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Dashboard>> designDashboardUpdate(
        int32_t designid,
        int32_t dashboardid,
        std::shared_ptr<Dashboard> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dashboardid"></param>
    pplx::task<std::shared_ptr<UpdateData>> designDashboardUpdateList(
        utility::string_t designid,
        int32_t dashboardid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Upload design data
    /// </remarks>
    /// <param name="uuid"></param>
    /// <param name="data"></param>
    pplx::task<void> designDataCreate(
        utility::string_t uuid,
        utility::string_t data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete design data
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dataid"></param>
    pplx::task<void> designDataDelete(
        int32_t designid,
        int32_t dataid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get design data
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="fields"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<DesignData>>> designDataList(
        int32_t designid,
        boost::optional<utility::string_t> fields,
        boost::optional<utility::string_t> filter
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get design data
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dataid"></param>
    pplx::task<std::shared_ptr<DesignData>> designDataRead(
        int32_t designid,
        int32_t dataid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update design data
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="dataid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignData>> designDataUpdate(
        int32_t designid,
        int32_t dataid,
        std::shared_ptr<DesignData> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Add pin powers
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<DesignPinEnergy>>> designEnergyCreate(
        int32_t designid,
        std::shared_ptr<DesignPinEnergy> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of all pin powers
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="number"> (optional, default to 0)</param>
    /// <param name="process">Model corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rc">RC corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="voltage">Voltage (optional, default to 0.0)</param>
    /// <param name="temperature">Temperature (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PagedDesignPinEnergy>> designEnergyList(
        int32_t designid,
        boost::optional<int32_t> page,
        boost::optional<int32_t> number,
        boost::optional<utility::string_t> process,
        boost::optional<utility::string_t> rc,
        boost::optional<double> voltage,
        boost::optional<int32_t> temperature
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignFF>> designFfCreate(
        int32_t designid,
        std::shared_ptr<DesignFF> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="ffid"></param>
    pplx::task<void> designFfDelete(
        int32_t designid,
        int32_t ffid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of ffs
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignFF>>> designFfList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="ffid"></param>
    pplx::task<std::shared_ptr<DesignFF>> designFfRead(
        int32_t designid,
        int32_t ffid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="ffid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignFF>> designFfUpdate(
        int32_t designid,
        int32_t ffid,
        std::shared_ptr<DesignFF> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create new hierarchy group
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Hier>> designHierarchyGroupCreate(
        int32_t designid,
        std::shared_ptr<Hier> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a hierarchy group
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="groupid"></param>
    pplx::task<void> designHierarchyGroupDelete(
        int32_t designid,
        int32_t groupid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update hierarchy group
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="groupid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Hier>> designHierarchyGroupUpdate(
        int32_t designid,
        int32_t groupid,
        std::shared_ptr<Hier> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get hierarchy
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<Hier>>> designHierarchyList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update hierarchy
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<Hier>>> designHierarchyUpdate(
        int32_t designid,
        std::shared_ptr<Hier> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new instance
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    /// <param name="r_return"> (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<Instance>>> designInstanceBulkCreate(
        int32_t designid,
        std::vector<std::shared_ptr<Instance>> data,
        boost::optional<bool> r_return
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone an instance
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    pplx::task<std::shared_ptr<Instance>> designInstanceClone(
        int32_t designid,
        int32_t instanceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new instance
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Instance>> designInstanceCreate(
        int32_t designid,
        std::shared_ptr<Instance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete instance
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    pplx::task<void> designInstanceDelete(
        int32_t designid,
        int32_t instanceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of instances
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="number"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PagedInstance>> designInstanceList(
        int32_t designid,
        boost::optional<int32_t> page,
        boost::optional<int32_t> number
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a design
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    pplx::task<std::shared_ptr<Instance>> designInstanceRead(
        int32_t designid,
        int32_t instanceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update instance supplies
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<InstanceSupply>>> designInstanceSupplyCreate(
        int32_t designid,
        int32_t instanceid,
        std::shared_ptr<InstanceSupply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get instance supplies
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    pplx::task<std::vector<std::shared_ptr<InstanceSupply>>> designInstanceSupplyList(
        int32_t designid,
        int32_t instanceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get an instance supply
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<InstanceSupply>> designInstanceSupplyRead(
        int32_t designid,
        int32_t instanceid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update an instance supply
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<InstanceSupply>> designInstanceSupplyUpdate(
        int32_t designid,
        int32_t instanceid,
        int32_t supplyid,
        std::shared_ptr<InstanceSupply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update instance
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Instance>> designInstanceUpdate(
        int32_t designid,
        int32_t instanceid,
        std::shared_ptr<Instance> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update instance master
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="instanceid"></param>
    /// <param name="masterid"></param>
    pplx::task<std::vector<std::shared_ptr<Instance>>> designInstanceUpdatemasterCreate(
        int32_t designid,
        int32_t instanceid,
        int32_t masterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of designs that can be instantiated in the given design
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignMaster>>> designInstantiableList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new latch
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignLatch>> designLatchCreate(
        int32_t designid,
        std::shared_ptr<DesignLatch> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a latch
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="latchid"></param>
    pplx::task<void> designLatchDelete(
        int32_t designid,
        int32_t latchid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of latches
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignLatch>>> designLatchList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a latch
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="latchid"></param>
    pplx::task<std::shared_ptr<DesignLatch>> designLatchRead(
        int32_t designid,
        int32_t latchid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a latch
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="latchid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignLatch>> designLatchUpdate(
        int32_t designid,
        int32_t latchid,
        std::shared_ptr<DesignLatch> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new leakage power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<LeakagePower>> designLeakagepowerCreate(
        int32_t designid,
        std::shared_ptr<LeakagePower> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    pplx::task<void> designLeakagepowerDelete(
        int32_t designid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of leakage powers
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="number"> (optional, default to 0)</param>
    /// <param name="process">Model corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rc">RC corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="voltage">Voltage (optional, default to 0.0)</param>
    /// <param name="temperature">Temperature (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PagedLeakagePower>> designLeakagepowerList(
        int32_t designid,
        boost::optional<int32_t> page,
        boost::optional<int32_t> number,
        boost::optional<utility::string_t> process,
        boost::optional<utility::string_t> rc,
        boost::optional<double> voltage,
        boost::optional<int32_t> temperature
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    pplx::task<std::shared_ptr<LeakagePower>> designLeakagepowerRead(
        int32_t designid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<LeakagePower>> designLeakagepowerUpdate(
        int32_t designid,
        int32_t powerid,
        std::shared_ptr<LeakagePower> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a design mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<Mode>> designModeClone(
        int32_t designid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Mode>> designModeCreate(
        int32_t designid,
        std::shared_ptr<Mode> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a design mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    pplx::task<void> designModeDelete(
        int32_t designid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of design modes
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<Mode>>> designModeList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    pplx::task<void> designModePowerList(
        int32_t designid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    pplx::task<void> designModePowerdistributionList(
        int32_t designid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a design mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<Mode>> designModeRead(
        int32_t designid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<void> designModeSupplyComputepowerCreate(
        int32_t designid,
        int32_t modeid,
        int32_t supplyid,
        std::shared_ptr<ComputePower_1> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<void> designModeSupplyComputepowertableCreate(
        int32_t designid,
        int32_t modeid,
        int32_t supplyid,
        std::shared_ptr<ComputePower_2> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of supply states per mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<SupplyModeState>> designModeSupplystateList(
        int32_t designid,
        int32_t supplyid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a supply state per mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyModeState>>> designModeSupplystateUpdate(
        int32_t designid,
        int32_t supplyid,
        int32_t modeid,
        std::shared_ptr<SupplyModeState> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a design mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Mode>> designModeUpdate(
        int32_t designid,
        int32_t modeid,
        std::shared_ptr<Mode> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clode a mode param
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="paramid"></param>
    pplx::task<std::shared_ptr<Param>> designParameterClone(
        int32_t designid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Param>> designParameterCreate(
        int32_t designid,
        std::shared_ptr<Param> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="paramid"></param>
    pplx::task<void> designParameterDelete(
        int32_t designid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of params
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<Param>>> designParameterList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="paramid"></param>
    pplx::task<std::shared_ptr<Param>> designParameterRead(
        int32_t designid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a parameter
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="paramid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Param>> designParameterUpdate(
        int32_t designid,
        int32_t paramid,
        std::shared_ptr<Param> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> designPermissionsList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> designPermissionsUpdate(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new pin cap
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PinCap>> designPinCapsCreate(
        int32_t designid,
        int32_t pinid,
        std::shared_ptr<PinCap> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a pin cap
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="capid"></param>
    pplx::task<void> designPinCapsDelete(
        int32_t designid,
        int32_t pinid,
        int32_t capid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of pin caps
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="process">Model corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rc">RC corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="voltage">Voltage (optional, default to 0.0)</param>
    /// <param name="temperature">Temperature (optional, default to 0.0)</param>
    pplx::task<std::vector<std::shared_ptr<PinCap>>> designPinCapsList(
        int32_t designid,
        int32_t pinid,
        boost::optional<utility::string_t> process,
        boost::optional<utility::string_t> rc,
        boost::optional<double> voltage,
        boost::optional<double> temperature
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a pin cap
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="capid"></param>
    pplx::task<std::shared_ptr<PinCap>> designPinCapsRead(
        int32_t designid,
        int32_t pinid,
        int32_t capid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a pin power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="capid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PinCap>> designPinCapsUpdate(
        int32_t designid,
        int32_t pinid,
        int32_t capid,
        std::shared_ptr<PinCap> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new pin
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignPin>> designPinCreate(
        int32_t designid,
        std::shared_ptr<DesignPin> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a pin
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    pplx::task<void> designPinDelete(
        int32_t designid,
        int32_t pinid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new pin power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PinEnergy>> designPinEnergyCreate(
        int32_t designid,
        int32_t pinid,
        std::shared_ptr<PinEnergy> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a pin power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="powerid"></param>
    pplx::task<void> designPinEnergyDelete(
        int32_t designid,
        int32_t pinid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of pin powers
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="process">Model corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rc">RC corner name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="voltage">Voltage (optional, default to 0.0)</param>
    /// <param name="temperature">Temperature (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<PinEnergy>>> designPinEnergyList(
        int32_t designid,
        int32_t pinid,
        boost::optional<utility::string_t> process,
        boost::optional<utility::string_t> rc,
        boost::optional<double> voltage,
        boost::optional<int32_t> temperature
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a pin power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="powerid"></param>
    pplx::task<std::shared_ptr<PinEnergy>> designPinEnergyRead(
        int32_t designid,
        int32_t pinid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a pin power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="powerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PinEnergy>> designPinEnergyUpdate(
        int32_t designid,
        int32_t pinid,
        int32_t powerid,
        std::shared_ptr<PinEnergy> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of pins
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignPin>>> designPinList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a pin
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    pplx::task<std::shared_ptr<DesignPin>> designPinRead(
        int32_t designid,
        int32_t pinid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a pin
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="pinid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignPin>> designPinUpdate(
        int32_t designid,
        int32_t pinid,
        std::shared_ptr<DesignPin> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Power>> designPowerCreate(
        int32_t designid,
        std::shared_ptr<Power> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    pplx::task<void> designPowerDelete(
        int32_t designid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of powers
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<Power>>> designPowerList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    pplx::task<std::shared_ptr<Power>> designPowerRead(
        int32_t designid,
        int32_t powerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a power
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="powerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Power>> designPowerUpdate(
        int32_t designid,
        int32_t powerid,
        std::shared_ptr<Power> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get design
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::shared_ptr<Design>> designRead(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Restore a design version as current version
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::shared_ptr<Design>> designRestoreCreate(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a design scenario
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::shared_ptr<DesignScenario>> designScenarioClone(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a scenario
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::shared_ptr<DesignScenario>> designScenarioCreate(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> designScenarioDelete(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of scenarios
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignScenario>>> designScenarioList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a datasheet mode util
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="modeid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioModeUtil>> designScenarioModeConfigDelete(
        int32_t designid,
        int32_t scenarioid,
        int32_t modeid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get datasheet mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="modeid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioModeUtil>> designScenarioModeConfigRead(
        int32_t designid,
        int32_t scenarioid,
        int32_t modeid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a datasheet mode util
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="modeid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioModeUtil>> designScenarioModeConfigUpdate(
        int32_t designid,
        int32_t scenarioid,
        int32_t modeid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a scenario mode util
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<DesignScenarioModeUtil>> designScenarioModeCreate(
        int32_t designid,
        int32_t scenarioid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of scenario modes
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignScenarioModeUtil>>> designScenarioModeRead(
        int32_t designid,
        int32_t scenarioid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario config
    /// </remarks>
    /// <param name="configid"></param>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="paramid"></param>
    /// <param name="confgiid"></param>
    pplx::task<std::shared_ptr<DesignScenarioConfig>> designScenarioParamConfigDelete(
        utility::string_t configid,
        int32_t designid,
        int32_t scenarioid,
        int32_t paramid,
        int32_t confgiid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Getscenario configs
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="paramid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioConfig>> designScenarioParamConfigRead(
        int32_t designid,
        int32_t scenarioid,
        int32_t paramid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario config
    /// </remarks>
    /// <param name="configid"></param>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="paramid"></param>
    /// <param name="confgiid"></param>
    pplx::task<std::shared_ptr<DesignScenarioConfig>> designScenarioParamConfigUpdate(
        utility::string_t configid,
        int32_t designid,
        int32_t scenarioid,
        int32_t paramid,
        int32_t confgiid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a scenario config
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="paramid"></param>
    pplx::task<std::shared_ptr<DesignScenarioConfig>> designScenarioParamCreate(
        int32_t designid,
        int32_t scenarioid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of scenario configs
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="paramid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignScenarioConfig>>> designScenarioParamRead(
        int32_t designid,
        int32_t scenarioid,
        int32_t paramid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get power of design scenario
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> designScenarioPowerList(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get power distribution of a design scenario
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> designScenarioPowerdistributionList(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scenario
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::shared_ptr<DesignScenario>> designScenarioRead(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a scenario config
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioSupply>> designScenarioSupplyConfigDelete(
        int32_t designid,
        int32_t scenarioid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of scenario supplies
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioSupply>> designScenarioSupplyConfigRead(
        int32_t designid,
        int32_t scenarioid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario config
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="supplyid"></param>
    /// <param name="configid"></param>
    pplx::task<std::shared_ptr<DesignScenarioSupply>> designScenarioSupplyConfigUpdate(
        int32_t designid,
        int32_t scenarioid,
        int32_t supplyid,
        int32_t configid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a scenario config
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<DesignScenarioSupply>> designScenarioSupplyCreate(
        int32_t designid,
        int32_t scenarioid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of scenario supplies
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignScenarioSupply>>> designScenarioSupplyRead(
        int32_t designid,
        int32_t scenarioid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scenario power trend
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<void> designScenarioTrendList(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a scenario
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignScenario>> designScenarioUpdate(
        int32_t designid,
        int32_t scenarioid,
        std::shared_ptr<DesignScenario> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="scenarioid"></param>
    pplx::task<std::vector<double>> designScenarioUpdateList(
        int32_t designid,
        int32_t scenarioid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clode a sensor
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="sensorid"></param>
    pplx::task<std::shared_ptr<DesignSensor>> designSensorClone(
        int32_t designid,
        int32_t sensorid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new sensor
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignSensor>> designSensorCreate(
        int32_t designid,
        std::shared_ptr<DesignSensor> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a sensor
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="sensorid"></param>
    pplx::task<void> designSensorDelete(
        int32_t designid,
        int32_t sensorid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of sensors
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignSensor>>> designSensorList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a sensor
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="sensorid"></param>
    pplx::task<std::shared_ptr<DesignSensor>> designSensorRead(
        int32_t designid,
        int32_t sensorid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a sensor
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="sensorid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignSensor>> designSensorUpdate(
        int32_t designid,
        int32_t sensorid,
        std::shared_ptr<DesignSensor> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignStateTable>> designStatetableCreate(
        int32_t designid,
        std::shared_ptr<DesignStateTable> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="statetableid"></param>
    pplx::task<void> designStatetableDelete(
        int32_t designid,
        int32_t statetableid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of statetables
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignStateTable>>> designStatetableList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a statetable
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="statetableid"></param>
    pplx::task<std::shared_ptr<DesignStateTable>> designStatetableRead(
        int32_t designid,
        int32_t statetableid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a ff
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="statetableid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignStateTable>> designStatetableUpdate(
        int32_t designid,
        int32_t statetableid,
        std::shared_ptr<DesignStateTable> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clode a mode param
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<Supply>> designSupplyClone(
        int32_t designid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a supply
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Supply>> designSupplyCreate(
        int32_t designid,
        std::shared_ptr<Supply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a supply
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    pplx::task<void> designSupplyDelete(
        int32_t designid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a list of supplies
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="name">Design name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Supply>>> designSupplyList(
        int32_t designid,
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of supply states per mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<SupplyModeState>> designSupplyModestateList(
        int32_t designid,
        int32_t supplyid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a supply state per mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyModeState>>> designSupplyModestateUpdate(
        int32_t designid,
        int32_t supplyid,
        int32_t modeid,
        std::shared_ptr<SupplyModeState> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a supply
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<Supply>> designSupplyRead(
        int32_t designid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a supply
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Supply>> designSupplyUpdate(
        int32_t designid,
        int32_t supplyid,
        std::shared_ptr<Supply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of supply states per mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="modeid"></param>
    pplx::task<std::shared_ptr<SupplyModeState>> designSupplymodestateList(
        int32_t designid,
        int32_t supplyid,
        int32_t modeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a supply state per mode
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="supplyid"></param>
    /// <param name="modeid"></param>
    /// <param name="data"></param>
    pplx::task<std::vector<std::shared_ptr<SupplyModeState>>> designSupplymodestateUpdate(
        int32_t designid,
        int32_t supplyid,
        int32_t modeid,
        std::shared_ptr<SupplyModeState> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a trend
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignTrend>> designTrendCreate(
        int32_t designid,
        std::shared_ptr<DesignTrend> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a trend
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="trendid"></param>
    pplx::task<void> designTrendDelete(
        int32_t designid,
        int32_t trendid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of saved trends
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignTrend>>> designTrendList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a trend
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="trendid"></param>
    pplx::task<std::shared_ptr<DesignTrend>> designTrendRead(
        int32_t designid,
        int32_t trendid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a trend
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="trendid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DesignTrend>> designTrendUpdate(
        int32_t designid,
        int32_t trendid,
        std::shared_ptr<DesignTrend> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update design
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Design>> designUpdate(
        int32_t designid,
        std::shared_ptr<Design> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of {current, last update} times
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::shared_ptr<UpdateData>> designUpdateList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="moduleid"></param>
    pplx::task<void> designVerilogInstancesList(
        utility::string_t designid,
        utility::string_t moduleid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<void> designVerilogList(
        utility::string_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="moduleid"></param>
    pplx::task<void> designVerilogModuleStateList(
        utility::string_t designid,
        utility::string_t moduleid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="moduleid"></param>
    pplx::task<void> designVerilogModulesList(
        utility::string_t designid,
        utility::string_t moduleid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="wireid"></param>
    pplx::task<void> designVerilogWireStateList(
        utility::string_t designid,
        utility::string_t wireid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="moduleid"></param>
    pplx::task<void> designVerilogWiresList(
        utility::string_t designid,
        utility::string_t moduleid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get List of design versions
    /// </remarks>
    /// <param name="designid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignVersion>>> designVersionList(
        int32_t designid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a design version
    /// </remarks>
    /// <param name="designid"></param>
    /// <param name="versionid"></param>
    pplx::task<std::vector<std::shared_ptr<DesignVersion>>> designVersionRead(
        int32_t designid,
        int32_t versionid
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_DesignApi_H_ */

