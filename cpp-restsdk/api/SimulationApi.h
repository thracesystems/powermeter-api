/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SimulationApi.h
 *
 * 
 */

#ifndef POWERMETER_API_SimulationApi_H_
#define POWERMETER_API_SimulationApi_H_


#include "../ApiClient.h"

#include "MeasuredDataJSON.h"
#include "PagedMeasuredData.h"
#include "PagedSimScope.h"
#include "PagedSimVar.h"
#include "SimMeasurement.h"
#include "SimScope.h"
#include "SimVar.h"
#include "Simulation.h"
#include <vector>


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  SimulationApi 
{
public:

    explicit SimulationApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SimulationApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete all scope
    /// </remarks>
    /// <param name="simid"></param>
    pplx::task<void> apiSimulationScopeDeleteAll(
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update design access
    /// </remarks>
    /// <param name="simid"></param>
    pplx::task<void> simulationAccessCreate(
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Clone a measurement
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    pplx::task<std::shared_ptr<SimMeasurement>> simulationMeasurementCloneCreate(
        int32_t simid,
        int32_t measureid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new simulation
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SimMeasurement>> simulationMeasurementCreate(
        int32_t simid,
        std::shared_ptr<SimMeasurement> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Append data
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    /// <param name="data"></param>
    pplx::task<void> simulationMeasurementDataCreate(
        int32_t simid,
        int32_t measureid,
        std::vector<std::shared_ptr<MeasuredDataJSON>> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete all data
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    pplx::task<void> simulationMeasurementDataDelete(
        int32_t simid,
        int32_t measureid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get data for a measure
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    pplx::task<std::shared_ptr<PagedMeasuredData>> simulationMeasurementDataList(
        int32_t simid,
        int32_t measureid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a measurement
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    pplx::task<void> simulationMeasurementDelete(
        int32_t simid,
        int32_t measureid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of simulations
    /// </remarks>
    /// <param name="simid"></param>
    pplx::task<std::vector<std::shared_ptr<SimMeasurement>>> simulationMeasurementList(
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get measurement
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    pplx::task<std::shared_ptr<SimMeasurement>> simulationMeasurementRead(
        int32_t simid,
        int32_t measureid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a measurement
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="measureid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SimMeasurement>> simulationMeasurementUpdate(
        int32_t simid,
        int32_t measureid,
        std::shared_ptr<SimMeasurement> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="simid"></param>
    pplx::task<void> simulationPermissionsList(
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="simid"></param>
    pplx::task<void> simulationPermissionsUpdate(
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a simulation
    /// </remarks>
    /// <param name="simid"></param>
    pplx::task<std::shared_ptr<Simulation>> simulationRead(
        int32_t simid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a scope
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SimScope>> simulationScopeCreate(
        int32_t simid,
        std::shared_ptr<SimScope> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scope
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="scopeid"></param>
    pplx::task<std::shared_ptr<SimScope>> simulationScopeDelete(
        int32_t simid,
        int32_t scopeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scopes
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="number"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PagedSimScope>> simulationScopeList(
        int32_t simid,
        boost::optional<int32_t> page,
        boost::optional<int32_t> number
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a scope
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="scopeid"></param>
    pplx::task<std::shared_ptr<SimScope>> simulationScopeRead(
        int32_t simid,
        int32_t scopeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a scope
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="scopeid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SimScope>> simulationScopeScopeCreate(
        int32_t simid,
        int32_t scopeid,
        std::shared_ptr<SimScope> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get scopes
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="scopeid"></param>
    pplx::task<std::shared_ptr<SimScope>> simulationScopeScopeList(
        int32_t simid,
        int32_t scopeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a var
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="scopeid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<SimVar>> simulationScopeVarCreate(
        int32_t simid,
        int32_t scopeid,
        std::shared_ptr<SimVar> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get vars
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="scopeid"></param>
    pplx::task<std::vector<std::shared_ptr<SimVar>>> simulationScopeVarList(
        int32_t simid,
        int32_t scopeid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a simulation
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Simulation>> simulationUpdate(
        int32_t simid,
        std::shared_ptr<Simulation> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get vars
    /// </remarks>
    /// <param name="simid"></param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="number"> (optional, default to 0)</param>
    pplx::task<std::shared_ptr<PagedSimVar>> simulationVarList(
        int32_t simid,
        boost::optional<int32_t> page,
        boost::optional<int32_t> number
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_SimulationApi_H_ */

