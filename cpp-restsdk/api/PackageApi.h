/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PackageApi.h
 *
 * 
 */

#ifndef POWERMETER_API_PackageApi_H_
#define POWERMETER_API_PackageApi_H_


#include "../ApiClient.h"

#include "Package.h"
#include "PackageMaster.h"
#include "PackageSupply.h"
#include "PackageVersion.h"
#include "UpdateData.h"


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  PackageApi 
{
public:

    explicit PackageApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~PackageApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Commit a version
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageVersion>> packageCommitCreate(
        int32_t packageid,
        std::shared_ptr<PackageVersion> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Copy a package
    /// </remarks>
    /// <param name="packagemasterid"></param>
    pplx::task<std::shared_ptr<PackageMaster>> packageLibraryClone(
        int32_t packagemasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a package
    /// </remarks>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageMaster>> packageLibraryCreate(
        std::shared_ptr<PackageMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a package
    /// </remarks>
    /// <param name="packagemasterid"></param>
    pplx::task<void> packageLibraryDelete(
        int32_t packagemasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of packages
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<PackageMaster>>> packageLibraryList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a package
    /// </remarks>
    /// <param name="packagemasterid"></param>
    pplx::task<std::shared_ptr<PackageMaster>> packageLibraryRead(
        int32_t packagemasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a package
    /// </remarks>
    /// <param name="packagemasterid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageMaster>> packageLibraryUpdate(
        int32_t packagemasterid,
        std::shared_ptr<PackageMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    pplx::task<std::shared_ptr<UpdateData>> packageLibraryUpdateList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a package
    /// </remarks>
    /// <param name="packagemasterid"></param>
    pplx::task<std::shared_ptr<PackageVersion>> packageLibraryVersionList(
        int32_t packagemasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<void> packagePermissionsList(
        int32_t packageid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<void> packagePermissionsUpdate(
        int32_t packageid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a package
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<std::shared_ptr<Package>> packageRead(
        int32_t packageid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Restore a package version as current version
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<std::shared_ptr<Package>> packageRestoreCreate(
        int32_t packageid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Copy a package supply
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<PackageSupply>> packageSupplyClone(
        int32_t packageid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a package supply
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageSupply>> packageSupplyCreate(
        int32_t packageid,
        std::shared_ptr<PackageSupply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a package supply
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="supplyid"></param>
    pplx::task<void> packageSupplyDelete(
        int32_t packageid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of package supplies
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<std::vector<std::shared_ptr<PackageSupply>>> packageSupplyList(
        int32_t packageid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a package supply
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="supplyid"></param>
    pplx::task<std::shared_ptr<PackageSupply>> packageSupplyRead(
        int32_t packageid,
        int32_t supplyid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a package supply
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="supplyid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PackageSupply>> packageSupplyUpdate(
        int32_t packageid,
        int32_t supplyid,
        std::shared_ptr<PackageSupply> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a package
    /// </remarks>
    /// <param name="packageid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Package>> packageUpdate(
        int32_t packageid,
        std::shared_ptr<Package> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<std::shared_ptr<UpdateData>> packageUpdateList(
        int32_t packageid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a package
    /// </remarks>
    /// <param name="packageid"></param>
    pplx::task<std::vector<std::shared_ptr<PackageVersion>>> packageVersionList(
        int32_t packageid
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_PackageApi_H_ */

