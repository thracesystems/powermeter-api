/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TechnologyApi.h
 *
 * 
 */

#ifndef POWERMETER_API_TechnologyApi_H_
#define POWERMETER_API_TechnologyApi_H_


#include "../ApiClient.h"

#include "ComputedDeviceData.h"
#include "Defect0.h"
#include "Device.h"
#include "DeviceData.h"
#include "DeviceDataBulk.h"
#include "Layer.h"
#include "LayerStack.h"
#include "ModelCorner.h"
#include "PowerSource.h"
#include "RCCorner.h"
#include "Technology.h"
#include "TechnologyMaster.h"
#include "TechnologyVersion.h"
#include "UpdateData.h"
#include <vector>
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace powermeter {
namespace api {

using namespace powermeter::model;



class  TechnologyApi 
{
public:

    explicit TechnologyApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~TechnologyApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    pplx::task<void> apiTechnologyDeviceDataDeleteAll(
        int32_t techid,
        int32_t deviceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete all devices
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<void> apiTechnologyDeviceDeleteAll(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Commit a version
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<TechnologyVersion>> technologyCommitCreate(
        int32_t techid,
        std::shared_ptr<TechnologyVersion> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a d0 data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Defect0>> technologyD0Create(
        int32_t techid,
        std::shared_ptr<Defect0> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a d0 data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="d0id"></param>
    pplx::task<void> technologyD0Delete(
        int32_t techid,
        int32_t d0id
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of d0 data
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::vector<std::shared_ptr<Defect0>>> technologyD0List(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a d0 data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="d0id"></param>
    pplx::task<std::shared_ptr<Defect0>> technologyD0Read(
        int32_t techid,
        int32_t d0id
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a d0 data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="d0id"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Defect0>> technologyD0Update(
        int32_t techid,
        int32_t d0id,
        std::shared_ptr<Defect0> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a device
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Device>> technologyDeviceCreate(
        int32_t techid,
        std::shared_ptr<Device> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="data"></param>
    pplx::task<void> technologyDeviceDataBulkCreate(
        int32_t techid,
        int32_t deviceid,
        std::vector<std::shared_ptr<DeviceDataBulk>> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="p">Process name</param>
    /// <param name="vds">Drain-Source voltage</param>
    /// <param name="vgs">Gate-Source voltage</param>
    /// <param name="vbs">Body-Source voltage</param>
    /// <param name="t">Temperature</param>
    pplx::task<std::shared_ptr<ComputedDeviceData>> technologyDeviceDataComputeList(
        int32_t techid,
        int32_t deviceid,
        utility::string_t p,
        double vds,
        double vgs,
        double vbs,
        int32_t t
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DeviceData>> technologyDeviceDataCreate(
        int32_t techid,
        int32_t deviceid,
        std::shared_ptr<DeviceData> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="dataid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DeviceData>> technologyDeviceDataDelete(
        int32_t techid,
        int32_t deviceid,
        int32_t dataid,
        std::shared_ptr<DeviceData> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="p">Process name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="t">Temperature (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<DeviceData>>> technologyDeviceDataList(
        int32_t techid,
        int32_t deviceid,
        boost::optional<utility::string_t> p,
        boost::optional<int32_t> t
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="dataid"></param>
    pplx::task<std::shared_ptr<DeviceData>> technologyDeviceDataRead(
        int32_t techid,
        int32_t deviceid,
        int32_t dataid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    pplx::task<void> technologyDeviceDataTrainCreate(
        int32_t techid,
        int32_t deviceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update device data
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="dataid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<DeviceData>> technologyDeviceDataUpdate(
        int32_t techid,
        int32_t deviceid,
        int32_t dataid,
        std::shared_ptr<DeviceData> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a device
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    pplx::task<void> technologyDeviceDelete(
        int32_t techid,
        int32_t deviceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of devices
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="name">Device name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="l">Device length (optional, default to 0)</param>
    /// <param name="w">Device width (optional, default to 0)</param>
    /// <param name="nfin">Device nfin (optional, default to 0)</param>
    pplx::task<std::vector<std::shared_ptr<Device>>> technologyDeviceList(
        int32_t techid,
        boost::optional<utility::string_t> name,
        boost::optional<int32_t> l,
        boost::optional<int32_t> w,
        boost::optional<int32_t> nfin
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a device
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    pplx::task<std::shared_ptr<Device>> technologyDeviceRead(
        int32_t techid,
        int32_t deviceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a device
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="deviceid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Device>> technologyDeviceUpdate(
        int32_t techid,
        int32_t deviceid,
        std::shared_ptr<Device> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Copy a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    pplx::task<std::shared_ptr<LayerStack>> technologyLayerstackClone(
        int32_t techid,
        int32_t stackid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<LayerStack>> technologyLayerstackCreate(
        int32_t techid,
        std::shared_ptr<LayerStack> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    pplx::task<void> technologyLayerstackDelete(
        int32_t techid,
        int32_t stackid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Copy a layer
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    /// <param name="layerid"></param>
    pplx::task<std::shared_ptr<Layer>> technologyLayerstackLayerClone(
        int32_t techid,
        int32_t stackid,
        int32_t layerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a layer
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Layer>> technologyLayerstackLayerCreate(
        int32_t techid,
        int32_t stackid,
        std::shared_ptr<Layer> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a layer
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    /// <param name="layerid"></param>
    pplx::task<void> technologyLayerstackLayerDelete(
        int32_t techid,
        int32_t stackid,
        int32_t layerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of layers
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    pplx::task<std::vector<std::shared_ptr<Layer>>> technologyLayerstackLayerList(
        int32_t techid,
        int32_t stackid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a layer
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    /// <param name="layerid"></param>
    pplx::task<std::shared_ptr<Layer>> technologyLayerstackLayerRead(
        int32_t techid,
        int32_t stackid,
        int32_t layerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a layer
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    /// <param name="layerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Layer>> technologyLayerstackLayerUpdate(
        int32_t techid,
        int32_t stackid,
        int32_t layerid,
        std::shared_ptr<Layer> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of layer stacks
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::vector<std::shared_ptr<LayerStack>>> technologyLayerstackList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// get a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    pplx::task<std::shared_ptr<LayerStack>> technologyLayerstackRead(
        int32_t techid,
        int32_t stackid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<LayerStack>> technologyLayerstackUpdate(
        int32_t techid,
        int32_t stackid,
        std::shared_ptr<LayerStack> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="stackid"></param>
    pplx::task<std::shared_ptr<UpdateData>> technologyLayerstackUpdateList(
        int32_t techid,
        int32_t stackid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a copy of technology
    /// </remarks>
    /// <param name="techmasterid"></param>
    pplx::task<std::shared_ptr<TechnologyMaster>> technologyLibraryClone(
        int32_t techmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create new technology
    /// </remarks>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<TechnologyMaster>> technologyLibraryCreate(
        std::shared_ptr<TechnologyMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a technology
    /// </remarks>
    /// <param name="techmasterid"></param>
    pplx::task<void> technologyLibraryDelete(
        int32_t techmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of technologies
    /// </remarks>
    /// <param name="name">Project name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<TechnologyMaster>>> technologyLibraryList(
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a technology
    /// </remarks>
    /// <param name="techmasterid"></param>
    pplx::task<std::shared_ptr<TechnologyMaster>> technologyLibraryRead(
        int32_t techmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a technology
    /// </remarks>
    /// <param name="techmasterid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<TechnologyMaster>> technologyLibraryUpdate(
        int32_t techmasterid,
        std::shared_ptr<TechnologyMaster> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    pplx::task<std::shared_ptr<UpdateData>> technologyLibraryUpdateList(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get technology versions
    /// </remarks>
    /// <param name="techmasterid"></param>
    pplx::task<std::vector<std::shared_ptr<TechnologyVersion>>> technologyLibraryVersionList(
        int32_t techmasterid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ModelCorner>> technologyModelCornerCreate(
        int32_t techid,
        std::shared_ptr<ModelCorner> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a model corner
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="cornerid"></param>
    pplx::task<void> technologyModelCornerDelete(
        int32_t techid,
        int32_t cornerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of model corner
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::vector<std::shared_ptr<ModelCorner>>> technologyModelCornerList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a model corner
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="cornerid"></param>
    pplx::task<std::shared_ptr<ModelCorner>> technologyModelCornerRead(
        int32_t techid,
        int32_t cornerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a model corner
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="cornerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<ModelCorner>> technologyModelCornerUpdate(
        int32_t techid,
        int32_t cornerid,
        std::shared_ptr<ModelCorner> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<void> technologyPermissionsList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of permissions
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<void> technologyPermissionsUpdate(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<RCCorner>> technologyRcCornerCreate(
        int32_t techid,
        std::shared_ptr<RCCorner> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a model corner
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="cornerid"></param>
    pplx::task<void> technologyRcCornerDelete(
        int32_t techid,
        int32_t cornerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of RC corner
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::vector<std::shared_ptr<RCCorner>>> technologyRcCornerList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a RC corner
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="cornerid"></param>
    pplx::task<std::shared_ptr<RCCorner>> technologyRcCornerRead(
        int32_t techid,
        int32_t cornerid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a model corner
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="cornerid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<RCCorner>> technologyRcCornerUpdate(
        int32_t techid,
        int32_t cornerid,
        std::shared_ptr<RCCorner> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get a technology
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::shared_ptr<Technology>> technologyRead(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Restore a technology version as current version
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::shared_ptr<Technology>> technologyRestoreCreate(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PowerSource>> technologySourceCreate(
        int32_t techid,
        std::shared_ptr<PowerSource> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="sourceid"></param>
    pplx::task<void> technologySourceDelete(
        int32_t techid,
        int32_t sourceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get list of layer stacks
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::vector<std::shared_ptr<PowerSource>>> technologySourceList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// get a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="sourceid"></param>
    pplx::task<std::shared_ptr<PowerSource>> technologySourceRead(
        int32_t techid,
        int32_t sourceid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a layer stack
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="sourceid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<PowerSource>> technologySourceUpdate(
        int32_t techid,
        int32_t sourceid,
        std::shared_ptr<PowerSource> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update a technology
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="data"></param>
    pplx::task<std::shared_ptr<Technology>> technologyUpdate(
        int32_t techid,
        std::shared_ptr<Technology> data
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Returns an array of [current, last update] times
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::shared_ptr<UpdateData>> technologyUpdateList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get technology versions
    /// </remarks>
    /// <param name="techid"></param>
    pplx::task<std::vector<std::shared_ptr<TechnologyVersion>>> technologyVersionList(
        int32_t techid
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get technology versions
    /// </remarks>
    /// <param name="techid"></param>
    /// <param name="versionid"></param>
    pplx::task<std::shared_ptr<TechnologyVersion>> technologyVersionRead(
        int32_t techid,
        int32_t versionid
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}

#endif /* POWERMETER_API_TechnologyApi_H_ */

