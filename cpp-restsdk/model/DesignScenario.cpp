/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignScenario.h"

namespace powermeter {
namespace model {




DesignScenario::DesignScenario()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_Temperature = 0.0;
    m_TemperatureIsSet = false;
    m_Process = 0.0;
    m_ProcessIsSet = false;
    m_Rc = 0.0;
    m_RcIsSet = false;
    m_Endtime = 0.0;
    m_EndtimeIsSet = false;
    m_Average_power = 0.0;
    m_Average_powerIsSet = false;
    m_Total_energy = 0.0;
    m_Total_energyIsSet = false;
    m_Confidence = 0.0;
    m_ConfidenceIsSet = false;
}

DesignScenario::~DesignScenario()
{
}

void DesignScenario::validate()
{
    // TODO: implement validation
}

web::json::value DesignScenario::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t("temperature")] = ModelBase::toJson(m_Temperature);
    }
    if(m_ProcessIsSet)
    {
        val[utility::conversions::to_string_t("process")] = ModelBase::toJson(m_Process);
    }
    if(m_RcIsSet)
    {
        val[utility::conversions::to_string_t("rc")] = ModelBase::toJson(m_Rc);
    }
    if(m_EndtimeIsSet)
    {
        val[utility::conversions::to_string_t("endtime")] = ModelBase::toJson(m_Endtime);
    }
    if(m_Average_powerIsSet)
    {
        val[utility::conversions::to_string_t("average_power")] = ModelBase::toJson(m_Average_power);
    }
    if(m_Total_energyIsSet)
    {
        val[utility::conversions::to_string_t("total_energy")] = ModelBase::toJson(m_Total_energy);
    }
    if(m_ConfidenceIsSet)
    {
        val[utility::conversions::to_string_t("confidence")] = ModelBase::toJson(m_Confidence);
    }

    return val;
}

bool DesignScenario::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature"));
        if(!fieldValue.is_null())
        {
            double refVal_temperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature);
            setTemperature(refVal_temperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("process")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("process"));
        if(!fieldValue.is_null())
        {
            double refVal_process;
            ok &= ModelBase::fromJson(fieldValue, refVal_process);
            setProcess(refVal_process);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rc"));
        if(!fieldValue.is_null())
        {
            double refVal_rc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rc);
            setRc(refVal_rc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endtime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endtime"));
        if(!fieldValue.is_null())
        {
            double refVal_endtime;
            ok &= ModelBase::fromJson(fieldValue, refVal_endtime);
            setEndtime(refVal_endtime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("average_power")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("average_power"));
        if(!fieldValue.is_null())
        {
            double refVal_average_power;
            ok &= ModelBase::fromJson(fieldValue, refVal_average_power);
            setAveragePower(refVal_average_power);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("total_energy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("total_energy"));
        if(!fieldValue.is_null())
        {
            double refVal_total_energy;
            ok &= ModelBase::fromJson(fieldValue, refVal_total_energy);
            setTotalEnergy(refVal_total_energy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confidence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("confidence"));
        if(!fieldValue.is_null())
        {
            double refVal_confidence;
            ok &= ModelBase::fromJson(fieldValue, refVal_confidence);
            setConfidence(refVal_confidence);
        }
    }
    return ok;
}

void DesignScenario::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature"), m_Temperature));
    }
    if(m_ProcessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("process"), m_Process));
    }
    if(m_RcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rc"), m_Rc));
    }
    if(m_EndtimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endtime"), m_Endtime));
    }
    if(m_Average_powerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("average_power"), m_Average_power));
    }
    if(m_Total_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total_energy"), m_Total_energy));
    }
    if(m_ConfidenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confidence"), m_Confidence));
    }
}

bool DesignScenario::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature")))
    {
        double refVal_temperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature")), refVal_temperature );
        setTemperature(refVal_temperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("process")))
    {
        double refVal_process;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("process")), refVal_process );
        setProcess(refVal_process);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rc")))
    {
        double refVal_rc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rc")), refVal_rc );
        setRc(refVal_rc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endtime")))
    {
        double refVal_endtime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endtime")), refVal_endtime );
        setEndtime(refVal_endtime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("average_power")))
    {
        double refVal_average_power;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("average_power")), refVal_average_power );
        setAveragePower(refVal_average_power);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("total_energy")))
    {
        double refVal_total_energy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("total_energy")), refVal_total_energy );
        setTotalEnergy(refVal_total_energy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confidence")))
    {
        double refVal_confidence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("confidence")), refVal_confidence );
        setConfidence(refVal_confidence);
    }
    return ok;
}

int32_t DesignScenario::getId() const
{
    return m_Id;
}

void DesignScenario::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DesignScenario::idIsSet() const
{
    return m_IdIsSet;
}

void DesignScenario::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DesignScenario::getDescr() const
{
    return m_Descr;
}

void DesignScenario::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool DesignScenario::descrIsSet() const
{
    return m_DescrIsSet;
}

void DesignScenario::unsetDescr()
{
    m_DescrIsSet = false;
}
double DesignScenario::getTemperature() const
{
    return m_Temperature;
}

void DesignScenario::setTemperature(double value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool DesignScenario::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void DesignScenario::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
double DesignScenario::getProcess() const
{
    return m_Process;
}

void DesignScenario::setProcess(double value)
{
    m_Process = value;
    m_ProcessIsSet = true;
}

bool DesignScenario::processIsSet() const
{
    return m_ProcessIsSet;
}

void DesignScenario::unsetProcess()
{
    m_ProcessIsSet = false;
}
double DesignScenario::getRc() const
{
    return m_Rc;
}

void DesignScenario::setRc(double value)
{
    m_Rc = value;
    m_RcIsSet = true;
}

bool DesignScenario::rcIsSet() const
{
    return m_RcIsSet;
}

void DesignScenario::unsetRc()
{
    m_RcIsSet = false;
}
double DesignScenario::getEndtime() const
{
    return m_Endtime;
}

void DesignScenario::setEndtime(double value)
{
    m_Endtime = value;
    m_EndtimeIsSet = true;
}

bool DesignScenario::endtimeIsSet() const
{
    return m_EndtimeIsSet;
}

void DesignScenario::unsetEndtime()
{
    m_EndtimeIsSet = false;
}
double DesignScenario::getAveragePower() const
{
    return m_Average_power;
}

void DesignScenario::setAveragePower(double value)
{
    m_Average_power = value;
    m_Average_powerIsSet = true;
}

bool DesignScenario::averagePowerIsSet() const
{
    return m_Average_powerIsSet;
}

void DesignScenario::unsetAverage_power()
{
    m_Average_powerIsSet = false;
}
double DesignScenario::getTotalEnergy() const
{
    return m_Total_energy;
}

void DesignScenario::setTotalEnergy(double value)
{
    m_Total_energy = value;
    m_Total_energyIsSet = true;
}

bool DesignScenario::totalEnergyIsSet() const
{
    return m_Total_energyIsSet;
}

void DesignScenario::unsetTotal_energy()
{
    m_Total_energyIsSet = false;
}
double DesignScenario::getConfidence() const
{
    return m_Confidence;
}

void DesignScenario::setConfidence(double value)
{
    m_Confidence = value;
    m_ConfidenceIsSet = true;
}

bool DesignScenario::confidenceIsSet() const
{
    return m_ConfidenceIsSet;
}

void DesignScenario::unsetConfidence()
{
    m_ConfidenceIsSet = false;
}
}
}


