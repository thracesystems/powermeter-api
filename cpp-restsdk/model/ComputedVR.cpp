/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComputedVR.h"

namespace powermeter {
namespace model {




ComputedVR::ComputedVR()
{
    m_Vin = 0.0;
    m_VinIsSet = false;
    m_Vout = 0.0;
    m_VoutIsSet = false;
    m_Iload = 0.0;
    m_IloadIsSet = false;
    m_Iq = 0.0;
    m_IqIsSet = false;
    m_Iin = 0.0;
    m_IinIsSet = false;
    m_Efficiency = 0.0;
    m_EfficiencyIsSet = false;
    m_Power = 0.0;
    m_PowerIsSet = false;
}

ComputedVR::~ComputedVR()
{
}

void ComputedVR::validate()
{
    // TODO: implement validation
}

web::json::value ComputedVR::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VinIsSet)
    {
        val[utility::conversions::to_string_t("Vin")] = ModelBase::toJson(m_Vin);
    }
    if(m_VoutIsSet)
    {
        val[utility::conversions::to_string_t("Vout")] = ModelBase::toJson(m_Vout);
    }
    if(m_IloadIsSet)
    {
        val[utility::conversions::to_string_t("Iload")] = ModelBase::toJson(m_Iload);
    }
    if(m_IqIsSet)
    {
        val[utility::conversions::to_string_t("Iq")] = ModelBase::toJson(m_Iq);
    }
    if(m_IinIsSet)
    {
        val[utility::conversions::to_string_t("Iin")] = ModelBase::toJson(m_Iin);
    }
    if(m_EfficiencyIsSet)
    {
        val[utility::conversions::to_string_t("efficiency")] = ModelBase::toJson(m_Efficiency);
    }
    if(m_PowerIsSet)
    {
        val[utility::conversions::to_string_t("power")] = ModelBase::toJson(m_Power);
    }

    return val;
}

bool ComputedVR::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("Vin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vin"));
        if(!fieldValue.is_null())
        {
            double refVal_Vin;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vin);
            setVin(refVal_Vin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Vout")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vout"));
        if(!fieldValue.is_null())
        {
            double refVal_Vout;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vout);
            setVout(refVal_Vout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Iload")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Iload"));
        if(!fieldValue.is_null())
        {
            double refVal_Iload;
            ok &= ModelBase::fromJson(fieldValue, refVal_Iload);
            setIload(refVal_Iload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Iq")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Iq"));
        if(!fieldValue.is_null())
        {
            double refVal_Iq;
            ok &= ModelBase::fromJson(fieldValue, refVal_Iq);
            setIq(refVal_Iq);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Iin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Iin"));
        if(!fieldValue.is_null())
        {
            double refVal_Iin;
            ok &= ModelBase::fromJson(fieldValue, refVal_Iin);
            setIin(refVal_Iin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("efficiency")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("efficiency"));
        if(!fieldValue.is_null())
        {
            double refVal_efficiency;
            ok &= ModelBase::fromJson(fieldValue, refVal_efficiency);
            setEfficiency(refVal_efficiency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("power")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("power"));
        if(!fieldValue.is_null())
        {
            double refVal_power;
            ok &= ModelBase::fromJson(fieldValue, refVal_power);
            setPower(refVal_power);
        }
    }
    return ok;
}

void ComputedVR::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_VinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vin"), m_Vin));
    }
    if(m_VoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vout"), m_Vout));
    }
    if(m_IloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Iload"), m_Iload));
    }
    if(m_IqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Iq"), m_Iq));
    }
    if(m_IinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Iin"), m_Iin));
    }
    if(m_EfficiencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("efficiency"), m_Efficiency));
    }
    if(m_PowerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("power"), m_Power));
    }
}

bool ComputedVR::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("Vin")))
    {
        double refVal_Vin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vin")), refVal_Vin );
        setVin(refVal_Vin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Vout")))
    {
        double refVal_Vout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vout")), refVal_Vout );
        setVout(refVal_Vout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Iload")))
    {
        double refVal_Iload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Iload")), refVal_Iload );
        setIload(refVal_Iload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Iq")))
    {
        double refVal_Iq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Iq")), refVal_Iq );
        setIq(refVal_Iq);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Iin")))
    {
        double refVal_Iin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Iin")), refVal_Iin );
        setIin(refVal_Iin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("efficiency")))
    {
        double refVal_efficiency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("efficiency")), refVal_efficiency );
        setEfficiency(refVal_efficiency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("power")))
    {
        double refVal_power;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("power")), refVal_power );
        setPower(refVal_power);
    }
    return ok;
}

double ComputedVR::getVin() const
{
    return m_Vin;
}

void ComputedVR::setVin(double value)
{
    m_Vin = value;
    m_VinIsSet = true;
}

bool ComputedVR::vinIsSet() const
{
    return m_VinIsSet;
}

void ComputedVR::unsetVin()
{
    m_VinIsSet = false;
}
double ComputedVR::getVout() const
{
    return m_Vout;
}

void ComputedVR::setVout(double value)
{
    m_Vout = value;
    m_VoutIsSet = true;
}

bool ComputedVR::voutIsSet() const
{
    return m_VoutIsSet;
}

void ComputedVR::unsetVout()
{
    m_VoutIsSet = false;
}
double ComputedVR::getIload() const
{
    return m_Iload;
}

void ComputedVR::setIload(double value)
{
    m_Iload = value;
    m_IloadIsSet = true;
}

bool ComputedVR::iloadIsSet() const
{
    return m_IloadIsSet;
}

void ComputedVR::unsetIload()
{
    m_IloadIsSet = false;
}
double ComputedVR::getIq() const
{
    return m_Iq;
}

void ComputedVR::setIq(double value)
{
    m_Iq = value;
    m_IqIsSet = true;
}

bool ComputedVR::iqIsSet() const
{
    return m_IqIsSet;
}

void ComputedVR::unsetIq()
{
    m_IqIsSet = false;
}
double ComputedVR::getIin() const
{
    return m_Iin;
}

void ComputedVR::setIin(double value)
{
    m_Iin = value;
    m_IinIsSet = true;
}

bool ComputedVR::iinIsSet() const
{
    return m_IinIsSet;
}

void ComputedVR::unsetIin()
{
    m_IinIsSet = false;
}
double ComputedVR::getEfficiency() const
{
    return m_Efficiency;
}

void ComputedVR::setEfficiency(double value)
{
    m_Efficiency = value;
    m_EfficiencyIsSet = true;
}

bool ComputedVR::efficiencyIsSet() const
{
    return m_EfficiencyIsSet;
}

void ComputedVR::unsetEfficiency()
{
    m_EfficiencyIsSet = false;
}
double ComputedVR::getPower() const
{
    return m_Power;
}

void ComputedVR::setPower(double value)
{
    m_Power = value;
    m_PowerIsSet = true;
}

bool ComputedVR::powerIsSet() const
{
    return m_PowerIsSet;
}

void ComputedVR::unsetPower()
{
    m_PowerIsSet = false;
}
}
}


