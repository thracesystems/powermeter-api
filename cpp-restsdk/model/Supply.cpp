/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Supply.h"

namespace powermeter {
namespace model {




Supply::Supply()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Voltage = 0.0;
    m_VoltageIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Is_power = false;
    m_Is_powerIsSet = false;
    m_Is_ground = false;
    m_Is_groundIsSet = false;
    m_Switchable = false;
    m_SwitchableIsSet = false;
    m_Master_supply = 0;
    m_Master_supplyIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_Instance_count = 0;
    m_Instance_countIsSet = false;
}

Supply::~Supply()
{
}

void Supply::validate()
{
    // TODO: implement validation
}

web::json::value Supply::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_VoltageIsSet)
    {
        val[utility::conversions::to_string_t("voltage")] = ModelBase::toJson(m_Voltage);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_Is_powerIsSet)
    {
        val[utility::conversions::to_string_t("is_power")] = ModelBase::toJson(m_Is_power);
    }
    if(m_Is_groundIsSet)
    {
        val[utility::conversions::to_string_t("is_ground")] = ModelBase::toJson(m_Is_ground);
    }
    if(m_SwitchableIsSet)
    {
        val[utility::conversions::to_string_t("switchable")] = ModelBase::toJson(m_Switchable);
    }
    if(m_Master_supplyIsSet)
    {
        val[utility::conversions::to_string_t("master_supply")] = ModelBase::toJson(m_Master_supply);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_Instance_countIsSet)
    {
        val[utility::conversions::to_string_t("instance_count")] = ModelBase::toJson(m_Instance_count);
    }

    return val;
}

bool Supply::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("voltage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("voltage"));
        if(!fieldValue.is_null())
        {
            double refVal_voltage;
            ok &= ModelBase::fromJson(fieldValue, refVal_voltage);
            setVoltage(refVal_voltage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_power")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_power"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_power;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_power);
            setIsPower(refVal_is_power);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_ground")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_ground"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_ground;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_ground);
            setIsGround(refVal_is_ground);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("switchable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("switchable"));
        if(!fieldValue.is_null())
        {
            bool refVal_switchable;
            ok &= ModelBase::fromJson(fieldValue, refVal_switchable);
            setSwitchable(refVal_switchable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_supply")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_supply"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master_supply;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_supply);
            setMasterSupply(refVal_master_supply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instance_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("instance_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_instance_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_instance_count);
            setInstanceCount(refVal_instance_count);
        }
    }
    return ok;
}

void Supply::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_VoltageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("voltage"), m_Voltage));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_Is_powerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_power"), m_Is_power));
    }
    if(m_Is_groundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_ground"), m_Is_ground));
    }
    if(m_SwitchableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("switchable"), m_Switchable));
    }
    if(m_Master_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_supply"), m_Master_supply));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_Instance_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instance_count"), m_Instance_count));
    }
}

bool Supply::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("voltage")))
    {
        double refVal_voltage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("voltage")), refVal_voltage );
        setVoltage(refVal_voltage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_power")))
    {
        bool refVal_is_power;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_power")), refVal_is_power );
        setIsPower(refVal_is_power);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_ground")))
    {
        bool refVal_is_ground;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_ground")), refVal_is_ground );
        setIsGround(refVal_is_ground);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("switchable")))
    {
        bool refVal_switchable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("switchable")), refVal_switchable );
        setSwitchable(refVal_switchable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_supply")))
    {
        int32_t refVal_master_supply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_supply")), refVal_master_supply );
        setMasterSupply(refVal_master_supply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        utility::string_t refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("color")), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instance_count")))
    {
        int32_t refVal_instance_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("instance_count")), refVal_instance_count );
        setInstanceCount(refVal_instance_count);
    }
    return ok;
}

int32_t Supply::getId() const
{
    return m_Id;
}

void Supply::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Supply::idIsSet() const
{
    return m_IdIsSet;
}

void Supply::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Supply::getName() const
{
    return m_Name;
}

void Supply::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Supply::nameIsSet() const
{
    return m_NameIsSet;
}

void Supply::unsetName()
{
    m_NameIsSet = false;
}
double Supply::getVoltage() const
{
    return m_Voltage;
}

void Supply::setVoltage(double value)
{
    m_Voltage = value;
    m_VoltageIsSet = true;
}

bool Supply::voltageIsSet() const
{
    return m_VoltageIsSet;
}

void Supply::unsetVoltage()
{
    m_VoltageIsSet = false;
}
utility::string_t Supply::getType() const
{
    return m_Type;
}

void Supply::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Supply::typeIsSet() const
{
    return m_TypeIsSet;
}

void Supply::unsetType()
{
    m_TypeIsSet = false;
}
bool Supply::isIsPower() const
{
    return m_Is_power;
}

void Supply::setIsPower(bool value)
{
    m_Is_power = value;
    m_Is_powerIsSet = true;
}

bool Supply::isPowerIsSet() const
{
    return m_Is_powerIsSet;
}

void Supply::unsetIs_power()
{
    m_Is_powerIsSet = false;
}
bool Supply::isIsGround() const
{
    return m_Is_ground;
}

void Supply::setIsGround(bool value)
{
    m_Is_ground = value;
    m_Is_groundIsSet = true;
}

bool Supply::isGroundIsSet() const
{
    return m_Is_groundIsSet;
}

void Supply::unsetIs_ground()
{
    m_Is_groundIsSet = false;
}
bool Supply::isSwitchable() const
{
    return m_Switchable;
}

void Supply::setSwitchable(bool value)
{
    m_Switchable = value;
    m_SwitchableIsSet = true;
}

bool Supply::switchableIsSet() const
{
    return m_SwitchableIsSet;
}

void Supply::unsetSwitchable()
{
    m_SwitchableIsSet = false;
}
int32_t Supply::getMasterSupply() const
{
    return m_Master_supply;
}

void Supply::setMasterSupply(int32_t value)
{
    m_Master_supply = value;
    m_Master_supplyIsSet = true;
}

bool Supply::masterSupplyIsSet() const
{
    return m_Master_supplyIsSet;
}

void Supply::unsetMaster_supply()
{
    m_Master_supplyIsSet = false;
}
utility::string_t Supply::getColor() const
{
    return m_Color;
}

void Supply::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool Supply::colorIsSet() const
{
    return m_ColorIsSet;
}

void Supply::unsetColor()
{
    m_ColorIsSet = false;
}
int32_t Supply::getInstanceCount() const
{
    return m_Instance_count;
}

void Supply::setInstanceCount(int32_t value)
{
    m_Instance_count = value;
    m_Instance_countIsSet = true;
}

bool Supply::instanceCountIsSet() const
{
    return m_Instance_countIsSet;
}

void Supply::unsetInstance_count()
{
    m_Instance_countIsSet = false;
}
}
}


