/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SwaggerContribCurrents.h"

namespace powermeter {
namespace model {




SwaggerContribCurrents::SwaggerContribCurrents()
{
    m_p = utility::conversions::to_string_t("");
    m_pIsSet = false;
    m_v = 0.0;
    m_vIsSet = false;
    m_t = 0;
    m_tIsSet = false;
    m_Id = 0.0;
    m_IdIsSet = false;
    m_Ig = 0.0;
    m_IgIsSet = false;
    m_Is = 0.0;
    m_IsIsSet = false;
    m_Ib = 0.0;
    m_IbIsSet = false;
}

SwaggerContribCurrents::~SwaggerContribCurrents()
{
}

void SwaggerContribCurrents::validate()
{
    // TODO: implement validation
}

web::json::value SwaggerContribCurrents::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_pIsSet)
    {
        val[utility::conversions::to_string_t("p")] = ModelBase::toJson(m_p);
    }
    if(m_vIsSet)
    {
        val[utility::conversions::to_string_t("v")] = ModelBase::toJson(m_v);
    }
    if(m_tIsSet)
    {
        val[utility::conversions::to_string_t("t")] = ModelBase::toJson(m_t);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("Id")] = ModelBase::toJson(m_Id);
    }
    if(m_IgIsSet)
    {
        val[utility::conversions::to_string_t("Ig")] = ModelBase::toJson(m_Ig);
    }
    if(m_IsIsSet)
    {
        val[utility::conversions::to_string_t("Is")] = ModelBase::toJson(m_Is);
    }
    if(m_IbIsSet)
    {
        val[utility::conversions::to_string_t("Ib")] = ModelBase::toJson(m_Ib);
    }

    return val;
}

bool SwaggerContribCurrents::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("p")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("p"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_p;
            ok &= ModelBase::fromJson(fieldValue, refVal_p);
            setP(refVal_p);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("v")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("v"));
        if(!fieldValue.is_null())
        {
            double refVal_v;
            ok &= ModelBase::fromJson(fieldValue, refVal_v);
            setV(refVal_v);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("t")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("t"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_t;
            ok &= ModelBase::fromJson(fieldValue, refVal_t);
            setT(refVal_t);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Id"));
        if(!fieldValue.is_null())
        {
            double refVal_Id;
            ok &= ModelBase::fromJson(fieldValue, refVal_Id);
            setId(refVal_Id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Ig")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Ig"));
        if(!fieldValue.is_null())
        {
            double refVal_Ig;
            ok &= ModelBase::fromJson(fieldValue, refVal_Ig);
            setIg(refVal_Ig);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Is")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Is"));
        if(!fieldValue.is_null())
        {
            double refVal_Is;
            ok &= ModelBase::fromJson(fieldValue, refVal_Is);
            setIs(refVal_Is);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Ib")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Ib"));
        if(!fieldValue.is_null())
        {
            double refVal_Ib;
            ok &= ModelBase::fromJson(fieldValue, refVal_Ib);
            setIb(refVal_Ib);
        }
    }
    return ok;
}

void SwaggerContribCurrents::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_pIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("p"), m_p));
    }
    if(m_vIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("v"), m_v));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("t"), m_t));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Id"), m_Id));
    }
    if(m_IgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Ig"), m_Ig));
    }
    if(m_IsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Is"), m_Is));
    }
    if(m_IbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Ib"), m_Ib));
    }
}

bool SwaggerContribCurrents::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("p")))
    {
        utility::string_t refVal_p;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("p")), refVal_p );
        setP(refVal_p);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("v")))
    {
        double refVal_v;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("v")), refVal_v );
        setV(refVal_v);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("t")))
    {
        int32_t refVal_t;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("t")), refVal_t );
        setT(refVal_t);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Id")))
    {
        double refVal_Id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Id")), refVal_Id );
        setId(refVal_Id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Ig")))
    {
        double refVal_Ig;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Ig")), refVal_Ig );
        setIg(refVal_Ig);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Is")))
    {
        double refVal_Is;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Is")), refVal_Is );
        setIs(refVal_Is);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Ib")))
    {
        double refVal_Ib;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Ib")), refVal_Ib );
        setIb(refVal_Ib);
    }
    return ok;
}

utility::string_t SwaggerContribCurrents::getP() const
{
    return m_p;
}

void SwaggerContribCurrents::setP(const utility::string_t& value)
{
    m_p = value;
    m_pIsSet = true;
}

bool SwaggerContribCurrents::PIsSet() const
{
    return m_pIsSet;
}

void SwaggerContribCurrents::unsetp()
{
    m_pIsSet = false;
}
double SwaggerContribCurrents::getV() const
{
    return m_v;
}

void SwaggerContribCurrents::setV(double value)
{
    m_v = value;
    m_vIsSet = true;
}

bool SwaggerContribCurrents::VIsSet() const
{
    return m_vIsSet;
}

void SwaggerContribCurrents::unsetv()
{
    m_vIsSet = false;
}
int32_t SwaggerContribCurrents::getT() const
{
    return m_t;
}

void SwaggerContribCurrents::setT(int32_t value)
{
    m_t = value;
    m_tIsSet = true;
}

bool SwaggerContribCurrents::TIsSet() const
{
    return m_tIsSet;
}

void SwaggerContribCurrents::unsett()
{
    m_tIsSet = false;
}
double SwaggerContribCurrents::getId() const
{
    return m_Id;
}

void SwaggerContribCurrents::setId(double value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SwaggerContribCurrents::idIsSet() const
{
    return m_IdIsSet;
}

void SwaggerContribCurrents::unsetId()
{
    m_IdIsSet = false;
}
double SwaggerContribCurrents::getIg() const
{
    return m_Ig;
}

void SwaggerContribCurrents::setIg(double value)
{
    m_Ig = value;
    m_IgIsSet = true;
}

bool SwaggerContribCurrents::igIsSet() const
{
    return m_IgIsSet;
}

void SwaggerContribCurrents::unsetIg()
{
    m_IgIsSet = false;
}
double SwaggerContribCurrents::getIs() const
{
    return m_Is;
}

void SwaggerContribCurrents::setIs(double value)
{
    m_Is = value;
    m_IsIsSet = true;
}

bool SwaggerContribCurrents::isIsSet() const
{
    return m_IsIsSet;
}

void SwaggerContribCurrents::unsetIs()
{
    m_IsIsSet = false;
}
double SwaggerContribCurrents::getIb() const
{
    return m_Ib;
}

void SwaggerContribCurrents::setIb(double value)
{
    m_Ib = value;
    m_IbIsSet = true;
}

bool SwaggerContribCurrents::ibIsSet() const
{
    return m_IbIsSet;
}

void SwaggerContribCurrents::unsetIb()
{
    m_IbIsSet = false;
}
}
}


