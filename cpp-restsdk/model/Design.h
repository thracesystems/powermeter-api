/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Design.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_Design_H_
#define POWERMETER_MODEL_Design_H_


#include "../ModelBase.h"

#include "Point.h"
#include "DesignVersion.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  Design
    : public ModelBase
{
public:
    Design();
    virtual ~Design();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Design members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaster() const;
    bool masterIsSet() const;
    void unsetMaster();

    void setMaster(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescr() const;
    bool descrIsSet() const;
    void unsetDescr();

    void setDescr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTechnology() const;
    bool technologyIsSet() const;
    void unsetTechnology();

    void setTechnology(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Point>>& getOutline();
    bool outlineIsSet() const;
    void unsetOutline();

    void setOutline(const std::vector<std::shared_ptr<Point>>& value);

    /// <summary>
    /// 
    /// </summary>
    double getArea() const;
    bool areaIsSet() const;
    void unsetArea();

    void setArea(double value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditable() const;
    bool editableIsSet() const;
    void unsetEditable();

    void setEditable(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DesignVersion> getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const std::shared_ptr<DesignVersion>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCurrentVersion() const;
    bool currentVersionIsSet() const;
    void unsetCurrent_version();

    void setCurrentVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getProject() const;
    bool projectIsSet() const;
    void unsetProject();

    void setProject(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUuid() const;
    bool uuidIsSet() const;
    void unsetUuid();

    void setUuid(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getInstantiations() const;
    bool instantiationsIsSet() const;
    void unsetInstantiations();

    void setInstantiations(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getDashboardOrder();
    bool dashboardOrderIsSet() const;
    void unsetDashboard_order();

    void setDashboardOrder(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFfCount() const;
    bool ffCountIsSet() const;
    void unsetFf_count();

    void setFfCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLatchCount() const;
    bool latchCountIsSet() const;
    void unsetLatch_count();

    void setLatchCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getStatetableCount() const;
    bool statetableCountIsSet() const;
    void unsetStatetable_count();

    void setStatetableCount(int32_t value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Master;
    bool m_MasterIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Descr;
    bool m_DescrIsSet;
    int32_t m_Technology;
    bool m_TechnologyIsSet;
    std::vector<std::shared_ptr<Point>> m_Outline;
    bool m_OutlineIsSet;
    double m_Area;
    bool m_AreaIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    bool m_Editable;
    bool m_EditableIsSet;
    std::shared_ptr<DesignVersion> m_Version;
    bool m_VersionIsSet;
    int32_t m_Current_version;
    bool m_Current_versionIsSet;
    int32_t m_Project;
    bool m_ProjectIsSet;
    utility::string_t m_Uuid;
    bool m_UuidIsSet;
    int32_t m_Instantiations;
    bool m_InstantiationsIsSet;
    std::vector<int32_t> m_Dashboard_order;
    bool m_Dashboard_orderIsSet;
    int32_t m_Ff_count;
    bool m_Ff_countIsSet;
    int32_t m_Latch_count;
    bool m_Latch_countIsSet;
    int32_t m_Statetable_count;
    bool m_Statetable_countIsSet;
};


}
}

#endif /* POWERMETER_MODEL_Design_H_ */
