/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DesignLatch.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_DesignLatch_H_
#define POWERMETER_MODEL_DesignLatch_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  DesignLatch
    : public ModelBase
{
public:
    DesignLatch();
    virtual ~DesignLatch();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DesignLatch members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVar1() const;
    bool var1IsSet() const;
    void unsetVar1();

    void setVar1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVar2() const;
    bool var2IsSet() const;
    void unsetVar2();

    void setVar2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBits() const;
    bool bitsIsSet() const;
    void unsetBits();

    void setBits(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEnable() const;
    bool enableIsSet() const;
    void unsetEnable();

    void setEnable(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDataIn() const;
    bool dataInIsSet() const;
    void unsetData_in();

    void setDataIn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClear() const;
    bool clearIsSet() const;
    void unsetClear();

    void setClear(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPreset() const;
    bool presetIsSet() const;
    void unsetPreset();

    void setPreset(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClearPresetVar1() const;
    bool clearPresetVar1IsSet() const;
    void unsetClear_preset_var1();

    void setClearPresetVar1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClearPresetVar2() const;
    bool clearPresetVar2IsSet() const;
    void unsetClear_preset_var2();

    void setClearPresetVar2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPowerDownFunction() const;
    bool powerDownFunctionIsSet() const;
    void unsetPower_down_function();

    void setPowerDownFunction(const utility::string_t& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Var1;
    bool m_Var1IsSet;
    utility::string_t m_Var2;
    bool m_Var2IsSet;
    int32_t m_Bits;
    bool m_BitsIsSet;
    utility::string_t m_Enable;
    bool m_EnableIsSet;
    utility::string_t m_Data_in;
    bool m_Data_inIsSet;
    utility::string_t m_Clear;
    bool m_ClearIsSet;
    utility::string_t m_Preset;
    bool m_PresetIsSet;
    utility::string_t m_Clear_preset_var1;
    bool m_Clear_preset_var1IsSet;
    utility::string_t m_Clear_preset_var2;
    bool m_Clear_preset_var2IsSet;
    utility::string_t m_Power_down_function;
    bool m_Power_down_functionIsSet;
};


}
}

#endif /* POWERMETER_MODEL_DesignLatch_H_ */
