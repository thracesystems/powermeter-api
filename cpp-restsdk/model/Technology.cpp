/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Technology.h"

namespace powermeter {
namespace model {




Technology::Technology()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Node = 0;
    m_NodeIsSet = false;
    m_Editable = false;
    m_EditableIsSet = false;
    m_Current_version = 0;
    m_Current_versionIsSet = false;
    m_VersionIsSet = false;
    m_Wafer_diameter = 0;
    m_Wafer_diameterIsSet = false;
    m_Scribe_line = 0.0;
    m_Scribe_lineIsSet = false;
    m_Edge_loss = 0.0;
    m_Edge_lossIsSet = false;
    m_Project_count = 0;
    m_Project_countIsSet = false;
    m_Has_shrink = false;
    m_Has_shrinkIsSet = false;
    m_Shrink_factor = 0.0;
    m_Shrink_factorIsSet = false;
    m_Thickness = 0.0;
    m_ThicknessIsSet = false;
    m_Si_conductivity = 0.0;
    m_Si_conductivityIsSet = false;
    m_Si_heat_capacity = 0.0;
    m_Si_heat_capacityIsSet = false;
}

Technology::~Technology()
{
}

void Technology::validate()
{
    // TODO: implement validation
}

web::json::value Technology::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_NodeIsSet)
    {
        val[utility::conversions::to_string_t("node")] = ModelBase::toJson(m_Node);
    }
    if(m_EditableIsSet)
    {
        val[utility::conversions::to_string_t("editable")] = ModelBase::toJson(m_Editable);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_Wafer_diameterIsSet)
    {
        val[utility::conversions::to_string_t("wafer_diameter")] = ModelBase::toJson(m_Wafer_diameter);
    }
    if(m_Scribe_lineIsSet)
    {
        val[utility::conversions::to_string_t("scribe_line")] = ModelBase::toJson(m_Scribe_line);
    }
    if(m_Edge_lossIsSet)
    {
        val[utility::conversions::to_string_t("edge_loss")] = ModelBase::toJson(m_Edge_loss);
    }
    if(m_Project_countIsSet)
    {
        val[utility::conversions::to_string_t("project_count")] = ModelBase::toJson(m_Project_count);
    }
    if(m_Has_shrinkIsSet)
    {
        val[utility::conversions::to_string_t("has_shrink")] = ModelBase::toJson(m_Has_shrink);
    }
    if(m_Shrink_factorIsSet)
    {
        val[utility::conversions::to_string_t("shrink_factor")] = ModelBase::toJson(m_Shrink_factor);
    }
    if(m_ThicknessIsSet)
    {
        val[utility::conversions::to_string_t("thickness")] = ModelBase::toJson(m_Thickness);
    }
    if(m_Si_conductivityIsSet)
    {
        val[utility::conversions::to_string_t("si_conductivity")] = ModelBase::toJson(m_Si_conductivity);
    }
    if(m_Si_heat_capacityIsSet)
    {
        val[utility::conversions::to_string_t("si_heat_capacity")] = ModelBase::toJson(m_Si_heat_capacity);
    }

    return val;
}

bool Technology::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("node")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("node"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_node;
            ok &= ModelBase::fromJson(fieldValue, refVal_node);
            setNode(refVal_node);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editable"));
        if(!fieldValue.is_null())
        {
            bool refVal_editable;
            ok &= ModelBase::fromJson(fieldValue, refVal_editable);
            setEditable(refVal_editable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TechnologyVersion> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wafer_diameter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wafer_diameter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_wafer_diameter;
            ok &= ModelBase::fromJson(fieldValue, refVal_wafer_diameter);
            setWaferDiameter(refVal_wafer_diameter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("scribe_line")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("scribe_line"));
        if(!fieldValue.is_null())
        {
            double refVal_scribe_line;
            ok &= ModelBase::fromJson(fieldValue, refVal_scribe_line);
            setScribeLine(refVal_scribe_line);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("edge_loss")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("edge_loss"));
        if(!fieldValue.is_null())
        {
            double refVal_edge_loss;
            ok &= ModelBase::fromJson(fieldValue, refVal_edge_loss);
            setEdgeLoss(refVal_edge_loss);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_project_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_project_count);
            setProjectCount(refVal_project_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("has_shrink")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("has_shrink"));
        if(!fieldValue.is_null())
        {
            bool refVal_has_shrink;
            ok &= ModelBase::fromJson(fieldValue, refVal_has_shrink);
            setHasShrink(refVal_has_shrink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("shrink_factor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("shrink_factor"));
        if(!fieldValue.is_null())
        {
            double refVal_shrink_factor;
            ok &= ModelBase::fromJson(fieldValue, refVal_shrink_factor);
            setShrinkFactor(refVal_shrink_factor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thickness")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thickness"));
        if(!fieldValue.is_null())
        {
            double refVal_thickness;
            ok &= ModelBase::fromJson(fieldValue, refVal_thickness);
            setThickness(refVal_thickness);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("si_conductivity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("si_conductivity"));
        if(!fieldValue.is_null())
        {
            double refVal_si_conductivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_si_conductivity);
            setSiConductivity(refVal_si_conductivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("si_heat_capacity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("si_heat_capacity"));
        if(!fieldValue.is_null())
        {
            double refVal_si_heat_capacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_si_heat_capacity);
            setSiHeatCapacity(refVal_si_heat_capacity);
        }
    }
    return ok;
}

void Technology::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_NodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("node"), m_Node));
    }
    if(m_EditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editable"), m_Editable));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_Wafer_diameterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wafer_diameter"), m_Wafer_diameter));
    }
    if(m_Scribe_lineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("scribe_line"), m_Scribe_line));
    }
    if(m_Edge_lossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("edge_loss"), m_Edge_loss));
    }
    if(m_Project_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project_count"), m_Project_count));
    }
    if(m_Has_shrinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("has_shrink"), m_Has_shrink));
    }
    if(m_Shrink_factorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shrink_factor"), m_Shrink_factor));
    }
    if(m_ThicknessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thickness"), m_Thickness));
    }
    if(m_Si_conductivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("si_conductivity"), m_Si_conductivity));
    }
    if(m_Si_heat_capacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("si_heat_capacity"), m_Si_heat_capacity));
    }
}

bool Technology::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("node")))
    {
        int32_t refVal_node;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("node")), refVal_node );
        setNode(refVal_node);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editable")))
    {
        bool refVal_editable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editable")), refVal_editable );
        setEditable(refVal_editable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        int32_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<TechnologyVersion> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wafer_diameter")))
    {
        int32_t refVal_wafer_diameter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wafer_diameter")), refVal_wafer_diameter );
        setWaferDiameter(refVal_wafer_diameter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("scribe_line")))
    {
        double refVal_scribe_line;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("scribe_line")), refVal_scribe_line );
        setScribeLine(refVal_scribe_line);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("edge_loss")))
    {
        double refVal_edge_loss;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("edge_loss")), refVal_edge_loss );
        setEdgeLoss(refVal_edge_loss);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project_count")))
    {
        int32_t refVal_project_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project_count")), refVal_project_count );
        setProjectCount(refVal_project_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("has_shrink")))
    {
        bool refVal_has_shrink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("has_shrink")), refVal_has_shrink );
        setHasShrink(refVal_has_shrink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("shrink_factor")))
    {
        double refVal_shrink_factor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("shrink_factor")), refVal_shrink_factor );
        setShrinkFactor(refVal_shrink_factor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thickness")))
    {
        double refVal_thickness;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thickness")), refVal_thickness );
        setThickness(refVal_thickness);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("si_conductivity")))
    {
        double refVal_si_conductivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("si_conductivity")), refVal_si_conductivity );
        setSiConductivity(refVal_si_conductivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("si_heat_capacity")))
    {
        double refVal_si_heat_capacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("si_heat_capacity")), refVal_si_heat_capacity );
        setSiHeatCapacity(refVal_si_heat_capacity);
    }
    return ok;
}

int32_t Technology::getId() const
{
    return m_Id;
}

void Technology::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Technology::idIsSet() const
{
    return m_IdIsSet;
}

void Technology::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Technology::getName() const
{
    return m_Name;
}

void Technology::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Technology::nameIsSet() const
{
    return m_NameIsSet;
}

void Technology::unsetName()
{
    m_NameIsSet = false;
}
int32_t Technology::getNode() const
{
    return m_Node;
}

void Technology::setNode(int32_t value)
{
    m_Node = value;
    m_NodeIsSet = true;
}

bool Technology::nodeIsSet() const
{
    return m_NodeIsSet;
}

void Technology::unsetNode()
{
    m_NodeIsSet = false;
}
bool Technology::isEditable() const
{
    return m_Editable;
}

void Technology::setEditable(bool value)
{
    m_Editable = value;
    m_EditableIsSet = true;
}

bool Technology::editableIsSet() const
{
    return m_EditableIsSet;
}

void Technology::unsetEditable()
{
    m_EditableIsSet = false;
}
int32_t Technology::getCurrentVersion() const
{
    return m_Current_version;
}

void Technology::setCurrentVersion(int32_t value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool Technology::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void Technology::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
std::shared_ptr<TechnologyVersion> Technology::getVersion() const
{
    return m_Version;
}

void Technology::setVersion(const std::shared_ptr<TechnologyVersion>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Technology::versionIsSet() const
{
    return m_VersionIsSet;
}

void Technology::unsetVersion()
{
    m_VersionIsSet = false;
}
int32_t Technology::getWaferDiameter() const
{
    return m_Wafer_diameter;
}

void Technology::setWaferDiameter(int32_t value)
{
    m_Wafer_diameter = value;
    m_Wafer_diameterIsSet = true;
}

bool Technology::waferDiameterIsSet() const
{
    return m_Wafer_diameterIsSet;
}

void Technology::unsetWafer_diameter()
{
    m_Wafer_diameterIsSet = false;
}
double Technology::getScribeLine() const
{
    return m_Scribe_line;
}

void Technology::setScribeLine(double value)
{
    m_Scribe_line = value;
    m_Scribe_lineIsSet = true;
}

bool Technology::scribeLineIsSet() const
{
    return m_Scribe_lineIsSet;
}

void Technology::unsetScribe_line()
{
    m_Scribe_lineIsSet = false;
}
double Technology::getEdgeLoss() const
{
    return m_Edge_loss;
}

void Technology::setEdgeLoss(double value)
{
    m_Edge_loss = value;
    m_Edge_lossIsSet = true;
}

bool Technology::edgeLossIsSet() const
{
    return m_Edge_lossIsSet;
}

void Technology::unsetEdge_loss()
{
    m_Edge_lossIsSet = false;
}
int32_t Technology::getProjectCount() const
{
    return m_Project_count;
}

void Technology::setProjectCount(int32_t value)
{
    m_Project_count = value;
    m_Project_countIsSet = true;
}

bool Technology::projectCountIsSet() const
{
    return m_Project_countIsSet;
}

void Technology::unsetProject_count()
{
    m_Project_countIsSet = false;
}
bool Technology::isHasShrink() const
{
    return m_Has_shrink;
}

void Technology::setHasShrink(bool value)
{
    m_Has_shrink = value;
    m_Has_shrinkIsSet = true;
}

bool Technology::hasShrinkIsSet() const
{
    return m_Has_shrinkIsSet;
}

void Technology::unsetHas_shrink()
{
    m_Has_shrinkIsSet = false;
}
double Technology::getShrinkFactor() const
{
    return m_Shrink_factor;
}

void Technology::setShrinkFactor(double value)
{
    m_Shrink_factor = value;
    m_Shrink_factorIsSet = true;
}

bool Technology::shrinkFactorIsSet() const
{
    return m_Shrink_factorIsSet;
}

void Technology::unsetShrink_factor()
{
    m_Shrink_factorIsSet = false;
}
double Technology::getThickness() const
{
    return m_Thickness;
}

void Technology::setThickness(double value)
{
    m_Thickness = value;
    m_ThicknessIsSet = true;
}

bool Technology::thicknessIsSet() const
{
    return m_ThicknessIsSet;
}

void Technology::unsetThickness()
{
    m_ThicknessIsSet = false;
}
double Technology::getSiConductivity() const
{
    return m_Si_conductivity;
}

void Technology::setSiConductivity(double value)
{
    m_Si_conductivity = value;
    m_Si_conductivityIsSet = true;
}

bool Technology::siConductivityIsSet() const
{
    return m_Si_conductivityIsSet;
}

void Technology::unsetSi_conductivity()
{
    m_Si_conductivityIsSet = false;
}
double Technology::getSiHeatCapacity() const
{
    return m_Si_heat_capacity;
}

void Technology::setSiHeatCapacity(double value)
{
    m_Si_heat_capacity = value;
    m_Si_heat_capacityIsSet = true;
}

bool Technology::siHeatCapacityIsSet() const
{
    return m_Si_heat_capacityIsSet;
}

void Technology::unsetSi_heat_capacity()
{
    m_Si_heat_capacityIsSet = false;
}
}
}


