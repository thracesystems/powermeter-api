/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WireLoad.h"

namespace powermeter {
namespace model {




WireLoad::WireLoad()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_p = utility::conversions::to_string_t("");
    m_pIsSet = false;
    m_Rc = utility::conversions::to_string_t("");
    m_RcIsSet = false;
    m_v = 0.0;
    m_vIsSet = false;
    m_t = 0;
    m_tIsSet = false;
    m_Resistance = 0.0;
    m_ResistanceIsSet = false;
    m_Capacitance = 0.0;
    m_CapacitanceIsSet = false;
    m_Area = 0.0;
    m_AreaIsSet = false;
    m_Slope = 0.0;
    m_SlopeIsSet = false;
    m_Fanout_lengthIsSet = false;
}

WireLoad::~WireLoad()
{
}

void WireLoad::validate()
{
    // TODO: implement validation
}

web::json::value WireLoad::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_pIsSet)
    {
        val[utility::conversions::to_string_t("p")] = ModelBase::toJson(m_p);
    }
    if(m_RcIsSet)
    {
        val[utility::conversions::to_string_t("rc")] = ModelBase::toJson(m_Rc);
    }
    if(m_vIsSet)
    {
        val[utility::conversions::to_string_t("v")] = ModelBase::toJson(m_v);
    }
    if(m_tIsSet)
    {
        val[utility::conversions::to_string_t("t")] = ModelBase::toJson(m_t);
    }
    if(m_ResistanceIsSet)
    {
        val[utility::conversions::to_string_t("resistance")] = ModelBase::toJson(m_Resistance);
    }
    if(m_CapacitanceIsSet)
    {
        val[utility::conversions::to_string_t("capacitance")] = ModelBase::toJson(m_Capacitance);
    }
    if(m_AreaIsSet)
    {
        val[utility::conversions::to_string_t("area")] = ModelBase::toJson(m_Area);
    }
    if(m_SlopeIsSet)
    {
        val[utility::conversions::to_string_t("slope")] = ModelBase::toJson(m_Slope);
    }
    if(m_Fanout_lengthIsSet)
    {
        val[utility::conversions::to_string_t("fanout_length")] = ModelBase::toJson(m_Fanout_length);
    }

    return val;
}

bool WireLoad::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("p")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("p"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_p;
            ok &= ModelBase::fromJson(fieldValue, refVal_p);
            setP(refVal_p);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rc"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rc);
            setRc(refVal_rc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("v")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("v"));
        if(!fieldValue.is_null())
        {
            double refVal_v;
            ok &= ModelBase::fromJson(fieldValue, refVal_v);
            setV(refVal_v);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("t")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("t"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_t;
            ok &= ModelBase::fromJson(fieldValue, refVal_t);
            setT(refVal_t);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("resistance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("resistance"));
        if(!fieldValue.is_null())
        {
            double refVal_resistance;
            ok &= ModelBase::fromJson(fieldValue, refVal_resistance);
            setResistance(refVal_resistance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("capacitance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("capacitance"));
        if(!fieldValue.is_null())
        {
            double refVal_capacitance;
            ok &= ModelBase::fromJson(fieldValue, refVal_capacitance);
            setCapacitance(refVal_capacitance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("area")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("area"));
        if(!fieldValue.is_null())
        {
            double refVal_area;
            ok &= ModelBase::fromJson(fieldValue, refVal_area);
            setArea(refVal_area);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("slope")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("slope"));
        if(!fieldValue.is_null())
        {
            double refVal_slope;
            ok &= ModelBase::fromJson(fieldValue, refVal_slope);
            setSlope(refVal_slope);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fanout_length")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fanout_length"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FanoutLength>> refVal_fanout_length;
            ok &= ModelBase::fromJson(fieldValue, refVal_fanout_length);
            setFanoutLength(refVal_fanout_length);
        }
    }
    return ok;
}

void WireLoad::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_pIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("p"), m_p));
    }
    if(m_RcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rc"), m_Rc));
    }
    if(m_vIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("v"), m_v));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("t"), m_t));
    }
    if(m_ResistanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("resistance"), m_Resistance));
    }
    if(m_CapacitanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("capacitance"), m_Capacitance));
    }
    if(m_AreaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("area"), m_Area));
    }
    if(m_SlopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("slope"), m_Slope));
    }
    if(m_Fanout_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fanout_length"), m_Fanout_length));
    }
}

bool WireLoad::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("p")))
    {
        utility::string_t refVal_p;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("p")), refVal_p );
        setP(refVal_p);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rc")))
    {
        utility::string_t refVal_rc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rc")), refVal_rc );
        setRc(refVal_rc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("v")))
    {
        double refVal_v;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("v")), refVal_v );
        setV(refVal_v);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("t")))
    {
        int32_t refVal_t;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("t")), refVal_t );
        setT(refVal_t);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("resistance")))
    {
        double refVal_resistance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("resistance")), refVal_resistance );
        setResistance(refVal_resistance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("capacitance")))
    {
        double refVal_capacitance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("capacitance")), refVal_capacitance );
        setCapacitance(refVal_capacitance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("area")))
    {
        double refVal_area;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("area")), refVal_area );
        setArea(refVal_area);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("slope")))
    {
        double refVal_slope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("slope")), refVal_slope );
        setSlope(refVal_slope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fanout_length")))
    {
        std::vector<std::shared_ptr<FanoutLength>> refVal_fanout_length;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fanout_length")), refVal_fanout_length );
        setFanoutLength(refVal_fanout_length);
    }
    return ok;
}

int32_t WireLoad::getId() const
{
    return m_Id;
}

void WireLoad::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool WireLoad::idIsSet() const
{
    return m_IdIsSet;
}

void WireLoad::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t WireLoad::getP() const
{
    return m_p;
}

void WireLoad::setP(const utility::string_t& value)
{
    m_p = value;
    m_pIsSet = true;
}

bool WireLoad::PIsSet() const
{
    return m_pIsSet;
}

void WireLoad::unsetp()
{
    m_pIsSet = false;
}
utility::string_t WireLoad::getRc() const
{
    return m_Rc;
}

void WireLoad::setRc(const utility::string_t& value)
{
    m_Rc = value;
    m_RcIsSet = true;
}

bool WireLoad::rcIsSet() const
{
    return m_RcIsSet;
}

void WireLoad::unsetRc()
{
    m_RcIsSet = false;
}
double WireLoad::getV() const
{
    return m_v;
}

void WireLoad::setV(double value)
{
    m_v = value;
    m_vIsSet = true;
}

bool WireLoad::VIsSet() const
{
    return m_vIsSet;
}

void WireLoad::unsetv()
{
    m_vIsSet = false;
}
int32_t WireLoad::getT() const
{
    return m_t;
}

void WireLoad::setT(int32_t value)
{
    m_t = value;
    m_tIsSet = true;
}

bool WireLoad::TIsSet() const
{
    return m_tIsSet;
}

void WireLoad::unsett()
{
    m_tIsSet = false;
}
double WireLoad::getResistance() const
{
    return m_Resistance;
}

void WireLoad::setResistance(double value)
{
    m_Resistance = value;
    m_ResistanceIsSet = true;
}

bool WireLoad::resistanceIsSet() const
{
    return m_ResistanceIsSet;
}

void WireLoad::unsetResistance()
{
    m_ResistanceIsSet = false;
}
double WireLoad::getCapacitance() const
{
    return m_Capacitance;
}

void WireLoad::setCapacitance(double value)
{
    m_Capacitance = value;
    m_CapacitanceIsSet = true;
}

bool WireLoad::capacitanceIsSet() const
{
    return m_CapacitanceIsSet;
}

void WireLoad::unsetCapacitance()
{
    m_CapacitanceIsSet = false;
}
double WireLoad::getArea() const
{
    return m_Area;
}

void WireLoad::setArea(double value)
{
    m_Area = value;
    m_AreaIsSet = true;
}

bool WireLoad::areaIsSet() const
{
    return m_AreaIsSet;
}

void WireLoad::unsetArea()
{
    m_AreaIsSet = false;
}
double WireLoad::getSlope() const
{
    return m_Slope;
}

void WireLoad::setSlope(double value)
{
    m_Slope = value;
    m_SlopeIsSet = true;
}

bool WireLoad::slopeIsSet() const
{
    return m_SlopeIsSet;
}

void WireLoad::unsetSlope()
{
    m_SlopeIsSet = false;
}
std::vector<std::shared_ptr<FanoutLength>>& WireLoad::getFanoutLength()
{
    return m_Fanout_length;
}

void WireLoad::setFanoutLength(const std::vector<std::shared_ptr<FanoutLength>>& value)
{
    m_Fanout_length = value;
    m_Fanout_lengthIsSet = true;
}

bool WireLoad::fanoutLengthIsSet() const
{
    return m_Fanout_lengthIsSet;
}

void WireLoad::unsetFanout_length()
{
    m_Fanout_lengthIsSet = false;
}
}
}


