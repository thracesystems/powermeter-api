/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Heatsink.h"

namespace powermeter {
namespace model {




Heatsink::Heatsink()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_Editable = false;
    m_EditableIsSet = false;
    m_VersionIsSet = false;
    m_Current_version = utility::conversions::to_string_t("");
    m_Current_versionIsSet = false;
    m_Width = 0.0;
    m_WidthIsSet = false;
    m_Height = 0.0;
    m_HeightIsSet = false;
    m_Thickness = 0.0;
    m_ThicknessIsSet = false;
    m_R_convec = 0.0;
    m_R_convecIsSet = false;
    m_C_convec = 0.0;
    m_C_convecIsSet = false;
    m_Conductivity = 0.0;
    m_ConductivityIsSet = false;
    m_Heatcapacity = 0.0;
    m_HeatcapacityIsSet = false;
}

Heatsink::~Heatsink()
{
}

void Heatsink::validate()
{
    // TODO: implement validation
}

web::json::value Heatsink::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_EditableIsSet)
    {
        val[utility::conversions::to_string_t("editable")] = ModelBase::toJson(m_Editable);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t("width")] = ModelBase::toJson(m_Width);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t("height")] = ModelBase::toJson(m_Height);
    }
    if(m_ThicknessIsSet)
    {
        val[utility::conversions::to_string_t("thickness")] = ModelBase::toJson(m_Thickness);
    }
    if(m_R_convecIsSet)
    {
        val[utility::conversions::to_string_t("r_convec")] = ModelBase::toJson(m_R_convec);
    }
    if(m_C_convecIsSet)
    {
        val[utility::conversions::to_string_t("c_convec")] = ModelBase::toJson(m_C_convec);
    }
    if(m_ConductivityIsSet)
    {
        val[utility::conversions::to_string_t("conductivity")] = ModelBase::toJson(m_Conductivity);
    }
    if(m_HeatcapacityIsSet)
    {
        val[utility::conversions::to_string_t("heatcapacity")] = ModelBase::toJson(m_Heatcapacity);
    }

    return val;
}

bool Heatsink::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editable"));
        if(!fieldValue.is_null())
        {
            bool refVal_editable;
            ok &= ModelBase::fromJson(fieldValue, refVal_editable);
            setEditable(refVal_editable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HeatsinkVersion> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("width")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("width"));
        if(!fieldValue.is_null())
        {
            double refVal_width;
            ok &= ModelBase::fromJson(fieldValue, refVal_width);
            setWidth(refVal_width);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("height")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("height"));
        if(!fieldValue.is_null())
        {
            double refVal_height;
            ok &= ModelBase::fromJson(fieldValue, refVal_height);
            setHeight(refVal_height);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thickness")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thickness"));
        if(!fieldValue.is_null())
        {
            double refVal_thickness;
            ok &= ModelBase::fromJson(fieldValue, refVal_thickness);
            setThickness(refVal_thickness);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("r_convec")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("r_convec"));
        if(!fieldValue.is_null())
        {
            double refVal_r_convec;
            ok &= ModelBase::fromJson(fieldValue, refVal_r_convec);
            setRConvec(refVal_r_convec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("c_convec")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("c_convec"));
        if(!fieldValue.is_null())
        {
            double refVal_c_convec;
            ok &= ModelBase::fromJson(fieldValue, refVal_c_convec);
            setCConvec(refVal_c_convec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("conductivity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("conductivity"));
        if(!fieldValue.is_null())
        {
            double refVal_conductivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_conductivity);
            setConductivity(refVal_conductivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heatcapacity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heatcapacity"));
        if(!fieldValue.is_null())
        {
            double refVal_heatcapacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_heatcapacity);
            setHeatcapacity(refVal_heatcapacity);
        }
    }
    return ok;
}

void Heatsink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_EditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editable"), m_Editable));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("width"), m_Width));
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("height"), m_Height));
    }
    if(m_ThicknessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thickness"), m_Thickness));
    }
    if(m_R_convecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("r_convec"), m_R_convec));
    }
    if(m_C_convecIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("c_convec"), m_C_convec));
    }
    if(m_ConductivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("conductivity"), m_Conductivity));
    }
    if(m_HeatcapacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heatcapacity"), m_Heatcapacity));
    }
}

bool Heatsink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editable")))
    {
        bool refVal_editable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editable")), refVal_editable );
        setEditable(refVal_editable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<HeatsinkVersion> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        utility::string_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("width")))
    {
        double refVal_width;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("width")), refVal_width );
        setWidth(refVal_width);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("height")))
    {
        double refVal_height;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("height")), refVal_height );
        setHeight(refVal_height);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thickness")))
    {
        double refVal_thickness;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thickness")), refVal_thickness );
        setThickness(refVal_thickness);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("r_convec")))
    {
        double refVal_r_convec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("r_convec")), refVal_r_convec );
        setRConvec(refVal_r_convec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("c_convec")))
    {
        double refVal_c_convec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("c_convec")), refVal_c_convec );
        setCConvec(refVal_c_convec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("conductivity")))
    {
        double refVal_conductivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("conductivity")), refVal_conductivity );
        setConductivity(refVal_conductivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heatcapacity")))
    {
        double refVal_heatcapacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heatcapacity")), refVal_heatcapacity );
        setHeatcapacity(refVal_heatcapacity);
    }
    return ok;
}

int32_t Heatsink::getId() const
{
    return m_Id;
}

void Heatsink::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Heatsink::idIsSet() const
{
    return m_IdIsSet;
}

void Heatsink::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Heatsink::getName() const
{
    return m_Name;
}

void Heatsink::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Heatsink::nameIsSet() const
{
    return m_NameIsSet;
}

void Heatsink::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Heatsink::getDescr() const
{
    return m_Descr;
}

void Heatsink::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool Heatsink::descrIsSet() const
{
    return m_DescrIsSet;
}

void Heatsink::unsetDescr()
{
    m_DescrIsSet = false;
}
bool Heatsink::isEditable() const
{
    return m_Editable;
}

void Heatsink::setEditable(bool value)
{
    m_Editable = value;
    m_EditableIsSet = true;
}

bool Heatsink::editableIsSet() const
{
    return m_EditableIsSet;
}

void Heatsink::unsetEditable()
{
    m_EditableIsSet = false;
}
std::shared_ptr<HeatsinkVersion> Heatsink::getVersion() const
{
    return m_Version;
}

void Heatsink::setVersion(const std::shared_ptr<HeatsinkVersion>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Heatsink::versionIsSet() const
{
    return m_VersionIsSet;
}

void Heatsink::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t Heatsink::getCurrentVersion() const
{
    return m_Current_version;
}

void Heatsink::setCurrentVersion(const utility::string_t& value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool Heatsink::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void Heatsink::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
double Heatsink::getWidth() const
{
    return m_Width;
}

void Heatsink::setWidth(double value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool Heatsink::widthIsSet() const
{
    return m_WidthIsSet;
}

void Heatsink::unsetWidth()
{
    m_WidthIsSet = false;
}
double Heatsink::getHeight() const
{
    return m_Height;
}

void Heatsink::setHeight(double value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool Heatsink::heightIsSet() const
{
    return m_HeightIsSet;
}

void Heatsink::unsetHeight()
{
    m_HeightIsSet = false;
}
double Heatsink::getThickness() const
{
    return m_Thickness;
}

void Heatsink::setThickness(double value)
{
    m_Thickness = value;
    m_ThicknessIsSet = true;
}

bool Heatsink::thicknessIsSet() const
{
    return m_ThicknessIsSet;
}

void Heatsink::unsetThickness()
{
    m_ThicknessIsSet = false;
}
double Heatsink::getRConvec() const
{
    return m_R_convec;
}

void Heatsink::setRConvec(double value)
{
    m_R_convec = value;
    m_R_convecIsSet = true;
}

bool Heatsink::rConvecIsSet() const
{
    return m_R_convecIsSet;
}

void Heatsink::unsetR_convec()
{
    m_R_convecIsSet = false;
}
double Heatsink::getCConvec() const
{
    return m_C_convec;
}

void Heatsink::setCConvec(double value)
{
    m_C_convec = value;
    m_C_convecIsSet = true;
}

bool Heatsink::cConvecIsSet() const
{
    return m_C_convecIsSet;
}

void Heatsink::unsetC_convec()
{
    m_C_convecIsSet = false;
}
double Heatsink::getConductivity() const
{
    return m_Conductivity;
}

void Heatsink::setConductivity(double value)
{
    m_Conductivity = value;
    m_ConductivityIsSet = true;
}

bool Heatsink::conductivityIsSet() const
{
    return m_ConductivityIsSet;
}

void Heatsink::unsetConductivity()
{
    m_ConductivityIsSet = false;
}
double Heatsink::getHeatcapacity() const
{
    return m_Heatcapacity;
}

void Heatsink::setHeatcapacity(double value)
{
    m_Heatcapacity = value;
    m_HeatcapacityIsSet = true;
}

bool Heatsink::heatcapacityIsSet() const
{
    return m_HeatcapacityIsSet;
}

void Heatsink::unsetHeatcapacity()
{
    m_HeatcapacityIsSet = false;
}
}
}


