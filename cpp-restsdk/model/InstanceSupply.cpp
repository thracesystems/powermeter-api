/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InstanceSupply.h"

namespace powermeter {
namespace model {




InstanceSupply::InstanceSupply()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Design_supply = 0;
    m_Design_supplyIsSet = false;
    m_Design_supply_name = utility::conversions::to_string_t("");
    m_Design_supply_nameIsSet = false;
    m_Master_supply = 0;
    m_Master_supplyIsSet = false;
    m_Master_supply_name = utility::conversions::to_string_t("");
    m_Master_supply_nameIsSet = false;
}

InstanceSupply::~InstanceSupply()
{
}

void InstanceSupply::validate()
{
    // TODO: implement validation
}

web::json::value InstanceSupply::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Design_supplyIsSet)
    {
        val[utility::conversions::to_string_t("design_supply")] = ModelBase::toJson(m_Design_supply);
    }
    if(m_Design_supply_nameIsSet)
    {
        val[utility::conversions::to_string_t("design_supply_name")] = ModelBase::toJson(m_Design_supply_name);
    }
    if(m_Master_supplyIsSet)
    {
        val[utility::conversions::to_string_t("master_supply")] = ModelBase::toJson(m_Master_supply);
    }
    if(m_Master_supply_nameIsSet)
    {
        val[utility::conversions::to_string_t("master_supply_name")] = ModelBase::toJson(m_Master_supply_name);
    }

    return val;
}

bool InstanceSupply::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("design_supply")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("design_supply"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_design_supply;
            ok &= ModelBase::fromJson(fieldValue, refVal_design_supply);
            setDesignSupply(refVal_design_supply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("design_supply_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("design_supply_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_design_supply_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_design_supply_name);
            setDesignSupplyName(refVal_design_supply_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_supply")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_supply"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master_supply;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_supply);
            setMasterSupply(refVal_master_supply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_supply_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_supply_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_master_supply_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_supply_name);
            setMasterSupplyName(refVal_master_supply_name);
        }
    }
    return ok;
}

void InstanceSupply::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Design_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("design_supply"), m_Design_supply));
    }
    if(m_Design_supply_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("design_supply_name"), m_Design_supply_name));
    }
    if(m_Master_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_supply"), m_Master_supply));
    }
    if(m_Master_supply_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_supply_name"), m_Master_supply_name));
    }
}

bool InstanceSupply::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("design_supply")))
    {
        int32_t refVal_design_supply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("design_supply")), refVal_design_supply );
        setDesignSupply(refVal_design_supply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("design_supply_name")))
    {
        utility::string_t refVal_design_supply_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("design_supply_name")), refVal_design_supply_name );
        setDesignSupplyName(refVal_design_supply_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_supply")))
    {
        int32_t refVal_master_supply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_supply")), refVal_master_supply );
        setMasterSupply(refVal_master_supply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_supply_name")))
    {
        utility::string_t refVal_master_supply_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_supply_name")), refVal_master_supply_name );
        setMasterSupplyName(refVal_master_supply_name);
    }
    return ok;
}

int32_t InstanceSupply::getId() const
{
    return m_Id;
}

void InstanceSupply::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool InstanceSupply::idIsSet() const
{
    return m_IdIsSet;
}

void InstanceSupply::unsetId()
{
    m_IdIsSet = false;
}
int32_t InstanceSupply::getDesignSupply() const
{
    return m_Design_supply;
}

void InstanceSupply::setDesignSupply(int32_t value)
{
    m_Design_supply = value;
    m_Design_supplyIsSet = true;
}

bool InstanceSupply::designSupplyIsSet() const
{
    return m_Design_supplyIsSet;
}

void InstanceSupply::unsetDesign_supply()
{
    m_Design_supplyIsSet = false;
}
utility::string_t InstanceSupply::getDesignSupplyName() const
{
    return m_Design_supply_name;
}

void InstanceSupply::setDesignSupplyName(const utility::string_t& value)
{
    m_Design_supply_name = value;
    m_Design_supply_nameIsSet = true;
}

bool InstanceSupply::designSupplyNameIsSet() const
{
    return m_Design_supply_nameIsSet;
}

void InstanceSupply::unsetDesign_supply_name()
{
    m_Design_supply_nameIsSet = false;
}
int32_t InstanceSupply::getMasterSupply() const
{
    return m_Master_supply;
}

void InstanceSupply::setMasterSupply(int32_t value)
{
    m_Master_supply = value;
    m_Master_supplyIsSet = true;
}

bool InstanceSupply::masterSupplyIsSet() const
{
    return m_Master_supplyIsSet;
}

void InstanceSupply::unsetMaster_supply()
{
    m_Master_supplyIsSet = false;
}
utility::string_t InstanceSupply::getMasterSupplyName() const
{
    return m_Master_supply_name;
}

void InstanceSupply::setMasterSupplyName(const utility::string_t& value)
{
    m_Master_supply_name = value;
    m_Master_supply_nameIsSet = true;
}

bool InstanceSupply::masterSupplyNameIsSet() const
{
    return m_Master_supply_nameIsSet;
}

void InstanceSupply::unsetMaster_supply_name()
{
    m_Master_supply_nameIsSet = false;
}
}
}


