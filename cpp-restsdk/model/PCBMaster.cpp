/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PCBMaster.h"

namespace powermeter {
namespace model {




PCBMaster::PCBMaster()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_Latest_commit = 0;
    m_Latest_commitIsSet = false;
    m_Current_version = 0;
    m_Current_versionIsSet = false;
    m_Latest_commit_version = 0;
    m_Latest_commit_versionIsSet = false;
    m_Latest_commit_timestamp = utility::conversions::to_string_t("");
    m_Latest_commit_timestampIsSet = false;
}

PCBMaster::~PCBMaster()
{
}

void PCBMaster::validate()
{
    // TODO: implement validation
}

web::json::value PCBMaster::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_Latest_commitIsSet)
    {
        val[utility::conversions::to_string_t("latest_commit")] = ModelBase::toJson(m_Latest_commit);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_Latest_commit_versionIsSet)
    {
        val[utility::conversions::to_string_t("latest_commit_version")] = ModelBase::toJson(m_Latest_commit_version);
    }
    if(m_Latest_commit_timestampIsSet)
    {
        val[utility::conversions::to_string_t("latest_commit_timestamp")] = ModelBase::toJson(m_Latest_commit_timestamp);
    }

    return val;
}

bool PCBMaster::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latest_commit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latest_commit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_latest_commit;
            ok &= ModelBase::fromJson(fieldValue, refVal_latest_commit);
            setLatestCommit(refVal_latest_commit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latest_commit_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latest_commit_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_latest_commit_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_latest_commit_version);
            setLatestCommitVersion(refVal_latest_commit_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latest_commit_timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latest_commit_timestamp"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_latest_commit_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_latest_commit_timestamp);
            setLatestCommitTimestamp(refVal_latest_commit_timestamp);
        }
    }
    return ok;
}

void PCBMaster::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_Latest_commitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latest_commit"), m_Latest_commit));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_Latest_commit_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latest_commit_version"), m_Latest_commit_version));
    }
    if(m_Latest_commit_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latest_commit_timestamp"), m_Latest_commit_timestamp));
    }
}

bool PCBMaster::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latest_commit")))
    {
        int32_t refVal_latest_commit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latest_commit")), refVal_latest_commit );
        setLatestCommit(refVal_latest_commit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        int32_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latest_commit_version")))
    {
        int32_t refVal_latest_commit_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latest_commit_version")), refVal_latest_commit_version );
        setLatestCommitVersion(refVal_latest_commit_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latest_commit_timestamp")))
    {
        utility::string_t refVal_latest_commit_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latest_commit_timestamp")), refVal_latest_commit_timestamp );
        setLatestCommitTimestamp(refVal_latest_commit_timestamp);
    }
    return ok;
}

int32_t PCBMaster::getId() const
{
    return m_Id;
}

void PCBMaster::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PCBMaster::idIsSet() const
{
    return m_IdIsSet;
}

void PCBMaster::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PCBMaster::getName() const
{
    return m_Name;
}

void PCBMaster::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool PCBMaster::nameIsSet() const
{
    return m_NameIsSet;
}

void PCBMaster::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t PCBMaster::getDescr() const
{
    return m_Descr;
}

void PCBMaster::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool PCBMaster::descrIsSet() const
{
    return m_DescrIsSet;
}

void PCBMaster::unsetDescr()
{
    m_DescrIsSet = false;
}
int32_t PCBMaster::getLatestCommit() const
{
    return m_Latest_commit;
}

void PCBMaster::setLatestCommit(int32_t value)
{
    m_Latest_commit = value;
    m_Latest_commitIsSet = true;
}

bool PCBMaster::latestCommitIsSet() const
{
    return m_Latest_commitIsSet;
}

void PCBMaster::unsetLatest_commit()
{
    m_Latest_commitIsSet = false;
}
int32_t PCBMaster::getCurrentVersion() const
{
    return m_Current_version;
}

void PCBMaster::setCurrentVersion(int32_t value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool PCBMaster::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void PCBMaster::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
int32_t PCBMaster::getLatestCommitVersion() const
{
    return m_Latest_commit_version;
}

void PCBMaster::setLatestCommitVersion(int32_t value)
{
    m_Latest_commit_version = value;
    m_Latest_commit_versionIsSet = true;
}

bool PCBMaster::latestCommitVersionIsSet() const
{
    return m_Latest_commit_versionIsSet;
}

void PCBMaster::unsetLatest_commit_version()
{
    m_Latest_commit_versionIsSet = false;
}
utility::string_t PCBMaster::getLatestCommitTimestamp() const
{
    return m_Latest_commit_timestamp;
}

void PCBMaster::setLatestCommitTimestamp(const utility::string_t& value)
{
    m_Latest_commit_timestamp = value;
    m_Latest_commit_timestampIsSet = true;
}

bool PCBMaster::latestCommitTimestampIsSet() const
{
    return m_Latest_commit_timestampIsSet;
}

void PCBMaster::unsetLatest_commit_timestamp()
{
    m_Latest_commit_timestampIsSet = false;
}
}
}


