/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InstanceModeUtilization.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_InstanceModeUtilization_H_
#define POWERMETER_MODEL_InstanceModeUtilization_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  InstanceModeUtilization
    : public ModelBase
{
public:
    InstanceModeUtilization();
    virtual ~InstanceModeUtilization();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InstanceModeUtilization members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMastermode() const;
    bool mastermodeIsSet() const;
    void unsetMastermode();

    void setMastermode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMastermodeName() const;
    bool mastermodeNameIsSet() const;
    void unsetMastermode_name();

    void setMastermodeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUtilization() const;
    bool utilizationIsSet() const;
    void unsetUtilization();

    void setUtilization(const utility::string_t& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Mastermode;
    bool m_MastermodeIsSet;
    utility::string_t m_Mastermode_name;
    bool m_Mastermode_nameIsSet;
    utility::string_t m_Utilization;
    bool m_UtilizationIsSet;
};


}
}

#endif /* POWERMETER_MODEL_InstanceModeUtilization_H_ */
