/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Dashboard.h"

namespace powermeter {
namespace model {




Dashboard::Dashboard()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_r_switch = false;
    m_r_switchIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

Dashboard::~Dashboard()
{
}

void Dashboard::validate()
{
    // TODO: implement validation
}

web::json::value Dashboard::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_r_switchIsSet)
    {
        val[utility::conversions::to_string_t("switch")] = ModelBase::toJson(m_r_switch);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool Dashboard::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("switch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("switch"));
        if(!fieldValue.is_null())
        {
            bool refVal_switch;
            ok &= ModelBase::fromJson(fieldValue, refVal_switch);
            setRSwitch(refVal_switch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timestamp"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    return ok;
}

void Dashboard::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_r_switchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("switch"), m_r_switch));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
}

bool Dashboard::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("switch")))
    {
        bool refVal_switch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("switch")), refVal_switch );
        setRSwitch(refVal_switch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        utility::datetime refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp")), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    return ok;
}

int32_t Dashboard::getId() const
{
    return m_Id;
}

void Dashboard::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Dashboard::idIsSet() const
{
    return m_IdIsSet;
}

void Dashboard::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Dashboard::getTitle() const
{
    return m_Title;
}

void Dashboard::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Dashboard::titleIsSet() const
{
    return m_TitleIsSet;
}

void Dashboard::unsetTitle()
{
    m_TitleIsSet = false;
}
bool Dashboard::isRSwitch() const
{
    return m_r_switch;
}

void Dashboard::setRSwitch(bool value)
{
    m_r_switch = value;
    m_r_switchIsSet = true;
}

bool Dashboard::rSwitchIsSet() const
{
    return m_r_switchIsSet;
}

void Dashboard::unsetr_switch()
{
    m_r_switchIsSet = false;
}
utility::datetime Dashboard::getTimestamp() const
{
    return m_Timestamp;
}

void Dashboard::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Dashboard::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Dashboard::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}


