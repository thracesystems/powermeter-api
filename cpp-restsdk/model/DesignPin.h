/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DesignPin.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_DesignPin_H_
#define POWERMETER_MODEL_DesignPin_H_


#include "../ModelBase.h"

#include "PinCap.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  DesignPin
    : public ModelBase
{
public:
    DesignPin();
    virtual ~DesignPin();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DesignPin members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDirection() const;
    bool directionIsSet() const;
    void unsetDirection();

    void setDirection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBus() const;
    bool busIsSet() const;
    void unsetBus();

    void setBus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBusIndex() const;
    bool busIndexIsSet() const;
    void unsetBus_index();

    void setBusIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBundle() const;
    bool bundleIsSet() const;
    void unsetBundle();

    void setBundle(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBundleIndex() const;
    bool bundleIndexIsSet() const;
    void unsetBundle_index();

    void setBundleIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PinCap>>& getPinCaps();
    bool pinCapsIsSet() const;
    void unsetPin_caps();

    void setPinCaps(const std::vector<std::shared_ptr<PinCap>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPowerCount() const;
    bool powerCountIsSet() const;
    void unsetPower_count();

    void setPowerCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFunction() const;
    bool functionIsSet() const;
    void unsetFunction();

    void setFunction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInternalNode() const;
    bool internalNodeIsSet() const;
    void unsetInternal_node();

    void setInternalNode(const utility::string_t& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Direction;
    bool m_DirectionIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Bus;
    bool m_BusIsSet;
    int32_t m_Bus_index;
    bool m_Bus_indexIsSet;
    utility::string_t m_Bundle;
    bool m_BundleIsSet;
    int32_t m_Bundle_index;
    bool m_Bundle_indexIsSet;
    std::vector<std::shared_ptr<PinCap>> m_Pin_caps;
    bool m_Pin_capsIsSet;
    int32_t m_Power_count;
    bool m_Power_countIsSet;
    utility::string_t m_Function;
    bool m_FunctionIsSet;
    utility::string_t m_Internal_node;
    bool m_Internal_nodeIsSet;
};


}
}

#endif /* POWERMETER_MODEL_DesignPin_H_ */
