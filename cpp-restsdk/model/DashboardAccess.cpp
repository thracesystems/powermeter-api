/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DashboardAccess.h"

namespace powermeter {
namespace model {




DashboardAccess::DashboardAccess()
{
    m_Dashboard = 0;
    m_DashboardIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Project = 0;
    m_ProjectIsSet = false;
    m_Design = 0;
    m_DesignIsSet = false;
    m_Design_name = utility::conversions::to_string_t("");
    m_Design_nameIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

DashboardAccess::~DashboardAccess()
{
}

void DashboardAccess::validate()
{
    // TODO: implement validation
}

web::json::value DashboardAccess::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DashboardIsSet)
    {
        val[utility::conversions::to_string_t("dashboard")] = ModelBase::toJson(m_Dashboard);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_ProjectIsSet)
    {
        val[utility::conversions::to_string_t("project")] = ModelBase::toJson(m_Project);
    }
    if(m_DesignIsSet)
    {
        val[utility::conversions::to_string_t("design")] = ModelBase::toJson(m_Design);
    }
    if(m_Design_nameIsSet)
    {
        val[utility::conversions::to_string_t("design_name")] = ModelBase::toJson(m_Design_name);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool DashboardAccess::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("dashboard")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dashboard"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_dashboard;
            ok &= ModelBase::fromJson(fieldValue, refVal_dashboard);
            setDashboard(refVal_dashboard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_project;
            ok &= ModelBase::fromJson(fieldValue, refVal_project);
            setProject(refVal_project);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("design")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("design"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_design;
            ok &= ModelBase::fromJson(fieldValue, refVal_design);
            setDesign(refVal_design);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("design_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("design_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_design_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_design_name);
            setDesignName(refVal_design_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timestamp"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    return ok;
}

void DashboardAccess::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DashboardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dashboard"), m_Dashboard));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_ProjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project"), m_Project));
    }
    if(m_DesignIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("design"), m_Design));
    }
    if(m_Design_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("design_name"), m_Design_name));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
}

bool DashboardAccess::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("dashboard")))
    {
        int32_t refVal_dashboard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dashboard")), refVal_dashboard );
        setDashboard(refVal_dashboard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project")))
    {
        int32_t refVal_project;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project")), refVal_project );
        setProject(refVal_project);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("design")))
    {
        int32_t refVal_design;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("design")), refVal_design );
        setDesign(refVal_design);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("design_name")))
    {
        utility::string_t refVal_design_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("design_name")), refVal_design_name );
        setDesignName(refVal_design_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        utility::datetime refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp")), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    return ok;
}

int32_t DashboardAccess::getDashboard() const
{
    return m_Dashboard;
}

void DashboardAccess::setDashboard(int32_t value)
{
    m_Dashboard = value;
    m_DashboardIsSet = true;
}

bool DashboardAccess::dashboardIsSet() const
{
    return m_DashboardIsSet;
}

void DashboardAccess::unsetDashboard()
{
    m_DashboardIsSet = false;
}
utility::string_t DashboardAccess::getTitle() const
{
    return m_Title;
}

void DashboardAccess::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool DashboardAccess::titleIsSet() const
{
    return m_TitleIsSet;
}

void DashboardAccess::unsetTitle()
{
    m_TitleIsSet = false;
}
int32_t DashboardAccess::getProject() const
{
    return m_Project;
}

void DashboardAccess::setProject(int32_t value)
{
    m_Project = value;
    m_ProjectIsSet = true;
}

bool DashboardAccess::projectIsSet() const
{
    return m_ProjectIsSet;
}

void DashboardAccess::unsetProject()
{
    m_ProjectIsSet = false;
}
int32_t DashboardAccess::getDesign() const
{
    return m_Design;
}

void DashboardAccess::setDesign(int32_t value)
{
    m_Design = value;
    m_DesignIsSet = true;
}

bool DashboardAccess::designIsSet() const
{
    return m_DesignIsSet;
}

void DashboardAccess::unsetDesign()
{
    m_DesignIsSet = false;
}
utility::string_t DashboardAccess::getDesignName() const
{
    return m_Design_name;
}

void DashboardAccess::setDesignName(const utility::string_t& value)
{
    m_Design_name = value;
    m_Design_nameIsSet = true;
}

bool DashboardAccess::designNameIsSet() const
{
    return m_Design_nameIsSet;
}

void DashboardAccess::unsetDesign_name()
{
    m_Design_nameIsSet = false;
}
utility::datetime DashboardAccess::getTimestamp() const
{
    return m_Timestamp;
}

void DashboardAccess::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool DashboardAccess::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void DashboardAccess::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}


