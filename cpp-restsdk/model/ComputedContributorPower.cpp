/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComputedContributorPower.h"

namespace powermeter {
namespace model {




ComputedContributorPower::ComputedContributorPower()
{
    m_p = utility::conversions::to_string_t("");
    m_pIsSet = false;
    m_v = 0.0;
    m_vIsSet = false;
    m_t = 0;
    m_tIsSet = false;
    m_Current = 0.0;
    m_CurrentIsSet = false;
    m_Pin_currentIsSet = false;
}

ComputedContributorPower::~ComputedContributorPower()
{
}

void ComputedContributorPower::validate()
{
    // TODO: implement validation
}

web::json::value ComputedContributorPower::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_pIsSet)
    {
        val[utility::conversions::to_string_t("p")] = ModelBase::toJson(m_p);
    }
    if(m_vIsSet)
    {
        val[utility::conversions::to_string_t("v")] = ModelBase::toJson(m_v);
    }
    if(m_tIsSet)
    {
        val[utility::conversions::to_string_t("t")] = ModelBase::toJson(m_t);
    }
    if(m_CurrentIsSet)
    {
        val[utility::conversions::to_string_t("current")] = ModelBase::toJson(m_Current);
    }
    if(m_Pin_currentIsSet)
    {
        val[utility::conversions::to_string_t("pin_current")] = ModelBase::toJson(m_Pin_current);
    }

    return val;
}

bool ComputedContributorPower::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("p")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("p"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_p;
            ok &= ModelBase::fromJson(fieldValue, refVal_p);
            setP(refVal_p);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("v")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("v"));
        if(!fieldValue.is_null())
        {
            double refVal_v;
            ok &= ModelBase::fromJson(fieldValue, refVal_v);
            setV(refVal_v);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("t")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("t"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_t;
            ok &= ModelBase::fromJson(fieldValue, refVal_t);
            setT(refVal_t);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current"));
        if(!fieldValue.is_null())
        {
            double refVal_current;
            ok &= ModelBase::fromJson(fieldValue, refVal_current);
            setCurrent(refVal_current);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pin_current")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pin_current"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PinCurrent>> refVal_pin_current;
            ok &= ModelBase::fromJson(fieldValue, refVal_pin_current);
            setPinCurrent(refVal_pin_current);
        }
    }
    return ok;
}

void ComputedContributorPower::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_pIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("p"), m_p));
    }
    if(m_vIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("v"), m_v));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("t"), m_t));
    }
    if(m_CurrentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current"), m_Current));
    }
    if(m_Pin_currentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pin_current"), m_Pin_current));
    }
}

bool ComputedContributorPower::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("p")))
    {
        utility::string_t refVal_p;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("p")), refVal_p );
        setP(refVal_p);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("v")))
    {
        double refVal_v;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("v")), refVal_v );
        setV(refVal_v);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("t")))
    {
        int32_t refVal_t;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("t")), refVal_t );
        setT(refVal_t);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current")))
    {
        double refVal_current;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current")), refVal_current );
        setCurrent(refVal_current);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pin_current")))
    {
        std::vector<std::shared_ptr<PinCurrent>> refVal_pin_current;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pin_current")), refVal_pin_current );
        setPinCurrent(refVal_pin_current);
    }
    return ok;
}

utility::string_t ComputedContributorPower::getP() const
{
    return m_p;
}

void ComputedContributorPower::setP(const utility::string_t& value)
{
    m_p = value;
    m_pIsSet = true;
}

bool ComputedContributorPower::PIsSet() const
{
    return m_pIsSet;
}

void ComputedContributorPower::unsetp()
{
    m_pIsSet = false;
}
double ComputedContributorPower::getV() const
{
    return m_v;
}

void ComputedContributorPower::setV(double value)
{
    m_v = value;
    m_vIsSet = true;
}

bool ComputedContributorPower::VIsSet() const
{
    return m_vIsSet;
}

void ComputedContributorPower::unsetv()
{
    m_vIsSet = false;
}
int32_t ComputedContributorPower::getT() const
{
    return m_t;
}

void ComputedContributorPower::setT(int32_t value)
{
    m_t = value;
    m_tIsSet = true;
}

bool ComputedContributorPower::TIsSet() const
{
    return m_tIsSet;
}

void ComputedContributorPower::unsett()
{
    m_tIsSet = false;
}
double ComputedContributorPower::getCurrent() const
{
    return m_Current;
}

void ComputedContributorPower::setCurrent(double value)
{
    m_Current = value;
    m_CurrentIsSet = true;
}

bool ComputedContributorPower::currentIsSet() const
{
    return m_CurrentIsSet;
}

void ComputedContributorPower::unsetCurrent()
{
    m_CurrentIsSet = false;
}
std::vector<std::shared_ptr<PinCurrent>>& ComputedContributorPower::getPinCurrent()
{
    return m_Pin_current;
}

void ComputedContributorPower::setPinCurrent(const std::vector<std::shared_ptr<PinCurrent>>& value)
{
    m_Pin_current = value;
    m_Pin_currentIsSet = true;
}

bool ComputedContributorPower::pinCurrentIsSet() const
{
    return m_Pin_currentIsSet;
}

void ComputedContributorPower::unsetPin_current()
{
    m_Pin_currentIsSet = false;
}
}
}


