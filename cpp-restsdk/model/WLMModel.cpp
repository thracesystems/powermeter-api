/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WLMModel.h"

namespace powermeter {
namespace model {




WLMModel::WLMModel()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Master_name = utility::conversions::to_string_t("");
    m_Master_nameIsSet = false;
    m_Editable = false;
    m_EditableIsSet = false;
    m_WireloadsIsSet = false;
    m_Current_version = 0;
    m_Current_versionIsSet = false;
    m_VersionIsSet = false;
}

WLMModel::~WLMModel()
{
}

void WLMModel::validate()
{
    // TODO: implement validation
}

web::json::value WLMModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Master_nameIsSet)
    {
        val[utility::conversions::to_string_t("master_name")] = ModelBase::toJson(m_Master_name);
    }
    if(m_EditableIsSet)
    {
        val[utility::conversions::to_string_t("editable")] = ModelBase::toJson(m_Editable);
    }
    if(m_WireloadsIsSet)
    {
        val[utility::conversions::to_string_t("wireloads")] = ModelBase::toJson(m_Wireloads);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }

    return val;
}

bool WLMModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_master_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_name);
            setMasterName(refVal_master_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editable"));
        if(!fieldValue.is_null())
        {
            bool refVal_editable;
            ok &= ModelBase::fromJson(fieldValue, refVal_editable);
            setEditable(refVal_editable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wireloads")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wireloads"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WireLoad>> refVal_wireloads;
            ok &= ModelBase::fromJson(fieldValue, refVal_wireloads);
            setWireloads(refVal_wireloads);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WLMVersion> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    return ok;
}

void WLMModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Master_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_name"), m_Master_name));
    }
    if(m_EditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editable"), m_Editable));
    }
    if(m_WireloadsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wireloads"), m_Wireloads));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
}

bool WLMModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_name")))
    {
        utility::string_t refVal_master_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_name")), refVal_master_name );
        setMasterName(refVal_master_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editable")))
    {
        bool refVal_editable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editable")), refVal_editable );
        setEditable(refVal_editable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wireloads")))
    {
        std::vector<std::shared_ptr<WireLoad>> refVal_wireloads;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wireloads")), refVal_wireloads );
        setWireloads(refVal_wireloads);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        int32_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<WLMVersion> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    return ok;
}

int32_t WLMModel::getId() const
{
    return m_Id;
}

void WLMModel::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool WLMModel::idIsSet() const
{
    return m_IdIsSet;
}

void WLMModel::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t WLMModel::getMasterName() const
{
    return m_Master_name;
}

void WLMModel::setMasterName(const utility::string_t& value)
{
    m_Master_name = value;
    m_Master_nameIsSet = true;
}

bool WLMModel::masterNameIsSet() const
{
    return m_Master_nameIsSet;
}

void WLMModel::unsetMaster_name()
{
    m_Master_nameIsSet = false;
}
bool WLMModel::isEditable() const
{
    return m_Editable;
}

void WLMModel::setEditable(bool value)
{
    m_Editable = value;
    m_EditableIsSet = true;
}

bool WLMModel::editableIsSet() const
{
    return m_EditableIsSet;
}

void WLMModel::unsetEditable()
{
    m_EditableIsSet = false;
}
std::vector<std::shared_ptr<WireLoad>>& WLMModel::getWireloads()
{
    return m_Wireloads;
}

void WLMModel::setWireloads(const std::vector<std::shared_ptr<WireLoad>>& value)
{
    m_Wireloads = value;
    m_WireloadsIsSet = true;
}

bool WLMModel::wireloadsIsSet() const
{
    return m_WireloadsIsSet;
}

void WLMModel::unsetWireloads()
{
    m_WireloadsIsSet = false;
}
int32_t WLMModel::getCurrentVersion() const
{
    return m_Current_version;
}

void WLMModel::setCurrentVersion(int32_t value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool WLMModel::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void WLMModel::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
std::shared_ptr<WLMVersion> WLMModel::getVersion() const
{
    return m_Version;
}

void WLMModel::setVersion(const std::shared_ptr<WLMVersion>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool WLMModel::versionIsSet() const
{
    return m_VersionIsSet;
}

void WLMModel::unsetVersion()
{
    m_VersionIsSet = false;
}
}
}


