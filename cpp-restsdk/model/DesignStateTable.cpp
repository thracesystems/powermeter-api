/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignStateTable.h"

namespace powermeter {
namespace model {




DesignStateTable::DesignStateTable()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_In_nodesIsSet = false;
    m_Int_nodesIsSet = false;
    m_Table = utility::conversions::to_string_t("");
    m_TableIsSet = false;
    m_HighIsSet = false;
    m_LowIsSet = false;
    m_NcIsSet = false;
}

DesignStateTable::~DesignStateTable()
{
}

void DesignStateTable::validate()
{
    // TODO: implement validation
}

web::json::value DesignStateTable::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_In_nodesIsSet)
    {
        val[utility::conversions::to_string_t("in_nodes")] = ModelBase::toJson(m_In_nodes);
    }
    if(m_Int_nodesIsSet)
    {
        val[utility::conversions::to_string_t("int_nodes")] = ModelBase::toJson(m_Int_nodes);
    }
    if(m_TableIsSet)
    {
        val[utility::conversions::to_string_t("table")] = ModelBase::toJson(m_Table);
    }
    if(m_HighIsSet)
    {
        val[utility::conversions::to_string_t("high")] = ModelBase::toJson(m_High);
    }
    if(m_LowIsSet)
    {
        val[utility::conversions::to_string_t("low")] = ModelBase::toJson(m_Low);
    }
    if(m_NcIsSet)
    {
        val[utility::conversions::to_string_t("nc")] = ModelBase::toJson(m_Nc);
    }

    return val;
}

bool DesignStateTable::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("in_nodes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("in_nodes"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_in_nodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_in_nodes);
            setInNodes(refVal_in_nodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("int_nodes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("int_nodes"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_int_nodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_int_nodes);
            setIntNodes(refVal_int_nodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("table")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("table"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_table;
            ok &= ModelBase::fromJson(fieldValue, refVal_table);
            setTable(refVal_table);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("high")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("high"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StateEquaiton>> refVal_high;
            ok &= ModelBase::fromJson(fieldValue, refVal_high);
            setHigh(refVal_high);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("low")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("low"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StateEquaiton>> refVal_low;
            ok &= ModelBase::fromJson(fieldValue, refVal_low);
            setLow(refVal_low);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nc"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StateEquaiton>> refVal_nc;
            ok &= ModelBase::fromJson(fieldValue, refVal_nc);
            setNc(refVal_nc);
        }
    }
    return ok;
}

void DesignStateTable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_In_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("in_nodes"), m_In_nodes));
    }
    if(m_Int_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("int_nodes"), m_Int_nodes));
    }
    if(m_TableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("table"), m_Table));
    }
    if(m_HighIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("high"), m_High));
    }
    if(m_LowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("low"), m_Low));
    }
    if(m_NcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nc"), m_Nc));
    }
}

bool DesignStateTable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("in_nodes")))
    {
        std::vector<utility::string_t> refVal_in_nodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("in_nodes")), refVal_in_nodes );
        setInNodes(refVal_in_nodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("int_nodes")))
    {
        std::vector<utility::string_t> refVal_int_nodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("int_nodes")), refVal_int_nodes );
        setIntNodes(refVal_int_nodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("table")))
    {
        utility::string_t refVal_table;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("table")), refVal_table );
        setTable(refVal_table);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("high")))
    {
        std::vector<std::shared_ptr<StateEquaiton>> refVal_high;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("high")), refVal_high );
        setHigh(refVal_high);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("low")))
    {
        std::vector<std::shared_ptr<StateEquaiton>> refVal_low;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("low")), refVal_low );
        setLow(refVal_low);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nc")))
    {
        std::vector<std::shared_ptr<StateEquaiton>> refVal_nc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nc")), refVal_nc );
        setNc(refVal_nc);
    }
    return ok;
}

int32_t DesignStateTable::getId() const
{
    return m_Id;
}

void DesignStateTable::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DesignStateTable::idIsSet() const
{
    return m_IdIsSet;
}

void DesignStateTable::unsetId()
{
    m_IdIsSet = false;
}
std::vector<utility::string_t>& DesignStateTable::getInNodes()
{
    return m_In_nodes;
}

void DesignStateTable::setInNodes(const std::vector<utility::string_t>& value)
{
    m_In_nodes = value;
    m_In_nodesIsSet = true;
}

bool DesignStateTable::inNodesIsSet() const
{
    return m_In_nodesIsSet;
}

void DesignStateTable::unsetIn_nodes()
{
    m_In_nodesIsSet = false;
}
std::vector<utility::string_t>& DesignStateTable::getIntNodes()
{
    return m_Int_nodes;
}

void DesignStateTable::setIntNodes(const std::vector<utility::string_t>& value)
{
    m_Int_nodes = value;
    m_Int_nodesIsSet = true;
}

bool DesignStateTable::intNodesIsSet() const
{
    return m_Int_nodesIsSet;
}

void DesignStateTable::unsetInt_nodes()
{
    m_Int_nodesIsSet = false;
}
utility::string_t DesignStateTable::getTable() const
{
    return m_Table;
}

void DesignStateTable::setTable(const utility::string_t& value)
{
    m_Table = value;
    m_TableIsSet = true;
}

bool DesignStateTable::tableIsSet() const
{
    return m_TableIsSet;
}

void DesignStateTable::unsetTable()
{
    m_TableIsSet = false;
}
std::vector<std::shared_ptr<StateEquaiton>>& DesignStateTable::getHigh()
{
    return m_High;
}

void DesignStateTable::setHigh(const std::vector<std::shared_ptr<StateEquaiton>>& value)
{
    m_High = value;
    m_HighIsSet = true;
}

bool DesignStateTable::highIsSet() const
{
    return m_HighIsSet;
}

void DesignStateTable::unsetHigh()
{
    m_HighIsSet = false;
}
std::vector<std::shared_ptr<StateEquaiton>>& DesignStateTable::getLow()
{
    return m_Low;
}

void DesignStateTable::setLow(const std::vector<std::shared_ptr<StateEquaiton>>& value)
{
    m_Low = value;
    m_LowIsSet = true;
}

bool DesignStateTable::lowIsSet() const
{
    return m_LowIsSet;
}

void DesignStateTable::unsetLow()
{
    m_LowIsSet = false;
}
std::vector<std::shared_ptr<StateEquaiton>>& DesignStateTable::getNc()
{
    return m_Nc;
}

void DesignStateTable::setNc(const std::vector<std::shared_ptr<StateEquaiton>>& value)
{
    m_Nc = value;
    m_NcIsSet = true;
}

bool DesignStateTable::ncIsSet() const
{
    return m_NcIsSet;
}

void DesignStateTable::unsetNc()
{
    m_NcIsSet = false;
}
}
}


