/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InstanceMode.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_InstanceMode_H_
#define POWERMETER_MODEL_InstanceMode_H_


#include "../ModelBase.h"

#include "InstanceModeConfig.h"
#include "InstanceModeUtilization.h"
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  InstanceMode
    : public ModelBase
{
public:
    InstanceMode();
    virtual ~InstanceMode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InstanceMode members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDesignmode() const;
    bool designmodeIsSet() const;
    void unsetDesignmode();

    void setDesignmode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<InstanceModeUtilization>>& getUtilizations();
    bool utilizationsIsSet() const;
    void unsetUtilizations();

    void setUtilizations(const std::vector<std::shared_ptr<InstanceModeUtilization>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<InstanceModeConfig>>& getConfig();
    bool configIsSet() const;
    void unsetConfig();

    void setConfig(const std::vector<std::shared_ptr<InstanceModeConfig>>& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Designmode;
    bool m_DesignmodeIsSet;
    std::vector<std::shared_ptr<InstanceModeUtilization>> m_Utilizations;
    bool m_UtilizationsIsSet;
    std::vector<std::shared_ptr<InstanceModeConfig>> m_Config;
    bool m_ConfigIsSet;
};


}
}

#endif /* POWERMETER_MODEL_InstanceMode_H_ */
