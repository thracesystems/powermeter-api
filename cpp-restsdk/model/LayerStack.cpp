/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LayerStack.h"

namespace powermeter {
namespace model {




LayerStack::LayerStack()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Layer_count = 0;
    m_Layer_countIsSet = false;
    m_Layer_orderIsSet = false;
}

LayerStack::~LayerStack()
{
}

void LayerStack::validate()
{
    // TODO: implement validation
}

web::json::value LayerStack::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Layer_countIsSet)
    {
        val[utility::conversions::to_string_t("layer_count")] = ModelBase::toJson(m_Layer_count);
    }
    if(m_Layer_orderIsSet)
    {
        val[utility::conversions::to_string_t("layer_order")] = ModelBase::toJson(m_Layer_order);
    }

    return val;
}

bool LayerStack::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("layer_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("layer_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_layer_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_layer_count);
            setLayerCount(refVal_layer_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("layer_order")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("layer_order"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_layer_order;
            ok &= ModelBase::fromJson(fieldValue, refVal_layer_order);
            setLayerOrder(refVal_layer_order);
        }
    }
    return ok;
}

void LayerStack::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Layer_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("layer_count"), m_Layer_count));
    }
    if(m_Layer_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("layer_order"), m_Layer_order));
    }
}

bool LayerStack::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("layer_count")))
    {
        int32_t refVal_layer_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("layer_count")), refVal_layer_count );
        setLayerCount(refVal_layer_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("layer_order")))
    {
        std::vector<int32_t> refVal_layer_order;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("layer_order")), refVal_layer_order );
        setLayerOrder(refVal_layer_order);
    }
    return ok;
}

int32_t LayerStack::getId() const
{
    return m_Id;
}

void LayerStack::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LayerStack::idIsSet() const
{
    return m_IdIsSet;
}

void LayerStack::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t LayerStack::getName() const
{
    return m_Name;
}

void LayerStack::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool LayerStack::nameIsSet() const
{
    return m_NameIsSet;
}

void LayerStack::unsetName()
{
    m_NameIsSet = false;
}
int32_t LayerStack::getLayerCount() const
{
    return m_Layer_count;
}

void LayerStack::setLayerCount(int32_t value)
{
    m_Layer_count = value;
    m_Layer_countIsSet = true;
}

bool LayerStack::layerCountIsSet() const
{
    return m_Layer_countIsSet;
}

void LayerStack::unsetLayer_count()
{
    m_Layer_countIsSet = false;
}
std::vector<int32_t>& LayerStack::getLayerOrder()
{
    return m_Layer_order;
}

void LayerStack::setLayerOrder(std::vector<int32_t> value)
{
    m_Layer_order = value;
    m_Layer_orderIsSet = true;
}

bool LayerStack::layerOrderIsSet() const
{
    return m_Layer_orderIsSet;
}

void LayerStack::unsetLayer_order()
{
    m_Layer_orderIsSet = false;
}
}
}


