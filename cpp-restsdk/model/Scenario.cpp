/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Scenario.h"

namespace powermeter {
namespace model {




Scenario::Scenario()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_Editable = false;
    m_EditableIsSet = false;
    m_Ambient = 0;
    m_AmbientIsSet = false;
    m_Endtime = 0.0;
    m_EndtimeIsSet = false;
    m_Current_version = 0;
    m_Current_versionIsSet = false;
    m_VersionIsSet = false;
    m_Average_power = 0.0;
    m_Average_powerIsSet = false;
    m_Total_energy = 0.0;
    m_Total_energyIsSet = false;
}

Scenario::~Scenario()
{
}

void Scenario::validate()
{
    // TODO: implement validation
}

web::json::value Scenario::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_EditableIsSet)
    {
        val[utility::conversions::to_string_t("editable")] = ModelBase::toJson(m_Editable);
    }
    if(m_AmbientIsSet)
    {
        val[utility::conversions::to_string_t("ambient")] = ModelBase::toJson(m_Ambient);
    }
    if(m_EndtimeIsSet)
    {
        val[utility::conversions::to_string_t("endtime")] = ModelBase::toJson(m_Endtime);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_Average_powerIsSet)
    {
        val[utility::conversions::to_string_t("average_power")] = ModelBase::toJson(m_Average_power);
    }
    if(m_Total_energyIsSet)
    {
        val[utility::conversions::to_string_t("total_energy")] = ModelBase::toJson(m_Total_energy);
    }

    return val;
}

bool Scenario::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editable"));
        if(!fieldValue.is_null())
        {
            bool refVal_editable;
            ok &= ModelBase::fromJson(fieldValue, refVal_editable);
            setEditable(refVal_editable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ambient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ambient"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ambient;
            ok &= ModelBase::fromJson(fieldValue, refVal_ambient);
            setAmbient(refVal_ambient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("endtime")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("endtime"));
        if(!fieldValue.is_null())
        {
            double refVal_endtime;
            ok &= ModelBase::fromJson(fieldValue, refVal_endtime);
            setEndtime(refVal_endtime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScenarioVersion> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("average_power")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("average_power"));
        if(!fieldValue.is_null())
        {
            double refVal_average_power;
            ok &= ModelBase::fromJson(fieldValue, refVal_average_power);
            setAveragePower(refVal_average_power);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("total_energy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("total_energy"));
        if(!fieldValue.is_null())
        {
            double refVal_total_energy;
            ok &= ModelBase::fromJson(fieldValue, refVal_total_energy);
            setTotalEnergy(refVal_total_energy);
        }
    }
    return ok;
}

void Scenario::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_EditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editable"), m_Editable));
    }
    if(m_AmbientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ambient"), m_Ambient));
    }
    if(m_EndtimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("endtime"), m_Endtime));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_Average_powerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("average_power"), m_Average_power));
    }
    if(m_Total_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total_energy"), m_Total_energy));
    }
}

bool Scenario::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editable")))
    {
        bool refVal_editable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editable")), refVal_editable );
        setEditable(refVal_editable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ambient")))
    {
        int32_t refVal_ambient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ambient")), refVal_ambient );
        setAmbient(refVal_ambient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("endtime")))
    {
        double refVal_endtime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("endtime")), refVal_endtime );
        setEndtime(refVal_endtime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        int32_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<ScenarioVersion> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("average_power")))
    {
        double refVal_average_power;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("average_power")), refVal_average_power );
        setAveragePower(refVal_average_power);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("total_energy")))
    {
        double refVal_total_energy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("total_energy")), refVal_total_energy );
        setTotalEnergy(refVal_total_energy);
    }
    return ok;
}

int32_t Scenario::getId() const
{
    return m_Id;
}

void Scenario::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Scenario::idIsSet() const
{
    return m_IdIsSet;
}

void Scenario::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Scenario::getTitle() const
{
    return m_Title;
}

void Scenario::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool Scenario::titleIsSet() const
{
    return m_TitleIsSet;
}

void Scenario::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t Scenario::getDescr() const
{
    return m_Descr;
}

void Scenario::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool Scenario::descrIsSet() const
{
    return m_DescrIsSet;
}

void Scenario::unsetDescr()
{
    m_DescrIsSet = false;
}
bool Scenario::isEditable() const
{
    return m_Editable;
}

void Scenario::setEditable(bool value)
{
    m_Editable = value;
    m_EditableIsSet = true;
}

bool Scenario::editableIsSet() const
{
    return m_EditableIsSet;
}

void Scenario::unsetEditable()
{
    m_EditableIsSet = false;
}
int32_t Scenario::getAmbient() const
{
    return m_Ambient;
}

void Scenario::setAmbient(int32_t value)
{
    m_Ambient = value;
    m_AmbientIsSet = true;
}

bool Scenario::ambientIsSet() const
{
    return m_AmbientIsSet;
}

void Scenario::unsetAmbient()
{
    m_AmbientIsSet = false;
}
double Scenario::getEndtime() const
{
    return m_Endtime;
}

void Scenario::setEndtime(double value)
{
    m_Endtime = value;
    m_EndtimeIsSet = true;
}

bool Scenario::endtimeIsSet() const
{
    return m_EndtimeIsSet;
}

void Scenario::unsetEndtime()
{
    m_EndtimeIsSet = false;
}
int32_t Scenario::getCurrentVersion() const
{
    return m_Current_version;
}

void Scenario::setCurrentVersion(int32_t value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool Scenario::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void Scenario::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
std::shared_ptr<ScenarioVersion> Scenario::getVersion() const
{
    return m_Version;
}

void Scenario::setVersion(const std::shared_ptr<ScenarioVersion>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Scenario::versionIsSet() const
{
    return m_VersionIsSet;
}

void Scenario::unsetVersion()
{
    m_VersionIsSet = false;
}
double Scenario::getAveragePower() const
{
    return m_Average_power;
}

void Scenario::setAveragePower(double value)
{
    m_Average_power = value;
    m_Average_powerIsSet = true;
}

bool Scenario::averagePowerIsSet() const
{
    return m_Average_powerIsSet;
}

void Scenario::unsetAverage_power()
{
    m_Average_powerIsSet = false;
}
double Scenario::getTotalEnergy() const
{
    return m_Total_energy;
}

void Scenario::setTotalEnergy(double value)
{
    m_Total_energy = value;
    m_Total_energyIsSet = true;
}

bool Scenario::totalEnergyIsSet() const
{
    return m_Total_energyIsSet;
}

void Scenario::unsetTotal_energy()
{
    m_Total_energyIsSet = false;
}
}
}


