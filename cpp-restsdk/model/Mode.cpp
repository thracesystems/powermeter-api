/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Mode.h"

namespace powermeter {
namespace model {




Mode::Mode()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_r_default = false;
    m_r_defaultIsSet = false;
    m_When = utility::conversions::to_string_t("");
    m_WhenIsSet = false;
}

Mode::~Mode()
{
}

void Mode::validate()
{
    // TODO: implement validation
}

web::json::value Mode::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_r_defaultIsSet)
    {
        val[utility::conversions::to_string_t("default")] = ModelBase::toJson(m_r_default);
    }
    if(m_WhenIsSet)
    {
        val[utility::conversions::to_string_t("when")] = ModelBase::toJson(m_When);
    }

    return val;
}

bool Mode::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("default"));
        if(!fieldValue.is_null())
        {
            bool refVal_default;
            ok &= ModelBase::fromJson(fieldValue, refVal_default);
            setRDefault(refVal_default);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("when")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("when"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_when;
            ok &= ModelBase::fromJson(fieldValue, refVal_when);
            setWhen(refVal_when);
        }
    }
    return ok;
}

void Mode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_r_defaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("default"), m_r_default));
    }
    if(m_WhenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("when"), m_When));
    }
}

bool Mode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default")))
    {
        bool refVal_default;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("default")), refVal_default );
        setRDefault(refVal_default);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("when")))
    {
        utility::string_t refVal_when;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("when")), refVal_when );
        setWhen(refVal_when);
    }
    return ok;
}

int32_t Mode::getId() const
{
    return m_Id;
}

void Mode::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Mode::idIsSet() const
{
    return m_IdIsSet;
}

void Mode::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Mode::getName() const
{
    return m_Name;
}

void Mode::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Mode::nameIsSet() const
{
    return m_NameIsSet;
}

void Mode::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Mode::getDescr() const
{
    return m_Descr;
}

void Mode::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool Mode::descrIsSet() const
{
    return m_DescrIsSet;
}

void Mode::unsetDescr()
{
    m_DescrIsSet = false;
}
bool Mode::isRDefault() const
{
    return m_r_default;
}

void Mode::setRDefault(bool value)
{
    m_r_default = value;
    m_r_defaultIsSet = true;
}

bool Mode::rDefaultIsSet() const
{
    return m_r_defaultIsSet;
}

void Mode::unsetr_default()
{
    m_r_defaultIsSet = false;
}
utility::string_t Mode::getWhen() const
{
    return m_When;
}

void Mode::setWhen(const utility::string_t& value)
{
    m_When = value;
    m_WhenIsSet = true;
}

bool Mode::whenIsSet() const
{
    return m_WhenIsSet;
}

void Mode::unsetWhen()
{
    m_WhenIsSet = false;
}
}
}


