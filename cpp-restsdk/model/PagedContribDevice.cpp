/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PagedContribDevice.h"

namespace powermeter {
namespace model {




PagedContribDevice::PagedContribDevice()
{
    m_Pages = 0;
    m_PagesIsSet = false;
    m_Page = 0;
    m_PageIsSet = false;
    m_DevicesIsSet = false;
}

PagedContribDevice::~PagedContribDevice()
{
}

void PagedContribDevice::validate()
{
    // TODO: implement validation
}

web::json::value PagedContribDevice::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PagesIsSet)
    {
        val[utility::conversions::to_string_t("pages")] = ModelBase::toJson(m_Pages);
    }
    if(m_PageIsSet)
    {
        val[utility::conversions::to_string_t("page")] = ModelBase::toJson(m_Page);
    }
    if(m_DevicesIsSet)
    {
        val[utility::conversions::to_string_t("devices")] = ModelBase::toJson(m_Devices);
    }

    return val;
}

bool PagedContribDevice::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pages"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pages;
            ok &= ModelBase::fromJson(fieldValue, refVal_pages);
            setPages(refVal_pages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("page")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("page"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_page;
            ok &= ModelBase::fromJson(fieldValue, refVal_page);
            setPage(refVal_page);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("devices")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("devices"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SwaggerContrib>> refVal_devices;
            ok &= ModelBase::fromJson(fieldValue, refVal_devices);
            setDevices(refVal_devices);
        }
    }
    return ok;
}

void PagedContribDevice::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pages"), m_Pages));
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("page"), m_Page));
    }
    if(m_DevicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("devices"), m_Devices));
    }
}

bool PagedContribDevice::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pages")))
    {
        int32_t refVal_pages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pages")), refVal_pages );
        setPages(refVal_pages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("page")))
    {
        int32_t refVal_page;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("page")), refVal_page );
        setPage(refVal_page);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("devices")))
    {
        std::vector<std::shared_ptr<SwaggerContrib>> refVal_devices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("devices")), refVal_devices );
        setDevices(refVal_devices);
    }
    return ok;
}

int32_t PagedContribDevice::getPages() const
{
    return m_Pages;
}

void PagedContribDevice::setPages(int32_t value)
{
    m_Pages = value;
    m_PagesIsSet = true;
}

bool PagedContribDevice::pagesIsSet() const
{
    return m_PagesIsSet;
}

void PagedContribDevice::unsetPages()
{
    m_PagesIsSet = false;
}
int32_t PagedContribDevice::getPage() const
{
    return m_Page;
}

void PagedContribDevice::setPage(int32_t value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool PagedContribDevice::pageIsSet() const
{
    return m_PageIsSet;
}

void PagedContribDevice::unsetPage()
{
    m_PageIsSet = false;
}
std::vector<std::shared_ptr<SwaggerContrib>>& PagedContribDevice::getDevices()
{
    return m_Devices;
}

void PagedContribDevice::setDevices(const std::vector<std::shared_ptr<SwaggerContrib>>& value)
{
    m_Devices = value;
    m_DevicesIsSet = true;
}

bool PagedContribDevice::devicesIsSet() const
{
    return m_DevicesIsSet;
}

void PagedContribDevice::unsetDevices()
{
    m_DevicesIsSet = false;
}
}
}


