/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SimMeasurement.h"

namespace powermeter {
namespace model {




SimMeasurement::SimMeasurement()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Clock_name = utility::conversions::to_string_t("");
    m_Clock_nameIsSet = false;
    m_Rising = false;
    m_RisingIsSet = false;
    m_Expression = utility::conversions::to_string_t("");
    m_ExpressionIsSet = false;
    m_Bit_size = 0;
    m_Bit_sizeIsSet = false;
    m_Activity_typeIsSet = false;
    m_Variable = utility::conversions::to_string_t("");
    m_VariableIsSet = false;
}

SimMeasurement::~SimMeasurement()
{
}

void SimMeasurement::validate()
{
    // TODO: implement validation
}

web::json::value SimMeasurement::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Clock_nameIsSet)
    {
        val[utility::conversions::to_string_t("clock_name")] = ModelBase::toJson(m_Clock_name);
    }
    if(m_RisingIsSet)
    {
        val[utility::conversions::to_string_t("rising")] = ModelBase::toJson(m_Rising);
    }
    if(m_ExpressionIsSet)
    {
        val[utility::conversions::to_string_t("expression")] = ModelBase::toJson(m_Expression);
    }
    if(m_Bit_sizeIsSet)
    {
        val[utility::conversions::to_string_t("bit_size")] = ModelBase::toJson(m_Bit_size);
    }
    if(m_Activity_typeIsSet)
    {
        val[utility::conversions::to_string_t("activity_type")] = ModelBase::toJson(m_Activity_type);
    }
    if(m_VariableIsSet)
    {
        val[utility::conversions::to_string_t("variable")] = ModelBase::toJson(m_Variable);
    }

    return val;
}

bool SimMeasurement::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clock_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clock_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clock_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_clock_name);
            setClockName(refVal_clock_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rising")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rising"));
        if(!fieldValue.is_null())
        {
            bool refVal_rising;
            ok &= ModelBase::fromJson(fieldValue, refVal_rising);
            setRising(refVal_rising);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expression")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expression"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_expression;
            ok &= ModelBase::fromJson(fieldValue, refVal_expression);
            setExpression(refVal_expression);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bit_size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bit_size"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bit_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_bit_size);
            setBitSize(refVal_bit_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("activity_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("activity_type"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_activity_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_activity_type);
            setActivityType(refVal_activity_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("variable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("variable"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_variable;
            ok &= ModelBase::fromJson(fieldValue, refVal_variable);
            setVariable(refVal_variable);
        }
    }
    return ok;
}

void SimMeasurement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Clock_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clock_name"), m_Clock_name));
    }
    if(m_RisingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rising"), m_Rising));
    }
    if(m_ExpressionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expression"), m_Expression));
    }
    if(m_Bit_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bit_size"), m_Bit_size));
    }
    if(m_Activity_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("activity_type"), m_Activity_type));
    }
    if(m_VariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("variable"), m_Variable));
    }
}

bool SimMeasurement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clock_name")))
    {
        utility::string_t refVal_clock_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clock_name")), refVal_clock_name );
        setClockName(refVal_clock_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rising")))
    {
        bool refVal_rising;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rising")), refVal_rising );
        setRising(refVal_rising);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expression")))
    {
        utility::string_t refVal_expression;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expression")), refVal_expression );
        setExpression(refVal_expression);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bit_size")))
    {
        int32_t refVal_bit_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bit_size")), refVal_bit_size );
        setBitSize(refVal_bit_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("activity_type")))
    {
        std::vector<utility::string_t> refVal_activity_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("activity_type")), refVal_activity_type );
        setActivityType(refVal_activity_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("variable")))
    {
        utility::string_t refVal_variable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("variable")), refVal_variable );
        setVariable(refVal_variable);
    }
    return ok;
}

int32_t SimMeasurement::getId() const
{
    return m_Id;
}

void SimMeasurement::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SimMeasurement::idIsSet() const
{
    return m_IdIsSet;
}

void SimMeasurement::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SimMeasurement::getType() const
{
    return m_Type;
}

void SimMeasurement::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool SimMeasurement::typeIsSet() const
{
    return m_TypeIsSet;
}

void SimMeasurement::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t SimMeasurement::getName() const
{
    return m_Name;
}

void SimMeasurement::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SimMeasurement::nameIsSet() const
{
    return m_NameIsSet;
}

void SimMeasurement::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SimMeasurement::getClockName() const
{
    return m_Clock_name;
}

void SimMeasurement::setClockName(const utility::string_t& value)
{
    m_Clock_name = value;
    m_Clock_nameIsSet = true;
}

bool SimMeasurement::clockNameIsSet() const
{
    return m_Clock_nameIsSet;
}

void SimMeasurement::unsetClock_name()
{
    m_Clock_nameIsSet = false;
}
bool SimMeasurement::isRising() const
{
    return m_Rising;
}

void SimMeasurement::setRising(bool value)
{
    m_Rising = value;
    m_RisingIsSet = true;
}

bool SimMeasurement::risingIsSet() const
{
    return m_RisingIsSet;
}

void SimMeasurement::unsetRising()
{
    m_RisingIsSet = false;
}
utility::string_t SimMeasurement::getExpression() const
{
    return m_Expression;
}

void SimMeasurement::setExpression(const utility::string_t& value)
{
    m_Expression = value;
    m_ExpressionIsSet = true;
}

bool SimMeasurement::expressionIsSet() const
{
    return m_ExpressionIsSet;
}

void SimMeasurement::unsetExpression()
{
    m_ExpressionIsSet = false;
}
int32_t SimMeasurement::getBitSize() const
{
    return m_Bit_size;
}

void SimMeasurement::setBitSize(int32_t value)
{
    m_Bit_size = value;
    m_Bit_sizeIsSet = true;
}

bool SimMeasurement::bitSizeIsSet() const
{
    return m_Bit_sizeIsSet;
}

void SimMeasurement::unsetBit_size()
{
    m_Bit_sizeIsSet = false;
}
std::vector<utility::string_t>& SimMeasurement::getActivityType()
{
    return m_Activity_type;
}

void SimMeasurement::setActivityType(const std::vector<utility::string_t>& value)
{
    m_Activity_type = value;
    m_Activity_typeIsSet = true;
}

bool SimMeasurement::activityTypeIsSet() const
{
    return m_Activity_typeIsSet;
}

void SimMeasurement::unsetActivity_type()
{
    m_Activity_typeIsSet = false;
}
utility::string_t SimMeasurement::getVariable() const
{
    return m_Variable;
}

void SimMeasurement::setVariable(const utility::string_t& value)
{
    m_Variable = value;
    m_VariableIsSet = true;
}

bool SimMeasurement::variableIsSet() const
{
    return m_VariableIsSet;
}

void SimMeasurement::unsetVariable()
{
    m_VariableIsSet = false;
}
}
}


