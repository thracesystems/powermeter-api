/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContribPowerDevice.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_ContribPowerDevice_H_
#define POWERMETER_MODEL_ContribPowerDevice_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  ContribPowerDevice
    : public ModelBase
{
public:
    ContribPowerDevice();
    virtual ~ContribPowerDevice();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ContribPowerDevice members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDevice() const;
    bool deviceIsSet() const;
    void unsetDevice();

    void setDevice(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDPin() const;
    bool dPinIsSet() const;
    void unsetD_pin();

    void setDPin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGPin() const;
    bool gPinIsSet() const;
    void unsetG_pin();

    void setGPin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSPin() const;
    bool sPinIsSet() const;
    void unsetS_pin();

    void setSPin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBPin() const;
    bool bPinIsSet() const;
    void unsetB_pin();

    void setBPin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceName() const;
    bool deviceNameIsSet() const;
    void unsetDevice_name();

    void setDeviceName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDeviceWidth() const;
    bool deviceWidthIsSet() const;
    void unsetDevice_width();

    void setDeviceWidth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDeviceLength() const;
    bool deviceLengthIsSet() const;
    void unsetDevice_length();

    void setDeviceLength(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDeviceNfin() const;
    bool deviceNfinIsSet() const;
    void unsetDevice_nfin();

    void setDeviceNfin(int32_t value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    int32_t m_Device;
    bool m_DeviceIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    utility::string_t m_D_pin;
    bool m_D_pinIsSet;
    utility::string_t m_G_pin;
    bool m_G_pinIsSet;
    utility::string_t m_S_pin;
    bool m_S_pinIsSet;
    utility::string_t m_B_pin;
    bool m_B_pinIsSet;
    utility::string_t m_Device_name;
    bool m_Device_nameIsSet;
    int32_t m_Device_width;
    bool m_Device_widthIsSet;
    int32_t m_Device_length;
    bool m_Device_lengthIsSet;
    int32_t m_Device_nfin;
    bool m_Device_nfinIsSet;
};


}
}

#endif /* POWERMETER_MODEL_ContribPowerDevice_H_ */
