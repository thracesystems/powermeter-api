/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Package.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_Package_H_
#define POWERMETER_MODEL_Package_H_


#include "../ModelBase.h"

#include "PackageVersion.h"
#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  Package
    : public ModelBase
{
public:
    Package();
    virtual ~Package();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Package members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescr() const;
    bool descrIsSet() const;
    void unsetDescr();

    void setDescr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditable() const;
    bool editableIsSet() const;
    void unsetEditable();

    void setEditable(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCurrentVersion() const;
    bool currentVersionIsSet() const;
    void unsetCurrent_version();

    void setCurrentVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PackageVersion> getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const std::shared_ptr<PackageVersion>& value);

    /// <summary>
    /// 
    /// </summary>
    double getWidth() const;
    bool widthIsSet() const;
    void unsetWidth();

    void setWidth(double value);

    /// <summary>
    /// 
    /// </summary>
    double getHeight() const;
    bool heightIsSet() const;
    void unsetHeight();

    void setHeight(double value);

    /// <summary>
    /// 
    /// </summary>
    double getDieWidthMin() const;
    bool dieWidthMinIsSet() const;
    void unsetDie_width_min();

    void setDieWidthMin(double value);

    /// <summary>
    /// 
    /// </summary>
    double getDieWidthMax() const;
    bool dieWidthMaxIsSet() const;
    void unsetDie_width_max();

    void setDieWidthMax(double value);

    /// <summary>
    /// 
    /// </summary>
    double getDieHeightMin() const;
    bool dieHeightMinIsSet() const;
    void unsetDie_height_min();

    void setDieHeightMin(double value);

    /// <summary>
    /// 
    /// </summary>
    double getDieHeightMax() const;
    bool dieHeightMaxIsSet() const;
    void unsetDie_height_max();

    void setDieHeightMax(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isHeatspreaderSamesize() const;
    bool heatspreaderSamesizeIsSet() const;
    void unsetHeatspreader_samesize();

    void setHeatspreaderSamesize(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getHeatspreaderWidth() const;
    bool heatspreaderWidthIsSet() const;
    void unsetHeatspreader_width();

    void setHeatspreaderWidth(double value);

    /// <summary>
    /// 
    /// </summary>
    double getHeatspreaderHeight() const;
    bool heatspreaderHeightIsSet() const;
    void unsetHeatspreader_height();

    void setHeatspreaderHeight(double value);

    /// <summary>
    /// 
    /// </summary>
    double getHeatspreaderThickness() const;
    bool heatspreaderThicknessIsSet() const;
    void unsetHeatspreader_thickness();

    void setHeatspreaderThickness(double value);

    /// <summary>
    /// 
    /// </summary>
    double getHeatspreaderConductivity() const;
    bool heatspreaderConductivityIsSet() const;
    void unsetHeatspreader_conductivity();

    void setHeatspreaderConductivity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getHeatspreaderHeatcapacity() const;
    bool heatspreaderHeatcapacityIsSet() const;
    void unsetHeatspreader_heatcapacity();

    void setHeatspreaderHeatcapacity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTimThickness() const;
    bool timThicknessIsSet() const;
    void unsetTim_thickness();

    void setTimThickness(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTimConductivity() const;
    bool timConductivityIsSet() const;
    void unsetTim_conductivity();

    void setTimConductivity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTimHeatcapacity() const;
    bool timHeatcapacityIsSet() const;
    void unsetTim_heatcapacity();

    void setTimHeatcapacity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getUnderfillThickness() const;
    bool underfillThicknessIsSet() const;
    void unsetUnderfill_thickness();

    void setUnderfillThickness(double value);

    /// <summary>
    /// 
    /// </summary>
    double getC4Width() const;
    bool c4WidthIsSet() const;
    void unsetC4_width();

    void setC4Width(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getC4Number() const;
    bool c4NumberIsSet() const;
    void unsetC4_number();

    void setC4Number(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getC4Conductivity() const;
    bool c4ConductivityIsSet() const;
    void unsetC4_conductivity();

    void setC4Conductivity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getC4Heatcapacity() const;
    bool c4HeatcapacityIsSet() const;
    void unsetC4_heatcapacity();

    void setC4Heatcapacity(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isSubstrateSamesize() const;
    bool substrateSamesizeIsSet() const;
    void unsetSubstrate_samesize();

    void setSubstrateSamesize(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getSubstrateWidth() const;
    bool substrateWidthIsSet() const;
    void unsetSubstrate_width();

    void setSubstrateWidth(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSubstrateHeight() const;
    bool substrateHeightIsSet() const;
    void unsetSubstrate_height();

    void setSubstrateHeight(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSubstrateThickness() const;
    bool substrateThicknessIsSet() const;
    void unsetSubstrate_thickness();

    void setSubstrateThickness(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSubstrateConductivity() const;
    bool substrateConductivityIsSet() const;
    void unsetSubstrate_conductivity();

    void setSubstrateConductivity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSubstrateHeatcapacity() const;
    bool substrateHeatcapacityIsSet() const;
    void unsetSubstrate_heatcapacity();

    void setSubstrateHeatcapacity(double value);

    /// <summary>
    /// 
    /// </summary>
    bool isSolderballSamesize() const;
    bool solderballSamesizeIsSet() const;
    void unsetSolderball_samesize();

    void setSolderballSamesize(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getSolderballWidth() const;
    bool solderballWidthIsSet() const;
    void unsetSolderball_width();

    void setSolderballWidth(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSolderballHeight() const;
    bool solderballHeightIsSet() const;
    void unsetSolderball_height();

    void setSolderballHeight(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSolderballThickness() const;
    bool solderballThicknessIsSet() const;
    void unsetSolderball_thickness();

    void setSolderballThickness(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSolderballConductivity() const;
    bool solderballConductivityIsSet() const;
    void unsetSolderball_conductivity();

    void setSolderballConductivity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSolderballHeatcapacity() const;
    bool solderballHeatcapacityIsSet() const;
    void unsetSolderball_heatcapacity();

    void setSolderballHeatcapacity(double value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Descr;
    bool m_DescrIsSet;
    bool m_Editable;
    bool m_EditableIsSet;
    int32_t m_Current_version;
    bool m_Current_versionIsSet;
    std::shared_ptr<PackageVersion> m_Version;
    bool m_VersionIsSet;
    double m_Width;
    bool m_WidthIsSet;
    double m_Height;
    bool m_HeightIsSet;
    double m_Die_width_min;
    bool m_Die_width_minIsSet;
    double m_Die_width_max;
    bool m_Die_width_maxIsSet;
    double m_Die_height_min;
    bool m_Die_height_minIsSet;
    double m_Die_height_max;
    bool m_Die_height_maxIsSet;
    bool m_Heatspreader_samesize;
    bool m_Heatspreader_samesizeIsSet;
    double m_Heatspreader_width;
    bool m_Heatspreader_widthIsSet;
    double m_Heatspreader_height;
    bool m_Heatspreader_heightIsSet;
    double m_Heatspreader_thickness;
    bool m_Heatspreader_thicknessIsSet;
    double m_Heatspreader_conductivity;
    bool m_Heatspreader_conductivityIsSet;
    double m_Heatspreader_heatcapacity;
    bool m_Heatspreader_heatcapacityIsSet;
    double m_Tim_thickness;
    bool m_Tim_thicknessIsSet;
    double m_Tim_conductivity;
    bool m_Tim_conductivityIsSet;
    double m_Tim_heatcapacity;
    bool m_Tim_heatcapacityIsSet;
    double m_Underfill_thickness;
    bool m_Underfill_thicknessIsSet;
    double m_C4_width;
    bool m_C4_widthIsSet;
    int32_t m_C4_number;
    bool m_C4_numberIsSet;
    double m_C4_conductivity;
    bool m_C4_conductivityIsSet;
    double m_C4_heatcapacity;
    bool m_C4_heatcapacityIsSet;
    bool m_Substrate_samesize;
    bool m_Substrate_samesizeIsSet;
    double m_Substrate_width;
    bool m_Substrate_widthIsSet;
    double m_Substrate_height;
    bool m_Substrate_heightIsSet;
    double m_Substrate_thickness;
    bool m_Substrate_thicknessIsSet;
    double m_Substrate_conductivity;
    bool m_Substrate_conductivityIsSet;
    double m_Substrate_heatcapacity;
    bool m_Substrate_heatcapacityIsSet;
    bool m_Solderball_samesize;
    bool m_Solderball_samesizeIsSet;
    double m_Solderball_width;
    bool m_Solderball_widthIsSet;
    double m_Solderball_height;
    bool m_Solderball_heightIsSet;
    double m_Solderball_thickness;
    bool m_Solderball_thicknessIsSet;
    double m_Solderball_conductivity;
    bool m_Solderball_conductivityIsSet;
    double m_Solderball_heatcapacity;
    bool m_Solderball_heatcapacityIsSet;
};


}
}

#endif /* POWERMETER_MODEL_Package_H_ */
