/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VR.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_VR_H_
#define POWERMETER_MODEL_VR_H_


#include "../ModelBase.h"

#include "VRVersion.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  VR
    : public ModelBase
{
public:
    VR();
    virtual ~VR();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// VR members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescr() const;
    bool descrIsSet() const;
    void unsetDescr();

    void setDescr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getLinearIq() const;
    bool linearIqIsSet() const;
    void unsetLinear_iq();

    void setLinearIq(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getSwitchedEfficiency() const;
    bool switchedEfficiencyIsSet() const;
    void unsetSwitched_efficiency();

    void setSwitchedEfficiency(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditable() const;
    bool editableIsSet() const;
    void unsetEditable();

    void setEditable(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<VRVersion> getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const std::shared_ptr<VRVersion>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCurrentVersion() const;
    bool currentVersionIsSet() const;
    void unsetCurrent_version();

    void setCurrentVersion(int32_t value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Descr;
    bool m_DescrIsSet;
    int32_t m_Type;
    bool m_TypeIsSet;
    double m_Linear_iq;
    bool m_Linear_iqIsSet;
    std::shared_ptr<Object> m_Switched_efficiency;
    bool m_Switched_efficiencyIsSet;
    bool m_Editable;
    bool m_EditableIsSet;
    std::shared_ptr<VRVersion> m_Version;
    bool m_VersionIsSet;
    int32_t m_Current_version;
    bool m_Current_versionIsSet;
};


}
}

#endif /* POWERMETER_MODEL_VR_H_ */
