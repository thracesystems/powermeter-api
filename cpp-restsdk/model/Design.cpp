/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Design.h"

namespace powermeter {
namespace model {




Design::Design()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Master = 0;
    m_MasterIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_Technology = 0;
    m_TechnologyIsSet = false;
    m_OutlineIsSet = false;
    m_Area = 0.0;
    m_AreaIsSet = false;
    m_TagsIsSet = false;
    m_Editable = false;
    m_EditableIsSet = false;
    m_VersionIsSet = false;
    m_Current_version = 0;
    m_Current_versionIsSet = false;
    m_Project = 0;
    m_ProjectIsSet = false;
    m_Uuid = utility::conversions::to_string_t("");
    m_UuidIsSet = false;
    m_Instantiations = 0;
    m_InstantiationsIsSet = false;
    m_Dashboard_orderIsSet = false;
    m_Ff_count = 0;
    m_Ff_countIsSet = false;
    m_Latch_count = 0;
    m_Latch_countIsSet = false;
    m_Statetable_count = 0;
    m_Statetable_countIsSet = false;
}

Design::~Design()
{
}

void Design::validate()
{
    // TODO: implement validation
}

web::json::value Design::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_MasterIsSet)
    {
        val[utility::conversions::to_string_t("master")] = ModelBase::toJson(m_Master);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_TechnologyIsSet)
    {
        val[utility::conversions::to_string_t("technology")] = ModelBase::toJson(m_Technology);
    }
    if(m_OutlineIsSet)
    {
        val[utility::conversions::to_string_t("outline")] = ModelBase::toJson(m_Outline);
    }
    if(m_AreaIsSet)
    {
        val[utility::conversions::to_string_t("area")] = ModelBase::toJson(m_Area);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }
    if(m_EditableIsSet)
    {
        val[utility::conversions::to_string_t("editable")] = ModelBase::toJson(m_Editable);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_ProjectIsSet)
    {
        val[utility::conversions::to_string_t("project")] = ModelBase::toJson(m_Project);
    }
    if(m_UuidIsSet)
    {
        val[utility::conversions::to_string_t("uuid")] = ModelBase::toJson(m_Uuid);
    }
    if(m_InstantiationsIsSet)
    {
        val[utility::conversions::to_string_t("instantiations")] = ModelBase::toJson(m_Instantiations);
    }
    if(m_Dashboard_orderIsSet)
    {
        val[utility::conversions::to_string_t("dashboard_order")] = ModelBase::toJson(m_Dashboard_order);
    }
    if(m_Ff_countIsSet)
    {
        val[utility::conversions::to_string_t("ff_count")] = ModelBase::toJson(m_Ff_count);
    }
    if(m_Latch_countIsSet)
    {
        val[utility::conversions::to_string_t("latch_count")] = ModelBase::toJson(m_Latch_count);
    }
    if(m_Statetable_countIsSet)
    {
        val[utility::conversions::to_string_t("statetable_count")] = ModelBase::toJson(m_Statetable_count);
    }

    return val;
}

bool Design::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master;
            ok &= ModelBase::fromJson(fieldValue, refVal_master);
            setMaster(refVal_master);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("technology")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("technology"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_technology;
            ok &= ModelBase::fromJson(fieldValue, refVal_technology);
            setTechnology(refVal_technology);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("outline")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("outline"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Point>> refVal_outline;
            ok &= ModelBase::fromJson(fieldValue, refVal_outline);
            setOutline(refVal_outline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("area")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("area"));
        if(!fieldValue.is_null())
        {
            double refVal_area;
            ok &= ModelBase::fromJson(fieldValue, refVal_area);
            setArea(refVal_area);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("editable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("editable"));
        if(!fieldValue.is_null())
        {
            bool refVal_editable;
            ok &= ModelBase::fromJson(fieldValue, refVal_editable);
            setEditable(refVal_editable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DesignVersion> refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_project;
            ok &= ModelBase::fromJson(fieldValue, refVal_project);
            setProject(refVal_project);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uuid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uuid"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_uuid;
            ok &= ModelBase::fromJson(fieldValue, refVal_uuid);
            setUuid(refVal_uuid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("instantiations")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("instantiations"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_instantiations;
            ok &= ModelBase::fromJson(fieldValue, refVal_instantiations);
            setInstantiations(refVal_instantiations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dashboard_order")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dashboard_order"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_dashboard_order;
            ok &= ModelBase::fromJson(fieldValue, refVal_dashboard_order);
            setDashboardOrder(refVal_dashboard_order);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ff_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ff_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ff_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_ff_count);
            setFfCount(refVal_ff_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latch_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latch_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_latch_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_latch_count);
            setLatchCount(refVal_latch_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("statetable_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("statetable_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_statetable_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_statetable_count);
            setStatetableCount(refVal_statetable_count);
        }
    }
    return ok;
}

void Design::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_MasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master"), m_Master));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_TechnologyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("technology"), m_Technology));
    }
    if(m_OutlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("outline"), m_Outline));
    }
    if(m_AreaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("area"), m_Area));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
    if(m_EditableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("editable"), m_Editable));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_ProjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project"), m_Project));
    }
    if(m_UuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uuid"), m_Uuid));
    }
    if(m_InstantiationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("instantiations"), m_Instantiations));
    }
    if(m_Dashboard_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dashboard_order"), m_Dashboard_order));
    }
    if(m_Ff_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ff_count"), m_Ff_count));
    }
    if(m_Latch_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latch_count"), m_Latch_count));
    }
    if(m_Statetable_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("statetable_count"), m_Statetable_count));
    }
}

bool Design::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master")))
    {
        int32_t refVal_master;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master")), refVal_master );
        setMaster(refVal_master);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("technology")))
    {
        int32_t refVal_technology;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("technology")), refVal_technology );
        setTechnology(refVal_technology);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("outline")))
    {
        std::vector<std::shared_ptr<Point>> refVal_outline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("outline")), refVal_outline );
        setOutline(refVal_outline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("area")))
    {
        double refVal_area;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("area")), refVal_area );
        setArea(refVal_area);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("editable")))
    {
        bool refVal_editable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("editable")), refVal_editable );
        setEditable(refVal_editable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        std::shared_ptr<DesignVersion> refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        int32_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project")))
    {
        int32_t refVal_project;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project")), refVal_project );
        setProject(refVal_project);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uuid")))
    {
        utility::string_t refVal_uuid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uuid")), refVal_uuid );
        setUuid(refVal_uuid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("instantiations")))
    {
        int32_t refVal_instantiations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("instantiations")), refVal_instantiations );
        setInstantiations(refVal_instantiations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dashboard_order")))
    {
        std::vector<int32_t> refVal_dashboard_order;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dashboard_order")), refVal_dashboard_order );
        setDashboardOrder(refVal_dashboard_order);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ff_count")))
    {
        int32_t refVal_ff_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ff_count")), refVal_ff_count );
        setFfCount(refVal_ff_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latch_count")))
    {
        int32_t refVal_latch_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latch_count")), refVal_latch_count );
        setLatchCount(refVal_latch_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("statetable_count")))
    {
        int32_t refVal_statetable_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("statetable_count")), refVal_statetable_count );
        setStatetableCount(refVal_statetable_count);
    }
    return ok;
}

int32_t Design::getId() const
{
    return m_Id;
}

void Design::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Design::idIsSet() const
{
    return m_IdIsSet;
}

void Design::unsetId()
{
    m_IdIsSet = false;
}
int32_t Design::getMaster() const
{
    return m_Master;
}

void Design::setMaster(int32_t value)
{
    m_Master = value;
    m_MasterIsSet = true;
}

bool Design::masterIsSet() const
{
    return m_MasterIsSet;
}

void Design::unsetMaster()
{
    m_MasterIsSet = false;
}
utility::string_t Design::getName() const
{
    return m_Name;
}

void Design::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Design::nameIsSet() const
{
    return m_NameIsSet;
}

void Design::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Design::getDescr() const
{
    return m_Descr;
}

void Design::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool Design::descrIsSet() const
{
    return m_DescrIsSet;
}

void Design::unsetDescr()
{
    m_DescrIsSet = false;
}
int32_t Design::getTechnology() const
{
    return m_Technology;
}

void Design::setTechnology(int32_t value)
{
    m_Technology = value;
    m_TechnologyIsSet = true;
}

bool Design::technologyIsSet() const
{
    return m_TechnologyIsSet;
}

void Design::unsetTechnology()
{
    m_TechnologyIsSet = false;
}
std::vector<std::shared_ptr<Point>>& Design::getOutline()
{
    return m_Outline;
}

void Design::setOutline(const std::vector<std::shared_ptr<Point>>& value)
{
    m_Outline = value;
    m_OutlineIsSet = true;
}

bool Design::outlineIsSet() const
{
    return m_OutlineIsSet;
}

void Design::unsetOutline()
{
    m_OutlineIsSet = false;
}
double Design::getArea() const
{
    return m_Area;
}

void Design::setArea(double value)
{
    m_Area = value;
    m_AreaIsSet = true;
}

bool Design::areaIsSet() const
{
    return m_AreaIsSet;
}

void Design::unsetArea()
{
    m_AreaIsSet = false;
}
std::vector<utility::string_t>& Design::getTags()
{
    return m_Tags;
}

void Design::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool Design::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Design::unsetTags()
{
    m_TagsIsSet = false;
}
bool Design::isEditable() const
{
    return m_Editable;
}

void Design::setEditable(bool value)
{
    m_Editable = value;
    m_EditableIsSet = true;
}

bool Design::editableIsSet() const
{
    return m_EditableIsSet;
}

void Design::unsetEditable()
{
    m_EditableIsSet = false;
}
std::shared_ptr<DesignVersion> Design::getVersion() const
{
    return m_Version;
}

void Design::setVersion(const std::shared_ptr<DesignVersion>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Design::versionIsSet() const
{
    return m_VersionIsSet;
}

void Design::unsetVersion()
{
    m_VersionIsSet = false;
}
int32_t Design::getCurrentVersion() const
{
    return m_Current_version;
}

void Design::setCurrentVersion(int32_t value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool Design::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void Design::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
int32_t Design::getProject() const
{
    return m_Project;
}

void Design::setProject(int32_t value)
{
    m_Project = value;
    m_ProjectIsSet = true;
}

bool Design::projectIsSet() const
{
    return m_ProjectIsSet;
}

void Design::unsetProject()
{
    m_ProjectIsSet = false;
}
utility::string_t Design::getUuid() const
{
    return m_Uuid;
}

void Design::setUuid(const utility::string_t& value)
{
    m_Uuid = value;
    m_UuidIsSet = true;
}

bool Design::uuidIsSet() const
{
    return m_UuidIsSet;
}

void Design::unsetUuid()
{
    m_UuidIsSet = false;
}
int32_t Design::getInstantiations() const
{
    return m_Instantiations;
}

void Design::setInstantiations(int32_t value)
{
    m_Instantiations = value;
    m_InstantiationsIsSet = true;
}

bool Design::instantiationsIsSet() const
{
    return m_InstantiationsIsSet;
}

void Design::unsetInstantiations()
{
    m_InstantiationsIsSet = false;
}
std::vector<int32_t>& Design::getDashboardOrder()
{
    return m_Dashboard_order;
}

void Design::setDashboardOrder(std::vector<int32_t> value)
{
    m_Dashboard_order = value;
    m_Dashboard_orderIsSet = true;
}

bool Design::dashboardOrderIsSet() const
{
    return m_Dashboard_orderIsSet;
}

void Design::unsetDashboard_order()
{
    m_Dashboard_orderIsSet = false;
}
int32_t Design::getFfCount() const
{
    return m_Ff_count;
}

void Design::setFfCount(int32_t value)
{
    m_Ff_count = value;
    m_Ff_countIsSet = true;
}

bool Design::ffCountIsSet() const
{
    return m_Ff_countIsSet;
}

void Design::unsetFf_count()
{
    m_Ff_countIsSet = false;
}
int32_t Design::getLatchCount() const
{
    return m_Latch_count;
}

void Design::setLatchCount(int32_t value)
{
    m_Latch_count = value;
    m_Latch_countIsSet = true;
}

bool Design::latchCountIsSet() const
{
    return m_Latch_countIsSet;
}

void Design::unsetLatch_count()
{
    m_Latch_countIsSet = false;
}
int32_t Design::getStatetableCount() const
{
    return m_Statetable_count;
}

void Design::setStatetableCount(int32_t value)
{
    m_Statetable_count = value;
    m_Statetable_countIsSet = true;
}

bool Design::statetableCountIsSet() const
{
    return m_Statetable_countIsSet;
}

void Design::unsetStatetable_count()
{
    m_Statetable_countIsSet = false;
}
}
}


