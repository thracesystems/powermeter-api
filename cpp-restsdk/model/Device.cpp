/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Device.h"

namespace powermeter {
namespace model {




Device::Device()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_w = 0;
    m_wIsSet = false;
    m_l = 0;
    m_lIsSet = false;
    m_Nfin = 0;
    m_NfinIsSet = false;
    m_Data_points = 0;
    m_Data_pointsIsSet = false;
}

Device::~Device()
{
}

void Device::validate()
{
    // TODO: implement validation
}

web::json::value Device::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_wIsSet)
    {
        val[utility::conversions::to_string_t("w")] = ModelBase::toJson(m_w);
    }
    if(m_lIsSet)
    {
        val[utility::conversions::to_string_t("l")] = ModelBase::toJson(m_l);
    }
    if(m_NfinIsSet)
    {
        val[utility::conversions::to_string_t("nfin")] = ModelBase::toJson(m_Nfin);
    }
    if(m_Data_pointsIsSet)
    {
        val[utility::conversions::to_string_t("data_points")] = ModelBase::toJson(m_Data_points);
    }

    return val;
}

bool Device::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("w")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("w"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_w;
            ok &= ModelBase::fromJson(fieldValue, refVal_w);
            setW(refVal_w);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("l")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("l"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_l;
            ok &= ModelBase::fromJson(fieldValue, refVal_l);
            setL(refVal_l);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nfin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nfin"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nfin;
            ok &= ModelBase::fromJson(fieldValue, refVal_nfin);
            setNfin(refVal_nfin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data_points")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data_points"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_data_points;
            ok &= ModelBase::fromJson(fieldValue, refVal_data_points);
            setDataPoints(refVal_data_points);
        }
    }
    return ok;
}

void Device::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_wIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("w"), m_w));
    }
    if(m_lIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("l"), m_l));
    }
    if(m_NfinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nfin"), m_Nfin));
    }
    if(m_Data_pointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data_points"), m_Data_points));
    }
}

bool Device::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("w")))
    {
        int32_t refVal_w;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("w")), refVal_w );
        setW(refVal_w);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("l")))
    {
        int32_t refVal_l;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("l")), refVal_l );
        setL(refVal_l);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nfin")))
    {
        int32_t refVal_nfin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nfin")), refVal_nfin );
        setNfin(refVal_nfin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data_points")))
    {
        int32_t refVal_data_points;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data_points")), refVal_data_points );
        setDataPoints(refVal_data_points);
    }
    return ok;
}

int32_t Device::getId() const
{
    return m_Id;
}

void Device::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Device::idIsSet() const
{
    return m_IdIsSet;
}

void Device::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Device::getName() const
{
    return m_Name;
}

void Device::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Device::nameIsSet() const
{
    return m_NameIsSet;
}

void Device::unsetName()
{
    m_NameIsSet = false;
}
int32_t Device::getW() const
{
    return m_w;
}

void Device::setW(int32_t value)
{
    m_w = value;
    m_wIsSet = true;
}

bool Device::WIsSet() const
{
    return m_wIsSet;
}

void Device::unsetw()
{
    m_wIsSet = false;
}
int32_t Device::getL() const
{
    return m_l;
}

void Device::setL(int32_t value)
{
    m_l = value;
    m_lIsSet = true;
}

bool Device::LIsSet() const
{
    return m_lIsSet;
}

void Device::unsetl()
{
    m_lIsSet = false;
}
int32_t Device::getNfin() const
{
    return m_Nfin;
}

void Device::setNfin(int32_t value)
{
    m_Nfin = value;
    m_NfinIsSet = true;
}

bool Device::nfinIsSet() const
{
    return m_NfinIsSet;
}

void Device::unsetNfin()
{
    m_NfinIsSet = false;
}
int32_t Device::getDataPoints() const
{
    return m_Data_points;
}

void Device::setDataPoints(int32_t value)
{
    m_Data_points = value;
    m_Data_pointsIsSet = true;
}

bool Device::dataPointsIsSet() const
{
    return m_Data_pointsIsSet;
}

void Device::unsetData_points()
{
    m_Data_pointsIsSet = false;
}
}
}


