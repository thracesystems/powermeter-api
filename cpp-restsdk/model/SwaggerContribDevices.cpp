/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SwaggerContribDevices.h"

namespace powermeter {
namespace model {




SwaggerContribDevices::SwaggerContribDevices()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Length = 0;
    m_LengthIsSet = false;
    m_Width = 0;
    m_WidthIsSet = false;
    m_Nfin = 0;
    m_NfinIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
}

SwaggerContribDevices::~SwaggerContribDevices()
{
}

void SwaggerContribDevices::validate()
{
    // TODO: implement validation
}

web::json::value SwaggerContribDevices::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_LengthIsSet)
    {
        val[utility::conversions::to_string_t("length")] = ModelBase::toJson(m_Length);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t("width")] = ModelBase::toJson(m_Width);
    }
    if(m_NfinIsSet)
    {
        val[utility::conversions::to_string_t("nfin")] = ModelBase::toJson(m_Nfin);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    }

    return val;
}

bool SwaggerContribDevices::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("length")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("length"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_length;
            ok &= ModelBase::fromJson(fieldValue, refVal_length);
            setLength(refVal_length);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("width")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("width"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_width;
            ok &= ModelBase::fromJson(fieldValue, refVal_width);
            setWidth(refVal_width);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nfin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nfin"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_nfin;
            ok &= ModelBase::fromJson(fieldValue, refVal_nfin);
            setNfin(refVal_nfin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    return ok;
}

void SwaggerContribDevices::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_LengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("length"), m_Length));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("width"), m_Width));
    }
    if(m_NfinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nfin"), m_Nfin));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    }
}

bool SwaggerContribDevices::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("length")))
    {
        int32_t refVal_length;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("length")), refVal_length );
        setLength(refVal_length);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("width")))
    {
        int32_t refVal_width;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("width")), refVal_width );
        setWidth(refVal_width);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nfin")))
    {
        int32_t refVal_nfin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nfin")), refVal_nfin );
        setNfin(refVal_nfin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        int32_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    return ok;
}

utility::string_t SwaggerContribDevices::getName() const
{
    return m_Name;
}

void SwaggerContribDevices::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SwaggerContribDevices::nameIsSet() const
{
    return m_NameIsSet;
}

void SwaggerContribDevices::unsetName()
{
    m_NameIsSet = false;
}
int32_t SwaggerContribDevices::getLength() const
{
    return m_Length;
}

void SwaggerContribDevices::setLength(int32_t value)
{
    m_Length = value;
    m_LengthIsSet = true;
}

bool SwaggerContribDevices::lengthIsSet() const
{
    return m_LengthIsSet;
}

void SwaggerContribDevices::unsetLength()
{
    m_LengthIsSet = false;
}
int32_t SwaggerContribDevices::getWidth() const
{
    return m_Width;
}

void SwaggerContribDevices::setWidth(int32_t value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool SwaggerContribDevices::widthIsSet() const
{
    return m_WidthIsSet;
}

void SwaggerContribDevices::unsetWidth()
{
    m_WidthIsSet = false;
}
int32_t SwaggerContribDevices::getNfin() const
{
    return m_Nfin;
}

void SwaggerContribDevices::setNfin(int32_t value)
{
    m_Nfin = value;
    m_NfinIsSet = true;
}

bool SwaggerContribDevices::nfinIsSet() const
{
    return m_NfinIsSet;
}

void SwaggerContribDevices::unsetNfin()
{
    m_NfinIsSet = false;
}
int32_t SwaggerContribDevices::getCount() const
{
    return m_Count;
}

void SwaggerContribDevices::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool SwaggerContribDevices::countIsSet() const
{
    return m_CountIsSet;
}

void SwaggerContribDevices::unsetCount()
{
    m_CountIsSet = false;
}
}
}


