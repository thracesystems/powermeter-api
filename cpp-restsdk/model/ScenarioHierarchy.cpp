/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ScenarioHierarchy.h"

namespace powermeter {
namespace model {




ScenarioHierarchy::ScenarioHierarchy()
{
    m_PcbIsSet = false;
    m_VrIsSet = false;
    m_PackageIsSet = false;
    m_DesignIsSet = false;
}

ScenarioHierarchy::~ScenarioHierarchy()
{
}

void ScenarioHierarchy::validate()
{
    // TODO: implement validation
}

web::json::value ScenarioHierarchy::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PcbIsSet)
    {
        val[utility::conversions::to_string_t("pcb")] = ModelBase::toJson(m_Pcb);
    }
    if(m_VrIsSet)
    {
        val[utility::conversions::to_string_t("vr")] = ModelBase::toJson(m_Vr);
    }
    if(m_PackageIsSet)
    {
        val[utility::conversions::to_string_t("package")] = ModelBase::toJson(m_Package);
    }
    if(m_DesignIsSet)
    {
        val[utility::conversions::to_string_t("design")] = ModelBase::toJson(m_Design);
    }

    return val;
}

bool ScenarioHierarchy::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pcb")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pcb"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PCBInstance>> refVal_pcb;
            ok &= ModelBase::fromJson(fieldValue, refVal_pcb);
            setPcb(refVal_pcb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("vr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("vr"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<VRInstance>> refVal_vr;
            ok &= ModelBase::fromJson(fieldValue, refVal_vr);
            setVr(refVal_vr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("package")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("package"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PackageInstance>> refVal_package;
            ok &= ModelBase::fromJson(fieldValue, refVal_package);
            setPackage(refVal_package);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("design")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("design"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DesignInstance>> refVal_design;
            ok &= ModelBase::fromJson(fieldValue, refVal_design);
            setDesign(refVal_design);
        }
    }
    return ok;
}

void ScenarioHierarchy::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PcbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pcb"), m_Pcb));
    }
    if(m_VrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("vr"), m_Vr));
    }
    if(m_PackageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("package"), m_Package));
    }
    if(m_DesignIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("design"), m_Design));
    }
}

bool ScenarioHierarchy::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pcb")))
    {
        std::vector<std::shared_ptr<PCBInstance>> refVal_pcb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pcb")), refVal_pcb );
        setPcb(refVal_pcb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("vr")))
    {
        std::vector<std::shared_ptr<VRInstance>> refVal_vr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("vr")), refVal_vr );
        setVr(refVal_vr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("package")))
    {
        std::vector<std::shared_ptr<PackageInstance>> refVal_package;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("package")), refVal_package );
        setPackage(refVal_package);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("design")))
    {
        std::vector<std::shared_ptr<DesignInstance>> refVal_design;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("design")), refVal_design );
        setDesign(refVal_design);
    }
    return ok;
}

std::vector<std::shared_ptr<PCBInstance>>& ScenarioHierarchy::getPcb()
{
    return m_Pcb;
}

void ScenarioHierarchy::setPcb(const std::vector<std::shared_ptr<PCBInstance>>& value)
{
    m_Pcb = value;
    m_PcbIsSet = true;
}

bool ScenarioHierarchy::pcbIsSet() const
{
    return m_PcbIsSet;
}

void ScenarioHierarchy::unsetPcb()
{
    m_PcbIsSet = false;
}
std::vector<std::shared_ptr<VRInstance>>& ScenarioHierarchy::getVr()
{
    return m_Vr;
}

void ScenarioHierarchy::setVr(const std::vector<std::shared_ptr<VRInstance>>& value)
{
    m_Vr = value;
    m_VrIsSet = true;
}

bool ScenarioHierarchy::vrIsSet() const
{
    return m_VrIsSet;
}

void ScenarioHierarchy::unsetVr()
{
    m_VrIsSet = false;
}
std::vector<std::shared_ptr<PackageInstance>>& ScenarioHierarchy::getPackage()
{
    return m_Package;
}

void ScenarioHierarchy::setPackage(const std::vector<std::shared_ptr<PackageInstance>>& value)
{
    m_Package = value;
    m_PackageIsSet = true;
}

bool ScenarioHierarchy::packageIsSet() const
{
    return m_PackageIsSet;
}

void ScenarioHierarchy::unsetPackage()
{
    m_PackageIsSet = false;
}
std::vector<std::shared_ptr<DesignInstance>>& ScenarioHierarchy::getDesign()
{
    return m_Design;
}

void ScenarioHierarchy::setDesign(const std::vector<std::shared_ptr<DesignInstance>>& value)
{
    m_Design = value;
    m_DesignIsSet = true;
}

bool ScenarioHierarchy::designIsSet() const
{
    return m_DesignIsSet;
}

void ScenarioHierarchy::unsetDesign()
{
    m_DesignIsSet = false;
}
}
}


