/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ScenarioMaster.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_ScenarioMaster_H_
#define POWERMETER_MODEL_ScenarioMaster_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  ScenarioMaster
    : public ModelBase
{
public:
    ScenarioMaster();
    virtual ~ScenarioMaster();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ScenarioMaster members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();

    void setTitle(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescr() const;
    bool descrIsSet() const;
    void unsetDescr();

    void setDescr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLatestCommit() const;
    bool latestCommitIsSet() const;
    void unsetLatest_commit();

    void setLatestCommit(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCurrentVersion() const;
    bool currentVersionIsSet() const;
    void unsetCurrent_version();

    void setCurrentVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getAveragePower() const;
    bool averagePowerIsSet() const;
    void unsetAverage_power();

    void setAveragePower(double value);

    /// <summary>
    /// 
    /// </summary>
    double getTotalEnergy() const;
    bool totalEnergyIsSet() const;
    void unsetTotal_energy();

    void setTotalEnergy(double value);

    /// <summary>
    /// 
    /// </summary>
    double getConfidence() const;
    bool confidenceIsSet() const;
    void unsetConfidence();

    void setConfidence(double value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
    utility::string_t m_Descr;
    bool m_DescrIsSet;
    int32_t m_Latest_commit;
    bool m_Latest_commitIsSet;
    int32_t m_Current_version;
    bool m_Current_versionIsSet;
    double m_Average_power;
    bool m_Average_powerIsSet;
    double m_Total_energy;
    bool m_Total_energyIsSet;
    double m_Confidence;
    bool m_ConfidenceIsSet;
};


}
}

#endif /* POWERMETER_MODEL_ScenarioMaster_H_ */
