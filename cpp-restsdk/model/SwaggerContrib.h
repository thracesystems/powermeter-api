/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SwaggerContrib.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_SwaggerContrib_H_
#define POWERMETER_MODEL_SwaggerContrib_H_


#include "../ModelBase.h"

#include "SwaggerContribVoltages.h"
#include "SwaggerContribCurrents.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  SwaggerContrib
    : public ModelBase
{
public:
    SwaggerContrib();
    virtual ~SwaggerContrib();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SwaggerContrib members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLength() const;
    bool lengthIsSet() const;
    void unsetLength();

    void setLength(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getWidth() const;
    bool widthIsSet() const;
    void unsetWidth();

    void setWidth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNfin() const;
    bool nfinIsSet() const;
    void unsetNfin();

    void setNfin(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SwaggerContribVoltages>>& getVoltages();
    bool voltagesIsSet() const;
    void unsetVoltages();

    void setVoltages(const std::vector<std::shared_ptr<SwaggerContribVoltages>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SwaggerContribCurrents>>& getCurrents();
    bool currentsIsSet() const;
    void unsetCurrents();

    void setCurrents(const std::vector<std::shared_ptr<SwaggerContribCurrents>>& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Length;
    bool m_LengthIsSet;
    int32_t m_Width;
    bool m_WidthIsSet;
    int32_t m_Nfin;
    bool m_NfinIsSet;
    std::vector<std::shared_ptr<SwaggerContribVoltages>> m_Voltages;
    bool m_VoltagesIsSet;
    std::vector<std::shared_ptr<SwaggerContribCurrents>> m_Currents;
    bool m_CurrentsIsSet;
};


}
}

#endif /* POWERMETER_MODEL_SwaggerContrib_H_ */
