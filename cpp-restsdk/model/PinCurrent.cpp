/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinCurrent.h"

namespace powermeter {
namespace model {




PinCurrent::PinCurrent()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Current = 0.0;
    m_CurrentIsSet = false;
}

PinCurrent::~PinCurrent()
{
}

void PinCurrent::validate()
{
    // TODO: implement validation
}

web::json::value PinCurrent::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_CurrentIsSet)
    {
        val[utility::conversions::to_string_t("current")] = ModelBase::toJson(m_Current);
    }

    return val;
}

bool PinCurrent::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current"));
        if(!fieldValue.is_null())
        {
            double refVal_current;
            ok &= ModelBase::fromJson(fieldValue, refVal_current);
            setCurrent(refVal_current);
        }
    }
    return ok;
}

void PinCurrent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_CurrentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current"), m_Current));
    }
}

bool PinCurrent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current")))
    {
        double refVal_current;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current")), refVal_current );
        setCurrent(refVal_current);
    }
    return ok;
}

utility::string_t PinCurrent::getName() const
{
    return m_Name;
}

void PinCurrent::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool PinCurrent::nameIsSet() const
{
    return m_NameIsSet;
}

void PinCurrent::unsetName()
{
    m_NameIsSet = false;
}
double PinCurrent::getCurrent() const
{
    return m_Current;
}

void PinCurrent::setCurrent(double value)
{
    m_Current = value;
    m_CurrentIsSet = true;
}

bool PinCurrent::currentIsSet() const
{
    return m_CurrentIsSet;
}

void PinCurrent::unsetCurrent()
{
    m_CurrentIsSet = false;
}
}
}


