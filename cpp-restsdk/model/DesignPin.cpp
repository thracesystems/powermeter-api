/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignPin.h"

namespace powermeter {
namespace model {




DesignPin::DesignPin()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Direction = utility::conversions::to_string_t("");
    m_DirectionIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Bus = utility::conversions::to_string_t("");
    m_BusIsSet = false;
    m_Bus_index = 0;
    m_Bus_indexIsSet = false;
    m_Bundle = utility::conversions::to_string_t("");
    m_BundleIsSet = false;
    m_Bundle_index = 0;
    m_Bundle_indexIsSet = false;
    m_Pin_capsIsSet = false;
    m_Power_count = 0;
    m_Power_countIsSet = false;
    m_Function = utility::conversions::to_string_t("");
    m_FunctionIsSet = false;
    m_Internal_node = utility::conversions::to_string_t("");
    m_Internal_nodeIsSet = false;
}

DesignPin::~DesignPin()
{
}

void DesignPin::validate()
{
    // TODO: implement validation
}

web::json::value DesignPin::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DirectionIsSet)
    {
        val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_BusIsSet)
    {
        val[utility::conversions::to_string_t("bus")] = ModelBase::toJson(m_Bus);
    }
    if(m_Bus_indexIsSet)
    {
        val[utility::conversions::to_string_t("bus_index")] = ModelBase::toJson(m_Bus_index);
    }
    if(m_BundleIsSet)
    {
        val[utility::conversions::to_string_t("bundle")] = ModelBase::toJson(m_Bundle);
    }
    if(m_Bundle_indexIsSet)
    {
        val[utility::conversions::to_string_t("bundle_index")] = ModelBase::toJson(m_Bundle_index);
    }
    if(m_Pin_capsIsSet)
    {
        val[utility::conversions::to_string_t("pin_caps")] = ModelBase::toJson(m_Pin_caps);
    }
    if(m_Power_countIsSet)
    {
        val[utility::conversions::to_string_t("power_count")] = ModelBase::toJson(m_Power_count);
    }
    if(m_FunctionIsSet)
    {
        val[utility::conversions::to_string_t("function")] = ModelBase::toJson(m_Function);
    }
    if(m_Internal_nodeIsSet)
    {
        val[utility::conversions::to_string_t("internal_node")] = ModelBase::toJson(m_Internal_node);
    }

    return val;
}

bool DesignPin::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("direction"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_direction;
            ok &= ModelBase::fromJson(fieldValue, refVal_direction);
            setDirection(refVal_direction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bus")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bus"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bus;
            ok &= ModelBase::fromJson(fieldValue, refVal_bus);
            setBus(refVal_bus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bus_index")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bus_index"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bus_index;
            ok &= ModelBase::fromJson(fieldValue, refVal_bus_index);
            setBusIndex(refVal_bus_index);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bundle")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bundle"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bundle;
            ok &= ModelBase::fromJson(fieldValue, refVal_bundle);
            setBundle(refVal_bundle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bundle_index")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bundle_index"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bundle_index;
            ok &= ModelBase::fromJson(fieldValue, refVal_bundle_index);
            setBundleIndex(refVal_bundle_index);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pin_caps")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pin_caps"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PinCap>> refVal_pin_caps;
            ok &= ModelBase::fromJson(fieldValue, refVal_pin_caps);
            setPinCaps(refVal_pin_caps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("power_count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("power_count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_power_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_power_count);
            setPowerCount(refVal_power_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("function")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("function"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_function;
            ok &= ModelBase::fromJson(fieldValue, refVal_function);
            setFunction(refVal_function);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("internal_node")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("internal_node"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_internal_node;
            ok &= ModelBase::fromJson(fieldValue, refVal_internal_node);
            setInternalNode(refVal_internal_node);
        }
    }
    return ok;
}

void DesignPin::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_BusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bus"), m_Bus));
    }
    if(m_Bus_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bus_index"), m_Bus_index));
    }
    if(m_BundleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bundle"), m_Bundle));
    }
    if(m_Bundle_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bundle_index"), m_Bundle_index));
    }
    if(m_Pin_capsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pin_caps"), m_Pin_caps));
    }
    if(m_Power_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("power_count"), m_Power_count));
    }
    if(m_FunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("function"), m_Function));
    }
    if(m_Internal_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("internal_node"), m_Internal_node));
    }
}

bool DesignPin::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direction")))
    {
        utility::string_t refVal_direction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction")), refVal_direction );
        setDirection(refVal_direction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bus")))
    {
        utility::string_t refVal_bus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bus")), refVal_bus );
        setBus(refVal_bus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bus_index")))
    {
        int32_t refVal_bus_index;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bus_index")), refVal_bus_index );
        setBusIndex(refVal_bus_index);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bundle")))
    {
        utility::string_t refVal_bundle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bundle")), refVal_bundle );
        setBundle(refVal_bundle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bundle_index")))
    {
        int32_t refVal_bundle_index;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bundle_index")), refVal_bundle_index );
        setBundleIndex(refVal_bundle_index);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pin_caps")))
    {
        std::vector<std::shared_ptr<PinCap>> refVal_pin_caps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pin_caps")), refVal_pin_caps );
        setPinCaps(refVal_pin_caps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("power_count")))
    {
        int32_t refVal_power_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("power_count")), refVal_power_count );
        setPowerCount(refVal_power_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("function")))
    {
        utility::string_t refVal_function;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("function")), refVal_function );
        setFunction(refVal_function);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("internal_node")))
    {
        utility::string_t refVal_internal_node;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("internal_node")), refVal_internal_node );
        setInternalNode(refVal_internal_node);
    }
    return ok;
}

int32_t DesignPin::getId() const
{
    return m_Id;
}

void DesignPin::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DesignPin::idIsSet() const
{
    return m_IdIsSet;
}

void DesignPin::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DesignPin::getName() const
{
    return m_Name;
}

void DesignPin::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DesignPin::nameIsSet() const
{
    return m_NameIsSet;
}

void DesignPin::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DesignPin::getDirection() const
{
    return m_Direction;
}

void DesignPin::setDirection(const utility::string_t& value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}

bool DesignPin::directionIsSet() const
{
    return m_DirectionIsSet;
}

void DesignPin::unsetDirection()
{
    m_DirectionIsSet = false;
}
utility::string_t DesignPin::getType() const
{
    return m_Type;
}

void DesignPin::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool DesignPin::typeIsSet() const
{
    return m_TypeIsSet;
}

void DesignPin::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t DesignPin::getBus() const
{
    return m_Bus;
}

void DesignPin::setBus(const utility::string_t& value)
{
    m_Bus = value;
    m_BusIsSet = true;
}

bool DesignPin::busIsSet() const
{
    return m_BusIsSet;
}

void DesignPin::unsetBus()
{
    m_BusIsSet = false;
}
int32_t DesignPin::getBusIndex() const
{
    return m_Bus_index;
}

void DesignPin::setBusIndex(int32_t value)
{
    m_Bus_index = value;
    m_Bus_indexIsSet = true;
}

bool DesignPin::busIndexIsSet() const
{
    return m_Bus_indexIsSet;
}

void DesignPin::unsetBus_index()
{
    m_Bus_indexIsSet = false;
}
utility::string_t DesignPin::getBundle() const
{
    return m_Bundle;
}

void DesignPin::setBundle(const utility::string_t& value)
{
    m_Bundle = value;
    m_BundleIsSet = true;
}

bool DesignPin::bundleIsSet() const
{
    return m_BundleIsSet;
}

void DesignPin::unsetBundle()
{
    m_BundleIsSet = false;
}
int32_t DesignPin::getBundleIndex() const
{
    return m_Bundle_index;
}

void DesignPin::setBundleIndex(int32_t value)
{
    m_Bundle_index = value;
    m_Bundle_indexIsSet = true;
}

bool DesignPin::bundleIndexIsSet() const
{
    return m_Bundle_indexIsSet;
}

void DesignPin::unsetBundle_index()
{
    m_Bundle_indexIsSet = false;
}
std::vector<std::shared_ptr<PinCap>>& DesignPin::getPinCaps()
{
    return m_Pin_caps;
}

void DesignPin::setPinCaps(const std::vector<std::shared_ptr<PinCap>>& value)
{
    m_Pin_caps = value;
    m_Pin_capsIsSet = true;
}

bool DesignPin::pinCapsIsSet() const
{
    return m_Pin_capsIsSet;
}

void DesignPin::unsetPin_caps()
{
    m_Pin_capsIsSet = false;
}
int32_t DesignPin::getPowerCount() const
{
    return m_Power_count;
}

void DesignPin::setPowerCount(int32_t value)
{
    m_Power_count = value;
    m_Power_countIsSet = true;
}

bool DesignPin::powerCountIsSet() const
{
    return m_Power_countIsSet;
}

void DesignPin::unsetPower_count()
{
    m_Power_countIsSet = false;
}
utility::string_t DesignPin::getFunction() const
{
    return m_Function;
}

void DesignPin::setFunction(const utility::string_t& value)
{
    m_Function = value;
    m_FunctionIsSet = true;
}

bool DesignPin::functionIsSet() const
{
    return m_FunctionIsSet;
}

void DesignPin::unsetFunction()
{
    m_FunctionIsSet = false;
}
utility::string_t DesignPin::getInternalNode() const
{
    return m_Internal_node;
}

void DesignPin::setInternalNode(const utility::string_t& value)
{
    m_Internal_node = value;
    m_Internal_nodeIsSet = true;
}

bool DesignPin::internalNodeIsSet() const
{
    return m_Internal_nodeIsSet;
}

void DesignPin::unsetInternal_node()
{
    m_Internal_nodeIsSet = false;
}
}
}


