/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FanoutLength.h"

namespace powermeter {
namespace model {




FanoutLength::FanoutLength()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Fanout = 0;
    m_FanoutIsSet = false;
    m_Length = 0.0;
    m_LengthIsSet = false;
}

FanoutLength::~FanoutLength()
{
}

void FanoutLength::validate()
{
    // TODO: implement validation
}

web::json::value FanoutLength::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_FanoutIsSet)
    {
        val[utility::conversions::to_string_t("fanout")] = ModelBase::toJson(m_Fanout);
    }
    if(m_LengthIsSet)
    {
        val[utility::conversions::to_string_t("length")] = ModelBase::toJson(m_Length);
    }

    return val;
}

bool FanoutLength::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fanout")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fanout"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_fanout;
            ok &= ModelBase::fromJson(fieldValue, refVal_fanout);
            setFanout(refVal_fanout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("length")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("length"));
        if(!fieldValue.is_null())
        {
            double refVal_length;
            ok &= ModelBase::fromJson(fieldValue, refVal_length);
            setLength(refVal_length);
        }
    }
    return ok;
}

void FanoutLength::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_FanoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fanout"), m_Fanout));
    }
    if(m_LengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("length"), m_Length));
    }
}

bool FanoutLength::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fanout")))
    {
        int32_t refVal_fanout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fanout")), refVal_fanout );
        setFanout(refVal_fanout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("length")))
    {
        double refVal_length;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("length")), refVal_length );
        setLength(refVal_length);
    }
    return ok;
}

int32_t FanoutLength::getId() const
{
    return m_Id;
}

void FanoutLength::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FanoutLength::idIsSet() const
{
    return m_IdIsSet;
}

void FanoutLength::unsetId()
{
    m_IdIsSet = false;
}
int32_t FanoutLength::getFanout() const
{
    return m_Fanout;
}

void FanoutLength::setFanout(int32_t value)
{
    m_Fanout = value;
    m_FanoutIsSet = true;
}

bool FanoutLength::fanoutIsSet() const
{
    return m_FanoutIsSet;
}

void FanoutLength::unsetFanout()
{
    m_FanoutIsSet = false;
}
double FanoutLength::getLength() const
{
    return m_Length;
}

void FanoutLength::setLength(double value)
{
    m_Length = value;
    m_LengthIsSet = true;
}

bool FanoutLength::lengthIsSet() const
{
    return m_LengthIsSet;
}

void FanoutLength::unsetLength()
{
    m_LengthIsSet = false;
}
}
}


