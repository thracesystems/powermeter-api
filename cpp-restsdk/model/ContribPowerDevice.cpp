/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ContribPowerDevice.h"

namespace powermeter {
namespace model {




ContribPowerDevice::ContribPowerDevice()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Device = 0;
    m_DeviceIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_D_pin = utility::conversions::to_string_t("");
    m_D_pinIsSet = false;
    m_G_pin = utility::conversions::to_string_t("");
    m_G_pinIsSet = false;
    m_S_pin = utility::conversions::to_string_t("");
    m_S_pinIsSet = false;
    m_B_pin = utility::conversions::to_string_t("");
    m_B_pinIsSet = false;
    m_Device_name = utility::conversions::to_string_t("");
    m_Device_nameIsSet = false;
    m_Device_width = 0;
    m_Device_widthIsSet = false;
    m_Device_length = 0;
    m_Device_lengthIsSet = false;
    m_Device_nfin = 0;
    m_Device_nfinIsSet = false;
}

ContribPowerDevice::~ContribPowerDevice()
{
}

void ContribPowerDevice::validate()
{
    // TODO: implement validation
}

web::json::value ContribPowerDevice::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_DeviceIsSet)
    {
        val[utility::conversions::to_string_t("device")] = ModelBase::toJson(m_Device);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    }
    if(m_D_pinIsSet)
    {
        val[utility::conversions::to_string_t("d_pin")] = ModelBase::toJson(m_D_pin);
    }
    if(m_G_pinIsSet)
    {
        val[utility::conversions::to_string_t("g_pin")] = ModelBase::toJson(m_G_pin);
    }
    if(m_S_pinIsSet)
    {
        val[utility::conversions::to_string_t("s_pin")] = ModelBase::toJson(m_S_pin);
    }
    if(m_B_pinIsSet)
    {
        val[utility::conversions::to_string_t("b_pin")] = ModelBase::toJson(m_B_pin);
    }
    if(m_Device_nameIsSet)
    {
        val[utility::conversions::to_string_t("device_name")] = ModelBase::toJson(m_Device_name);
    }
    if(m_Device_widthIsSet)
    {
        val[utility::conversions::to_string_t("device_width")] = ModelBase::toJson(m_Device_width);
    }
    if(m_Device_lengthIsSet)
    {
        val[utility::conversions::to_string_t("device_length")] = ModelBase::toJson(m_Device_length);
    }
    if(m_Device_nfinIsSet)
    {
        val[utility::conversions::to_string_t("device_nfin")] = ModelBase::toJson(m_Device_nfin);
    }

    return val;
}

bool ContribPowerDevice::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_device;
            ok &= ModelBase::fromJson(fieldValue, refVal_device);
            setDevice(refVal_device);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("d_pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("d_pin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_d_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_d_pin);
            setDPin(refVal_d_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("g_pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("g_pin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_g_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_g_pin);
            setGPin(refVal_g_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("s_pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("s_pin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_s_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_s_pin);
            setSPin(refVal_s_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("b_pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("b_pin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_b_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_b_pin);
            setBPin(refVal_b_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_device_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_device_name);
            setDeviceName(refVal_device_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device_width")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device_width"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_device_width;
            ok &= ModelBase::fromJson(fieldValue, refVal_device_width);
            setDeviceWidth(refVal_device_width);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device_length")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device_length"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_device_length;
            ok &= ModelBase::fromJson(fieldValue, refVal_device_length);
            setDeviceLength(refVal_device_length);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device_nfin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device_nfin"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_device_nfin;
            ok &= ModelBase::fromJson(fieldValue, refVal_device_nfin);
            setDeviceNfin(refVal_device_nfin);
        }
    }
    return ok;
}

void ContribPowerDevice::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_DeviceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device"), m_Device));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    }
    if(m_D_pinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("d_pin"), m_D_pin));
    }
    if(m_G_pinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("g_pin"), m_G_pin));
    }
    if(m_S_pinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("s_pin"), m_S_pin));
    }
    if(m_B_pinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("b_pin"), m_B_pin));
    }
    if(m_Device_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device_name"), m_Device_name));
    }
    if(m_Device_widthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device_width"), m_Device_width));
    }
    if(m_Device_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device_length"), m_Device_length));
    }
    if(m_Device_nfinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device_nfin"), m_Device_nfin));
    }
}

bool ContribPowerDevice::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device")))
    {
        int32_t refVal_device;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device")), refVal_device );
        setDevice(refVal_device);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        int32_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("d_pin")))
    {
        utility::string_t refVal_d_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("d_pin")), refVal_d_pin );
        setDPin(refVal_d_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("g_pin")))
    {
        utility::string_t refVal_g_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("g_pin")), refVal_g_pin );
        setGPin(refVal_g_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("s_pin")))
    {
        utility::string_t refVal_s_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("s_pin")), refVal_s_pin );
        setSPin(refVal_s_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("b_pin")))
    {
        utility::string_t refVal_b_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("b_pin")), refVal_b_pin );
        setBPin(refVal_b_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device_name")))
    {
        utility::string_t refVal_device_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device_name")), refVal_device_name );
        setDeviceName(refVal_device_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device_width")))
    {
        int32_t refVal_device_width;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device_width")), refVal_device_width );
        setDeviceWidth(refVal_device_width);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device_length")))
    {
        int32_t refVal_device_length;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device_length")), refVal_device_length );
        setDeviceLength(refVal_device_length);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device_nfin")))
    {
        int32_t refVal_device_nfin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device_nfin")), refVal_device_nfin );
        setDeviceNfin(refVal_device_nfin);
    }
    return ok;
}

utility::string_t ContribPowerDevice::getType() const
{
    return m_Type;
}

void ContribPowerDevice::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ContribPowerDevice::typeIsSet() const
{
    return m_TypeIsSet;
}

void ContribPowerDevice::unsetType()
{
    m_TypeIsSet = false;
}
int32_t ContribPowerDevice::getDevice() const
{
    return m_Device;
}

void ContribPowerDevice::setDevice(int32_t value)
{
    m_Device = value;
    m_DeviceIsSet = true;
}

bool ContribPowerDevice::deviceIsSet() const
{
    return m_DeviceIsSet;
}

void ContribPowerDevice::unsetDevice()
{
    m_DeviceIsSet = false;
}
int32_t ContribPowerDevice::getCount() const
{
    return m_Count;
}

void ContribPowerDevice::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool ContribPowerDevice::countIsSet() const
{
    return m_CountIsSet;
}

void ContribPowerDevice::unsetCount()
{
    m_CountIsSet = false;
}
utility::string_t ContribPowerDevice::getDPin() const
{
    return m_D_pin;
}

void ContribPowerDevice::setDPin(const utility::string_t& value)
{
    m_D_pin = value;
    m_D_pinIsSet = true;
}

bool ContribPowerDevice::dPinIsSet() const
{
    return m_D_pinIsSet;
}

void ContribPowerDevice::unsetD_pin()
{
    m_D_pinIsSet = false;
}
utility::string_t ContribPowerDevice::getGPin() const
{
    return m_G_pin;
}

void ContribPowerDevice::setGPin(const utility::string_t& value)
{
    m_G_pin = value;
    m_G_pinIsSet = true;
}

bool ContribPowerDevice::gPinIsSet() const
{
    return m_G_pinIsSet;
}

void ContribPowerDevice::unsetG_pin()
{
    m_G_pinIsSet = false;
}
utility::string_t ContribPowerDevice::getSPin() const
{
    return m_S_pin;
}

void ContribPowerDevice::setSPin(const utility::string_t& value)
{
    m_S_pin = value;
    m_S_pinIsSet = true;
}

bool ContribPowerDevice::sPinIsSet() const
{
    return m_S_pinIsSet;
}

void ContribPowerDevice::unsetS_pin()
{
    m_S_pinIsSet = false;
}
utility::string_t ContribPowerDevice::getBPin() const
{
    return m_B_pin;
}

void ContribPowerDevice::setBPin(const utility::string_t& value)
{
    m_B_pin = value;
    m_B_pinIsSet = true;
}

bool ContribPowerDevice::bPinIsSet() const
{
    return m_B_pinIsSet;
}

void ContribPowerDevice::unsetB_pin()
{
    m_B_pinIsSet = false;
}
utility::string_t ContribPowerDevice::getDeviceName() const
{
    return m_Device_name;
}

void ContribPowerDevice::setDeviceName(const utility::string_t& value)
{
    m_Device_name = value;
    m_Device_nameIsSet = true;
}

bool ContribPowerDevice::deviceNameIsSet() const
{
    return m_Device_nameIsSet;
}

void ContribPowerDevice::unsetDevice_name()
{
    m_Device_nameIsSet = false;
}
int32_t ContribPowerDevice::getDeviceWidth() const
{
    return m_Device_width;
}

void ContribPowerDevice::setDeviceWidth(int32_t value)
{
    m_Device_width = value;
    m_Device_widthIsSet = true;
}

bool ContribPowerDevice::deviceWidthIsSet() const
{
    return m_Device_widthIsSet;
}

void ContribPowerDevice::unsetDevice_width()
{
    m_Device_widthIsSet = false;
}
int32_t ContribPowerDevice::getDeviceLength() const
{
    return m_Device_length;
}

void ContribPowerDevice::setDeviceLength(int32_t value)
{
    m_Device_length = value;
    m_Device_lengthIsSet = true;
}

bool ContribPowerDevice::deviceLengthIsSet() const
{
    return m_Device_lengthIsSet;
}

void ContribPowerDevice::unsetDevice_length()
{
    m_Device_lengthIsSet = false;
}
int32_t ContribPowerDevice::getDeviceNfin() const
{
    return m_Device_nfin;
}

void ContribPowerDevice::setDeviceNfin(int32_t value)
{
    m_Device_nfin = value;
    m_Device_nfinIsSet = true;
}

bool ContribPowerDevice::deviceNfinIsSet() const
{
    return m_Device_nfinIsSet;
}

void ContribPowerDevice::unsetDevice_nfin()
{
    m_Device_nfinIsSet = false;
}
}
}


