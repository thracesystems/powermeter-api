/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ScenarioHierarchy.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_ScenarioHierarchy_H_
#define POWERMETER_MODEL_ScenarioHierarchy_H_


#include "../ModelBase.h"

#include "VRInstance.h"
#include "PackageInstance.h"
#include "DesignInstance.h"
#include "PCBInstance.h"
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  ScenarioHierarchy
    : public ModelBase
{
public:
    ScenarioHierarchy();
    virtual ~ScenarioHierarchy();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ScenarioHierarchy members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PCBInstance>>& getPcb();
    bool pcbIsSet() const;
    void unsetPcb();

    void setPcb(const std::vector<std::shared_ptr<PCBInstance>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<VRInstance>>& getVr();
    bool vrIsSet() const;
    void unsetVr();

    void setVr(const std::vector<std::shared_ptr<VRInstance>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<PackageInstance>>& getPackage();
    bool packageIsSet() const;
    void unsetPackage();

    void setPackage(const std::vector<std::shared_ptr<PackageInstance>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DesignInstance>>& getDesign();
    bool designIsSet() const;
    void unsetDesign();

    void setDesign(const std::vector<std::shared_ptr<DesignInstance>>& value);


protected:
    std::vector<std::shared_ptr<PCBInstance>> m_Pcb;
    bool m_PcbIsSet;
    std::vector<std::shared_ptr<VRInstance>> m_Vr;
    bool m_VrIsSet;
    std::vector<std::shared_ptr<PackageInstance>> m_Package;
    bool m_PackageIsSet;
    std::vector<std::shared_ptr<DesignInstance>> m_Design;
    bool m_DesignIsSet;
};


}
}

#endif /* POWERMETER_MODEL_ScenarioHierarchy_H_ */
