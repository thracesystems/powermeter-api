/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Hier.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_Hier_H_
#define POWERMETER_MODEL_Hier_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  Hier
    : public ModelBase
{
public:
    Hier();
    virtual ~Hier();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Hier members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isInstance() const;
    bool instanceIsSet() const;
    void unsetInstance();

    void setInstance(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isGroup() const;
    bool groupIsSet() const;
    void unsetGroup();

    void setGroup(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getChildren();
    bool childrenIsSet() const;
    void unsetChildren();

    void setChildren(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsOpen() const;
    bool isOpenIsSet() const;
    void unsetIs_open();

    void setIsOpen(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getColor() const;
    bool colorIsSet() const;
    void unsetColor();

    void setColor(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getParent() const;
    bool parentIsSet() const;
    void unsetParent();

    void setParent(int32_t value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_Instance;
    bool m_InstanceIsSet;
    bool m_Group;
    bool m_GroupIsSet;
    std::vector<utility::string_t> m_Children;
    bool m_ChildrenIsSet;
    bool m_Is_open;
    bool m_Is_openIsSet;
    utility::string_t m_Color;
    bool m_ColorIsSet;
    int32_t m_Parent;
    bool m_ParentIsSet;
};


}
}

#endif /* POWERMETER_MODEL_Hier_H_ */
