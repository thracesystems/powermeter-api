/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ContribPower.h"

namespace powermeter {
namespace model {




ContribPower::ContribPower()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_When = utility::conversions::to_string_t("");
    m_WhenIsSet = false;
    m_ContributorsIsSet = false;
    m_ModesIsSet = false;
}

ContribPower::~ContribPower()
{
}

void ContribPower::validate()
{
    // TODO: implement validation
}

web::json::value ContribPower::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_WhenIsSet)
    {
        val[utility::conversions::to_string_t("when")] = ModelBase::toJson(m_When);
    }
    if(m_ContributorsIsSet)
    {
        val[utility::conversions::to_string_t("contributors")] = ModelBase::toJson(m_Contributors);
    }
    if(m_ModesIsSet)
    {
        val[utility::conversions::to_string_t("modes")] = ModelBase::toJson(m_Modes);
    }

    return val;
}

bool ContribPower::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("when")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("when"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_when;
            ok &= ModelBase::fromJson(fieldValue, refVal_when);
            setWhen(refVal_when);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contributors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("contributors"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ContribPowerDevice>> refVal_contributors;
            ok &= ModelBase::fromJson(fieldValue, refVal_contributors);
            setContributors(refVal_contributors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modes"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_modes;
            ok &= ModelBase::fromJson(fieldValue, refVal_modes);
            setModes(refVal_modes);
        }
    }
    return ok;
}

void ContribPower::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_WhenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("when"), m_When));
    }
    if(m_ContributorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contributors"), m_Contributors));
    }
    if(m_ModesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modes"), m_Modes));
    }
}

bool ContribPower::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("when")))
    {
        utility::string_t refVal_when;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("when")), refVal_when );
        setWhen(refVal_when);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contributors")))
    {
        std::vector<std::shared_ptr<ContribPowerDevice>> refVal_contributors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("contributors")), refVal_contributors );
        setContributors(refVal_contributors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modes")))
    {
        std::vector<int32_t> refVal_modes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modes")), refVal_modes );
        setModes(refVal_modes);
    }
    return ok;
}

int32_t ContribPower::getId() const
{
    return m_Id;
}

void ContribPower::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ContribPower::idIsSet() const
{
    return m_IdIsSet;
}

void ContribPower::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ContribPower::getWhen() const
{
    return m_When;
}

void ContribPower::setWhen(const utility::string_t& value)
{
    m_When = value;
    m_WhenIsSet = true;
}

bool ContribPower::whenIsSet() const
{
    return m_WhenIsSet;
}

void ContribPower::unsetWhen()
{
    m_WhenIsSet = false;
}
std::vector<std::shared_ptr<ContribPowerDevice>>& ContribPower::getContributors()
{
    return m_Contributors;
}

void ContribPower::setContributors(const std::vector<std::shared_ptr<ContribPowerDevice>>& value)
{
    m_Contributors = value;
    m_ContributorsIsSet = true;
}

bool ContribPower::contributorsIsSet() const
{
    return m_ContributorsIsSet;
}

void ContribPower::unsetContributors()
{
    m_ContributorsIsSet = false;
}
std::vector<int32_t>& ContribPower::getModes()
{
    return m_Modes;
}

void ContribPower::setModes(std::vector<int32_t> value)
{
    m_Modes = value;
    m_ModesIsSet = true;
}

bool ContribPower::modesIsSet() const
{
    return m_ModesIsSet;
}

void ContribPower::unsetModes()
{
    m_ModesIsSet = false;
}
}
}


