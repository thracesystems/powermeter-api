/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignSensor.h"

namespace powermeter {
namespace model {




DesignSensor::DesignSensor()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_x = 0.0;
    m_xIsSet = false;
    m_y = 0.0;
    m_yIsSet = false;
}

DesignSensor::~DesignSensor()
{
}

void DesignSensor::validate()
{
    // TODO: implement validation
}

web::json::value DesignSensor::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_xIsSet)
    {
        val[utility::conversions::to_string_t("x")] = ModelBase::toJson(m_x);
    }
    if(m_yIsSet)
    {
        val[utility::conversions::to_string_t("y")] = ModelBase::toJson(m_y);
    }

    return val;
}

bool DesignSensor::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("x")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("x"));
        if(!fieldValue.is_null())
        {
            double refVal_x;
            ok &= ModelBase::fromJson(fieldValue, refVal_x);
            setX(refVal_x);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("y")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("y"));
        if(!fieldValue.is_null())
        {
            double refVal_y;
            ok &= ModelBase::fromJson(fieldValue, refVal_y);
            setY(refVal_y);
        }
    }
    return ok;
}

void DesignSensor::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("x"), m_x));
    }
    if(m_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("y"), m_y));
    }
}

bool DesignSensor::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("x")))
    {
        double refVal_x;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("x")), refVal_x );
        setX(refVal_x);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("y")))
    {
        double refVal_y;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("y")), refVal_y );
        setY(refVal_y);
    }
    return ok;
}

int32_t DesignSensor::getId() const
{
    return m_Id;
}

void DesignSensor::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DesignSensor::idIsSet() const
{
    return m_IdIsSet;
}

void DesignSensor::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DesignSensor::getName() const
{
    return m_Name;
}

void DesignSensor::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DesignSensor::nameIsSet() const
{
    return m_NameIsSet;
}

void DesignSensor::unsetName()
{
    m_NameIsSet = false;
}
double DesignSensor::getX() const
{
    return m_x;
}

void DesignSensor::setX(double value)
{
    m_x = value;
    m_xIsSet = true;
}

bool DesignSensor::XIsSet() const
{
    return m_xIsSet;
}

void DesignSensor::unsetx()
{
    m_xIsSet = false;
}
double DesignSensor::getY() const
{
    return m_y;
}

void DesignSensor::setY(double value)
{
    m_y = value;
    m_yIsSet = true;
}

bool DesignSensor::YIsSet() const
{
    return m_yIsSet;
}

void DesignSensor::unsety()
{
    m_yIsSet = false;
}
}
}


