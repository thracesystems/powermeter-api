/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComputePower_1.h"

namespace powermeter {
namespace model {




ComputePower_1::ComputePower_1()
{
    m_WaveformIsSet = false;
    m_Equation = utility::conversions::to_string_t("");
    m_EquationIsSet = false;
    m_ParamsIsSet = false;
    m_ConfigIsSet = false;
}

ComputePower_1::~ComputePower_1()
{
}

void ComputePower_1::validate()
{
    // TODO: implement validation
}

web::json::value ComputePower_1::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WaveformIsSet)
    {
        val[utility::conversions::to_string_t("waveform")] = ModelBase::toJson(m_Waveform);
    }
    if(m_EquationIsSet)
    {
        val[utility::conversions::to_string_t("equation")] = ModelBase::toJson(m_Equation);
    }
    if(m_ParamsIsSet)
    {
        val[utility::conversions::to_string_t("params")] = ModelBase::toJson(m_Params);
    }
    if(m_ConfigIsSet)
    {
        val[utility::conversions::to_string_t("config")] = ModelBase::toJson(m_Config);
    }

    return val;
}

bool ComputePower_1::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("waveform")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("waveform"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ComputePowerWaveform>> refVal_waveform;
            ok &= ModelBase::fromJson(fieldValue, refVal_waveform);
            setWaveform(refVal_waveform);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("equation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("equation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_equation;
            ok &= ModelBase::fromJson(fieldValue, refVal_equation);
            setEquation(refVal_equation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("params")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("params"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_params;
            ok &= ModelBase::fromJson(fieldValue, refVal_params);
            setParams(refVal_params);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("config")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("config"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ComputePowerConfig> refVal_config;
            ok &= ModelBase::fromJson(fieldValue, refVal_config);
            setConfig(refVal_config);
        }
    }
    return ok;
}

void ComputePower_1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_WaveformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("waveform"), m_Waveform));
    }
    if(m_EquationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("equation"), m_Equation));
    }
    if(m_ParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("params"), m_Params));
    }
    if(m_ConfigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("config"), m_Config));
    }
}

bool ComputePower_1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("waveform")))
    {
        std::vector<std::shared_ptr<ComputePowerWaveform>> refVal_waveform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("waveform")), refVal_waveform );
        setWaveform(refVal_waveform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("equation")))
    {
        utility::string_t refVal_equation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("equation")), refVal_equation );
        setEquation(refVal_equation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("params")))
    {
        std::shared_ptr<Object> refVal_params;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("params")), refVal_params );
        setParams(refVal_params);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("config")))
    {
        std::shared_ptr<ComputePowerConfig> refVal_config;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("config")), refVal_config );
        setConfig(refVal_config);
    }
    return ok;
}

std::vector<std::shared_ptr<ComputePowerWaveform>>& ComputePower_1::getWaveform()
{
    return m_Waveform;
}

void ComputePower_1::setWaveform(const std::vector<std::shared_ptr<ComputePowerWaveform>>& value)
{
    m_Waveform = value;
    m_WaveformIsSet = true;
}

bool ComputePower_1::waveformIsSet() const
{
    return m_WaveformIsSet;
}

void ComputePower_1::unsetWaveform()
{
    m_WaveformIsSet = false;
}
utility::string_t ComputePower_1::getEquation() const
{
    return m_Equation;
}

void ComputePower_1::setEquation(const utility::string_t& value)
{
    m_Equation = value;
    m_EquationIsSet = true;
}

bool ComputePower_1::equationIsSet() const
{
    return m_EquationIsSet;
}

void ComputePower_1::unsetEquation()
{
    m_EquationIsSet = false;
}
std::shared_ptr<Object> ComputePower_1::getParams() const
{
    return m_Params;
}

void ComputePower_1::setParams(const std::shared_ptr<Object>& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}

bool ComputePower_1::paramsIsSet() const
{
    return m_ParamsIsSet;
}

void ComputePower_1::unsetParams()
{
    m_ParamsIsSet = false;
}
std::shared_ptr<ComputePowerConfig> ComputePower_1::getConfig() const
{
    return m_Config;
}

void ComputePower_1::setConfig(const std::shared_ptr<ComputePowerConfig>& value)
{
    m_Config = value;
    m_ConfigIsSet = true;
}

bool ComputePower_1::configIsSet() const
{
    return m_ConfigIsSet;
}

void ComputePower_1::unsetConfig()
{
    m_ConfigIsSet = false;
}
}
}


