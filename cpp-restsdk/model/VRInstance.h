/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VRInstance.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_VRInstance_H_
#define POWERMETER_MODEL_VRInstance_H_


#include "../ModelBase.h"

#include "VRSupplyInst.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  VRInstance
    : public ModelBase
{
public:
    VRInstance();
    virtual ~VRInstance();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// VRInstance members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHierName() const;
    bool hierNameIsSet() const;
    void unsetHier_name();

    void setHierName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParent_id();

    void setParentId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentType() const;
    bool parentTypeIsSet() const;
    void unsetParent_type();

    void setParentType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaster() const;
    bool masterIsSet() const;
    void unsetMaster();

    void setMaster(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMasterName() const;
    bool masterNameIsSet() const;
    void unsetMaster_name();

    void setMasterName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMasterMaster() const;
    bool masterMasterIsSet() const;
    void unsetMaster_master();

    void setMasterMaster(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<VRSupplyInst>>& getSupplies();
    bool suppliesIsSet() const;
    void unsetSupplies();

    void setSupplies(const std::vector<std::shared_ptr<VRSupplyInst>>& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Hier_name;
    bool m_Hier_nameIsSet;
    int32_t m_Parent_id;
    bool m_Parent_idIsSet;
    utility::string_t m_Parent_type;
    bool m_Parent_typeIsSet;
    int32_t m_Master;
    bool m_MasterIsSet;
    utility::string_t m_Master_name;
    bool m_Master_nameIsSet;
    int32_t m_Master_master;
    bool m_Master_masterIsSet;
    std::vector<std::shared_ptr<VRSupplyInst>> m_Supplies;
    bool m_SuppliesIsSet;
};


}
}

#endif /* POWERMETER_MODEL_VRInstance_H_ */
