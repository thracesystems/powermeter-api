/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignAccess.h"

namespace powermeter {
namespace model {




DesignAccess::DesignAccess()
{
    m_Master = 0;
    m_MasterIsSet = false;
    m_Master_name = utility::conversions::to_string_t("");
    m_Master_nameIsSet = false;
    m_Project = 0;
    m_ProjectIsSet = false;
    m_Project_name = utility::conversions::to_string_t("");
    m_Project_nameIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

DesignAccess::~DesignAccess()
{
}

void DesignAccess::validate()
{
    // TODO: implement validation
}

web::json::value DesignAccess::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MasterIsSet)
    {
        val[utility::conversions::to_string_t("master")] = ModelBase::toJson(m_Master);
    }
    if(m_Master_nameIsSet)
    {
        val[utility::conversions::to_string_t("master_name")] = ModelBase::toJson(m_Master_name);
    }
    if(m_ProjectIsSet)
    {
        val[utility::conversions::to_string_t("project")] = ModelBase::toJson(m_Project);
    }
    if(m_Project_nameIsSet)
    {
        val[utility::conversions::to_string_t("project_name")] = ModelBase::toJson(m_Project_name);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool DesignAccess::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("master")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master;
            ok &= ModelBase::fromJson(fieldValue, refVal_master);
            setMaster(refVal_master);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_master_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_name);
            setMasterName(refVal_master_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_project;
            ok &= ModelBase::fromJson(fieldValue, refVal_project);
            setProject(refVal_project);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("project_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("project_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_project_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_project_name);
            setProjectName(refVal_project_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timestamp"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    return ok;
}

void DesignAccess::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master"), m_Master));
    }
    if(m_Master_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_name"), m_Master_name));
    }
    if(m_ProjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project"), m_Project));
    }
    if(m_Project_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("project_name"), m_Project_name));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
}

bool DesignAccess::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("master")))
    {
        int32_t refVal_master;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master")), refVal_master );
        setMaster(refVal_master);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_name")))
    {
        utility::string_t refVal_master_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_name")), refVal_master_name );
        setMasterName(refVal_master_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project")))
    {
        int32_t refVal_project;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project")), refVal_project );
        setProject(refVal_project);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("project_name")))
    {
        utility::string_t refVal_project_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("project_name")), refVal_project_name );
        setProjectName(refVal_project_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        utility::datetime refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp")), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    return ok;
}

int32_t DesignAccess::getMaster() const
{
    return m_Master;
}

void DesignAccess::setMaster(int32_t value)
{
    m_Master = value;
    m_MasterIsSet = true;
}

bool DesignAccess::masterIsSet() const
{
    return m_MasterIsSet;
}

void DesignAccess::unsetMaster()
{
    m_MasterIsSet = false;
}
utility::string_t DesignAccess::getMasterName() const
{
    return m_Master_name;
}

void DesignAccess::setMasterName(const utility::string_t& value)
{
    m_Master_name = value;
    m_Master_nameIsSet = true;
}

bool DesignAccess::masterNameIsSet() const
{
    return m_Master_nameIsSet;
}

void DesignAccess::unsetMaster_name()
{
    m_Master_nameIsSet = false;
}
int32_t DesignAccess::getProject() const
{
    return m_Project;
}

void DesignAccess::setProject(int32_t value)
{
    m_Project = value;
    m_ProjectIsSet = true;
}

bool DesignAccess::projectIsSet() const
{
    return m_ProjectIsSet;
}

void DesignAccess::unsetProject()
{
    m_ProjectIsSet = false;
}
utility::string_t DesignAccess::getProjectName() const
{
    return m_Project_name;
}

void DesignAccess::setProjectName(const utility::string_t& value)
{
    m_Project_name = value;
    m_Project_nameIsSet = true;
}

bool DesignAccess::projectNameIsSet() const
{
    return m_Project_nameIsSet;
}

void DesignAccess::unsetProject_name()
{
    m_Project_nameIsSet = false;
}
utility::datetime DesignAccess::getTimestamp() const
{
    return m_Timestamp;
}

void DesignAccess::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool DesignAccess::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void DesignAccess::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}


