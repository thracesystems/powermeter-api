/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignFF.h"

namespace powermeter {
namespace model {




DesignFF::DesignFF()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Var1 = utility::conversions::to_string_t("");
    m_Var1IsSet = false;
    m_Var2 = utility::conversions::to_string_t("");
    m_Var2IsSet = false;
    m_Bits = 0;
    m_BitsIsSet = false;
    m_Clocked_on = utility::conversions::to_string_t("");
    m_Clocked_onIsSet = false;
    m_Clocked_on_also = utility::conversions::to_string_t("");
    m_Clocked_on_alsoIsSet = false;
    m_Next_state = utility::conversions::to_string_t("");
    m_Next_stateIsSet = false;
    m_Clear = utility::conversions::to_string_t("");
    m_ClearIsSet = false;
    m_Preset = utility::conversions::to_string_t("");
    m_PresetIsSet = false;
    m_Clear_preset_var1 = utility::conversions::to_string_t("");
    m_Clear_preset_var1IsSet = false;
    m_Clear_preset_var2 = utility::conversions::to_string_t("");
    m_Clear_preset_var2IsSet = false;
    m_Power_down_function = utility::conversions::to_string_t("");
    m_Power_down_functionIsSet = false;
}

DesignFF::~DesignFF()
{
}

void DesignFF::validate()
{
    // TODO: implement validation
}

web::json::value DesignFF::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Var1IsSet)
    {
        val[utility::conversions::to_string_t("var1")] = ModelBase::toJson(m_Var1);
    }
    if(m_Var2IsSet)
    {
        val[utility::conversions::to_string_t("var2")] = ModelBase::toJson(m_Var2);
    }
    if(m_BitsIsSet)
    {
        val[utility::conversions::to_string_t("bits")] = ModelBase::toJson(m_Bits);
    }
    if(m_Clocked_onIsSet)
    {
        val[utility::conversions::to_string_t("clocked_on")] = ModelBase::toJson(m_Clocked_on);
    }
    if(m_Clocked_on_alsoIsSet)
    {
        val[utility::conversions::to_string_t("clocked_on_also")] = ModelBase::toJson(m_Clocked_on_also);
    }
    if(m_Next_stateIsSet)
    {
        val[utility::conversions::to_string_t("next_state")] = ModelBase::toJson(m_Next_state);
    }
    if(m_ClearIsSet)
    {
        val[utility::conversions::to_string_t("clear")] = ModelBase::toJson(m_Clear);
    }
    if(m_PresetIsSet)
    {
        val[utility::conversions::to_string_t("preset")] = ModelBase::toJson(m_Preset);
    }
    if(m_Clear_preset_var1IsSet)
    {
        val[utility::conversions::to_string_t("clear_preset_var1")] = ModelBase::toJson(m_Clear_preset_var1);
    }
    if(m_Clear_preset_var2IsSet)
    {
        val[utility::conversions::to_string_t("clear_preset_var2")] = ModelBase::toJson(m_Clear_preset_var2);
    }
    if(m_Power_down_functionIsSet)
    {
        val[utility::conversions::to_string_t("power_down_function")] = ModelBase::toJson(m_Power_down_function);
    }

    return val;
}

bool DesignFF::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("var1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("var1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_var1;
            ok &= ModelBase::fromJson(fieldValue, refVal_var1);
            setVar1(refVal_var1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("var2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("var2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_var2;
            ok &= ModelBase::fromJson(fieldValue, refVal_var2);
            setVar2(refVal_var2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bits")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bits"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bits;
            ok &= ModelBase::fromJson(fieldValue, refVal_bits);
            setBits(refVal_bits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clocked_on")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clocked_on"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clocked_on;
            ok &= ModelBase::fromJson(fieldValue, refVal_clocked_on);
            setClockedOn(refVal_clocked_on);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clocked_on_also")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clocked_on_also"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clocked_on_also;
            ok &= ModelBase::fromJson(fieldValue, refVal_clocked_on_also);
            setClockedOnAlso(refVal_clocked_on_also);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("next_state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("next_state"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_next_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_next_state);
            setNextState(refVal_next_state);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clear")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clear"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clear;
            ok &= ModelBase::fromJson(fieldValue, refVal_clear);
            setClear(refVal_clear);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("preset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("preset"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_preset;
            ok &= ModelBase::fromJson(fieldValue, refVal_preset);
            setPreset(refVal_preset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clear_preset_var1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clear_preset_var1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clear_preset_var1;
            ok &= ModelBase::fromJson(fieldValue, refVal_clear_preset_var1);
            setClearPresetVar1(refVal_clear_preset_var1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("clear_preset_var2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("clear_preset_var2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_clear_preset_var2;
            ok &= ModelBase::fromJson(fieldValue, refVal_clear_preset_var2);
            setClearPresetVar2(refVal_clear_preset_var2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("power_down_function")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("power_down_function"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_power_down_function;
            ok &= ModelBase::fromJson(fieldValue, refVal_power_down_function);
            setPowerDownFunction(refVal_power_down_function);
        }
    }
    return ok;
}

void DesignFF::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Var1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("var1"), m_Var1));
    }
    if(m_Var2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("var2"), m_Var2));
    }
    if(m_BitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bits"), m_Bits));
    }
    if(m_Clocked_onIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clocked_on"), m_Clocked_on));
    }
    if(m_Clocked_on_alsoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clocked_on_also"), m_Clocked_on_also));
    }
    if(m_Next_stateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("next_state"), m_Next_state));
    }
    if(m_ClearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clear"), m_Clear));
    }
    if(m_PresetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("preset"), m_Preset));
    }
    if(m_Clear_preset_var1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clear_preset_var1"), m_Clear_preset_var1));
    }
    if(m_Clear_preset_var2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("clear_preset_var2"), m_Clear_preset_var2));
    }
    if(m_Power_down_functionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("power_down_function"), m_Power_down_function));
    }
}

bool DesignFF::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("var1")))
    {
        utility::string_t refVal_var1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("var1")), refVal_var1 );
        setVar1(refVal_var1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("var2")))
    {
        utility::string_t refVal_var2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("var2")), refVal_var2 );
        setVar2(refVal_var2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bits")))
    {
        int32_t refVal_bits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bits")), refVal_bits );
        setBits(refVal_bits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clocked_on")))
    {
        utility::string_t refVal_clocked_on;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clocked_on")), refVal_clocked_on );
        setClockedOn(refVal_clocked_on);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clocked_on_also")))
    {
        utility::string_t refVal_clocked_on_also;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clocked_on_also")), refVal_clocked_on_also );
        setClockedOnAlso(refVal_clocked_on_also);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("next_state")))
    {
        utility::string_t refVal_next_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("next_state")), refVal_next_state );
        setNextState(refVal_next_state);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clear")))
    {
        utility::string_t refVal_clear;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clear")), refVal_clear );
        setClear(refVal_clear);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("preset")))
    {
        utility::string_t refVal_preset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("preset")), refVal_preset );
        setPreset(refVal_preset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clear_preset_var1")))
    {
        utility::string_t refVal_clear_preset_var1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clear_preset_var1")), refVal_clear_preset_var1 );
        setClearPresetVar1(refVal_clear_preset_var1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("clear_preset_var2")))
    {
        utility::string_t refVal_clear_preset_var2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("clear_preset_var2")), refVal_clear_preset_var2 );
        setClearPresetVar2(refVal_clear_preset_var2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("power_down_function")))
    {
        utility::string_t refVal_power_down_function;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("power_down_function")), refVal_power_down_function );
        setPowerDownFunction(refVal_power_down_function);
    }
    return ok;
}

int32_t DesignFF::getId() const
{
    return m_Id;
}

void DesignFF::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DesignFF::idIsSet() const
{
    return m_IdIsSet;
}

void DesignFF::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DesignFF::getVar1() const
{
    return m_Var1;
}

void DesignFF::setVar1(const utility::string_t& value)
{
    m_Var1 = value;
    m_Var1IsSet = true;
}

bool DesignFF::var1IsSet() const
{
    return m_Var1IsSet;
}

void DesignFF::unsetVar1()
{
    m_Var1IsSet = false;
}
utility::string_t DesignFF::getVar2() const
{
    return m_Var2;
}

void DesignFF::setVar2(const utility::string_t& value)
{
    m_Var2 = value;
    m_Var2IsSet = true;
}

bool DesignFF::var2IsSet() const
{
    return m_Var2IsSet;
}

void DesignFF::unsetVar2()
{
    m_Var2IsSet = false;
}
int32_t DesignFF::getBits() const
{
    return m_Bits;
}

void DesignFF::setBits(int32_t value)
{
    m_Bits = value;
    m_BitsIsSet = true;
}

bool DesignFF::bitsIsSet() const
{
    return m_BitsIsSet;
}

void DesignFF::unsetBits()
{
    m_BitsIsSet = false;
}
utility::string_t DesignFF::getClockedOn() const
{
    return m_Clocked_on;
}

void DesignFF::setClockedOn(const utility::string_t& value)
{
    m_Clocked_on = value;
    m_Clocked_onIsSet = true;
}

bool DesignFF::clockedOnIsSet() const
{
    return m_Clocked_onIsSet;
}

void DesignFF::unsetClocked_on()
{
    m_Clocked_onIsSet = false;
}
utility::string_t DesignFF::getClockedOnAlso() const
{
    return m_Clocked_on_also;
}

void DesignFF::setClockedOnAlso(const utility::string_t& value)
{
    m_Clocked_on_also = value;
    m_Clocked_on_alsoIsSet = true;
}

bool DesignFF::clockedOnAlsoIsSet() const
{
    return m_Clocked_on_alsoIsSet;
}

void DesignFF::unsetClocked_on_also()
{
    m_Clocked_on_alsoIsSet = false;
}
utility::string_t DesignFF::getNextState() const
{
    return m_Next_state;
}

void DesignFF::setNextState(const utility::string_t& value)
{
    m_Next_state = value;
    m_Next_stateIsSet = true;
}

bool DesignFF::nextStateIsSet() const
{
    return m_Next_stateIsSet;
}

void DesignFF::unsetNext_state()
{
    m_Next_stateIsSet = false;
}
utility::string_t DesignFF::getClear() const
{
    return m_Clear;
}

void DesignFF::setClear(const utility::string_t& value)
{
    m_Clear = value;
    m_ClearIsSet = true;
}

bool DesignFF::clearIsSet() const
{
    return m_ClearIsSet;
}

void DesignFF::unsetClear()
{
    m_ClearIsSet = false;
}
utility::string_t DesignFF::getPreset() const
{
    return m_Preset;
}

void DesignFF::setPreset(const utility::string_t& value)
{
    m_Preset = value;
    m_PresetIsSet = true;
}

bool DesignFF::presetIsSet() const
{
    return m_PresetIsSet;
}

void DesignFF::unsetPreset()
{
    m_PresetIsSet = false;
}
utility::string_t DesignFF::getClearPresetVar1() const
{
    return m_Clear_preset_var1;
}

void DesignFF::setClearPresetVar1(const utility::string_t& value)
{
    m_Clear_preset_var1 = value;
    m_Clear_preset_var1IsSet = true;
}

bool DesignFF::clearPresetVar1IsSet() const
{
    return m_Clear_preset_var1IsSet;
}

void DesignFF::unsetClear_preset_var1()
{
    m_Clear_preset_var1IsSet = false;
}
utility::string_t DesignFF::getClearPresetVar2() const
{
    return m_Clear_preset_var2;
}

void DesignFF::setClearPresetVar2(const utility::string_t& value)
{
    m_Clear_preset_var2 = value;
    m_Clear_preset_var2IsSet = true;
}

bool DesignFF::clearPresetVar2IsSet() const
{
    return m_Clear_preset_var2IsSet;
}

void DesignFF::unsetClear_preset_var2()
{
    m_Clear_preset_var2IsSet = false;
}
utility::string_t DesignFF::getPowerDownFunction() const
{
    return m_Power_down_function;
}

void DesignFF::setPowerDownFunction(const utility::string_t& value)
{
    m_Power_down_function = value;
    m_Power_down_functionIsSet = true;
}

bool DesignFF::powerDownFunctionIsSet() const
{
    return m_Power_down_functionIsSet;
}

void DesignFF::unsetPower_down_function()
{
    m_Power_down_functionIsSet = false;
}
}
}


