/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PinState.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_PinState_H_
#define POWERMETER_MODEL_PinState_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  PinState
    : public ModelBase
{
public:
    PinState();
    virtual ~PinState();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PinState members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPin() const;
    bool pinIsSet() const;
    void unsetPin();

    void setPin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getFallRamp() const;
    bool fallRampIsSet() const;
    void unsetFall_ramp();

    void setFallRamp(double value);

    /// <summary>
    /// 
    /// </summary>
    double getFallCap() const;
    bool fallCapIsSet() const;
    void unsetFall_cap();

    void setFallCap(double value);

    /// <summary>
    /// 
    /// </summary>
    double getRiseRamp() const;
    bool riseRampIsSet() const;
    void unsetRise_ramp();

    void setRiseRamp(double value);

    /// <summary>
    /// 
    /// </summary>
    double getRiseCap() const;
    bool riseCapIsSet() const;
    void unsetRise_cap();

    void setRiseCap(double value);


protected:
    utility::string_t m_Pin;
    bool m_PinIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    double m_Fall_ramp;
    bool m_Fall_rampIsSet;
    double m_Fall_cap;
    bool m_Fall_capIsSet;
    double m_Rise_ramp;
    bool m_Rise_rampIsSet;
    double m_Rise_cap;
    bool m_Rise_capIsSet;
};


}
}

#endif /* POWERMETER_MODEL_PinState_H_ */
