/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DesignPinEnergy.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_DesignPinEnergy_H_
#define POWERMETER_MODEL_DesignPinEnergy_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  DesignPinEnergy
    : public ModelBase
{
public:
    DesignPinEnergy();
    virtual ~DesignPinEnergy();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DesignPinEnergy members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPin() const;
    bool pinIsSet() const;
    void unsetPin();

    void setPin(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPinName() const;
    bool pinNameIsSet() const;
    void unsetPin_name();

    void setPinName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getRelatedPin() const;
    bool relatedPinIsSet() const;
    void unsetRelated_pin();

    void setRelatedPin(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRelatedPinName() const;
    bool relatedPinNameIsSet() const;
    void unsetRelated_pin_name();

    void setRelatedPinName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSupply() const;
    bool supplyIsSet() const;
    void unsetSupply();

    void setSupply(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupplyName() const;
    bool supplyNameIsSet() const;
    void unsetSupply_name();

    void setSupplyName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProcess() const;
    bool processIsSet() const;
    void unsetProcess();

    void setProcess(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRc() const;
    bool rcIsSet() const;
    void unsetRc();

    void setRc(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getVoltage() const;
    bool voltageIsSet() const;
    void unsetVoltage();

    void setVoltage(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWhen() const;
    bool whenIsSet() const;
    void unsetWhen();

    void setWhen(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getIndex1();
    bool index1IsSet() const;
    void unsetIndex1();

    void setIndex1(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVariable1() const;
    bool variable1IsSet() const;
    void unsetVariable1();

    void setVariable1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getIndex2();
    bool index2IsSet() const;
    void unsetIndex2();

    void setIndex2(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVariable2() const;
    bool variable2IsSet() const;
    void unsetVariable2();

    void setVariable2(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getRiseEnergy();
    bool riseEnergyIsSet() const;
    void unsetRise_energy();

    void setRiseEnergy(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getFallEnergy();
    bool fallEnergyIsSet() const;
    void unsetFall_energy();

    void setFallEnergy(std::vector<double> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getModes();
    bool modesIsSet() const;
    void unsetModes();

    void setModes(std::vector<int32_t> value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Pin;
    bool m_PinIsSet;
    utility::string_t m_Pin_name;
    bool m_Pin_nameIsSet;
    int32_t m_Related_pin;
    bool m_Related_pinIsSet;
    utility::string_t m_Related_pin_name;
    bool m_Related_pin_nameIsSet;
    int32_t m_Supply;
    bool m_SupplyIsSet;
    utility::string_t m_Supply_name;
    bool m_Supply_nameIsSet;
    utility::string_t m_Process;
    bool m_ProcessIsSet;
    utility::string_t m_Rc;
    bool m_RcIsSet;
    double m_Voltage;
    bool m_VoltageIsSet;
    int32_t m_Temperature;
    bool m_TemperatureIsSet;
    utility::string_t m_When;
    bool m_WhenIsSet;
    std::vector<double> m_Index1;
    bool m_Index1IsSet;
    utility::string_t m_Variable1;
    bool m_Variable1IsSet;
    std::vector<double> m_Index2;
    bool m_Index2IsSet;
    utility::string_t m_Variable2;
    bool m_Variable2IsSet;
    std::vector<double> m_Rise_energy;
    bool m_Rise_energyIsSet;
    std::vector<double> m_Fall_energy;
    bool m_Fall_energyIsSet;
    std::vector<int32_t> m_Modes;
    bool m_ModesIsSet;
};


}
}

#endif /* POWERMETER_MODEL_DesignPinEnergy_H_ */
