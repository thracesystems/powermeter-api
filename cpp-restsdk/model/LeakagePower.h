/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LeakagePower.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_LeakagePower_H_
#define POWERMETER_MODEL_LeakagePower_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  LeakagePower
    : public ModelBase
{
public:
    LeakagePower();
    virtual ~LeakagePower();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LeakagePower members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSupply() const;
    bool supplyIsSet() const;
    void unsetSupply();

    void setSupply(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupplyName() const;
    bool supplyNameIsSet() const;
    void unsetSupply_name();

    void setSupplyName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getProcess() const;
    bool processIsSet() const;
    void unsetProcess();

    void setProcess(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRc() const;
    bool rcIsSet() const;
    void unsetRc();

    void setRc(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getVoltage() const;
    bool voltageIsSet() const;
    void unsetVoltage();

    void setVoltage(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWhen() const;
    bool whenIsSet() const;
    void unsetWhen();

    void setWhen(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getPower() const;
    bool powerIsSet() const;
    void unsetPower();

    void setPower(double value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getModes();
    bool modesIsSet() const;
    void unsetModes();

    void setModes(std::vector<int32_t> value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Supply;
    bool m_SupplyIsSet;
    utility::string_t m_Supply_name;
    bool m_Supply_nameIsSet;
    utility::string_t m_Process;
    bool m_ProcessIsSet;
    utility::string_t m_Rc;
    bool m_RcIsSet;
    double m_Voltage;
    bool m_VoltageIsSet;
    int32_t m_Temperature;
    bool m_TemperatureIsSet;
    utility::string_t m_When;
    bool m_WhenIsSet;
    double m_Power;
    bool m_PowerIsSet;
    std::vector<int32_t> m_Modes;
    bool m_ModesIsSet;
};


}
}

#endif /* POWERMETER_MODEL_LeakagePower_H_ */
