/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Technology.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_Technology_H_
#define POWERMETER_MODEL_Technology_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "TechnologyVersion.h"

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  Technology
    : public ModelBase
{
public:
    Technology();
    virtual ~Technology();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Technology members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNode() const;
    bool nodeIsSet() const;
    void unsetNode();

    void setNode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isEditable() const;
    bool editableIsSet() const;
    void unsetEditable();

    void setEditable(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCurrentVersion() const;
    bool currentVersionIsSet() const;
    void unsetCurrent_version();

    void setCurrentVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TechnologyVersion> getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const std::shared_ptr<TechnologyVersion>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getWaferDiameter() const;
    bool waferDiameterIsSet() const;
    void unsetWafer_diameter();

    void setWaferDiameter(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getScribeLine() const;
    bool scribeLineIsSet() const;
    void unsetScribe_line();

    void setScribeLine(double value);

    /// <summary>
    /// 
    /// </summary>
    double getEdgeLoss() const;
    bool edgeLossIsSet() const;
    void unsetEdge_loss();

    void setEdgeLoss(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getProjectCount() const;
    bool projectCountIsSet() const;
    void unsetProject_count();

    void setProjectCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasShrink() const;
    bool hasShrinkIsSet() const;
    void unsetHas_shrink();

    void setHasShrink(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getShrinkFactor() const;
    bool shrinkFactorIsSet() const;
    void unsetShrink_factor();

    void setShrinkFactor(double value);

    /// <summary>
    /// 
    /// </summary>
    double getThickness() const;
    bool thicknessIsSet() const;
    void unsetThickness();

    void setThickness(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSiConductivity() const;
    bool siConductivityIsSet() const;
    void unsetSi_conductivity();

    void setSiConductivity(double value);

    /// <summary>
    /// 
    /// </summary>
    double getSiHeatCapacity() const;
    bool siHeatCapacityIsSet() const;
    void unsetSi_heat_capacity();

    void setSiHeatCapacity(double value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Node;
    bool m_NodeIsSet;
    bool m_Editable;
    bool m_EditableIsSet;
    int32_t m_Current_version;
    bool m_Current_versionIsSet;
    std::shared_ptr<TechnologyVersion> m_Version;
    bool m_VersionIsSet;
    int32_t m_Wafer_diameter;
    bool m_Wafer_diameterIsSet;
    double m_Scribe_line;
    bool m_Scribe_lineIsSet;
    double m_Edge_loss;
    bool m_Edge_lossIsSet;
    int32_t m_Project_count;
    bool m_Project_countIsSet;
    bool m_Has_shrink;
    bool m_Has_shrinkIsSet;
    double m_Shrink_factor;
    bool m_Shrink_factorIsSet;
    double m_Thickness;
    bool m_ThicknessIsSet;
    double m_Si_conductivity;
    bool m_Si_conductivityIsSet;
    double m_Si_heat_capacity;
    bool m_Si_heat_capacityIsSet;
};


}
}

#endif /* POWERMETER_MODEL_Technology_H_ */
