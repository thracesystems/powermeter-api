/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DeviceDataBulk.h"

namespace powermeter {
namespace model {




DeviceDataBulk::DeviceDataBulk()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_p = utility::conversions::to_string_t("");
    m_pIsSet = false;
    m_t = 0;
    m_tIsSet = false;
    m_Vds = 0.0;
    m_VdsIsSet = false;
    m_Vgs = 0.0;
    m_VgsIsSet = false;
    m_Vbs = 0.0;
    m_VbsIsSet = false;
    m_Idrain = 0.0;
    m_IdrainIsSet = false;
    m_Igate = 0.0;
    m_IgateIsSet = false;
    m_Isource = 0.0;
    m_IsourceIsSet = false;
    m_Ibody = 0.0;
    m_IbodyIsSet = false;
}

DeviceDataBulk::~DeviceDataBulk()
{
}

void DeviceDataBulk::validate()
{
    // TODO: implement validation
}

web::json::value DeviceDataBulk::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_pIsSet)
    {
        val[utility::conversions::to_string_t("p")] = ModelBase::toJson(m_p);
    }
    if(m_tIsSet)
    {
        val[utility::conversions::to_string_t("t")] = ModelBase::toJson(m_t);
    }
    if(m_VdsIsSet)
    {
        val[utility::conversions::to_string_t("Vds")] = ModelBase::toJson(m_Vds);
    }
    if(m_VgsIsSet)
    {
        val[utility::conversions::to_string_t("Vgs")] = ModelBase::toJson(m_Vgs);
    }
    if(m_VbsIsSet)
    {
        val[utility::conversions::to_string_t("Vbs")] = ModelBase::toJson(m_Vbs);
    }
    if(m_IdrainIsSet)
    {
        val[utility::conversions::to_string_t("Idrain")] = ModelBase::toJson(m_Idrain);
    }
    if(m_IgateIsSet)
    {
        val[utility::conversions::to_string_t("Igate")] = ModelBase::toJson(m_Igate);
    }
    if(m_IsourceIsSet)
    {
        val[utility::conversions::to_string_t("Isource")] = ModelBase::toJson(m_Isource);
    }
    if(m_IbodyIsSet)
    {
        val[utility::conversions::to_string_t("Ibody")] = ModelBase::toJson(m_Ibody);
    }

    return val;
}

bool DeviceDataBulk::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("p")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("p"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_p;
            ok &= ModelBase::fromJson(fieldValue, refVal_p);
            setP(refVal_p);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("t")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("t"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_t;
            ok &= ModelBase::fromJson(fieldValue, refVal_t);
            setT(refVal_t);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Vds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vds"));
        if(!fieldValue.is_null())
        {
            double refVal_Vds;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vds);
            setVds(refVal_Vds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Vgs")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vgs"));
        if(!fieldValue.is_null())
        {
            double refVal_Vgs;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vgs);
            setVgs(refVal_Vgs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Vbs")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vbs"));
        if(!fieldValue.is_null())
        {
            double refVal_Vbs;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vbs);
            setVbs(refVal_Vbs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Idrain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Idrain"));
        if(!fieldValue.is_null())
        {
            double refVal_Idrain;
            ok &= ModelBase::fromJson(fieldValue, refVal_Idrain);
            setIdrain(refVal_Idrain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Igate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Igate"));
        if(!fieldValue.is_null())
        {
            double refVal_Igate;
            ok &= ModelBase::fromJson(fieldValue, refVal_Igate);
            setIgate(refVal_Igate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Isource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Isource"));
        if(!fieldValue.is_null())
        {
            double refVal_Isource;
            ok &= ModelBase::fromJson(fieldValue, refVal_Isource);
            setIsource(refVal_Isource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Ibody")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Ibody"));
        if(!fieldValue.is_null())
        {
            double refVal_Ibody;
            ok &= ModelBase::fromJson(fieldValue, refVal_Ibody);
            setIbody(refVal_Ibody);
        }
    }
    return ok;
}

void DeviceDataBulk::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_pIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("p"), m_p));
    }
    if(m_tIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("t"), m_t));
    }
    if(m_VdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vds"), m_Vds));
    }
    if(m_VgsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vgs"), m_Vgs));
    }
    if(m_VbsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vbs"), m_Vbs));
    }
    if(m_IdrainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Idrain"), m_Idrain));
    }
    if(m_IgateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Igate"), m_Igate));
    }
    if(m_IsourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Isource"), m_Isource));
    }
    if(m_IbodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Ibody"), m_Ibody));
    }
}

bool DeviceDataBulk::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("p")))
    {
        utility::string_t refVal_p;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("p")), refVal_p );
        setP(refVal_p);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("t")))
    {
        int32_t refVal_t;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("t")), refVal_t );
        setT(refVal_t);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Vds")))
    {
        double refVal_Vds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vds")), refVal_Vds );
        setVds(refVal_Vds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Vgs")))
    {
        double refVal_Vgs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vgs")), refVal_Vgs );
        setVgs(refVal_Vgs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Vbs")))
    {
        double refVal_Vbs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vbs")), refVal_Vbs );
        setVbs(refVal_Vbs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Idrain")))
    {
        double refVal_Idrain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Idrain")), refVal_Idrain );
        setIdrain(refVal_Idrain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Igate")))
    {
        double refVal_Igate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Igate")), refVal_Igate );
        setIgate(refVal_Igate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Isource")))
    {
        double refVal_Isource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Isource")), refVal_Isource );
        setIsource(refVal_Isource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Ibody")))
    {
        double refVal_Ibody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Ibody")), refVal_Ibody );
        setIbody(refVal_Ibody);
    }
    return ok;
}

int32_t DeviceDataBulk::getId() const
{
    return m_Id;
}

void DeviceDataBulk::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DeviceDataBulk::idIsSet() const
{
    return m_IdIsSet;
}

void DeviceDataBulk::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DeviceDataBulk::getP() const
{
    return m_p;
}

void DeviceDataBulk::setP(const utility::string_t& value)
{
    m_p = value;
    m_pIsSet = true;
}

bool DeviceDataBulk::PIsSet() const
{
    return m_pIsSet;
}

void DeviceDataBulk::unsetp()
{
    m_pIsSet = false;
}
int32_t DeviceDataBulk::getT() const
{
    return m_t;
}

void DeviceDataBulk::setT(int32_t value)
{
    m_t = value;
    m_tIsSet = true;
}

bool DeviceDataBulk::TIsSet() const
{
    return m_tIsSet;
}

void DeviceDataBulk::unsett()
{
    m_tIsSet = false;
}
double DeviceDataBulk::getVds() const
{
    return m_Vds;
}

void DeviceDataBulk::setVds(double value)
{
    m_Vds = value;
    m_VdsIsSet = true;
}

bool DeviceDataBulk::vdsIsSet() const
{
    return m_VdsIsSet;
}

void DeviceDataBulk::unsetVds()
{
    m_VdsIsSet = false;
}
double DeviceDataBulk::getVgs() const
{
    return m_Vgs;
}

void DeviceDataBulk::setVgs(double value)
{
    m_Vgs = value;
    m_VgsIsSet = true;
}

bool DeviceDataBulk::vgsIsSet() const
{
    return m_VgsIsSet;
}

void DeviceDataBulk::unsetVgs()
{
    m_VgsIsSet = false;
}
double DeviceDataBulk::getVbs() const
{
    return m_Vbs;
}

void DeviceDataBulk::setVbs(double value)
{
    m_Vbs = value;
    m_VbsIsSet = true;
}

bool DeviceDataBulk::vbsIsSet() const
{
    return m_VbsIsSet;
}

void DeviceDataBulk::unsetVbs()
{
    m_VbsIsSet = false;
}
double DeviceDataBulk::getIdrain() const
{
    return m_Idrain;
}

void DeviceDataBulk::setIdrain(double value)
{
    m_Idrain = value;
    m_IdrainIsSet = true;
}

bool DeviceDataBulk::idrainIsSet() const
{
    return m_IdrainIsSet;
}

void DeviceDataBulk::unsetIdrain()
{
    m_IdrainIsSet = false;
}
double DeviceDataBulk::getIgate() const
{
    return m_Igate;
}

void DeviceDataBulk::setIgate(double value)
{
    m_Igate = value;
    m_IgateIsSet = true;
}

bool DeviceDataBulk::igateIsSet() const
{
    return m_IgateIsSet;
}

void DeviceDataBulk::unsetIgate()
{
    m_IgateIsSet = false;
}
double DeviceDataBulk::getIsource() const
{
    return m_Isource;
}

void DeviceDataBulk::setIsource(double value)
{
    m_Isource = value;
    m_IsourceIsSet = true;
}

bool DeviceDataBulk::isourceIsSet() const
{
    return m_IsourceIsSet;
}

void DeviceDataBulk::unsetIsource()
{
    m_IsourceIsSet = false;
}
double DeviceDataBulk::getIbody() const
{
    return m_Ibody;
}

void DeviceDataBulk::setIbody(double value)
{
    m_Ibody = value;
    m_IbodyIsSet = true;
}

bool DeviceDataBulk::ibodyIsSet() const
{
    return m_IbodyIsSet;
}

void DeviceDataBulk::unsetIbody()
{
    m_IbodyIsSet = false;
}
}
}


