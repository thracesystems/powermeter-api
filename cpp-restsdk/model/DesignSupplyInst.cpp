/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DesignSupplyInst.h"

namespace powermeter {
namespace model {




DesignSupplyInst::DesignSupplyInst()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Container = 0;
    m_ContainerIsSet = false;
    m_Master = 0;
    m_MasterIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_Connection_color = utility::conversions::to_string_t("");
    m_Connection_colorIsSet = false;
    m_Master_name = utility::conversions::to_string_t("");
    m_Master_nameIsSet = false;
    m_Hier_name = utility::conversions::to_string_t("");
    m_Hier_nameIsSet = false;
    m_Connected_to = 0;
    m_Connected_toIsSet = false;
    m_Connected_to_type = utility::conversions::to_string_t("");
    m_Connected_to_typeIsSet = false;
}

DesignSupplyInst::~DesignSupplyInst()
{
}

void DesignSupplyInst::validate()
{
    // TODO: implement validation
}

web::json::value DesignSupplyInst::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t("container")] = ModelBase::toJson(m_Container);
    }
    if(m_MasterIsSet)
    {
        val[utility::conversions::to_string_t("master")] = ModelBase::toJson(m_Master);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_Connection_colorIsSet)
    {
        val[utility::conversions::to_string_t("connection_color")] = ModelBase::toJson(m_Connection_color);
    }
    if(m_Master_nameIsSet)
    {
        val[utility::conversions::to_string_t("master_name")] = ModelBase::toJson(m_Master_name);
    }
    if(m_Hier_nameIsSet)
    {
        val[utility::conversions::to_string_t("hier_name")] = ModelBase::toJson(m_Hier_name);
    }
    if(m_Connected_toIsSet)
    {
        val[utility::conversions::to_string_t("connected_to")] = ModelBase::toJson(m_Connected_to);
    }
    if(m_Connected_to_typeIsSet)
    {
        val[utility::conversions::to_string_t("connected_to_type")] = ModelBase::toJson(m_Connected_to_type);
    }

    return val;
}

bool DesignSupplyInst::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("container")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("container"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_container;
            ok &= ModelBase::fromJson(fieldValue, refVal_container);
            setContainer(refVal_container);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master;
            ok &= ModelBase::fromJson(fieldValue, refVal_master);
            setMaster(refVal_master);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connection_color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connection_color"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_connection_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_connection_color);
            setConnectionColor(refVal_connection_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_master_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_name);
            setMasterName(refVal_master_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hier_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hier_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hier_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_hier_name);
            setHierName(refVal_hier_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connected_to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connected_to"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_connected_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_connected_to);
            setConnectedTo(refVal_connected_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("connected_to_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("connected_to_type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_connected_to_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_connected_to_type);
            setConnectedToType(refVal_connected_to_type);
        }
    }
    return ok;
}

void DesignSupplyInst::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("container"), m_Container));
    }
    if(m_MasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master"), m_Master));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_Connection_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connection_color"), m_Connection_color));
    }
    if(m_Master_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_name"), m_Master_name));
    }
    if(m_Hier_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hier_name"), m_Hier_name));
    }
    if(m_Connected_toIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connected_to"), m_Connected_to));
    }
    if(m_Connected_to_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("connected_to_type"), m_Connected_to_type));
    }
}

bool DesignSupplyInst::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("container")))
    {
        int32_t refVal_container;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("container")), refVal_container );
        setContainer(refVal_container);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master")))
    {
        int32_t refVal_master;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master")), refVal_master );
        setMaster(refVal_master);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        utility::string_t refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("color")), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connection_color")))
    {
        utility::string_t refVal_connection_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connection_color")), refVal_connection_color );
        setConnectionColor(refVal_connection_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_name")))
    {
        utility::string_t refVal_master_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_name")), refVal_master_name );
        setMasterName(refVal_master_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hier_name")))
    {
        utility::string_t refVal_hier_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hier_name")), refVal_hier_name );
        setHierName(refVal_hier_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connected_to")))
    {
        int32_t refVal_connected_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connected_to")), refVal_connected_to );
        setConnectedTo(refVal_connected_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("connected_to_type")))
    {
        utility::string_t refVal_connected_to_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("connected_to_type")), refVal_connected_to_type );
        setConnectedToType(refVal_connected_to_type);
    }
    return ok;
}

int32_t DesignSupplyInst::getId() const
{
    return m_Id;
}

void DesignSupplyInst::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DesignSupplyInst::idIsSet() const
{
    return m_IdIsSet;
}

void DesignSupplyInst::unsetId()
{
    m_IdIsSet = false;
}
int32_t DesignSupplyInst::getContainer() const
{
    return m_Container;
}

void DesignSupplyInst::setContainer(int32_t value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool DesignSupplyInst::containerIsSet() const
{
    return m_ContainerIsSet;
}

void DesignSupplyInst::unsetContainer()
{
    m_ContainerIsSet = false;
}
int32_t DesignSupplyInst::getMaster() const
{
    return m_Master;
}

void DesignSupplyInst::setMaster(int32_t value)
{
    m_Master = value;
    m_MasterIsSet = true;
}

bool DesignSupplyInst::masterIsSet() const
{
    return m_MasterIsSet;
}

void DesignSupplyInst::unsetMaster()
{
    m_MasterIsSet = false;
}
utility::string_t DesignSupplyInst::getColor() const
{
    return m_Color;
}

void DesignSupplyInst::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool DesignSupplyInst::colorIsSet() const
{
    return m_ColorIsSet;
}

void DesignSupplyInst::unsetColor()
{
    m_ColorIsSet = false;
}
utility::string_t DesignSupplyInst::getConnectionColor() const
{
    return m_Connection_color;
}

void DesignSupplyInst::setConnectionColor(const utility::string_t& value)
{
    m_Connection_color = value;
    m_Connection_colorIsSet = true;
}

bool DesignSupplyInst::connectionColorIsSet() const
{
    return m_Connection_colorIsSet;
}

void DesignSupplyInst::unsetConnection_color()
{
    m_Connection_colorIsSet = false;
}
utility::string_t DesignSupplyInst::getMasterName() const
{
    return m_Master_name;
}

void DesignSupplyInst::setMasterName(const utility::string_t& value)
{
    m_Master_name = value;
    m_Master_nameIsSet = true;
}

bool DesignSupplyInst::masterNameIsSet() const
{
    return m_Master_nameIsSet;
}

void DesignSupplyInst::unsetMaster_name()
{
    m_Master_nameIsSet = false;
}
utility::string_t DesignSupplyInst::getHierName() const
{
    return m_Hier_name;
}

void DesignSupplyInst::setHierName(const utility::string_t& value)
{
    m_Hier_name = value;
    m_Hier_nameIsSet = true;
}

bool DesignSupplyInst::hierNameIsSet() const
{
    return m_Hier_nameIsSet;
}

void DesignSupplyInst::unsetHier_name()
{
    m_Hier_nameIsSet = false;
}
int32_t DesignSupplyInst::getConnectedTo() const
{
    return m_Connected_to;
}

void DesignSupplyInst::setConnectedTo(int32_t value)
{
    m_Connected_to = value;
    m_Connected_toIsSet = true;
}

bool DesignSupplyInst::connectedToIsSet() const
{
    return m_Connected_toIsSet;
}

void DesignSupplyInst::unsetConnected_to()
{
    m_Connected_toIsSet = false;
}
utility::string_t DesignSupplyInst::getConnectedToType() const
{
    return m_Connected_to_type;
}

void DesignSupplyInst::setConnectedToType(const utility::string_t& value)
{
    m_Connected_to_type = value;
    m_Connected_to_typeIsSet = true;
}

bool DesignSupplyInst::connectedToTypeIsSet() const
{
    return m_Connected_to_typeIsSet;
}

void DesignSupplyInst::unsetConnected_to_type()
{
    m_Connected_to_typeIsSet = false;
}
}
}


