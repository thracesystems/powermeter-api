/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ScenarioParam.h"

namespace powermeter {
namespace model {




ScenarioParam::ScenarioParam()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Parameter = 0;
    m_ParameterIsSet = false;
}

ScenarioParam::~ScenarioParam()
{
}

void ScenarioParam::validate()
{
    // TODO: implement validation
}

web::json::value ScenarioParam::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ParameterIsSet)
    {
        val[utility::conversions::to_string_t("parameter")] = ModelBase::toJson(m_Parameter);
    }

    return val;
}

bool ScenarioParam::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("parameter")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("parameter"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_parameter;
            ok &= ModelBase::fromJson(fieldValue, refVal_parameter);
            setParameter(refVal_parameter);
        }
    }
    return ok;
}

void ScenarioParam::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ParameterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("parameter"), m_Parameter));
    }
}

bool ScenarioParam::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("parameter")))
    {
        int32_t refVal_parameter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("parameter")), refVal_parameter );
        setParameter(refVal_parameter);
    }
    return ok;
}

int32_t ScenarioParam::getId() const
{
    return m_Id;
}

void ScenarioParam::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ScenarioParam::idIsSet() const
{
    return m_IdIsSet;
}

void ScenarioParam::unsetId()
{
    m_IdIsSet = false;
}
int32_t ScenarioParam::getParameter() const
{
    return m_Parameter;
}

void ScenarioParam::setParameter(int32_t value)
{
    m_Parameter = value;
    m_ParameterIsSet = true;
}

bool ScenarioParam::parameterIsSet() const
{
    return m_ParameterIsSet;
}

void ScenarioParam::unsetParameter()
{
    m_ParameterIsSet = false;
}
}
}


