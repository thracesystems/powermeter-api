/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Instance.h"

namespace powermeter {
namespace model {




Instance::Instance()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Count = utility::conversions::to_string_t("");
    m_CountIsSet = false;
    m_Origin_x = 0.0;
    m_Origin_xIsSet = false;
    m_Origin_y = 0.0;
    m_Origin_yIsSet = false;
    m_Orientation = utility::conversions::to_string_t("");
    m_OrientationIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_Computed_color = utility::conversions::to_string_t("");
    m_Computed_colorIsSet = false;
    m_Master = 0;
    m_MasterIsSet = false;
    m_Master_name = utility::conversions::to_string_t("");
    m_Master_nameIsSet = false;
    m_Master_master = 0;
    m_Master_masterIsSet = false;
    m_Master_latest_commit = 0;
    m_Master_latest_commitIsSet = false;
    m_Rename_on_conflict = false;
    m_Rename_on_conflictIsSet = false;
    m_ModesIsSet = false;
    m_Outline = utility::conversions::to_string_t("");
    m_OutlineIsSet = false;
    m_Area = 0.0;
    m_AreaIsSet = false;
    m_SuppliesIsSet = false;
}

Instance::~Instance()
{
}

void Instance::validate()
{
    // TODO: implement validation
}

web::json::value Instance::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    }
    if(m_Origin_xIsSet)
    {
        val[utility::conversions::to_string_t("origin_x")] = ModelBase::toJson(m_Origin_x);
    }
    if(m_Origin_yIsSet)
    {
        val[utility::conversions::to_string_t("origin_y")] = ModelBase::toJson(m_Origin_y);
    }
    if(m_OrientationIsSet)
    {
        val[utility::conversions::to_string_t("orientation")] = ModelBase::toJson(m_Orientation);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_Computed_colorIsSet)
    {
        val[utility::conversions::to_string_t("computed_color")] = ModelBase::toJson(m_Computed_color);
    }
    if(m_MasterIsSet)
    {
        val[utility::conversions::to_string_t("master")] = ModelBase::toJson(m_Master);
    }
    if(m_Master_nameIsSet)
    {
        val[utility::conversions::to_string_t("master_name")] = ModelBase::toJson(m_Master_name);
    }
    if(m_Master_masterIsSet)
    {
        val[utility::conversions::to_string_t("master_master")] = ModelBase::toJson(m_Master_master);
    }
    if(m_Master_latest_commitIsSet)
    {
        val[utility::conversions::to_string_t("master_latest_commit")] = ModelBase::toJson(m_Master_latest_commit);
    }
    if(m_Rename_on_conflictIsSet)
    {
        val[utility::conversions::to_string_t("rename_on_conflict")] = ModelBase::toJson(m_Rename_on_conflict);
    }
    if(m_ModesIsSet)
    {
        val[utility::conversions::to_string_t("modes")] = ModelBase::toJson(m_Modes);
    }
    if(m_OutlineIsSet)
    {
        val[utility::conversions::to_string_t("outline")] = ModelBase::toJson(m_Outline);
    }
    if(m_AreaIsSet)
    {
        val[utility::conversions::to_string_t("area")] = ModelBase::toJson(m_Area);
    }
    if(m_SuppliesIsSet)
    {
        val[utility::conversions::to_string_t("supplies")] = ModelBase::toJson(m_Supplies);
    }

    return val;
}

bool Instance::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin_x")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin_x"));
        if(!fieldValue.is_null())
        {
            double refVal_origin_x;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin_x);
            setOriginX(refVal_origin_x);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("origin_y")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("origin_y"));
        if(!fieldValue.is_null())
        {
            double refVal_origin_y;
            ok &= ModelBase::fromJson(fieldValue, refVal_origin_y);
            setOriginY(refVal_origin_y);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("orientation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("orientation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_orientation;
            ok &= ModelBase::fromJson(fieldValue, refVal_orientation);
            setOrientation(refVal_orientation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("computed_color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("computed_color"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_computed_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_computed_color);
            setComputedColor(refVal_computed_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master;
            ok &= ModelBase::fromJson(fieldValue, refVal_master);
            setMaster(refVal_master);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_master_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_name);
            setMasterName(refVal_master_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_master")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_master"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master_master;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_master);
            setMasterMaster(refVal_master_master);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("master_latest_commit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("master_latest_commit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_master_latest_commit;
            ok &= ModelBase::fromJson(fieldValue, refVal_master_latest_commit);
            setMasterLatestCommit(refVal_master_latest_commit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rename_on_conflict")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rename_on_conflict"));
        if(!fieldValue.is_null())
        {
            bool refVal_rename_on_conflict;
            ok &= ModelBase::fromJson(fieldValue, refVal_rename_on_conflict);
            setRenameOnConflict(refVal_rename_on_conflict);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modes"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InstanceMode>> refVal_modes;
            ok &= ModelBase::fromJson(fieldValue, refVal_modes);
            setModes(refVal_modes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("outline")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("outline"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_outline;
            ok &= ModelBase::fromJson(fieldValue, refVal_outline);
            setOutline(refVal_outline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("area")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("area"));
        if(!fieldValue.is_null())
        {
            double refVal_area;
            ok &= ModelBase::fromJson(fieldValue, refVal_area);
            setArea(refVal_area);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supplies")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supplies"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InstanceSupply>> refVal_supplies;
            ok &= ModelBase::fromJson(fieldValue, refVal_supplies);
            setSupplies(refVal_supplies);
        }
    }
    return ok;
}

void Instance::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    }
    if(m_Origin_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin_x"), m_Origin_x));
    }
    if(m_Origin_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origin_y"), m_Origin_y));
    }
    if(m_OrientationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("orientation"), m_Orientation));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_Computed_colorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("computed_color"), m_Computed_color));
    }
    if(m_MasterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master"), m_Master));
    }
    if(m_Master_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_name"), m_Master_name));
    }
    if(m_Master_masterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_master"), m_Master_master));
    }
    if(m_Master_latest_commitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("master_latest_commit"), m_Master_latest_commit));
    }
    if(m_Rename_on_conflictIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rename_on_conflict"), m_Rename_on_conflict));
    }
    if(m_ModesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modes"), m_Modes));
    }
    if(m_OutlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("outline"), m_Outline));
    }
    if(m_AreaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("area"), m_Area));
    }
    if(m_SuppliesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supplies"), m_Supplies));
    }
}

bool Instance::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        utility::string_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin_x")))
    {
        double refVal_origin_x;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin_x")), refVal_origin_x );
        setOriginX(refVal_origin_x);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("origin_y")))
    {
        double refVal_origin_y;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("origin_y")), refVal_origin_y );
        setOriginY(refVal_origin_y);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("orientation")))
    {
        utility::string_t refVal_orientation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("orientation")), refVal_orientation );
        setOrientation(refVal_orientation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        utility::string_t refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("color")), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("computed_color")))
    {
        utility::string_t refVal_computed_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("computed_color")), refVal_computed_color );
        setComputedColor(refVal_computed_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master")))
    {
        int32_t refVal_master;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master")), refVal_master );
        setMaster(refVal_master);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_name")))
    {
        utility::string_t refVal_master_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_name")), refVal_master_name );
        setMasterName(refVal_master_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_master")))
    {
        int32_t refVal_master_master;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_master")), refVal_master_master );
        setMasterMaster(refVal_master_master);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("master_latest_commit")))
    {
        int32_t refVal_master_latest_commit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("master_latest_commit")), refVal_master_latest_commit );
        setMasterLatestCommit(refVal_master_latest_commit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rename_on_conflict")))
    {
        bool refVal_rename_on_conflict;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rename_on_conflict")), refVal_rename_on_conflict );
        setRenameOnConflict(refVal_rename_on_conflict);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modes")))
    {
        std::vector<std::shared_ptr<InstanceMode>> refVal_modes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modes")), refVal_modes );
        setModes(refVal_modes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("outline")))
    {
        utility::string_t refVal_outline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("outline")), refVal_outline );
        setOutline(refVal_outline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("area")))
    {
        double refVal_area;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("area")), refVal_area );
        setArea(refVal_area);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supplies")))
    {
        std::vector<std::shared_ptr<InstanceSupply>> refVal_supplies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supplies")), refVal_supplies );
        setSupplies(refVal_supplies);
    }
    return ok;
}

int32_t Instance::getId() const
{
    return m_Id;
}

void Instance::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Instance::idIsSet() const
{
    return m_IdIsSet;
}

void Instance::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Instance::getName() const
{
    return m_Name;
}

void Instance::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Instance::nameIsSet() const
{
    return m_NameIsSet;
}

void Instance::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Instance::getCount() const
{
    return m_Count;
}

void Instance::setCount(const utility::string_t& value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool Instance::countIsSet() const
{
    return m_CountIsSet;
}

void Instance::unsetCount()
{
    m_CountIsSet = false;
}
double Instance::getOriginX() const
{
    return m_Origin_x;
}

void Instance::setOriginX(double value)
{
    m_Origin_x = value;
    m_Origin_xIsSet = true;
}

bool Instance::originXIsSet() const
{
    return m_Origin_xIsSet;
}

void Instance::unsetOrigin_x()
{
    m_Origin_xIsSet = false;
}
double Instance::getOriginY() const
{
    return m_Origin_y;
}

void Instance::setOriginY(double value)
{
    m_Origin_y = value;
    m_Origin_yIsSet = true;
}

bool Instance::originYIsSet() const
{
    return m_Origin_yIsSet;
}

void Instance::unsetOrigin_y()
{
    m_Origin_yIsSet = false;
}
utility::string_t Instance::getOrientation() const
{
    return m_Orientation;
}

void Instance::setOrientation(const utility::string_t& value)
{
    m_Orientation = value;
    m_OrientationIsSet = true;
}

bool Instance::orientationIsSet() const
{
    return m_OrientationIsSet;
}

void Instance::unsetOrientation()
{
    m_OrientationIsSet = false;
}
utility::string_t Instance::getColor() const
{
    return m_Color;
}

void Instance::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool Instance::colorIsSet() const
{
    return m_ColorIsSet;
}

void Instance::unsetColor()
{
    m_ColorIsSet = false;
}
utility::string_t Instance::getComputedColor() const
{
    return m_Computed_color;
}

void Instance::setComputedColor(const utility::string_t& value)
{
    m_Computed_color = value;
    m_Computed_colorIsSet = true;
}

bool Instance::computedColorIsSet() const
{
    return m_Computed_colorIsSet;
}

void Instance::unsetComputed_color()
{
    m_Computed_colorIsSet = false;
}
int32_t Instance::getMaster() const
{
    return m_Master;
}

void Instance::setMaster(int32_t value)
{
    m_Master = value;
    m_MasterIsSet = true;
}

bool Instance::masterIsSet() const
{
    return m_MasterIsSet;
}

void Instance::unsetMaster()
{
    m_MasterIsSet = false;
}
utility::string_t Instance::getMasterName() const
{
    return m_Master_name;
}

void Instance::setMasterName(const utility::string_t& value)
{
    m_Master_name = value;
    m_Master_nameIsSet = true;
}

bool Instance::masterNameIsSet() const
{
    return m_Master_nameIsSet;
}

void Instance::unsetMaster_name()
{
    m_Master_nameIsSet = false;
}
int32_t Instance::getMasterMaster() const
{
    return m_Master_master;
}

void Instance::setMasterMaster(int32_t value)
{
    m_Master_master = value;
    m_Master_masterIsSet = true;
}

bool Instance::masterMasterIsSet() const
{
    return m_Master_masterIsSet;
}

void Instance::unsetMaster_master()
{
    m_Master_masterIsSet = false;
}
int32_t Instance::getMasterLatestCommit() const
{
    return m_Master_latest_commit;
}

void Instance::setMasterLatestCommit(int32_t value)
{
    m_Master_latest_commit = value;
    m_Master_latest_commitIsSet = true;
}

bool Instance::masterLatestCommitIsSet() const
{
    return m_Master_latest_commitIsSet;
}

void Instance::unsetMaster_latest_commit()
{
    m_Master_latest_commitIsSet = false;
}
bool Instance::isRenameOnConflict() const
{
    return m_Rename_on_conflict;
}

void Instance::setRenameOnConflict(bool value)
{
    m_Rename_on_conflict = value;
    m_Rename_on_conflictIsSet = true;
}

bool Instance::renameOnConflictIsSet() const
{
    return m_Rename_on_conflictIsSet;
}

void Instance::unsetRename_on_conflict()
{
    m_Rename_on_conflictIsSet = false;
}
std::vector<std::shared_ptr<InstanceMode>>& Instance::getModes()
{
    return m_Modes;
}

void Instance::setModes(const std::vector<std::shared_ptr<InstanceMode>>& value)
{
    m_Modes = value;
    m_ModesIsSet = true;
}

bool Instance::modesIsSet() const
{
    return m_ModesIsSet;
}

void Instance::unsetModes()
{
    m_ModesIsSet = false;
}
utility::string_t Instance::getOutline() const
{
    return m_Outline;
}

void Instance::setOutline(const utility::string_t& value)
{
    m_Outline = value;
    m_OutlineIsSet = true;
}

bool Instance::outlineIsSet() const
{
    return m_OutlineIsSet;
}

void Instance::unsetOutline()
{
    m_OutlineIsSet = false;
}
double Instance::getArea() const
{
    return m_Area;
}

void Instance::setArea(double value)
{
    m_Area = value;
    m_AreaIsSet = true;
}

bool Instance::areaIsSet() const
{
    return m_AreaIsSet;
}

void Instance::unsetArea()
{
    m_AreaIsSet = false;
}
std::vector<std::shared_ptr<InstanceSupply>>& Instance::getSupplies()
{
    return m_Supplies;
}

void Instance::setSupplies(const std::vector<std::shared_ptr<InstanceSupply>>& value)
{
    m_Supplies = value;
    m_SuppliesIsSet = true;
}

bool Instance::suppliesIsSet() const
{
    return m_SuppliesIsSet;
}

void Instance::unsetSupplies()
{
    m_SuppliesIsSet = false;
}
}
}


