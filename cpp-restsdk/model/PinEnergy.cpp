/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinEnergy.h"

namespace powermeter {
namespace model {




PinEnergy::PinEnergy()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Pin = 0;
    m_PinIsSet = false;
    m_Pin_name = utility::conversions::to_string_t("");
    m_Pin_nameIsSet = false;
    m_Related_pin = 0;
    m_Related_pinIsSet = false;
    m_Related_pin_name = utility::conversions::to_string_t("");
    m_Related_pin_nameIsSet = false;
    m_Supply = 0;
    m_SupplyIsSet = false;
    m_Supply_name = utility::conversions::to_string_t("");
    m_Supply_nameIsSet = false;
    m_Process = utility::conversions::to_string_t("");
    m_ProcessIsSet = false;
    m_Rc = utility::conversions::to_string_t("");
    m_RcIsSet = false;
    m_Voltage = 0.0;
    m_VoltageIsSet = false;
    m_Temperature = 0;
    m_TemperatureIsSet = false;
    m_When = utility::conversions::to_string_t("");
    m_WhenIsSet = false;
    m_Index1IsSet = false;
    m_Variable1 = utility::conversions::to_string_t("");
    m_Variable1IsSet = false;
    m_Index2IsSet = false;
    m_Variable2 = utility::conversions::to_string_t("");
    m_Variable2IsSet = false;
    m_Rise_energyIsSet = false;
    m_Fall_energyIsSet = false;
    m_ModesIsSet = false;
}

PinEnergy::~PinEnergy()
{
}

void PinEnergy::validate()
{
    // TODO: implement validation
}

web::json::value PinEnergy::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_PinIsSet)
    {
        val[utility::conversions::to_string_t("pin")] = ModelBase::toJson(m_Pin);
    }
    if(m_Pin_nameIsSet)
    {
        val[utility::conversions::to_string_t("pin_name")] = ModelBase::toJson(m_Pin_name);
    }
    if(m_Related_pinIsSet)
    {
        val[utility::conversions::to_string_t("related_pin")] = ModelBase::toJson(m_Related_pin);
    }
    if(m_Related_pin_nameIsSet)
    {
        val[utility::conversions::to_string_t("related_pin_name")] = ModelBase::toJson(m_Related_pin_name);
    }
    if(m_SupplyIsSet)
    {
        val[utility::conversions::to_string_t("supply")] = ModelBase::toJson(m_Supply);
    }
    if(m_Supply_nameIsSet)
    {
        val[utility::conversions::to_string_t("supply_name")] = ModelBase::toJson(m_Supply_name);
    }
    if(m_ProcessIsSet)
    {
        val[utility::conversions::to_string_t("process")] = ModelBase::toJson(m_Process);
    }
    if(m_RcIsSet)
    {
        val[utility::conversions::to_string_t("rc")] = ModelBase::toJson(m_Rc);
    }
    if(m_VoltageIsSet)
    {
        val[utility::conversions::to_string_t("voltage")] = ModelBase::toJson(m_Voltage);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t("temperature")] = ModelBase::toJson(m_Temperature);
    }
    if(m_WhenIsSet)
    {
        val[utility::conversions::to_string_t("when")] = ModelBase::toJson(m_When);
    }
    if(m_Index1IsSet)
    {
        val[utility::conversions::to_string_t("index1")] = ModelBase::toJson(m_Index1);
    }
    if(m_Variable1IsSet)
    {
        val[utility::conversions::to_string_t("variable1")] = ModelBase::toJson(m_Variable1);
    }
    if(m_Index2IsSet)
    {
        val[utility::conversions::to_string_t("index2")] = ModelBase::toJson(m_Index2);
    }
    if(m_Variable2IsSet)
    {
        val[utility::conversions::to_string_t("variable2")] = ModelBase::toJson(m_Variable2);
    }
    if(m_Rise_energyIsSet)
    {
        val[utility::conversions::to_string_t("rise_energy")] = ModelBase::toJson(m_Rise_energy);
    }
    if(m_Fall_energyIsSet)
    {
        val[utility::conversions::to_string_t("fall_energy")] = ModelBase::toJson(m_Fall_energy);
    }
    if(m_ModesIsSet)
    {
        val[utility::conversions::to_string_t("modes")] = ModelBase::toJson(m_Modes);
    }

    return val;
}

bool PinEnergy::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pin"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_pin);
            setPin(refVal_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pin_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pin_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pin_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_pin_name);
            setPinName(refVal_pin_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("related_pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("related_pin"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_related_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_related_pin);
            setRelatedPin(refVal_related_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("related_pin_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("related_pin_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_related_pin_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_related_pin_name);
            setRelatedPinName(refVal_related_pin_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supply")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supply"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_supply;
            ok &= ModelBase::fromJson(fieldValue, refVal_supply);
            setSupply(refVal_supply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supply_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supply_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supply_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_supply_name);
            setSupplyName(refVal_supply_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("process")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("process"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_process;
            ok &= ModelBase::fromJson(fieldValue, refVal_process);
            setProcess(refVal_process);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rc"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rc;
            ok &= ModelBase::fromJson(fieldValue, refVal_rc);
            setRc(refVal_rc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("voltage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("voltage"));
        if(!fieldValue.is_null())
        {
            double refVal_voltage;
            ok &= ModelBase::fromJson(fieldValue, refVal_voltage);
            setVoltage(refVal_voltage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_temperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature);
            setTemperature(refVal_temperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("when")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("when"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_when;
            ok &= ModelBase::fromJson(fieldValue, refVal_when);
            setWhen(refVal_when);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("index1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("index1"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_index1;
            ok &= ModelBase::fromJson(fieldValue, refVal_index1);
            setIndex1(refVal_index1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("variable1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("variable1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_variable1;
            ok &= ModelBase::fromJson(fieldValue, refVal_variable1);
            setVariable1(refVal_variable1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("index2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("index2"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_index2;
            ok &= ModelBase::fromJson(fieldValue, refVal_index2);
            setIndex2(refVal_index2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("variable2")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("variable2"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_variable2;
            ok &= ModelBase::fromJson(fieldValue, refVal_variable2);
            setVariable2(refVal_variable2);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rise_energy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rise_energy"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_rise_energy;
            ok &= ModelBase::fromJson(fieldValue, refVal_rise_energy);
            setRiseEnergy(refVal_rise_energy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fall_energy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fall_energy"));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_fall_energy;
            ok &= ModelBase::fromJson(fieldValue, refVal_fall_energy);
            setFallEnergy(refVal_fall_energy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modes"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_modes;
            ok &= ModelBase::fromJson(fieldValue, refVal_modes);
            setModes(refVal_modes);
        }
    }
    return ok;
}

void PinEnergy::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_PinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pin"), m_Pin));
    }
    if(m_Pin_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pin_name"), m_Pin_name));
    }
    if(m_Related_pinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("related_pin"), m_Related_pin));
    }
    if(m_Related_pin_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("related_pin_name"), m_Related_pin_name));
    }
    if(m_SupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supply"), m_Supply));
    }
    if(m_Supply_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supply_name"), m_Supply_name));
    }
    if(m_ProcessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("process"), m_Process));
    }
    if(m_RcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rc"), m_Rc));
    }
    if(m_VoltageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("voltage"), m_Voltage));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature"), m_Temperature));
    }
    if(m_WhenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("when"), m_When));
    }
    if(m_Index1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("index1"), m_Index1));
    }
    if(m_Variable1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("variable1"), m_Variable1));
    }
    if(m_Index2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("index2"), m_Index2));
    }
    if(m_Variable2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("variable2"), m_Variable2));
    }
    if(m_Rise_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rise_energy"), m_Rise_energy));
    }
    if(m_Fall_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fall_energy"), m_Fall_energy));
    }
    if(m_ModesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modes"), m_Modes));
    }
}

bool PinEnergy::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pin")))
    {
        int32_t refVal_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pin")), refVal_pin );
        setPin(refVal_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pin_name")))
    {
        utility::string_t refVal_pin_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pin_name")), refVal_pin_name );
        setPinName(refVal_pin_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("related_pin")))
    {
        int32_t refVal_related_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("related_pin")), refVal_related_pin );
        setRelatedPin(refVal_related_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("related_pin_name")))
    {
        utility::string_t refVal_related_pin_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("related_pin_name")), refVal_related_pin_name );
        setRelatedPinName(refVal_related_pin_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supply")))
    {
        int32_t refVal_supply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supply")), refVal_supply );
        setSupply(refVal_supply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supply_name")))
    {
        utility::string_t refVal_supply_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supply_name")), refVal_supply_name );
        setSupplyName(refVal_supply_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("process")))
    {
        utility::string_t refVal_process;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("process")), refVal_process );
        setProcess(refVal_process);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rc")))
    {
        utility::string_t refVal_rc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rc")), refVal_rc );
        setRc(refVal_rc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("voltage")))
    {
        double refVal_voltage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("voltage")), refVal_voltage );
        setVoltage(refVal_voltage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature")))
    {
        int32_t refVal_temperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature")), refVal_temperature );
        setTemperature(refVal_temperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("when")))
    {
        utility::string_t refVal_when;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("when")), refVal_when );
        setWhen(refVal_when);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("index1")))
    {
        std::vector<double> refVal_index1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("index1")), refVal_index1 );
        setIndex1(refVal_index1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("variable1")))
    {
        utility::string_t refVal_variable1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("variable1")), refVal_variable1 );
        setVariable1(refVal_variable1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("index2")))
    {
        std::vector<double> refVal_index2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("index2")), refVal_index2 );
        setIndex2(refVal_index2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("variable2")))
    {
        utility::string_t refVal_variable2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("variable2")), refVal_variable2 );
        setVariable2(refVal_variable2);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rise_energy")))
    {
        std::vector<double> refVal_rise_energy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rise_energy")), refVal_rise_energy );
        setRiseEnergy(refVal_rise_energy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fall_energy")))
    {
        std::vector<double> refVal_fall_energy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fall_energy")), refVal_fall_energy );
        setFallEnergy(refVal_fall_energy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modes")))
    {
        std::vector<int32_t> refVal_modes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modes")), refVal_modes );
        setModes(refVal_modes);
    }
    return ok;
}

int32_t PinEnergy::getId() const
{
    return m_Id;
}

void PinEnergy::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PinEnergy::idIsSet() const
{
    return m_IdIsSet;
}

void PinEnergy::unsetId()
{
    m_IdIsSet = false;
}
int32_t PinEnergy::getPin() const
{
    return m_Pin;
}

void PinEnergy::setPin(int32_t value)
{
    m_Pin = value;
    m_PinIsSet = true;
}

bool PinEnergy::pinIsSet() const
{
    return m_PinIsSet;
}

void PinEnergy::unsetPin()
{
    m_PinIsSet = false;
}
utility::string_t PinEnergy::getPinName() const
{
    return m_Pin_name;
}

void PinEnergy::setPinName(const utility::string_t& value)
{
    m_Pin_name = value;
    m_Pin_nameIsSet = true;
}

bool PinEnergy::pinNameIsSet() const
{
    return m_Pin_nameIsSet;
}

void PinEnergy::unsetPin_name()
{
    m_Pin_nameIsSet = false;
}
int32_t PinEnergy::getRelatedPin() const
{
    return m_Related_pin;
}

void PinEnergy::setRelatedPin(int32_t value)
{
    m_Related_pin = value;
    m_Related_pinIsSet = true;
}

bool PinEnergy::relatedPinIsSet() const
{
    return m_Related_pinIsSet;
}

void PinEnergy::unsetRelated_pin()
{
    m_Related_pinIsSet = false;
}
utility::string_t PinEnergy::getRelatedPinName() const
{
    return m_Related_pin_name;
}

void PinEnergy::setRelatedPinName(const utility::string_t& value)
{
    m_Related_pin_name = value;
    m_Related_pin_nameIsSet = true;
}

bool PinEnergy::relatedPinNameIsSet() const
{
    return m_Related_pin_nameIsSet;
}

void PinEnergy::unsetRelated_pin_name()
{
    m_Related_pin_nameIsSet = false;
}
int32_t PinEnergy::getSupply() const
{
    return m_Supply;
}

void PinEnergy::setSupply(int32_t value)
{
    m_Supply = value;
    m_SupplyIsSet = true;
}

bool PinEnergy::supplyIsSet() const
{
    return m_SupplyIsSet;
}

void PinEnergy::unsetSupply()
{
    m_SupplyIsSet = false;
}
utility::string_t PinEnergy::getSupplyName() const
{
    return m_Supply_name;
}

void PinEnergy::setSupplyName(const utility::string_t& value)
{
    m_Supply_name = value;
    m_Supply_nameIsSet = true;
}

bool PinEnergy::supplyNameIsSet() const
{
    return m_Supply_nameIsSet;
}

void PinEnergy::unsetSupply_name()
{
    m_Supply_nameIsSet = false;
}
utility::string_t PinEnergy::getProcess() const
{
    return m_Process;
}

void PinEnergy::setProcess(const utility::string_t& value)
{
    m_Process = value;
    m_ProcessIsSet = true;
}

bool PinEnergy::processIsSet() const
{
    return m_ProcessIsSet;
}

void PinEnergy::unsetProcess()
{
    m_ProcessIsSet = false;
}
utility::string_t PinEnergy::getRc() const
{
    return m_Rc;
}

void PinEnergy::setRc(const utility::string_t& value)
{
    m_Rc = value;
    m_RcIsSet = true;
}

bool PinEnergy::rcIsSet() const
{
    return m_RcIsSet;
}

void PinEnergy::unsetRc()
{
    m_RcIsSet = false;
}
double PinEnergy::getVoltage() const
{
    return m_Voltage;
}

void PinEnergy::setVoltage(double value)
{
    m_Voltage = value;
    m_VoltageIsSet = true;
}

bool PinEnergy::voltageIsSet() const
{
    return m_VoltageIsSet;
}

void PinEnergy::unsetVoltage()
{
    m_VoltageIsSet = false;
}
int32_t PinEnergy::getTemperature() const
{
    return m_Temperature;
}

void PinEnergy::setTemperature(int32_t value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool PinEnergy::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void PinEnergy::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
utility::string_t PinEnergy::getWhen() const
{
    return m_When;
}

void PinEnergy::setWhen(const utility::string_t& value)
{
    m_When = value;
    m_WhenIsSet = true;
}

bool PinEnergy::whenIsSet() const
{
    return m_WhenIsSet;
}

void PinEnergy::unsetWhen()
{
    m_WhenIsSet = false;
}
std::vector<double>& PinEnergy::getIndex1()
{
    return m_Index1;
}

void PinEnergy::setIndex1(std::vector<double> value)
{
    m_Index1 = value;
    m_Index1IsSet = true;
}

bool PinEnergy::index1IsSet() const
{
    return m_Index1IsSet;
}

void PinEnergy::unsetIndex1()
{
    m_Index1IsSet = false;
}
utility::string_t PinEnergy::getVariable1() const
{
    return m_Variable1;
}

void PinEnergy::setVariable1(const utility::string_t& value)
{
    m_Variable1 = value;
    m_Variable1IsSet = true;
}

bool PinEnergy::variable1IsSet() const
{
    return m_Variable1IsSet;
}

void PinEnergy::unsetVariable1()
{
    m_Variable1IsSet = false;
}
std::vector<double>& PinEnergy::getIndex2()
{
    return m_Index2;
}

void PinEnergy::setIndex2(std::vector<double> value)
{
    m_Index2 = value;
    m_Index2IsSet = true;
}

bool PinEnergy::index2IsSet() const
{
    return m_Index2IsSet;
}

void PinEnergy::unsetIndex2()
{
    m_Index2IsSet = false;
}
utility::string_t PinEnergy::getVariable2() const
{
    return m_Variable2;
}

void PinEnergy::setVariable2(const utility::string_t& value)
{
    m_Variable2 = value;
    m_Variable2IsSet = true;
}

bool PinEnergy::variable2IsSet() const
{
    return m_Variable2IsSet;
}

void PinEnergy::unsetVariable2()
{
    m_Variable2IsSet = false;
}
std::vector<double>& PinEnergy::getRiseEnergy()
{
    return m_Rise_energy;
}

void PinEnergy::setRiseEnergy(std::vector<double> value)
{
    m_Rise_energy = value;
    m_Rise_energyIsSet = true;
}

bool PinEnergy::riseEnergyIsSet() const
{
    return m_Rise_energyIsSet;
}

void PinEnergy::unsetRise_energy()
{
    m_Rise_energyIsSet = false;
}
std::vector<double>& PinEnergy::getFallEnergy()
{
    return m_Fall_energy;
}

void PinEnergy::setFallEnergy(std::vector<double> value)
{
    m_Fall_energy = value;
    m_Fall_energyIsSet = true;
}

bool PinEnergy::fallEnergyIsSet() const
{
    return m_Fall_energyIsSet;
}

void PinEnergy::unsetFall_energy()
{
    m_Fall_energyIsSet = false;
}
std::vector<int32_t>& PinEnergy::getModes()
{
    return m_Modes;
}

void PinEnergy::setModes(std::vector<int32_t> value)
{
    m_Modes = value;
    m_ModesIsSet = true;
}

bool PinEnergy::modesIsSet() const
{
    return m_ModesIsSet;
}

void PinEnergy::unsetModes()
{
    m_ModesIsSet = false;
}
}
}


