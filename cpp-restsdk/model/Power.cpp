/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Power.h"

namespace powermeter {
namespace model {




Power::Power()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Mode = 0;
    m_ModeIsSet = false;
    m_Mode_name = utility::conversions::to_string_t("");
    m_Mode_nameIsSet = false;
    m_Supply = 0;
    m_SupplyIsSet = false;
    m_Supply_name = utility::conversions::to_string_t("");
    m_Supply_nameIsSet = false;
    m_Source = 0;
    m_SourceIsSet = false;
    m_Source_name = utility::conversions::to_string_t("");
    m_Source_nameIsSet = false;
    m_Tech_scaling = false;
    m_Tech_scalingIsSet = false;
    m_Confidence = 0.0;
    m_ConfidenceIsSet = false;
    m_Power_type = utility::conversions::to_string_t("");
    m_Power_typeIsSet = false;
    m_EquationIsSet = false;
    m_Table_columnsIsSet = false;
    m_TableIsSet = false;
    m_WaveformIsSet = false;
    m_Waveform_type = utility::conversions::to_string_t("");
    m_Waveform_typeIsSet = false;
}

Power::~Power()
{
}

void Power::validate()
{
    // TODO: implement validation
}

web::json::value Power::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t("mode")] = ModelBase::toJson(m_Mode);
    }
    if(m_Mode_nameIsSet)
    {
        val[utility::conversions::to_string_t("mode_name")] = ModelBase::toJson(m_Mode_name);
    }
    if(m_SupplyIsSet)
    {
        val[utility::conversions::to_string_t("supply")] = ModelBase::toJson(m_Supply);
    }
    if(m_Supply_nameIsSet)
    {
        val[utility::conversions::to_string_t("supply_name")] = ModelBase::toJson(m_Supply_name);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t("source")] = ModelBase::toJson(m_Source);
    }
    if(m_Source_nameIsSet)
    {
        val[utility::conversions::to_string_t("source_name")] = ModelBase::toJson(m_Source_name);
    }
    if(m_Tech_scalingIsSet)
    {
        val[utility::conversions::to_string_t("tech_scaling")] = ModelBase::toJson(m_Tech_scaling);
    }
    if(m_ConfidenceIsSet)
    {
        val[utility::conversions::to_string_t("confidence")] = ModelBase::toJson(m_Confidence);
    }
    if(m_Power_typeIsSet)
    {
        val[utility::conversions::to_string_t("power_type")] = ModelBase::toJson(m_Power_type);
    }
    if(m_EquationIsSet)
    {
        val[utility::conversions::to_string_t("equation")] = ModelBase::toJson(m_Equation);
    }
    if(m_Table_columnsIsSet)
    {
        val[utility::conversions::to_string_t("table_columns")] = ModelBase::toJson(m_Table_columns);
    }
    if(m_TableIsSet)
    {
        val[utility::conversions::to_string_t("table")] = ModelBase::toJson(m_Table);
    }
    if(m_WaveformIsSet)
    {
        val[utility::conversions::to_string_t("waveform")] = ModelBase::toJson(m_Waveform);
    }
    if(m_Waveform_typeIsSet)
    {
        val[utility::conversions::to_string_t("waveform_type")] = ModelBase::toJson(m_Waveform_type);
    }

    return val;
}

bool Power::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_mode;
            ok &= ModelBase::fromJson(fieldValue, refVal_mode);
            setMode(refVal_mode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mode_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mode_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mode_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_mode_name);
            setModeName(refVal_mode_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supply")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supply"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_supply;
            ok &= ModelBase::fromJson(fieldValue, refVal_supply);
            setSupply(refVal_supply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("supply_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("supply_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_supply_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_supply_name);
            setSupplyName(refVal_supply_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("source"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_source;
            ok &= ModelBase::fromJson(fieldValue, refVal_source);
            setSource(refVal_source);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("source_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_source_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_source_name);
            setSourceName(refVal_source_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tech_scaling")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tech_scaling"));
        if(!fieldValue.is_null())
        {
            bool refVal_tech_scaling;
            ok &= ModelBase::fromJson(fieldValue, refVal_tech_scaling);
            setTechScaling(refVal_tech_scaling);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confidence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("confidence"));
        if(!fieldValue.is_null())
        {
            double refVal_confidence;
            ok &= ModelBase::fromJson(fieldValue, refVal_confidence);
            setConfidence(refVal_confidence);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("power_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("power_type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_power_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_power_type);
            setPowerType(refVal_power_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("equation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("equation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_equation;
            ok &= ModelBase::fromJson(fieldValue, refVal_equation);
            setEquation(refVal_equation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("table_columns")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("table_columns"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_table_columns;
            ok &= ModelBase::fromJson(fieldValue, refVal_table_columns);
            setTableColumns(refVal_table_columns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("table")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("table"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_table;
            ok &= ModelBase::fromJson(fieldValue, refVal_table);
            setTable(refVal_table);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("waveform")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("waveform"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_waveform;
            ok &= ModelBase::fromJson(fieldValue, refVal_waveform);
            setWaveform(refVal_waveform);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("waveform_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("waveform_type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_waveform_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_waveform_type);
            setWaveformType(refVal_waveform_type);
        }
    }
    return ok;
}

void Power::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mode"), m_Mode));
    }
    if(m_Mode_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mode_name"), m_Mode_name));
    }
    if(m_SupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supply"), m_Supply));
    }
    if(m_Supply_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("supply_name"), m_Supply_name));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("source"), m_Source));
    }
    if(m_Source_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("source_name"), m_Source_name));
    }
    if(m_Tech_scalingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tech_scaling"), m_Tech_scaling));
    }
    if(m_ConfidenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confidence"), m_Confidence));
    }
    if(m_Power_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("power_type"), m_Power_type));
    }
    if(m_EquationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("equation"), m_Equation));
    }
    if(m_Table_columnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("table_columns"), m_Table_columns));
    }
    if(m_TableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("table"), m_Table));
    }
    if(m_WaveformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("waveform"), m_Waveform));
    }
    if(m_Waveform_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("waveform_type"), m_Waveform_type));
    }
}

bool Power::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mode")))
    {
        int32_t refVal_mode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mode")), refVal_mode );
        setMode(refVal_mode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mode_name")))
    {
        utility::string_t refVal_mode_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mode_name")), refVal_mode_name );
        setModeName(refVal_mode_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supply")))
    {
        int32_t refVal_supply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supply")), refVal_supply );
        setSupply(refVal_supply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("supply_name")))
    {
        utility::string_t refVal_supply_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("supply_name")), refVal_supply_name );
        setSupplyName(refVal_supply_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("source")))
    {
        int32_t refVal_source;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("source")), refVal_source );
        setSource(refVal_source);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("source_name")))
    {
        utility::string_t refVal_source_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("source_name")), refVal_source_name );
        setSourceName(refVal_source_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tech_scaling")))
    {
        bool refVal_tech_scaling;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tech_scaling")), refVal_tech_scaling );
        setTechScaling(refVal_tech_scaling);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confidence")))
    {
        double refVal_confidence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("confidence")), refVal_confidence );
        setConfidence(refVal_confidence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("power_type")))
    {
        utility::string_t refVal_power_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("power_type")), refVal_power_type );
        setPowerType(refVal_power_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("equation")))
    {
        std::shared_ptr<Object> refVal_equation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("equation")), refVal_equation );
        setEquation(refVal_equation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("table_columns")))
    {
        std::shared_ptr<Object> refVal_table_columns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("table_columns")), refVal_table_columns );
        setTableColumns(refVal_table_columns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("table")))
    {
        std::shared_ptr<Object> refVal_table;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("table")), refVal_table );
        setTable(refVal_table);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("waveform")))
    {
        std::shared_ptr<Object> refVal_waveform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("waveform")), refVal_waveform );
        setWaveform(refVal_waveform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("waveform_type")))
    {
        utility::string_t refVal_waveform_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("waveform_type")), refVal_waveform_type );
        setWaveformType(refVal_waveform_type);
    }
    return ok;
}

int32_t Power::getId() const
{
    return m_Id;
}

void Power::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Power::idIsSet() const
{
    return m_IdIsSet;
}

void Power::unsetId()
{
    m_IdIsSet = false;
}
int32_t Power::getMode() const
{
    return m_Mode;
}

void Power::setMode(int32_t value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool Power::modeIsSet() const
{
    return m_ModeIsSet;
}

void Power::unsetMode()
{
    m_ModeIsSet = false;
}
utility::string_t Power::getModeName() const
{
    return m_Mode_name;
}

void Power::setModeName(const utility::string_t& value)
{
    m_Mode_name = value;
    m_Mode_nameIsSet = true;
}

bool Power::modeNameIsSet() const
{
    return m_Mode_nameIsSet;
}

void Power::unsetMode_name()
{
    m_Mode_nameIsSet = false;
}
int32_t Power::getSupply() const
{
    return m_Supply;
}

void Power::setSupply(int32_t value)
{
    m_Supply = value;
    m_SupplyIsSet = true;
}

bool Power::supplyIsSet() const
{
    return m_SupplyIsSet;
}

void Power::unsetSupply()
{
    m_SupplyIsSet = false;
}
utility::string_t Power::getSupplyName() const
{
    return m_Supply_name;
}

void Power::setSupplyName(const utility::string_t& value)
{
    m_Supply_name = value;
    m_Supply_nameIsSet = true;
}

bool Power::supplyNameIsSet() const
{
    return m_Supply_nameIsSet;
}

void Power::unsetSupply_name()
{
    m_Supply_nameIsSet = false;
}
int32_t Power::getSource() const
{
    return m_Source;
}

void Power::setSource(int32_t value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool Power::sourceIsSet() const
{
    return m_SourceIsSet;
}

void Power::unsetSource()
{
    m_SourceIsSet = false;
}
utility::string_t Power::getSourceName() const
{
    return m_Source_name;
}

void Power::setSourceName(const utility::string_t& value)
{
    m_Source_name = value;
    m_Source_nameIsSet = true;
}

bool Power::sourceNameIsSet() const
{
    return m_Source_nameIsSet;
}

void Power::unsetSource_name()
{
    m_Source_nameIsSet = false;
}
bool Power::isTechScaling() const
{
    return m_Tech_scaling;
}

void Power::setTechScaling(bool value)
{
    m_Tech_scaling = value;
    m_Tech_scalingIsSet = true;
}

bool Power::techScalingIsSet() const
{
    return m_Tech_scalingIsSet;
}

void Power::unsetTech_scaling()
{
    m_Tech_scalingIsSet = false;
}
double Power::getConfidence() const
{
    return m_Confidence;
}

void Power::setConfidence(double value)
{
    m_Confidence = value;
    m_ConfidenceIsSet = true;
}

bool Power::confidenceIsSet() const
{
    return m_ConfidenceIsSet;
}

void Power::unsetConfidence()
{
    m_ConfidenceIsSet = false;
}
utility::string_t Power::getPowerType() const
{
    return m_Power_type;
}

void Power::setPowerType(const utility::string_t& value)
{
    m_Power_type = value;
    m_Power_typeIsSet = true;
}

bool Power::powerTypeIsSet() const
{
    return m_Power_typeIsSet;
}

void Power::unsetPower_type()
{
    m_Power_typeIsSet = false;
}
std::shared_ptr<Object> Power::getEquation() const
{
    return m_Equation;
}

void Power::setEquation(const std::shared_ptr<Object>& value)
{
    m_Equation = value;
    m_EquationIsSet = true;
}

bool Power::equationIsSet() const
{
    return m_EquationIsSet;
}

void Power::unsetEquation()
{
    m_EquationIsSet = false;
}
std::shared_ptr<Object> Power::getTableColumns() const
{
    return m_Table_columns;
}

void Power::setTableColumns(const std::shared_ptr<Object>& value)
{
    m_Table_columns = value;
    m_Table_columnsIsSet = true;
}

bool Power::tableColumnsIsSet() const
{
    return m_Table_columnsIsSet;
}

void Power::unsetTable_columns()
{
    m_Table_columnsIsSet = false;
}
std::shared_ptr<Object> Power::getTable() const
{
    return m_Table;
}

void Power::setTable(const std::shared_ptr<Object>& value)
{
    m_Table = value;
    m_TableIsSet = true;
}

bool Power::tableIsSet() const
{
    return m_TableIsSet;
}

void Power::unsetTable()
{
    m_TableIsSet = false;
}
std::shared_ptr<Object> Power::getWaveform() const
{
    return m_Waveform;
}

void Power::setWaveform(const std::shared_ptr<Object>& value)
{
    m_Waveform = value;
    m_WaveformIsSet = true;
}

bool Power::waveformIsSet() const
{
    return m_WaveformIsSet;
}

void Power::unsetWaveform()
{
    m_WaveformIsSet = false;
}
utility::string_t Power::getWaveformType() const
{
    return m_Waveform_type;
}

void Power::setWaveformType(const utility::string_t& value)
{
    m_Waveform_type = value;
    m_Waveform_typeIsSet = true;
}

bool Power::waveformTypeIsSet() const
{
    return m_Waveform_typeIsSet;
}

void Power::unsetWaveform_type()
{
    m_Waveform_typeIsSet = false;
}
}
}


