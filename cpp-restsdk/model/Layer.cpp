/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Layer.h"

namespace powermeter {
namespace model {




Layer::Layer()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Horizontal = false;
    m_HorizontalIsSet = false;
    m_Thickness = 0.0;
    m_ThicknessIsSet = false;
    m_Metal_thickness = 0.0;
    m_Metal_thicknessIsSet = false;
    m_Metal_density = 0.0;
    m_Metal_densityIsSet = false;
    m_Metal_conductivity = 0.0;
    m_Metal_conductivityIsSet = false;
    m_Metal_heatcapacity = 0.0;
    m_Metal_heatcapacityIsSet = false;
    m_Imd_conductivity = 0.0;
    m_Imd_conductivityIsSet = false;
    m_Imd_heatcapacity = 0.0;
    m_Imd_heatcapacityIsSet = false;
}

Layer::~Layer()
{
}

void Layer::validate()
{
    // TODO: implement validation
}

web::json::value Layer::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    }
    if(m_HorizontalIsSet)
    {
        val[utility::conversions::to_string_t("horizontal")] = ModelBase::toJson(m_Horizontal);
    }
    if(m_ThicknessIsSet)
    {
        val[utility::conversions::to_string_t("thickness")] = ModelBase::toJson(m_Thickness);
    }
    if(m_Metal_thicknessIsSet)
    {
        val[utility::conversions::to_string_t("metal_thickness")] = ModelBase::toJson(m_Metal_thickness);
    }
    if(m_Metal_densityIsSet)
    {
        val[utility::conversions::to_string_t("metal_density")] = ModelBase::toJson(m_Metal_density);
    }
    if(m_Metal_conductivityIsSet)
    {
        val[utility::conversions::to_string_t("metal_conductivity")] = ModelBase::toJson(m_Metal_conductivity);
    }
    if(m_Metal_heatcapacityIsSet)
    {
        val[utility::conversions::to_string_t("metal_heatcapacity")] = ModelBase::toJson(m_Metal_heatcapacity);
    }
    if(m_Imd_conductivityIsSet)
    {
        val[utility::conversions::to_string_t("imd_conductivity")] = ModelBase::toJson(m_Imd_conductivity);
    }
    if(m_Imd_heatcapacityIsSet)
    {
        val[utility::conversions::to_string_t("imd_heatcapacity")] = ModelBase::toJson(m_Imd_heatcapacity);
    }

    return val;
}

bool Layer::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("horizontal")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("horizontal"));
        if(!fieldValue.is_null())
        {
            bool refVal_horizontal;
            ok &= ModelBase::fromJson(fieldValue, refVal_horizontal);
            setHorizontal(refVal_horizontal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("thickness")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("thickness"));
        if(!fieldValue.is_null())
        {
            double refVal_thickness;
            ok &= ModelBase::fromJson(fieldValue, refVal_thickness);
            setThickness(refVal_thickness);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metal_thickness")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metal_thickness"));
        if(!fieldValue.is_null())
        {
            double refVal_metal_thickness;
            ok &= ModelBase::fromJson(fieldValue, refVal_metal_thickness);
            setMetalThickness(refVal_metal_thickness);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metal_density")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metal_density"));
        if(!fieldValue.is_null())
        {
            double refVal_metal_density;
            ok &= ModelBase::fromJson(fieldValue, refVal_metal_density);
            setMetalDensity(refVal_metal_density);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metal_conductivity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metal_conductivity"));
        if(!fieldValue.is_null())
        {
            double refVal_metal_conductivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_metal_conductivity);
            setMetalConductivity(refVal_metal_conductivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metal_heatcapacity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metal_heatcapacity"));
        if(!fieldValue.is_null())
        {
            double refVal_metal_heatcapacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_metal_heatcapacity);
            setMetalHeatcapacity(refVal_metal_heatcapacity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imd_conductivity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imd_conductivity"));
        if(!fieldValue.is_null())
        {
            double refVal_imd_conductivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_imd_conductivity);
            setImdConductivity(refVal_imd_conductivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imd_heatcapacity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imd_heatcapacity"));
        if(!fieldValue.is_null())
        {
            double refVal_imd_heatcapacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_imd_heatcapacity);
            setImdHeatcapacity(refVal_imd_heatcapacity);
        }
    }
    return ok;
}

void Layer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    }
    if(m_HorizontalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("horizontal"), m_Horizontal));
    }
    if(m_ThicknessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("thickness"), m_Thickness));
    }
    if(m_Metal_thicknessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metal_thickness"), m_Metal_thickness));
    }
    if(m_Metal_densityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metal_density"), m_Metal_density));
    }
    if(m_Metal_conductivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metal_conductivity"), m_Metal_conductivity));
    }
    if(m_Metal_heatcapacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metal_heatcapacity"), m_Metal_heatcapacity));
    }
    if(m_Imd_conductivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imd_conductivity"), m_Imd_conductivity));
    }
    if(m_Imd_heatcapacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imd_heatcapacity"), m_Imd_heatcapacity));
    }
}

bool Layer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        int32_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("horizontal")))
    {
        bool refVal_horizontal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("horizontal")), refVal_horizontal );
        setHorizontal(refVal_horizontal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("thickness")))
    {
        double refVal_thickness;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("thickness")), refVal_thickness );
        setThickness(refVal_thickness);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metal_thickness")))
    {
        double refVal_metal_thickness;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metal_thickness")), refVal_metal_thickness );
        setMetalThickness(refVal_metal_thickness);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metal_density")))
    {
        double refVal_metal_density;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metal_density")), refVal_metal_density );
        setMetalDensity(refVal_metal_density);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metal_conductivity")))
    {
        double refVal_metal_conductivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metal_conductivity")), refVal_metal_conductivity );
        setMetalConductivity(refVal_metal_conductivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metal_heatcapacity")))
    {
        double refVal_metal_heatcapacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metal_heatcapacity")), refVal_metal_heatcapacity );
        setMetalHeatcapacity(refVal_metal_heatcapacity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imd_conductivity")))
    {
        double refVal_imd_conductivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imd_conductivity")), refVal_imd_conductivity );
        setImdConductivity(refVal_imd_conductivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imd_heatcapacity")))
    {
        double refVal_imd_heatcapacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imd_heatcapacity")), refVal_imd_heatcapacity );
        setImdHeatcapacity(refVal_imd_heatcapacity);
    }
    return ok;
}

int32_t Layer::getId() const
{
    return m_Id;
}

void Layer::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Layer::idIsSet() const
{
    return m_IdIsSet;
}

void Layer::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Layer::getName() const
{
    return m_Name;
}

void Layer::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Layer::nameIsSet() const
{
    return m_NameIsSet;
}

void Layer::unsetName()
{
    m_NameIsSet = false;
}
int32_t Layer::getCount() const
{
    return m_Count;
}

void Layer::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool Layer::countIsSet() const
{
    return m_CountIsSet;
}

void Layer::unsetCount()
{
    m_CountIsSet = false;
}
bool Layer::isHorizontal() const
{
    return m_Horizontal;
}

void Layer::setHorizontal(bool value)
{
    m_Horizontal = value;
    m_HorizontalIsSet = true;
}

bool Layer::horizontalIsSet() const
{
    return m_HorizontalIsSet;
}

void Layer::unsetHorizontal()
{
    m_HorizontalIsSet = false;
}
double Layer::getThickness() const
{
    return m_Thickness;
}

void Layer::setThickness(double value)
{
    m_Thickness = value;
    m_ThicknessIsSet = true;
}

bool Layer::thicknessIsSet() const
{
    return m_ThicknessIsSet;
}

void Layer::unsetThickness()
{
    m_ThicknessIsSet = false;
}
double Layer::getMetalThickness() const
{
    return m_Metal_thickness;
}

void Layer::setMetalThickness(double value)
{
    m_Metal_thickness = value;
    m_Metal_thicknessIsSet = true;
}

bool Layer::metalThicknessIsSet() const
{
    return m_Metal_thicknessIsSet;
}

void Layer::unsetMetal_thickness()
{
    m_Metal_thicknessIsSet = false;
}
double Layer::getMetalDensity() const
{
    return m_Metal_density;
}

void Layer::setMetalDensity(double value)
{
    m_Metal_density = value;
    m_Metal_densityIsSet = true;
}

bool Layer::metalDensityIsSet() const
{
    return m_Metal_densityIsSet;
}

void Layer::unsetMetal_density()
{
    m_Metal_densityIsSet = false;
}
double Layer::getMetalConductivity() const
{
    return m_Metal_conductivity;
}

void Layer::setMetalConductivity(double value)
{
    m_Metal_conductivity = value;
    m_Metal_conductivityIsSet = true;
}

bool Layer::metalConductivityIsSet() const
{
    return m_Metal_conductivityIsSet;
}

void Layer::unsetMetal_conductivity()
{
    m_Metal_conductivityIsSet = false;
}
double Layer::getMetalHeatcapacity() const
{
    return m_Metal_heatcapacity;
}

void Layer::setMetalHeatcapacity(double value)
{
    m_Metal_heatcapacity = value;
    m_Metal_heatcapacityIsSet = true;
}

bool Layer::metalHeatcapacityIsSet() const
{
    return m_Metal_heatcapacityIsSet;
}

void Layer::unsetMetal_heatcapacity()
{
    m_Metal_heatcapacityIsSet = false;
}
double Layer::getImdConductivity() const
{
    return m_Imd_conductivity;
}

void Layer::setImdConductivity(double value)
{
    m_Imd_conductivity = value;
    m_Imd_conductivityIsSet = true;
}

bool Layer::imdConductivityIsSet() const
{
    return m_Imd_conductivityIsSet;
}

void Layer::unsetImd_conductivity()
{
    m_Imd_conductivityIsSet = false;
}
double Layer::getImdHeatcapacity() const
{
    return m_Imd_heatcapacity;
}

void Layer::setImdHeatcapacity(double value)
{
    m_Imd_heatcapacity = value;
    m_Imd_heatcapacityIsSet = true;
}

bool Layer::imdHeatcapacityIsSet() const
{
    return m_Imd_heatcapacityIsSet;
}

void Layer::unsetImd_heatcapacity()
{
    m_Imd_heatcapacityIsSet = false;
}
}
}


