/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "VRSupply.h"

namespace powermeter {
namespace model {




VRSupply::VRSupply()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Direction = 0;
    m_DirectionIsSet = false;
    m_Vmin = 0.0;
    m_VminIsSet = false;
    m_Vmax = 0.0;
    m_VmaxIsSet = false;
}

VRSupply::~VRSupply()
{
}

void VRSupply::validate()
{
    // TODO: implement validation
}

web::json::value VRSupply::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DirectionIsSet)
    {
        val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_VminIsSet)
    {
        val[utility::conversions::to_string_t("Vmin")] = ModelBase::toJson(m_Vmin);
    }
    if(m_VmaxIsSet)
    {
        val[utility::conversions::to_string_t("Vmax")] = ModelBase::toJson(m_Vmax);
    }

    return val;
}

bool VRSupply::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("direction"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_direction;
            ok &= ModelBase::fromJson(fieldValue, refVal_direction);
            setDirection(refVal_direction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Vmin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vmin"));
        if(!fieldValue.is_null())
        {
            double refVal_Vmin;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vmin);
            setVmin(refVal_Vmin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("Vmax")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("Vmax"));
        if(!fieldValue.is_null())
        {
            double refVal_Vmax;
            ok &= ModelBase::fromJson(fieldValue, refVal_Vmax);
            setVmax(refVal_Vmax);
        }
    }
    return ok;
}

void VRSupply::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    }
    if(m_VminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vmin"), m_Vmin));
    }
    if(m_VmaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("Vmax"), m_Vmax));
    }
}

bool VRSupply::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direction")))
    {
        int32_t refVal_direction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction")), refVal_direction );
        setDirection(refVal_direction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Vmin")))
    {
        double refVal_Vmin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vmin")), refVal_Vmin );
        setVmin(refVal_Vmin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("Vmax")))
    {
        double refVal_Vmax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("Vmax")), refVal_Vmax );
        setVmax(refVal_Vmax);
    }
    return ok;
}

int32_t VRSupply::getId() const
{
    return m_Id;
}

void VRSupply::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool VRSupply::idIsSet() const
{
    return m_IdIsSet;
}

void VRSupply::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t VRSupply::getName() const
{
    return m_Name;
}

void VRSupply::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool VRSupply::nameIsSet() const
{
    return m_NameIsSet;
}

void VRSupply::unsetName()
{
    m_NameIsSet = false;
}
int32_t VRSupply::getDirection() const
{
    return m_Direction;
}

void VRSupply::setDirection(int32_t value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}

bool VRSupply::directionIsSet() const
{
    return m_DirectionIsSet;
}

void VRSupply::unsetDirection()
{
    m_DirectionIsSet = false;
}
double VRSupply::getVmin() const
{
    return m_Vmin;
}

void VRSupply::setVmin(double value)
{
    m_Vmin = value;
    m_VminIsSet = true;
}

bool VRSupply::vminIsSet() const
{
    return m_VminIsSet;
}

void VRSupply::unsetVmin()
{
    m_VminIsSet = false;
}
double VRSupply::getVmax() const
{
    return m_Vmax;
}

void VRSupply::setVmax(double value)
{
    m_Vmax = value;
    m_VmaxIsSet = true;
}

bool VRSupply::vmaxIsSet() const
{
    return m_VmaxIsSet;
}

void VRSupply::unsetVmax()
{
    m_VmaxIsSet = false;
}
}
}


