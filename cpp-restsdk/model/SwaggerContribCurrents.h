/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SwaggerContribCurrents.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_SwaggerContribCurrents_H_
#define POWERMETER_MODEL_SwaggerContribCurrents_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  SwaggerContribCurrents
    : public ModelBase
{
public:
    SwaggerContribCurrents();
    virtual ~SwaggerContribCurrents();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SwaggerContribCurrents members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getP() const;
    bool PIsSet() const;
    void unsetp();

    void setP(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getV() const;
    bool VIsSet() const;
    void unsetv();

    void setV(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getT() const;
    bool TIsSet() const;
    void unsett();

    void setT(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(double value);

    /// <summary>
    /// 
    /// </summary>
    double getIg() const;
    bool igIsSet() const;
    void unsetIg();

    void setIg(double value);

    /// <summary>
    /// 
    /// </summary>
    double getIs() const;
    bool isIsSet() const;
    void unsetIs();

    void setIs(double value);

    /// <summary>
    /// 
    /// </summary>
    double getIb() const;
    bool ibIsSet() const;
    void unsetIb();

    void setIb(double value);


protected:
    utility::string_t m_p;
    bool m_pIsSet;
    double m_v;
    bool m_vIsSet;
    int32_t m_t;
    bool m_tIsSet;
    double m_Id;
    bool m_IdIsSet;
    double m_Ig;
    bool m_IgIsSet;
    double m_Is;
    bool m_IsIsSet;
    double m_Ib;
    bool m_IbIsSet;
};


}
}

#endif /* POWERMETER_MODEL_SwaggerContribCurrents_H_ */
