/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ScenarioMaster.h"

namespace powermeter {
namespace model {




ScenarioMaster::ScenarioMaster()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Descr = utility::conversions::to_string_t("");
    m_DescrIsSet = false;
    m_Latest_commit = 0;
    m_Latest_commitIsSet = false;
    m_Current_version = 0;
    m_Current_versionIsSet = false;
    m_Average_power = 0.0;
    m_Average_powerIsSet = false;
    m_Total_energy = 0.0;
    m_Total_energyIsSet = false;
    m_Confidence = 0.0;
    m_ConfidenceIsSet = false;
}

ScenarioMaster::~ScenarioMaster()
{
}

void ScenarioMaster::validate()
{
    // TODO: implement validation
}

web::json::value ScenarioMaster::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[utility::conversions::to_string_t("title")] = ModelBase::toJson(m_Title);
    }
    if(m_DescrIsSet)
    {
        val[utility::conversions::to_string_t("descr")] = ModelBase::toJson(m_Descr);
    }
    if(m_Latest_commitIsSet)
    {
        val[utility::conversions::to_string_t("latest_commit")] = ModelBase::toJson(m_Latest_commit);
    }
    if(m_Current_versionIsSet)
    {
        val[utility::conversions::to_string_t("current_version")] = ModelBase::toJson(m_Current_version);
    }
    if(m_Average_powerIsSet)
    {
        val[utility::conversions::to_string_t("average_power")] = ModelBase::toJson(m_Average_power);
    }
    if(m_Total_energyIsSet)
    {
        val[utility::conversions::to_string_t("total_energy")] = ModelBase::toJson(m_Total_energy);
    }
    if(m_ConfidenceIsSet)
    {
        val[utility::conversions::to_string_t("confidence")] = ModelBase::toJson(m_Confidence);
    }

    return val;
}

bool ScenarioMaster::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("title")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("title"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_title;
            ok &= ModelBase::fromJson(fieldValue, refVal_title);
            setTitle(refVal_title);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("descr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("descr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_descr;
            ok &= ModelBase::fromJson(fieldValue, refVal_descr);
            setDescr(refVal_descr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latest_commit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latest_commit"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_latest_commit;
            ok &= ModelBase::fromJson(fieldValue, refVal_latest_commit);
            setLatestCommit(refVal_latest_commit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_current_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_version);
            setCurrentVersion(refVal_current_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("average_power")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("average_power"));
        if(!fieldValue.is_null())
        {
            double refVal_average_power;
            ok &= ModelBase::fromJson(fieldValue, refVal_average_power);
            setAveragePower(refVal_average_power);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("total_energy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("total_energy"));
        if(!fieldValue.is_null())
        {
            double refVal_total_energy;
            ok &= ModelBase::fromJson(fieldValue, refVal_total_energy);
            setTotalEnergy(refVal_total_energy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("confidence")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("confidence"));
        if(!fieldValue.is_null())
        {
            double refVal_confidence;
            ok &= ModelBase::fromJson(fieldValue, refVal_confidence);
            setConfidence(refVal_confidence);
        }
    }
    return ok;
}

void ScenarioMaster::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("title"), m_Title));
    }
    if(m_DescrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("descr"), m_Descr));
    }
    if(m_Latest_commitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latest_commit"), m_Latest_commit));
    }
    if(m_Current_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_version"), m_Current_version));
    }
    if(m_Average_powerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("average_power"), m_Average_power));
    }
    if(m_Total_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("total_energy"), m_Total_energy));
    }
    if(m_ConfidenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("confidence"), m_Confidence));
    }
}

bool ScenarioMaster::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("title")))
    {
        utility::string_t refVal_title;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("title")), refVal_title );
        setTitle(refVal_title);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("descr")))
    {
        utility::string_t refVal_descr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("descr")), refVal_descr );
        setDescr(refVal_descr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latest_commit")))
    {
        int32_t refVal_latest_commit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latest_commit")), refVal_latest_commit );
        setLatestCommit(refVal_latest_commit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_version")))
    {
        int32_t refVal_current_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_version")), refVal_current_version );
        setCurrentVersion(refVal_current_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("average_power")))
    {
        double refVal_average_power;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("average_power")), refVal_average_power );
        setAveragePower(refVal_average_power);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("total_energy")))
    {
        double refVal_total_energy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("total_energy")), refVal_total_energy );
        setTotalEnergy(refVal_total_energy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("confidence")))
    {
        double refVal_confidence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("confidence")), refVal_confidence );
        setConfidence(refVal_confidence);
    }
    return ok;
}

int32_t ScenarioMaster::getId() const
{
    return m_Id;
}

void ScenarioMaster::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ScenarioMaster::idIsSet() const
{
    return m_IdIsSet;
}

void ScenarioMaster::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ScenarioMaster::getTitle() const
{
    return m_Title;
}

void ScenarioMaster::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool ScenarioMaster::titleIsSet() const
{
    return m_TitleIsSet;
}

void ScenarioMaster::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t ScenarioMaster::getDescr() const
{
    return m_Descr;
}

void ScenarioMaster::setDescr(const utility::string_t& value)
{
    m_Descr = value;
    m_DescrIsSet = true;
}

bool ScenarioMaster::descrIsSet() const
{
    return m_DescrIsSet;
}

void ScenarioMaster::unsetDescr()
{
    m_DescrIsSet = false;
}
int32_t ScenarioMaster::getLatestCommit() const
{
    return m_Latest_commit;
}

void ScenarioMaster::setLatestCommit(int32_t value)
{
    m_Latest_commit = value;
    m_Latest_commitIsSet = true;
}

bool ScenarioMaster::latestCommitIsSet() const
{
    return m_Latest_commitIsSet;
}

void ScenarioMaster::unsetLatest_commit()
{
    m_Latest_commitIsSet = false;
}
int32_t ScenarioMaster::getCurrentVersion() const
{
    return m_Current_version;
}

void ScenarioMaster::setCurrentVersion(int32_t value)
{
    m_Current_version = value;
    m_Current_versionIsSet = true;
}

bool ScenarioMaster::currentVersionIsSet() const
{
    return m_Current_versionIsSet;
}

void ScenarioMaster::unsetCurrent_version()
{
    m_Current_versionIsSet = false;
}
double ScenarioMaster::getAveragePower() const
{
    return m_Average_power;
}

void ScenarioMaster::setAveragePower(double value)
{
    m_Average_power = value;
    m_Average_powerIsSet = true;
}

bool ScenarioMaster::averagePowerIsSet() const
{
    return m_Average_powerIsSet;
}

void ScenarioMaster::unsetAverage_power()
{
    m_Average_powerIsSet = false;
}
double ScenarioMaster::getTotalEnergy() const
{
    return m_Total_energy;
}

void ScenarioMaster::setTotalEnergy(double value)
{
    m_Total_energy = value;
    m_Total_energyIsSet = true;
}

bool ScenarioMaster::totalEnergyIsSet() const
{
    return m_Total_energyIsSet;
}

void ScenarioMaster::unsetTotal_energy()
{
    m_Total_energyIsSet = false;
}
double ScenarioMaster::getConfidence() const
{
    return m_Confidence;
}

void ScenarioMaster::setConfidence(double value)
{
    m_Confidence = value;
    m_ConfidenceIsSet = true;
}

bool ScenarioMaster::confidenceIsSet() const
{
    return m_ConfidenceIsSet;
}

void ScenarioMaster::unsetConfidence()
{
    m_ConfidenceIsSet = false;
}
}
}


