/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Power.h
 *
 * 
 */

#ifndef POWERMETER_MODEL_Power_H_
#define POWERMETER_MODEL_Power_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace powermeter {
namespace model {


/// <summary>
/// 
/// </summary>
class  Power
    : public ModelBase
{
public:
    Power();
    virtual ~Power();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Power members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMode() const;
    bool modeIsSet() const;
    void unsetMode();

    void setMode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getModeName() const;
    bool modeNameIsSet() const;
    void unsetMode_name();

    void setModeName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSupply() const;
    bool supplyIsSet() const;
    void unsetSupply();

    void setSupply(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSupplyName() const;
    bool supplyNameIsSet() const;
    void unsetSupply_name();

    void setSupplyName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSourceName() const;
    bool sourceNameIsSet() const;
    void unsetSource_name();

    void setSourceName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isTechScaling() const;
    bool techScalingIsSet() const;
    void unsetTech_scaling();

    void setTechScaling(bool value);

    /// <summary>
    /// 
    /// </summary>
    double getConfidence() const;
    bool confidenceIsSet() const;
    void unsetConfidence();

    void setConfidence(double value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPowerType() const;
    bool powerTypeIsSet() const;
    void unsetPower_type();

    void setPowerType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getEquation() const;
    bool equationIsSet() const;
    void unsetEquation();

    void setEquation(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getTableColumns() const;
    bool tableColumnsIsSet() const;
    void unsetTable_columns();

    void setTableColumns(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getTable() const;
    bool tableIsSet() const;
    void unsetTable();

    void setTable(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getWaveform() const;
    bool waveformIsSet() const;
    void unsetWaveform();

    void setWaveform(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWaveformType() const;
    bool waveformTypeIsSet() const;
    void unsetWaveform_type();

    void setWaveformType(const utility::string_t& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Mode;
    bool m_ModeIsSet;
    utility::string_t m_Mode_name;
    bool m_Mode_nameIsSet;
    int32_t m_Supply;
    bool m_SupplyIsSet;
    utility::string_t m_Supply_name;
    bool m_Supply_nameIsSet;
    int32_t m_Source;
    bool m_SourceIsSet;
    utility::string_t m_Source_name;
    bool m_Source_nameIsSet;
    bool m_Tech_scaling;
    bool m_Tech_scalingIsSet;
    double m_Confidence;
    bool m_ConfidenceIsSet;
    utility::string_t m_Power_type;
    bool m_Power_typeIsSet;
    std::shared_ptr<Object> m_Equation;
    bool m_EquationIsSet;
    std::shared_ptr<Object> m_Table_columns;
    bool m_Table_columnsIsSet;
    std::shared_ptr<Object> m_Table;
    bool m_TableIsSet;
    std::shared_ptr<Object> m_Waveform;
    bool m_WaveformIsSet;
    utility::string_t m_Waveform_type;
    bool m_Waveform_typeIsSet;
};


}
}

#endif /* POWERMETER_MODEL_Power_H_ */
