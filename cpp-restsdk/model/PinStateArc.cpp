/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PinStateArc.h"

namespace powermeter {
namespace model {




PinStateArc::PinStateArc()
{
    m_Pin = utility::conversions::to_string_t("");
    m_PinIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
}

PinStateArc::~PinStateArc()
{
}

void PinStateArc::validate()
{
    // TODO: implement validation
}

web::json::value PinStateArc::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PinIsSet)
    {
        val[utility::conversions::to_string_t("pin")] = ModelBase::toJson(m_Pin);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t("state")] = ModelBase::toJson(m_State);
    }

    return val;
}

bool PinStateArc::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("pin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pin"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pin;
            ok &= ModelBase::fromJson(fieldValue, refVal_pin);
            setPin(refVal_pin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("state")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("state"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_state;
            ok &= ModelBase::fromJson(fieldValue, refVal_state);
            setState(refVal_state);
        }
    }
    return ok;
}

void PinStateArc::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pin"), m_Pin));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("state"), m_State));
    }
}

bool PinStateArc::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("pin")))
    {
        utility::string_t refVal_pin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pin")), refVal_pin );
        setPin(refVal_pin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("state")))
    {
        utility::string_t refVal_state;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("state")), refVal_state );
        setState(refVal_state);
    }
    return ok;
}

utility::string_t PinStateArc::getPin() const
{
    return m_Pin;
}

void PinStateArc::setPin(const utility::string_t& value)
{
    m_Pin = value;
    m_PinIsSet = true;
}

bool PinStateArc::pinIsSet() const
{
    return m_PinIsSet;
}

void PinStateArc::unsetPin()
{
    m_PinIsSet = false;
}
utility::string_t PinStateArc::getState() const
{
    return m_State;
}

void PinStateArc::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool PinStateArc::stateIsSet() const
{
    return m_StateIsSet;
}

void PinStateArc::unsetState()
{
    m_StateIsSet = false;
}
}
}


