/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ScenarioModeUtil.h"

namespace powermeter {
namespace model {




ScenarioModeUtil::ScenarioModeUtil()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Mastermode = 0;
    m_MastermodeIsSet = false;
    m_Mastermode_name = utility::conversions::to_string_t("");
    m_Mastermode_nameIsSet = false;
}

ScenarioModeUtil::~ScenarioModeUtil()
{
}

void ScenarioModeUtil::validate()
{
    // TODO: implement validation
}

web::json::value ScenarioModeUtil::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_MastermodeIsSet)
    {
        val[utility::conversions::to_string_t("mastermode")] = ModelBase::toJson(m_Mastermode);
    }
    if(m_Mastermode_nameIsSet)
    {
        val[utility::conversions::to_string_t("mastermode_name")] = ModelBase::toJson(m_Mastermode_name);
    }

    return val;
}

bool ScenarioModeUtil::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mastermode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mastermode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_mastermode;
            ok &= ModelBase::fromJson(fieldValue, refVal_mastermode);
            setMastermode(refVal_mastermode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mastermode_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mastermode_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mastermode_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_mastermode_name);
            setMastermodeName(refVal_mastermode_name);
        }
    }
    return ok;
}

void ScenarioModeUtil::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_MastermodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mastermode"), m_Mastermode));
    }
    if(m_Mastermode_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mastermode_name"), m_Mastermode_name));
    }
}

bool ScenarioModeUtil::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mastermode")))
    {
        int32_t refVal_mastermode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mastermode")), refVal_mastermode );
        setMastermode(refVal_mastermode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mastermode_name")))
    {
        utility::string_t refVal_mastermode_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mastermode_name")), refVal_mastermode_name );
        setMastermodeName(refVal_mastermode_name);
    }
    return ok;
}

int32_t ScenarioModeUtil::getId() const
{
    return m_Id;
}

void ScenarioModeUtil::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ScenarioModeUtil::idIsSet() const
{
    return m_IdIsSet;
}

void ScenarioModeUtil::unsetId()
{
    m_IdIsSet = false;
}
int32_t ScenarioModeUtil::getMastermode() const
{
    return m_Mastermode;
}

void ScenarioModeUtil::setMastermode(int32_t value)
{
    m_Mastermode = value;
    m_MastermodeIsSet = true;
}

bool ScenarioModeUtil::mastermodeIsSet() const
{
    return m_MastermodeIsSet;
}

void ScenarioModeUtil::unsetMastermode()
{
    m_MastermodeIsSet = false;
}
utility::string_t ScenarioModeUtil::getMastermodeName() const
{
    return m_Mastermode_name;
}

void ScenarioModeUtil::setMastermodeName(const utility::string_t& value)
{
    m_Mastermode_name = value;
    m_Mastermode_nameIsSet = true;
}

bool ScenarioModeUtil::mastermodeNameIsSet() const
{
    return m_Mastermode_nameIsSet;
}

void ScenarioModeUtil::unsetMastermode_name()
{
    m_Mastermode_nameIsSet = false;
}
}
}


