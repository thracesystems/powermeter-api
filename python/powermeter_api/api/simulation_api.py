# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powermeter_api.api_client import ApiClient
from powermeter_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SimulationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_simulation_scope_delete_all(self, simid, **kwargs):  # noqa: E501
        """api_simulation_scope_delete_all  # noqa: E501

        Delete all scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_simulation_scope_delete_all(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_simulation_scope_delete_all_with_http_info(simid, **kwargs)  # noqa: E501

    def api_simulation_scope_delete_all_with_http_info(self, simid, **kwargs):  # noqa: E501
        """api_simulation_scope_delete_all  # noqa: E501

        Delete all scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_simulation_scope_delete_all_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_simulation_scope_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `api_simulation_scope_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_access_create(self, simid, **kwargs):  # noqa: E501
        """simulation_access_create  # noqa: E501

        Update design access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_access_create(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_access_create_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_access_create_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_access_create  # noqa: E501

        Update design access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_access_create_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_access_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_access_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/access/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_clone_create(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_clone_create  # noqa: E501

        Clone a measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_clone_create(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimMeasurement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_clone_create_with_http_info(simid, measureid, **kwargs)  # noqa: E501

    def simulation_measurement_clone_create_with_http_info(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_clone_create  # noqa: E501

        Clone a measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_clone_create_with_http_info(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimMeasurement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_clone_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_clone_create`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_clone_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimMeasurement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_create(self, simid, data, **kwargs):  # noqa: E501
        """simulation_measurement_create  # noqa: E501

        Create a new simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_create(simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param SimMeasurement data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimMeasurement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_create_with_http_info(simid, data, **kwargs)  # noqa: E501

    def simulation_measurement_create_with_http_info(self, simid, data, **kwargs):  # noqa: E501
        """simulation_measurement_create  # noqa: E501

        Create a new simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_create_with_http_info(simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param SimMeasurement data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimMeasurement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_measurement_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimMeasurement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_data_create(self, simid, measureid, data, **kwargs):  # noqa: E501
        """simulation_measurement_data_create  # noqa: E501

        Append data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_data_create(simid, measureid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param list[MeasuredDataJSON] data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_data_create_with_http_info(simid, measureid, data, **kwargs)  # noqa: E501

    def simulation_measurement_data_create_with_http_info(self, simid, measureid, data, **kwargs):  # noqa: E501
        """simulation_measurement_data_create  # noqa: E501

        Append data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_data_create_with_http_info(simid, measureid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param list[MeasuredDataJSON] data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_data_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_data_create`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_data_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_measurement_data_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/data/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_data_delete(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_data_delete  # noqa: E501

        Delete all data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_data_delete(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_data_delete_with_http_info(simid, measureid, **kwargs)  # noqa: E501

    def simulation_measurement_data_delete_with_http_info(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_data_delete  # noqa: E501

        Delete all data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_data_delete_with_http_info(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_data_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_data_delete`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_data_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/data/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_data_list(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_data_list  # noqa: E501

        Get data for a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_data_list(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedMeasuredData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_data_list_with_http_info(simid, measureid, **kwargs)  # noqa: E501

    def simulation_measurement_data_list_with_http_info(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_data_list  # noqa: E501

        Get data for a measure  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_data_list_with_http_info(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedMeasuredData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_data_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_data_list`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_data_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/data/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedMeasuredData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_delete(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_delete  # noqa: E501

        Delete a measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_delete(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_delete_with_http_info(simid, measureid, **kwargs)  # noqa: E501

    def simulation_measurement_delete_with_http_info(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_delete  # noqa: E501

        Delete a measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_delete_with_http_info(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_delete`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_list(self, simid, **kwargs):  # noqa: E501
        """simulation_measurement_list  # noqa: E501

        Get list of simulations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_list(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SimMeasurement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_list_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_measurement_list_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_measurement_list  # noqa: E501

        Get list of simulations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_list_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SimMeasurement], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SimMeasurement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_read(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_read  # noqa: E501

        Get measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_read(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimMeasurement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_read_with_http_info(simid, measureid, **kwargs)  # noqa: E501

    def simulation_measurement_read_with_http_info(self, simid, measureid, **kwargs):  # noqa: E501
        """simulation_measurement_read  # noqa: E501

        Get measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_read_with_http_info(simid, measureid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimMeasurement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_read`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimMeasurement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_measurement_update(self, simid, measureid, data, **kwargs):  # noqa: E501
        """simulation_measurement_update  # noqa: E501

        Update a measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_update(simid, measureid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param SimMeasurement data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimMeasurement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_measurement_update_with_http_info(simid, measureid, data, **kwargs)  # noqa: E501

    def simulation_measurement_update_with_http_info(self, simid, measureid, data, **kwargs):  # noqa: E501
        """simulation_measurement_update  # noqa: E501

        Update a measurement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_measurement_update_with_http_info(simid, measureid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int measureid: (required)
        :param SimMeasurement data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimMeasurement, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'measureid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_measurement_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_measurement_update`")  # noqa: E501
        # verify the required parameter 'measureid' is set
        if self.api_client.client_side_validation and ('measureid' not in local_var_params or  # noqa: E501
                                                        local_var_params['measureid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `measureid` when calling `simulation_measurement_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_measurement_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'measureid' in local_var_params:
            path_params['measureid'] = local_var_params['measureid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/measurement/{measureid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimMeasurement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_permissions_list(self, simid, **kwargs):  # noqa: E501
        """simulation_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_permissions_list(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_permissions_list_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_permissions_list_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_permissions_list_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_permissions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_permissions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/permissions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_permissions_update(self, simid, **kwargs):  # noqa: E501
        """simulation_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_permissions_update(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_permissions_update_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_permissions_update_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_permissions_update_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_permissions_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_permissions_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/permissions/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_read(self, simid, **kwargs):  # noqa: E501
        """simulation_read  # noqa: E501

        Get a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_read(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Simulation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_read_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_read_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_read  # noqa: E501

        Get a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_read_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Simulation, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Simulation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_create(self, simid, data, **kwargs):  # noqa: E501
        """simulation_scope_create  # noqa: E501

        Create a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_create(simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param SimScope data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_create_with_http_info(simid, data, **kwargs)  # noqa: E501

    def simulation_scope_create_with_http_info(self, simid, data, **kwargs):  # noqa: E501
        """simulation_scope_create  # noqa: E501

        Create a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_create_with_http_info(simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param SimScope data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimScope, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_scope_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_delete(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_delete  # noqa: E501

        Get a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_delete(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_delete_with_http_info(simid, scopeid, **kwargs)  # noqa: E501

    def simulation_scope_delete_with_http_info(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_delete  # noqa: E501

        Get a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_delete_with_http_info(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimScope, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'scopeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_delete`")  # noqa: E501
        # verify the required parameter 'scopeid' is set
        if self.api_client.client_side_validation and ('scopeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeid` when calling `simulation_scope_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'scopeid' in local_var_params:
            path_params['scopeid'] = local_var_params['scopeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/{scopeid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_list(self, simid, **kwargs):  # noqa: E501
        """simulation_scope_list  # noqa: E501

        Get scopes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_list(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int page:
        :param int number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedSimScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_list_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_scope_list_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_scope_list  # noqa: E501

        Get scopes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_list_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int page:
        :param int number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedSimScope, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'page',
            'number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] is not None:  # noqa: E501
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedSimScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_read(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_read  # noqa: E501

        Get a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_read(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_read_with_http_info(simid, scopeid, **kwargs)  # noqa: E501

    def simulation_scope_read_with_http_info(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_read  # noqa: E501

        Get a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_read_with_http_info(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimScope, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'scopeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_read`")  # noqa: E501
        # verify the required parameter 'scopeid' is set
        if self.api_client.client_side_validation and ('scopeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeid` when calling `simulation_scope_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'scopeid' in local_var_params:
            path_params['scopeid'] = local_var_params['scopeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/{scopeid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_scope_create(self, simid, scopeid, data, **kwargs):  # noqa: E501
        """simulation_scope_scope_create  # noqa: E501

        Create a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_scope_create(simid, scopeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param SimScope data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_scope_create_with_http_info(simid, scopeid, data, **kwargs)  # noqa: E501

    def simulation_scope_scope_create_with_http_info(self, simid, scopeid, data, **kwargs):  # noqa: E501
        """simulation_scope_scope_create  # noqa: E501

        Create a scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_scope_create_with_http_info(simid, scopeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param SimScope data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimScope, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'scopeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_scope_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_scope_create`")  # noqa: E501
        # verify the required parameter 'scopeid' is set
        if self.api_client.client_side_validation and ('scopeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeid` when calling `simulation_scope_scope_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_scope_scope_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'scopeid' in local_var_params:
            path_params['scopeid'] = local_var_params['scopeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/{scopeid}/scope/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_scope_list(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_scope_list  # noqa: E501

        Get scopes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_scope_list(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimScope
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_scope_list_with_http_info(simid, scopeid, **kwargs)  # noqa: E501

    def simulation_scope_scope_list_with_http_info(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_scope_list  # noqa: E501

        Get scopes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_scope_list_with_http_info(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimScope, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'scopeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_scope_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_scope_list`")  # noqa: E501
        # verify the required parameter 'scopeid' is set
        if self.api_client.client_side_validation and ('scopeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeid` when calling `simulation_scope_scope_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'scopeid' in local_var_params:
            path_params['scopeid'] = local_var_params['scopeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/{scopeid}/scope/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimScope',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_var_create(self, simid, scopeid, data, **kwargs):  # noqa: E501
        """simulation_scope_var_create  # noqa: E501

        Create a var  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_var_create(simid, scopeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param SimVar data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimVar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_var_create_with_http_info(simid, scopeid, data, **kwargs)  # noqa: E501

    def simulation_scope_var_create_with_http_info(self, simid, scopeid, data, **kwargs):  # noqa: E501
        """simulation_scope_var_create  # noqa: E501

        Create a var  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_var_create_with_http_info(simid, scopeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param SimVar data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimVar, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'scopeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_var_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_var_create`")  # noqa: E501
        # verify the required parameter 'scopeid' is set
        if self.api_client.client_side_validation and ('scopeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeid` when calling `simulation_scope_var_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_scope_var_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'scopeid' in local_var_params:
            path_params['scopeid'] = local_var_params['scopeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/{scopeid}/var/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimVar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_scope_var_list(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_var_list  # noqa: E501

        Get vars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_var_list(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SimVar]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_scope_var_list_with_http_info(simid, scopeid, **kwargs)  # noqa: E501

    def simulation_scope_var_list_with_http_info(self, simid, scopeid, **kwargs):  # noqa: E501
        """simulation_scope_var_list  # noqa: E501

        Get vars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_scope_var_list_with_http_info(simid, scopeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int scopeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SimVar], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'scopeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_scope_var_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_scope_var_list`")  # noqa: E501
        # verify the required parameter 'scopeid' is set
        if self.api_client.client_side_validation and ('scopeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeid` when calling `simulation_scope_var_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501
        if 'scopeid' in local_var_params:
            path_params['scopeid'] = local_var_params['scopeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/scope/{scopeid}/var/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SimVar]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_update(self, simid, data, **kwargs):  # noqa: E501
        """simulation_update  # noqa: E501

        Update a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_update(simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param Simulation data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Simulation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_update_with_http_info(simid, data, **kwargs)  # noqa: E501

    def simulation_update_with_http_info(self, simid, data, **kwargs):  # noqa: E501
        """simulation_update  # noqa: E501

        Update a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_update_with_http_info(simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param Simulation data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Simulation, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `simulation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Simulation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def simulation_var_list(self, simid, **kwargs):  # noqa: E501
        """simulation_var_list  # noqa: E501

        Get vars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_var_list(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int page:
        :param int number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedSimVar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.simulation_var_list_with_http_info(simid, **kwargs)  # noqa: E501

    def simulation_var_list_with_http_info(self, simid, **kwargs):  # noqa: E501
        """simulation_var_list  # noqa: E501

        Get vars  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.simulation_var_list_with_http_info(simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int simid: (required)
        :param int page:
        :param int number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedSimVar, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'simid',
            'page',
            'number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simulation_var_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `simulation_var_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] is not None:  # noqa: E501
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/simulation/{simid}/var/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedSimVar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
