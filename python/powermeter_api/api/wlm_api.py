# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powermeter_api.api_client import ApiClient
from powermeter_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WlmApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def wlm_commit_create(self, wlmid, data, **kwargs):  # noqa: E501
        """wlm_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_commit_create(wlmid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param WLMVersion data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WLMVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_commit_create_with_http_info(wlmid, data, **kwargs)  # noqa: E501

    def wlm_commit_create_with_http_info(self, wlmid, data, **kwargs):  # noqa: E501
        """wlm_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_commit_create_with_http_info(wlmid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param WLMVersion data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WLMVersion, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_commit_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_commit_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `wlm_commit_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/commit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WLMVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wlm_create(self, wlmid, data, **kwargs):  # noqa: E501
        """wlm_create  # noqa: E501

        Create wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_create(wlmid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param WireLoad data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WireLoad
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_create_with_http_info(wlmid, data, **kwargs)  # noqa: E501

    def wlm_create_with_http_info(self, wlmid, data, **kwargs):  # noqa: E501
        """wlm_create  # noqa: E501

        Create wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_create_with_http_info(wlmid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param WireLoad data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WireLoad, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `wlm_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WireLoad',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wlm_data_create(self, wlmid, dataid, **kwargs):  # noqa: E501
        """wlm_data_create  # noqa: E501

        Delete wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_data_create(wlmid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param int dataid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_data_create_with_http_info(wlmid, dataid, **kwargs)  # noqa: E501

    def wlm_data_create_with_http_info(self, wlmid, dataid, **kwargs):  # noqa: E501
        """wlm_data_create  # noqa: E501

        Delete wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_data_create_with_http_info(wlmid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param int dataid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid',
            'dataid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_data_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_data_create`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `wlm_data_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/data/{dataid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wlm_data_read(self, wlmid, dataid, **kwargs):  # noqa: E501
        """wlm_data_read  # noqa: E501

        Get list of wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_data_read(wlmid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param int dataid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WireLoad
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_data_read_with_http_info(wlmid, dataid, **kwargs)  # noqa: E501

    def wlm_data_read_with_http_info(self, wlmid, dataid, **kwargs):  # noqa: E501
        """wlm_data_read  # noqa: E501

        Get list of wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_data_read_with_http_info(wlmid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param int dataid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WireLoad, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid',
            'dataid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_data_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_data_read`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `wlm_data_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/data/{dataid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WireLoad',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wlm_data_update(self, wlmid, dataid, data, **kwargs):  # noqa: E501
        """wlm_data_update  # noqa: E501

        Update wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_data_update(wlmid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param int dataid: (required)
        :param WireLoad data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WireLoad
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_data_update_with_http_info(wlmid, dataid, data, **kwargs)  # noqa: E501

    def wlm_data_update_with_http_info(self, wlmid, dataid, data, **kwargs):  # noqa: E501
        """wlm_data_update  # noqa: E501

        Update wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_data_update_with_http_info(wlmid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param int dataid: (required)
        :param WireLoad data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WireLoad, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid',
            'dataid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_data_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_data_update`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `wlm_data_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `wlm_data_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/data/{dataid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WireLoad',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wlm_read(self, wlmid, **kwargs):  # noqa: E501
        """wlm_read  # noqa: E501

        Get list of wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_read(wlmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WLMModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_read_with_http_info(wlmid, **kwargs)  # noqa: E501

    def wlm_read_with_http_info(self, wlmid, **kwargs):  # noqa: E501
        """wlm_read  # noqa: E501

        Get list of wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_read_with_http_info(wlmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int wlmid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WLMModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WLMModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wlm_version_list(self, wlmid, pcbid, **kwargs):  # noqa: E501
        """wlm_version_list  # noqa: E501

        Get WLM versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_version_list(wlmid, pcbid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str wlmid: (required)
        :param int pcbid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[WLMVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.wlm_version_list_with_http_info(wlmid, pcbid, **kwargs)  # noqa: E501

    def wlm_version_list_with_http_info(self, wlmid, pcbid, **kwargs):  # noqa: E501
        """wlm_version_list  # noqa: E501

        Get WLM versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wlm_version_list_with_http_info(wlmid, pcbid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str wlmid: (required)
        :param int pcbid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[WLMVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'wlmid',
            'pcbid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wlm_version_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `wlm_version_list`")  # noqa: E501
        # verify the required parameter 'pcbid' is set
        if self.api_client.client_side_validation and ('pcbid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbid` when calling `wlm_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501
        if 'pcbid' in local_var_params:
            path_params['pcbid'] = local_var_params['pcbid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/wlm/{wlmid}/version/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WLMVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
