# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powermeter_api.api_client import ApiClient
from powermeter_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class TechnologyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_technology_device_data_delete_all(self, techid, deviceid, **kwargs):  # noqa: E501
        """api_technology_device_data_delete_all  # noqa: E501

        Delete device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_technology_device_data_delete_all(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_technology_device_data_delete_all_with_http_info(techid, deviceid, **kwargs)  # noqa: E501

    def api_technology_device_data_delete_all_with_http_info(self, techid, deviceid, **kwargs):  # noqa: E501
        """api_technology_device_data_delete_all  # noqa: E501

        Delete device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_technology_device_data_delete_all_with_http_info(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_technology_device_data_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `api_technology_device_data_delete_all`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `api_technology_device_data_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_technology_device_delete_all(self, techid, **kwargs):  # noqa: E501
        """api_technology_device_delete_all  # noqa: E501

        Delete all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_technology_device_delete_all(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_technology_device_delete_all_with_http_info(techid, **kwargs)  # noqa: E501

    def api_technology_device_delete_all_with_http_info(self, techid, **kwargs):  # noqa: E501
        """api_technology_device_delete_all  # noqa: E501

        Delete all devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_technology_device_delete_all_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_technology_device_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `api_technology_device_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_commit_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_commit_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param TechnologyVersion data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TechnologyVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_commit_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_commit_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_commit_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param TechnologyVersion data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TechnologyVersion, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_commit_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_commit_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_commit_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/commit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TechnologyVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_d0_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_d0_create  # noqa: E501

        Create a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param Defect0 data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Defect0
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_d0_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_d0_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_d0_create  # noqa: E501

        Create a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param Defect0 data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Defect0, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_d0_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_d0_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_d0_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/d0/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Defect0',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_d0_delete(self, techid, d0id, **kwargs):  # noqa: E501
        """technology_d0_delete  # noqa: E501

        Delete a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_delete(techid, d0id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int d0id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_d0_delete_with_http_info(techid, d0id, **kwargs)  # noqa: E501

    def technology_d0_delete_with_http_info(self, techid, d0id, **kwargs):  # noqa: E501
        """technology_d0_delete  # noqa: E501

        Delete a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_delete_with_http_info(techid, d0id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int d0id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'd0id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_d0_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_d0_delete`")  # noqa: E501
        # verify the required parameter 'd0id' is set
        if self.api_client.client_side_validation and ('d0id' not in local_var_params or  # noqa: E501
                                                        local_var_params['d0id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `d0id` when calling `technology_d0_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'd0id' in local_var_params:
            path_params['d0id'] = local_var_params['d0id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/d0/{d0id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_d0_list(self, techid, **kwargs):  # noqa: E501
        """technology_d0_list  # noqa: E501

        Get list of d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Defect0]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_d0_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_d0_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_d0_list  # noqa: E501

        Get list of d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Defect0], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_d0_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_d0_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/d0/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Defect0]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_d0_read(self, techid, d0id, **kwargs):  # noqa: E501
        """technology_d0_read  # noqa: E501

        Get a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_read(techid, d0id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int d0id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Defect0
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_d0_read_with_http_info(techid, d0id, **kwargs)  # noqa: E501

    def technology_d0_read_with_http_info(self, techid, d0id, **kwargs):  # noqa: E501
        """technology_d0_read  # noqa: E501

        Get a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_read_with_http_info(techid, d0id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int d0id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Defect0, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'd0id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_d0_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_d0_read`")  # noqa: E501
        # verify the required parameter 'd0id' is set
        if self.api_client.client_side_validation and ('d0id' not in local_var_params or  # noqa: E501
                                                        local_var_params['d0id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `d0id` when calling `technology_d0_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'd0id' in local_var_params:
            path_params['d0id'] = local_var_params['d0id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/d0/{d0id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Defect0',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_d0_update(self, techid, d0id, data, **kwargs):  # noqa: E501
        """technology_d0_update  # noqa: E501

        Update a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_update(techid, d0id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int d0id: (required)
        :param Defect0 data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Defect0
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_d0_update_with_http_info(techid, d0id, data, **kwargs)  # noqa: E501

    def technology_d0_update_with_http_info(self, techid, d0id, data, **kwargs):  # noqa: E501
        """technology_d0_update  # noqa: E501

        Update a d0 data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_d0_update_with_http_info(techid, d0id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int d0id: (required)
        :param Defect0 data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Defect0, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'd0id',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_d0_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_d0_update`")  # noqa: E501
        # verify the required parameter 'd0id' is set
        if self.api_client.client_side_validation and ('d0id' not in local_var_params or  # noqa: E501
                                                        local_var_params['d0id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `d0id` when calling `technology_d0_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_d0_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'd0id' in local_var_params:
            path_params['d0id'] = local_var_params['d0id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/d0/{d0id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Defect0',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_device_create  # noqa: E501

        Create a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param Device data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_device_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_device_create  # noqa: E501

        Create a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param Device data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Device, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_device_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_bulk_create(self, techid, deviceid, data, **kwargs):  # noqa: E501
        """technology_device_data_bulk_create  # noqa: E501

        Create device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_bulk_create(techid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param list[DeviceDataBulk] data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_bulk_create_with_http_info(techid, deviceid, data, **kwargs)  # noqa: E501

    def technology_device_data_bulk_create_with_http_info(self, techid, deviceid, data, **kwargs):  # noqa: E501
        """technology_device_data_bulk_create  # noqa: E501

        Create device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_bulk_create_with_http_info(techid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param list[DeviceDataBulk] data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_bulk_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_bulk_create`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_bulk_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_device_data_bulk_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/bulk/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_compute_list(self, techid, deviceid, p, vds, vgs, vbs, t, **kwargs):  # noqa: E501
        """technology_device_data_compute_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_compute_list(techid, deviceid, p, vds, vgs, vbs, t, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param str p: Process name (required)
        :param float vds: Drain-Source voltage (required)
        :param float vgs: Gate-Source voltage (required)
        :param float vbs: Body-Source voltage (required)
        :param int t: Temperature (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ComputedDeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_compute_list_with_http_info(techid, deviceid, p, vds, vgs, vbs, t, **kwargs)  # noqa: E501

    def technology_device_data_compute_list_with_http_info(self, techid, deviceid, p, vds, vgs, vbs, t, **kwargs):  # noqa: E501
        """technology_device_data_compute_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_compute_list_with_http_info(techid, deviceid, p, vds, vgs, vbs, t, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param str p: Process name (required)
        :param float vds: Drain-Source voltage (required)
        :param float vgs: Gate-Source voltage (required)
        :param float vbs: Body-Source voltage (required)
        :param int t: Temperature (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ComputedDeviceData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'p',
            'vds',
            'vgs',
            'vbs',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_compute_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_compute_list`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_compute_list`")  # noqa: E501
        # verify the required parameter 'p' is set
        if self.api_client.client_side_validation and ('p' not in local_var_params or  # noqa: E501
                                                        local_var_params['p'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `p` when calling `technology_device_data_compute_list`")  # noqa: E501
        # verify the required parameter 'vds' is set
        if self.api_client.client_side_validation and ('vds' not in local_var_params or  # noqa: E501
                                                        local_var_params['vds'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vds` when calling `technology_device_data_compute_list`")  # noqa: E501
        # verify the required parameter 'vgs' is set
        if self.api_client.client_side_validation and ('vgs' not in local_var_params or  # noqa: E501
                                                        local_var_params['vgs'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vgs` when calling `technology_device_data_compute_list`")  # noqa: E501
        # verify the required parameter 'vbs' is set
        if self.api_client.client_side_validation and ('vbs' not in local_var_params or  # noqa: E501
                                                        local_var_params['vbs'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vbs` when calling `technology_device_data_compute_list`")  # noqa: E501
        # verify the required parameter 't' is set
        if self.api_client.client_side_validation and ('t' not in local_var_params or  # noqa: E501
                                                        local_var_params['t'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `t` when calling `technology_device_data_compute_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []
        if 'p' in local_var_params and local_var_params['p'] is not None:  # noqa: E501
            query_params.append(('p', local_var_params['p']))  # noqa: E501
        if 'vds' in local_var_params and local_var_params['vds'] is not None:  # noqa: E501
            query_params.append(('Vds', local_var_params['vds']))  # noqa: E501
        if 'vgs' in local_var_params and local_var_params['vgs'] is not None:  # noqa: E501
            query_params.append(('Vgs', local_var_params['vgs']))  # noqa: E501
        if 'vbs' in local_var_params and local_var_params['vbs'] is not None:  # noqa: E501
            query_params.append(('Vbs', local_var_params['vbs']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/compute/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputedDeviceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_create(self, techid, deviceid, data, **kwargs):  # noqa: E501
        """technology_device_data_create  # noqa: E501

        Create device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_create(techid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param DeviceData data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_create_with_http_info(techid, deviceid, data, **kwargs)  # noqa: E501

    def technology_device_data_create_with_http_info(self, techid, deviceid, data, **kwargs):  # noqa: E501
        """technology_device_data_create  # noqa: E501

        Create device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_create_with_http_info(techid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param DeviceData data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DeviceData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_create`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_device_data_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_delete(self, techid, deviceid, dataid, data, **kwargs):  # noqa: E501
        """technology_device_data_delete  # noqa: E501

        Delete device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_delete(techid, deviceid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param int dataid: (required)
        :param DeviceData data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_delete_with_http_info(techid, deviceid, dataid, data, **kwargs)  # noqa: E501

    def technology_device_data_delete_with_http_info(self, techid, deviceid, dataid, data, **kwargs):  # noqa: E501
        """technology_device_data_delete  # noqa: E501

        Delete device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_delete_with_http_info(techid, deviceid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param int dataid: (required)
        :param DeviceData data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DeviceData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'dataid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_delete`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_delete`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `technology_device_data_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_device_data_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/{dataid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_list(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_data_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_list(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param str p: Process name
        :param int t: Temperature
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DeviceData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_list_with_http_info(techid, deviceid, **kwargs)  # noqa: E501

    def technology_device_data_list_with_http_info(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_data_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_list_with_http_info(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param str p: Process name
        :param int t: Temperature
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DeviceData], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'p',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_list`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []
        if 'p' in local_var_params and local_var_params['p'] is not None:  # noqa: E501
            query_params.append(('p', local_var_params['p']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeviceData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_read(self, techid, deviceid, dataid, **kwargs):  # noqa: E501
        """technology_device_data_read  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_read(techid, deviceid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param int dataid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_read_with_http_info(techid, deviceid, dataid, **kwargs)  # noqa: E501

    def technology_device_data_read_with_http_info(self, techid, deviceid, dataid, **kwargs):  # noqa: E501
        """technology_device_data_read  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_read_with_http_info(techid, deviceid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param int dataid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DeviceData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'dataid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_read`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_read`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `technology_device_data_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/{dataid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_train_create(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_data_train_create  # noqa: E501

        Create device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_train_create(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_train_create_with_http_info(techid, deviceid, **kwargs)  # noqa: E501

    def technology_device_data_train_create_with_http_info(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_data_train_create  # noqa: E501

        Create device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_train_create_with_http_info(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_train_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_train_create`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_train_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/train/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_data_update(self, techid, deviceid, dataid, data, **kwargs):  # noqa: E501
        """technology_device_data_update  # noqa: E501

        Update device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_update(techid, deviceid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param int dataid: (required)
        :param DeviceData data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_data_update_with_http_info(techid, deviceid, dataid, data, **kwargs)  # noqa: E501

    def technology_device_data_update_with_http_info(self, techid, deviceid, dataid, data, **kwargs):  # noqa: E501
        """technology_device_data_update  # noqa: E501

        Update device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_data_update_with_http_info(techid, deviceid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param int dataid: (required)
        :param DeviceData data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DeviceData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'dataid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_data_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_data_update`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_data_update`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `technology_device_data_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_device_data_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/data/{dataid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_delete(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_delete  # noqa: E501

        Delete a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_delete(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_delete_with_http_info(techid, deviceid, **kwargs)  # noqa: E501

    def technology_device_delete_with_http_info(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_delete  # noqa: E501

        Delete a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_delete_with_http_info(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_delete`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_list(self, techid, **kwargs):  # noqa: E501
        """technology_device_list  # noqa: E501

        Get list of devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param str name: Device name
        :param int l: Device length
        :param int w: Device width
        :param int nfin: Device nfin
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Device]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_device_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_device_list  # noqa: E501

        Get list of devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param str name: Device name
        :param int l: Device length
        :param int w: Device width
        :param int nfin: Device nfin
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Device], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'name',
            'l',
            'w',
            'nfin'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'l' in local_var_params and local_var_params['l'] is not None:  # noqa: E501
            query_params.append(('l', local_var_params['l']))  # noqa: E501
        if 'w' in local_var_params and local_var_params['w'] is not None:  # noqa: E501
            query_params.append(('w', local_var_params['w']))  # noqa: E501
        if 'nfin' in local_var_params and local_var_params['nfin'] is not None:  # noqa: E501
            query_params.append(('nfin', local_var_params['nfin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Device]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_read(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_read  # noqa: E501

        Get a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_read(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_read_with_http_info(techid, deviceid, **kwargs)  # noqa: E501

    def technology_device_read_with_http_info(self, techid, deviceid, **kwargs):  # noqa: E501
        """technology_device_read  # noqa: E501

        Get a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_read_with_http_info(techid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Device, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_read`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_device_update(self, techid, deviceid, data, **kwargs):  # noqa: E501
        """technology_device_update  # noqa: E501

        Update a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_update(techid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param Device data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_device_update_with_http_info(techid, deviceid, data, **kwargs)  # noqa: E501

    def technology_device_update_with_http_info(self, techid, deviceid, data, **kwargs):  # noqa: E501
        """technology_device_update  # noqa: E501

        Update a device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_device_update_with_http_info(techid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int deviceid: (required)
        :param Device data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Device, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'deviceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_device_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_device_update`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `technology_device_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_device_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/device/{deviceid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_clone(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_clone  # noqa: E501

        Copy a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_clone(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LayerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_clone_with_http_info(techid, stackid, **kwargs)  # noqa: E501

    def technology_layerstack_clone_with_http_info(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_clone  # noqa: E501

        Copy a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_clone_with_http_info(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LayerStack, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_clone`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_layerstack_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param LayerStack data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LayerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_layerstack_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_layerstack_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param LayerStack data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LayerStack, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_layerstack_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_delete(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_delete  # noqa: E501

        Delete a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_delete(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_delete_with_http_info(techid, stackid, **kwargs)  # noqa: E501

    def technology_layerstack_delete_with_http_info(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_delete  # noqa: E501

        Delete a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_delete_with_http_info(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_delete`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_layer_clone(self, techid, stackid, layerid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_clone  # noqa: E501

        Copy a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_clone(techid, stackid, layerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_layer_clone_with_http_info(techid, stackid, layerid, **kwargs)  # noqa: E501

    def technology_layerstack_layer_clone_with_http_info(self, techid, stackid, layerid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_clone  # noqa: E501

        Copy a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_clone_with_http_info(techid, stackid, layerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Layer, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid',
            'layerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_layer_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_layer_clone`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_layer_clone`")  # noqa: E501
        # verify the required parameter 'layerid' is set
        if self.api_client.client_side_validation and ('layerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['layerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `layerid` when calling `technology_layerstack_layer_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501
        if 'layerid' in local_var_params:
            path_params['layerid'] = local_var_params['layerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_layer_create(self, techid, stackid, data, **kwargs):  # noqa: E501
        """technology_layerstack_layer_create  # noqa: E501

        Create a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_create(techid, stackid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param Layer data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_layer_create_with_http_info(techid, stackid, data, **kwargs)  # noqa: E501

    def technology_layerstack_layer_create_with_http_info(self, techid, stackid, data, **kwargs):  # noqa: E501
        """technology_layerstack_layer_create  # noqa: E501

        Create a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_create_with_http_info(techid, stackid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param Layer data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Layer, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_layer_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_layer_create`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_layer_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_layerstack_layer_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/layer/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_layer_delete(self, techid, stackid, layerid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_delete  # noqa: E501

        Delete a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_delete(techid, stackid, layerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_layer_delete_with_http_info(techid, stackid, layerid, **kwargs)  # noqa: E501

    def technology_layerstack_layer_delete_with_http_info(self, techid, stackid, layerid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_delete  # noqa: E501

        Delete a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_delete_with_http_info(techid, stackid, layerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid',
            'layerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_layer_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_layer_delete`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_layer_delete`")  # noqa: E501
        # verify the required parameter 'layerid' is set
        if self.api_client.client_side_validation and ('layerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['layerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `layerid` when calling `technology_layerstack_layer_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501
        if 'layerid' in local_var_params:
            path_params['layerid'] = local_var_params['layerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_layer_list(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_list  # noqa: E501

        Get list of layers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_list(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Layer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_layer_list_with_http_info(techid, stackid, **kwargs)  # noqa: E501

    def technology_layerstack_layer_list_with_http_info(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_list  # noqa: E501

        Get list of layers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_list_with_http_info(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Layer], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_layer_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_layer_list`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_layer_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/layer/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Layer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_layer_read(self, techid, stackid, layerid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_read  # noqa: E501

        Get a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_read(techid, stackid, layerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_layer_read_with_http_info(techid, stackid, layerid, **kwargs)  # noqa: E501

    def technology_layerstack_layer_read_with_http_info(self, techid, stackid, layerid, **kwargs):  # noqa: E501
        """technology_layerstack_layer_read  # noqa: E501

        Get a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_read_with_http_info(techid, stackid, layerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Layer, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid',
            'layerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_layer_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_layer_read`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_layer_read`")  # noqa: E501
        # verify the required parameter 'layerid' is set
        if self.api_client.client_side_validation and ('layerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['layerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `layerid` when calling `technology_layerstack_layer_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501
        if 'layerid' in local_var_params:
            path_params['layerid'] = local_var_params['layerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_layer_update(self, techid, stackid, layerid, data, **kwargs):  # noqa: E501
        """technology_layerstack_layer_update  # noqa: E501

        Update a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_update(techid, stackid, layerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param Layer data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Layer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_layer_update_with_http_info(techid, stackid, layerid, data, **kwargs)  # noqa: E501

    def technology_layerstack_layer_update_with_http_info(self, techid, stackid, layerid, data, **kwargs):  # noqa: E501
        """technology_layerstack_layer_update  # noqa: E501

        Update a layer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_layer_update_with_http_info(techid, stackid, layerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param int layerid: (required)
        :param Layer data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Layer, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid',
            'layerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_layer_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_layer_update`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_layer_update`")  # noqa: E501
        # verify the required parameter 'layerid' is set
        if self.api_client.client_side_validation and ('layerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['layerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `layerid` when calling `technology_layerstack_layer_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_layerstack_layer_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501
        if 'layerid' in local_var_params:
            path_params['layerid'] = local_var_params['layerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_list(self, techid, **kwargs):  # noqa: E501
        """technology_layerstack_list  # noqa: E501

        Get list of layer stacks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[LayerStack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_layerstack_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_layerstack_list  # noqa: E501

        Get list of layer stacks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[LayerStack], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LayerStack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_read(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_read  # noqa: E501

        get a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_read(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LayerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_read_with_http_info(techid, stackid, **kwargs)  # noqa: E501

    def technology_layerstack_read_with_http_info(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_read  # noqa: E501

        get a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_read_with_http_info(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LayerStack, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_read`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_update(self, techid, stackid, data, **kwargs):  # noqa: E501
        """technology_layerstack_update  # noqa: E501

        Update a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_update(techid, stackid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param LayerStack data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LayerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_update_with_http_info(techid, stackid, data, **kwargs)  # noqa: E501

    def technology_layerstack_update_with_http_info(self, techid, stackid, data, **kwargs):  # noqa: E501
        """technology_layerstack_update  # noqa: E501

        Update a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_update_with_http_info(techid, stackid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param LayerStack data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LayerStack, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_update`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_layerstack_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LayerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_layerstack_update_list(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_update_list(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_layerstack_update_list_with_http_info(techid, stackid, **kwargs)  # noqa: E501

    def technology_layerstack_update_list_with_http_info(self, techid, stackid, **kwargs):  # noqa: E501
        """technology_layerstack_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_layerstack_update_list_with_http_info(techid, stackid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int stackid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'stackid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_layerstack_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_layerstack_update_list`")  # noqa: E501
        # verify the required parameter 'stackid' is set
        if self.api_client.client_side_validation and ('stackid' not in local_var_params or  # noqa: E501
                                                        local_var_params['stackid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stackid` when calling `technology_layerstack_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'stackid' in local_var_params:
            path_params['stackid'] = local_var_params['stackid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/layerstack/{stackid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_clone(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_clone  # noqa: E501

        Creates a copy of technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_clone(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TechnologyMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_clone_with_http_info(techmasterid, **kwargs)  # noqa: E501

    def technology_library_clone_with_http_info(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_clone  # noqa: E501

        Creates a copy of technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_clone_with_http_info(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TechnologyMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techmasterid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techmasterid' is set
        if self.api_client.client_side_validation and ('techmasterid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techmasterid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techmasterid` when calling `technology_library_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techmasterid' in local_var_params:
            path_params['techmasterid'] = local_var_params['techmasterid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/{techmasterid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TechnologyMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_create(self, data, **kwargs):  # noqa: E501
        """technology_library_create  # noqa: E501

        Create new technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TechnologyMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TechnologyMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_create_with_http_info(data, **kwargs)  # noqa: E501

    def technology_library_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """technology_library_create  # noqa: E501

        Create new technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param TechnologyMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TechnologyMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_library_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TechnologyMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_delete(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_delete  # noqa: E501

        Delete a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_delete(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_delete_with_http_info(techmasterid, **kwargs)  # noqa: E501

    def technology_library_delete_with_http_info(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_delete  # noqa: E501

        Delete a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_delete_with_http_info(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techmasterid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techmasterid' is set
        if self.api_client.client_side_validation and ('techmasterid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techmasterid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techmasterid` when calling `technology_library_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techmasterid' in local_var_params:
            path_params['techmasterid'] = local_var_params['techmasterid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/{techmasterid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_list(self, **kwargs):  # noqa: E501
        """technology_library_list  # noqa: E501

        Get list of technologies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: Project name
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TechnologyMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_list_with_http_info(**kwargs)  # noqa: E501

    def technology_library_list_with_http_info(self, **kwargs):  # noqa: E501
        """technology_library_list  # noqa: E501

        Get list of technologies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: Project name
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TechnologyMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TechnologyMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_read(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_read  # noqa: E501

        Get a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_read(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TechnologyMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_read_with_http_info(techmasterid, **kwargs)  # noqa: E501

    def technology_library_read_with_http_info(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_read  # noqa: E501

        Get a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_read_with_http_info(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TechnologyMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techmasterid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techmasterid' is set
        if self.api_client.client_side_validation and ('techmasterid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techmasterid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techmasterid` when calling `technology_library_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techmasterid' in local_var_params:
            path_params['techmasterid'] = local_var_params['techmasterid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/{techmasterid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TechnologyMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_update(self, techmasterid, data, **kwargs):  # noqa: E501
        """technology_library_update  # noqa: E501

        Update a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_update(techmasterid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param TechnologyMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TechnologyMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_update_with_http_info(techmasterid, data, **kwargs)  # noqa: E501

    def technology_library_update_with_http_info(self, techmasterid, data, **kwargs):  # noqa: E501
        """technology_library_update  # noqa: E501

        Update a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_update_with_http_info(techmasterid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param TechnologyMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TechnologyMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techmasterid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techmasterid' is set
        if self.api_client.client_side_validation and ('techmasterid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techmasterid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techmasterid` when calling `technology_library_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_library_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techmasterid' in local_var_params:
            path_params['techmasterid'] = local_var_params['techmasterid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/{techmasterid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TechnologyMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_update_list(self, **kwargs):  # noqa: E501
        """technology_library_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_update_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_update_list_with_http_info(**kwargs)  # noqa: E501

    def technology_library_update_list_with_http_info(self, **kwargs):  # noqa: E501
        """technology_library_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_update_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_library_version_list(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_version_list  # noqa: E501

        Get technology versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_version_list(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TechnologyVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_library_version_list_with_http_info(techmasterid, **kwargs)  # noqa: E501

    def technology_library_version_list_with_http_info(self, techmasterid, **kwargs):  # noqa: E501
        """technology_library_version_list  # noqa: E501

        Get technology versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_library_version_list_with_http_info(techmasterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techmasterid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TechnologyVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techmasterid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_library_version_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techmasterid' is set
        if self.api_client.client_side_validation and ('techmasterid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techmasterid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techmasterid` when calling `technology_library_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techmasterid' in local_var_params:
            path_params['techmasterid'] = local_var_params['techmasterid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/library/{techmasterid}/version/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TechnologyVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_model_corner_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_model_corner_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param ModelCorner data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ModelCorner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_model_corner_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_model_corner_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_model_corner_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param ModelCorner data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ModelCorner, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_model_corner_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_model_corner_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_model_corner_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/model_corner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelCorner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_model_corner_delete(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_model_corner_delete  # noqa: E501

        Delete a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_delete(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_model_corner_delete_with_http_info(techid, cornerid, **kwargs)  # noqa: E501

    def technology_model_corner_delete_with_http_info(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_model_corner_delete  # noqa: E501

        Delete a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_delete_with_http_info(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'cornerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_model_corner_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_model_corner_delete`")  # noqa: E501
        # verify the required parameter 'cornerid' is set
        if self.api_client.client_side_validation and ('cornerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cornerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cornerid` when calling `technology_model_corner_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'cornerid' in local_var_params:
            path_params['cornerid'] = local_var_params['cornerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/model_corner/{cornerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_model_corner_list(self, techid, **kwargs):  # noqa: E501
        """technology_model_corner_list  # noqa: E501

        Get list of model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ModelCorner]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_model_corner_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_model_corner_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_model_corner_list  # noqa: E501

        Get list of model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ModelCorner], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_model_corner_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_model_corner_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/model_corner/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ModelCorner]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_model_corner_read(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_model_corner_read  # noqa: E501

        Get a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_read(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ModelCorner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_model_corner_read_with_http_info(techid, cornerid, **kwargs)  # noqa: E501

    def technology_model_corner_read_with_http_info(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_model_corner_read  # noqa: E501

        Get a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_read_with_http_info(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ModelCorner, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'cornerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_model_corner_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_model_corner_read`")  # noqa: E501
        # verify the required parameter 'cornerid' is set
        if self.api_client.client_side_validation and ('cornerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cornerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cornerid` when calling `technology_model_corner_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'cornerid' in local_var_params:
            path_params['cornerid'] = local_var_params['cornerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/model_corner/{cornerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelCorner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_model_corner_update(self, techid, cornerid, data, **kwargs):  # noqa: E501
        """technology_model_corner_update  # noqa: E501

        Update a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_update(techid, cornerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param ModelCorner data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ModelCorner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_model_corner_update_with_http_info(techid, cornerid, data, **kwargs)  # noqa: E501

    def technology_model_corner_update_with_http_info(self, techid, cornerid, data, **kwargs):  # noqa: E501
        """technology_model_corner_update  # noqa: E501

        Update a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_model_corner_update_with_http_info(techid, cornerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param ModelCorner data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ModelCorner, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'cornerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_model_corner_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_model_corner_update`")  # noqa: E501
        # verify the required parameter 'cornerid' is set
        if self.api_client.client_side_validation and ('cornerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cornerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cornerid` when calling `technology_model_corner_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_model_corner_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'cornerid' in local_var_params:
            path_params['cornerid'] = local_var_params['cornerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/model_corner/{cornerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ModelCorner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_permissions_list(self, techid, **kwargs):  # noqa: E501
        """technology_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_permissions_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_permissions_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_permissions_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_permissions_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_permissions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_permissions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/permissions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_permissions_update(self, techid, **kwargs):  # noqa: E501
        """technology_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_permissions_update(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_permissions_update_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_permissions_update_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_permissions_update_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_permissions_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_permissions_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/permissions/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_rc_corner_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_rc_corner_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param RCCorner data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RCCorner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_rc_corner_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_rc_corner_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_rc_corner_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param RCCorner data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RCCorner, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_rc_corner_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_rc_corner_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_rc_corner_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/rc_corner/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RCCorner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_rc_corner_delete(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_rc_corner_delete  # noqa: E501

        Delete a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_delete(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_rc_corner_delete_with_http_info(techid, cornerid, **kwargs)  # noqa: E501

    def technology_rc_corner_delete_with_http_info(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_rc_corner_delete  # noqa: E501

        Delete a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_delete_with_http_info(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'cornerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_rc_corner_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_rc_corner_delete`")  # noqa: E501
        # verify the required parameter 'cornerid' is set
        if self.api_client.client_side_validation and ('cornerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cornerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cornerid` when calling `technology_rc_corner_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'cornerid' in local_var_params:
            path_params['cornerid'] = local_var_params['cornerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/rc_corner/{cornerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_rc_corner_list(self, techid, **kwargs):  # noqa: E501
        """technology_rc_corner_list  # noqa: E501

        Get list of RC corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[RCCorner]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_rc_corner_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_rc_corner_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_rc_corner_list  # noqa: E501

        Get list of RC corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[RCCorner], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_rc_corner_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_rc_corner_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/rc_corner/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RCCorner]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_rc_corner_read(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_rc_corner_read  # noqa: E501

        Get a RC corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_read(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RCCorner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_rc_corner_read_with_http_info(techid, cornerid, **kwargs)  # noqa: E501

    def technology_rc_corner_read_with_http_info(self, techid, cornerid, **kwargs):  # noqa: E501
        """technology_rc_corner_read  # noqa: E501

        Get a RC corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_read_with_http_info(techid, cornerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RCCorner, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'cornerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_rc_corner_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_rc_corner_read`")  # noqa: E501
        # verify the required parameter 'cornerid' is set
        if self.api_client.client_side_validation and ('cornerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cornerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cornerid` when calling `technology_rc_corner_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'cornerid' in local_var_params:
            path_params['cornerid'] = local_var_params['cornerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/rc_corner/{cornerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RCCorner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_rc_corner_update(self, techid, cornerid, data, **kwargs):  # noqa: E501
        """technology_rc_corner_update  # noqa: E501

        Update a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_update(techid, cornerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param RCCorner data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RCCorner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_rc_corner_update_with_http_info(techid, cornerid, data, **kwargs)  # noqa: E501

    def technology_rc_corner_update_with_http_info(self, techid, cornerid, data, **kwargs):  # noqa: E501
        """technology_rc_corner_update  # noqa: E501

        Update a model corner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_rc_corner_update_with_http_info(techid, cornerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int cornerid: (required)
        :param RCCorner data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RCCorner, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'cornerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_rc_corner_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_rc_corner_update`")  # noqa: E501
        # verify the required parameter 'cornerid' is set
        if self.api_client.client_side_validation and ('cornerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['cornerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cornerid` when calling `technology_rc_corner_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_rc_corner_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'cornerid' in local_var_params:
            path_params['cornerid'] = local_var_params['cornerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/rc_corner/{cornerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RCCorner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_read(self, techid, **kwargs):  # noqa: E501
        """technology_read  # noqa: E501

        Get a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_read(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Technology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_read_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_read_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_read  # noqa: E501

        Get a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_read_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Technology, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Technology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_restore_create(self, techid, **kwargs):  # noqa: E501
        """technology_restore_create  # noqa: E501

        Restore a technology version as current version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_restore_create(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Technology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_restore_create_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_restore_create_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_restore_create  # noqa: E501

        Restore a technology version as current version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_restore_create_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Technology, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_restore_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_restore_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/restore/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Technology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_source_create(self, techid, data, **kwargs):  # noqa: E501
        """technology_source_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_create(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param PowerSource data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PowerSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_source_create_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_source_create_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_source_create  # noqa: E501

        Create a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_create_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param PowerSource data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PowerSource, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_source_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_source_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_source_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/source/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PowerSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_source_delete(self, techid, sourceid, **kwargs):  # noqa: E501
        """technology_source_delete  # noqa: E501

        Delete a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_delete(techid, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int sourceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_source_delete_with_http_info(techid, sourceid, **kwargs)  # noqa: E501

    def technology_source_delete_with_http_info(self, techid, sourceid, **kwargs):  # noqa: E501
        """technology_source_delete  # noqa: E501

        Delete a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_delete_with_http_info(techid, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int sourceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'sourceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_source_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_source_delete`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if self.api_client.client_side_validation and ('sourceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sourceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sourceid` when calling `technology_source_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'sourceid' in local_var_params:
            path_params['sourceid'] = local_var_params['sourceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/source/{sourceid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_source_list(self, techid, **kwargs):  # noqa: E501
        """technology_source_list  # noqa: E501

        Get list of layer stacks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PowerSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_source_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_source_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_source_list  # noqa: E501

        Get list of layer stacks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PowerSource], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_source_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_source_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/source/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PowerSource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_source_read(self, techid, sourceid, **kwargs):  # noqa: E501
        """technology_source_read  # noqa: E501

        get a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_read(techid, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int sourceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PowerSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_source_read_with_http_info(techid, sourceid, **kwargs)  # noqa: E501

    def technology_source_read_with_http_info(self, techid, sourceid, **kwargs):  # noqa: E501
        """technology_source_read  # noqa: E501

        get a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_read_with_http_info(techid, sourceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int sourceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PowerSource, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'sourceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_source_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_source_read`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if self.api_client.client_side_validation and ('sourceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sourceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sourceid` when calling `technology_source_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'sourceid' in local_var_params:
            path_params['sourceid'] = local_var_params['sourceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/source/{sourceid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PowerSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_source_update(self, techid, sourceid, data, **kwargs):  # noqa: E501
        """technology_source_update  # noqa: E501

        Update a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_update(techid, sourceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int sourceid: (required)
        :param PowerSource data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PowerSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_source_update_with_http_info(techid, sourceid, data, **kwargs)  # noqa: E501

    def technology_source_update_with_http_info(self, techid, sourceid, data, **kwargs):  # noqa: E501
        """technology_source_update  # noqa: E501

        Update a layer stack  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_source_update_with_http_info(techid, sourceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int sourceid: (required)
        :param PowerSource data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PowerSource, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'sourceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_source_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_source_update`")  # noqa: E501
        # verify the required parameter 'sourceid' is set
        if self.api_client.client_side_validation and ('sourceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sourceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sourceid` when calling `technology_source_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_source_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'sourceid' in local_var_params:
            path_params['sourceid'] = local_var_params['sourceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/source/{sourceid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PowerSource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_update(self, techid, data, **kwargs):  # noqa: E501
        """technology_update  # noqa: E501

        Update a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_update(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param Technology data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Technology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_update_with_http_info(techid, data, **kwargs)  # noqa: E501

    def technology_update_with_http_info(self, techid, data, **kwargs):  # noqa: E501
        """technology_update  # noqa: E501

        Update a technology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_update_with_http_info(techid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param Technology data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Technology, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `technology_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Technology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_update_list(self, techid, **kwargs):  # noqa: E501
        """technology_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_update_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_update_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_update_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_update_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_version_list(self, techid, **kwargs):  # noqa: E501
        """technology_version_list  # noqa: E501

        Get technology versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_version_list(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TechnologyVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_version_list_with_http_info(techid, **kwargs)  # noqa: E501

    def technology_version_list_with_http_info(self, techid, **kwargs):  # noqa: E501
        """technology_version_list  # noqa: E501

        Get technology versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_version_list_with_http_info(techid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TechnologyVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_version_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/version/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TechnologyVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def technology_version_read(self, techid, versionid, **kwargs):  # noqa: E501
        """technology_version_read  # noqa: E501

        Get technology versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_version_read(techid, versionid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int versionid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TechnologyVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.technology_version_read_with_http_info(techid, versionid, **kwargs)  # noqa: E501

    def technology_version_read_with_http_info(self, techid, versionid, **kwargs):  # noqa: E501
        """technology_version_read  # noqa: E501

        Get technology versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.technology_version_read_with_http_info(techid, versionid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int techid: (required)
        :param int versionid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TechnologyVersion, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'techid',
            'versionid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method technology_version_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'techid' is set
        if self.api_client.client_side_validation and ('techid' not in local_var_params or  # noqa: E501
                                                        local_var_params['techid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `techid` when calling `technology_version_read`")  # noqa: E501
        # verify the required parameter 'versionid' is set
        if self.api_client.client_side_validation and ('versionid' not in local_var_params or  # noqa: E501
                                                        local_var_params['versionid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `versionid` when calling `technology_version_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'techid' in local_var_params:
            path_params['techid'] = local_var_params['techid']  # noqa: E501
        if 'versionid' in local_var_params:
            path_params['versionid'] = local_var_params['versionid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/technology/{techid}/version/{versionid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TechnologyVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
