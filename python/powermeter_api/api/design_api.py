# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powermeter_api.api_client import ApiClient
from powermeter_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DesignApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_design_hierarchy_delete_all(self, designid, **kwargs):  # noqa: E501
        """api_design_hierarchy_delete_all  # noqa: E501

        Delete hierarchy groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_hierarchy_delete_all(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_design_hierarchy_delete_all_with_http_info(designid, **kwargs)  # noqa: E501

    def api_design_hierarchy_delete_all_with_http_info(self, designid, **kwargs):  # noqa: E501
        """api_design_hierarchy_delete_all  # noqa: E501

        Delete hierarchy groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_hierarchy_delete_all_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_design_hierarchy_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `api_design_hierarchy_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/hierarchy/group/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_design_instance_delete_all(self, designid, **kwargs):  # noqa: E501
        """api_design_instance_delete_all  # noqa: E501

        Delete all instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_instance_delete_all(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_design_instance_delete_all_with_http_info(designid, **kwargs)  # noqa: E501

    def api_design_instance_delete_all_with_http_info(self, designid, **kwargs):  # noqa: E501
        """api_design_instance_delete_all  # noqa: E501

        Delete all instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_instance_delete_all_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_design_instance_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `api_design_instance_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_design_mode_delete_all(self, designid, **kwargs):  # noqa: E501
        """api_design_mode_delete_all  # noqa: E501

        Delete design modes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_mode_delete_all(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_design_mode_delete_all_with_http_info(designid, **kwargs)  # noqa: E501

    def api_design_mode_delete_all_with_http_info(self, designid, **kwargs):  # noqa: E501
        """api_design_mode_delete_all  # noqa: E501

        Delete design modes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_mode_delete_all_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_design_mode_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `api_design_mode_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_design_parameter_delete_all(self, designid, **kwargs):  # noqa: E501
        """api_design_parameter_delete_all  # noqa: E501

        Delete params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_parameter_delete_all(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_design_parameter_delete_all_with_http_info(designid, **kwargs)  # noqa: E501

    def api_design_parameter_delete_all_with_http_info(self, designid, **kwargs):  # noqa: E501
        """api_design_parameter_delete_all  # noqa: E501

        Delete params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_parameter_delete_all_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_design_parameter_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `api_design_parameter_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_design_supply_delete_all(self, designid, **kwargs):  # noqa: E501
        """api_design_supply_delete_all  # noqa: E501

        Delete supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_supply_delete_all(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.api_design_supply_delete_all_with_http_info(designid, **kwargs)  # noqa: E501

    def api_design_supply_delete_all_with_http_info(self, designid, **kwargs):  # noqa: E501
        """api_design_supply_delete_all  # noqa: E501

        Delete supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_design_supply_delete_all_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_design_supply_delete_all" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `api_design_supply_delete_all`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_commit_create(self, designid, data, **kwargs):  # noqa: E501
        """design_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_commit_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignVersion data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_commit_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_commit_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_commit_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignVersion data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignVersion, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_commit_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_commit_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_commit_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/commit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_computepower_create(self, designid, process, rc, voltage, temperature, data, **kwargs):  # noqa: E501
        """design_computepower_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_computepower_create(designid, process, rc, voltage, temperature, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str process: (required)
        :param str rc: (required)
        :param float voltage: (required)
        :param int temperature: (required)
        :param list[PinState] data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ComputedPower]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_computepower_create_with_http_info(designid, process, rc, voltage, temperature, data, **kwargs)  # noqa: E501

    def design_computepower_create_with_http_info(self, designid, process, rc, voltage, temperature, data, **kwargs):  # noqa: E501
        """design_computepower_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_computepower_create_with_http_info(designid, process, rc, voltage, temperature, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str process: (required)
        :param str rc: (required)
        :param float voltage: (required)
        :param int temperature: (required)
        :param list[PinState] data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ComputedPower], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'process',
            'rc',
            'voltage',
            'temperature',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_computepower_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_computepower_create`")  # noqa: E501
        # verify the required parameter 'process' is set
        if self.api_client.client_side_validation and ('process' not in local_var_params or  # noqa: E501
                                                        local_var_params['process'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `process` when calling `design_computepower_create`")  # noqa: E501
        # verify the required parameter 'rc' is set
        if self.api_client.client_side_validation and ('rc' not in local_var_params or  # noqa: E501
                                                        local_var_params['rc'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rc` when calling `design_computepower_create`")  # noqa: E501
        # verify the required parameter 'voltage' is set
        if self.api_client.client_side_validation and ('voltage' not in local_var_params or  # noqa: E501
                                                        local_var_params['voltage'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `voltage` when calling `design_computepower_create`")  # noqa: E501
        # verify the required parameter 'temperature' is set
        if self.api_client.client_side_validation and ('temperature' not in local_var_params or  # noqa: E501
                                                        local_var_params['temperature'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `temperature` when calling `design_computepower_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_computepower_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'process' in local_var_params and local_var_params['process'] is not None:  # noqa: E501
            query_params.append(('process', local_var_params['process']))  # noqa: E501
        if 'rc' in local_var_params and local_var_params['rc'] is not None:  # noqa: E501
            query_params.append(('rc', local_var_params['rc']))  # noqa: E501
        if 'voltage' in local_var_params and local_var_params['voltage'] is not None:  # noqa: E501
            query_params.append(('voltage', local_var_params['voltage']))  # noqa: E501
        if 'temperature' in local_var_params and local_var_params['temperature'] is not None:  # noqa: E501
            query_params.append(('temperature', local_var_params['temperature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/computepower/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ComputedPower]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_computepowerarc_create(self, designid, process, rc, voltage, temperature, data, **kwargs):  # noqa: E501
        """design_computepowerarc_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_computepowerarc_create(designid, process, rc, voltage, temperature, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str process: (required)
        :param str rc: (required)
        :param float voltage: (required)
        :param int temperature: (required)
        :param list[PinStateArc] data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ComputedPowerArc
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_computepowerarc_create_with_http_info(designid, process, rc, voltage, temperature, data, **kwargs)  # noqa: E501

    def design_computepowerarc_create_with_http_info(self, designid, process, rc, voltage, temperature, data, **kwargs):  # noqa: E501
        """design_computepowerarc_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_computepowerarc_create_with_http_info(designid, process, rc, voltage, temperature, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str process: (required)
        :param str rc: (required)
        :param float voltage: (required)
        :param int temperature: (required)
        :param list[PinStateArc] data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ComputedPowerArc, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'process',
            'rc',
            'voltage',
            'temperature',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_computepowerarc_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_computepowerarc_create`")  # noqa: E501
        # verify the required parameter 'process' is set
        if self.api_client.client_side_validation and ('process' not in local_var_params or  # noqa: E501
                                                        local_var_params['process'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `process` when calling `design_computepowerarc_create`")  # noqa: E501
        # verify the required parameter 'rc' is set
        if self.api_client.client_side_validation and ('rc' not in local_var_params or  # noqa: E501
                                                        local_var_params['rc'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rc` when calling `design_computepowerarc_create`")  # noqa: E501
        # verify the required parameter 'voltage' is set
        if self.api_client.client_side_validation and ('voltage' not in local_var_params or  # noqa: E501
                                                        local_var_params['voltage'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `voltage` when calling `design_computepowerarc_create`")  # noqa: E501
        # verify the required parameter 'temperature' is set
        if self.api_client.client_side_validation and ('temperature' not in local_var_params or  # noqa: E501
                                                        local_var_params['temperature'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `temperature` when calling `design_computepowerarc_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_computepowerarc_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'process' in local_var_params and local_var_params['process'] is not None:  # noqa: E501
            query_params.append(('process', local_var_params['process']))  # noqa: E501
        if 'rc' in local_var_params and local_var_params['rc'] is not None:  # noqa: E501
            query_params.append(('rc', local_var_params['rc']))  # noqa: E501
        if 'voltage' in local_var_params and local_var_params['voltage'] is not None:  # noqa: E501
            query_params.append(('voltage', local_var_params['voltage']))  # noqa: E501
        if 'temperature' in local_var_params and local_var_params['temperature'] is not None:  # noqa: E501
            query_params.append(('temperature', local_var_params['temperature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/computepowerarc/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputedPowerArc',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_compute1_list(self, designid, powerid, p, v, t, **kwargs):  # noqa: E501
        """design_contribpower_compute1_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_compute1_list(designid, powerid, p, v, t, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param str p: Process name (required)
        :param float v: Voltage (required)
        :param int t: Temperature (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ComputedContributorPower1
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_compute1_list_with_http_info(designid, powerid, p, v, t, **kwargs)  # noqa: E501

    def design_contribpower_compute1_list_with_http_info(self, designid, powerid, p, v, t, **kwargs):  # noqa: E501
        """design_contribpower_compute1_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_compute1_list_with_http_info(designid, powerid, p, v, t, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param str p: Process name (required)
        :param float v: Voltage (required)
        :param int t: Temperature (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ComputedContributorPower1, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid',
            'p',
            'v',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_compute1_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_compute1_list`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_contribpower_compute1_list`")  # noqa: E501
        # verify the required parameter 'p' is set
        if self.api_client.client_side_validation and ('p' not in local_var_params or  # noqa: E501
                                                        local_var_params['p'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `p` when calling `design_contribpower_compute1_list`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `design_contribpower_compute1_list`")  # noqa: E501
        # verify the required parameter 't' is set
        if self.api_client.client_side_validation and ('t' not in local_var_params or  # noqa: E501
                                                        local_var_params['t'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `t` when calling `design_contribpower_compute1_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []
        if 'p' in local_var_params and local_var_params['p'] is not None:  # noqa: E501
            query_params.append(('p', local_var_params['p']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/{powerid}/compute1/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputedContributorPower1',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_compute_list(self, designid, powerid, p, v, t, **kwargs):  # noqa: E501
        """design_contribpower_compute_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_compute_list(designid, powerid, p, v, t, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param str p: Process name (required)
        :param float v: Voltage (required)
        :param int t: Temperature (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ComputedContributorPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_compute_list_with_http_info(designid, powerid, p, v, t, **kwargs)  # noqa: E501

    def design_contribpower_compute_list_with_http_info(self, designid, powerid, p, v, t, **kwargs):  # noqa: E501
        """design_contribpower_compute_list  # noqa: E501

        Get device data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_compute_list_with_http_info(designid, powerid, p, v, t, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param str p: Process name (required)
        :param float v: Voltage (required)
        :param int t: Temperature (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ComputedContributorPower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid',
            'p',
            'v',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_compute_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_compute_list`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_contribpower_compute_list`")  # noqa: E501
        # verify the required parameter 'p' is set
        if self.api_client.client_side_validation and ('p' not in local_var_params or  # noqa: E501
                                                        local_var_params['p'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `p` when calling `design_contribpower_compute_list`")  # noqa: E501
        # verify the required parameter 'v' is set
        if self.api_client.client_side_validation and ('v' not in local_var_params or  # noqa: E501
                                                        local_var_params['v'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `v` when calling `design_contribpower_compute_list`")  # noqa: E501
        # verify the required parameter 't' is set
        if self.api_client.client_side_validation and ('t' not in local_var_params or  # noqa: E501
                                                        local_var_params['t'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `t` when calling `design_contribpower_compute_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []
        if 'p' in local_var_params and local_var_params['p'] is not None:  # noqa: E501
            query_params.append(('p', local_var_params['p']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/{powerid}/compute/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComputedContributorPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_create(self, designid, data, **kwargs):  # noqa: E501
        """design_contribpower_create  # noqa: E501

        Create a new contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param ContribPower data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ContribPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_contribpower_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_contribpower_create  # noqa: E501

        Create a new contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param ContribPower data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ContribPower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_contribpower_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContribPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_delete(self, designid, powerid, **kwargs):  # noqa: E501
        """design_contribpower_delete  # noqa: E501

        Delete a contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_delete(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_delete_with_http_info(designid, powerid, **kwargs)  # noqa: E501

    def design_contribpower_delete_with_http_info(self, designid, powerid, **kwargs):  # noqa: E501
        """design_contribpower_delete  # noqa: E501

        Delete a contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_delete_with_http_info(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_delete`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_contribpower_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/{powerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_list(self, designid, **kwargs):  # noqa: E501
        """design_contribpower_list  # noqa: E501

        Get list of contributor powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ContribPower]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_contribpower_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_contribpower_list  # noqa: E501

        Get list of contributor powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ContribPower], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContribPower]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_read(self, designid, powerid, **kwargs):  # noqa: E501
        """design_contribpower_read  # noqa: E501

        Get a contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_read(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ContribPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_read_with_http_info(designid, powerid, **kwargs)  # noqa: E501

    def design_contribpower_read_with_http_info(self, designid, powerid, **kwargs):  # noqa: E501
        """design_contribpower_read  # noqa: E501

        Get a contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_read_with_http_info(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ContribPower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_read`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_contribpower_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/{powerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContribPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_contribpower_update(self, designid, powerid, data, **kwargs):  # noqa: E501
        """design_contribpower_update  # noqa: E501

        Update a contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_update(designid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param ContribPower data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ContribPower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_contribpower_update_with_http_info(designid, powerid, data, **kwargs)  # noqa: E501

    def design_contribpower_update_with_http_info(self, designid, powerid, data, **kwargs):  # noqa: E501
        """design_contribpower_update  # noqa: E501

        Update a contributor power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_contribpower_update_with_http_info(designid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param ContribPower data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ContribPower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_contribpower_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_contribpower_update`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_contribpower_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_contribpower_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/contribpower/{powerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ContribPower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_access_create(self, dashboardid, designid, projectid, masterdesignid, **kwargs):  # noqa: E501
        """design_dashboard_access_create  # noqa: E501

        Update design dashboard access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_access_create(dashboardid, designid, projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str dashboardid: (required)
        :param str designid: (required)
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_access_create_with_http_info(dashboardid, designid, projectid, masterdesignid, **kwargs)  # noqa: E501

    def design_dashboard_access_create_with_http_info(self, dashboardid, designid, projectid, masterdesignid, **kwargs):  # noqa: E501
        """design_dashboard_access_create  # noqa: E501

        Update design dashboard access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_access_create_with_http_info(dashboardid, designid, projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str dashboardid: (required)
        :param str designid: (required)
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'dashboardid',
            'designid',
            'projectid',
            'masterdesignid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_access_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_access_create`")  # noqa: E501
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_access_create`")  # noqa: E501
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `design_dashboard_access_create`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `design_dashboard_access_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/access/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_clone_create(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_clone_create  # noqa: E501

        Clone a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_clone_create(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_clone_create_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_clone_create_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_clone_create  # noqa: E501

        Clone a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_clone_create_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Dashboard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_clone_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_clone_create`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_clone_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_column_create(self, designid, dashboardid, data, **kwargs):  # noqa: E501
        """design_dashboard_column_create  # noqa: E501

        Create a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_create(designid, dashboardid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param DashboardColumn data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_column_create_with_http_info(designid, dashboardid, data, **kwargs)  # noqa: E501

    def design_dashboard_column_create_with_http_info(self, designid, dashboardid, data, **kwargs):  # noqa: E501
        """design_dashboard_column_create  # noqa: E501

        Create a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_create_with_http_info(designid, dashboardid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param DashboardColumn data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardColumn, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_column_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_column_create`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_column_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_column_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/column/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_column_delete(self, designid, dashboardid, columnid, data, **kwargs):  # noqa: E501
        """design_dashboard_column_delete  # noqa: E501

        Delete a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_delete(designid, dashboardid, columnid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int columnid: (required)
        :param DashboardColumn data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_column_delete_with_http_info(designid, dashboardid, columnid, data, **kwargs)  # noqa: E501

    def design_dashboard_column_delete_with_http_info(self, designid, dashboardid, columnid, data, **kwargs):  # noqa: E501
        """design_dashboard_column_delete  # noqa: E501

        Delete a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_delete_with_http_info(designid, dashboardid, columnid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int columnid: (required)
        :param DashboardColumn data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardColumn, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'columnid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_column_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_column_delete`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_column_delete`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if self.api_client.client_side_validation and ('columnid' not in local_var_params or  # noqa: E501
                                                        local_var_params['columnid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `columnid` when calling `design_dashboard_column_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_column_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'columnid' in local_var_params:
            path_params['columnid'] = local_var_params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/column/{columnid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_column_list(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_column_list  # noqa: E501

        Get dashboard columns  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_list(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DashboardColumn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_column_list_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_column_list_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_column_list  # noqa: E501

        Get dashboard columns  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_list_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DashboardColumn], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_column_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_column_list`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_column_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/column/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardColumn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_column_read(self, designid, dashboardid, columnid, **kwargs):  # noqa: E501
        """design_dashboard_column_read  # noqa: E501

        Get a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_read(designid, dashboardid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int columnid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_column_read_with_http_info(designid, dashboardid, columnid, **kwargs)  # noqa: E501

    def design_dashboard_column_read_with_http_info(self, designid, dashboardid, columnid, **kwargs):  # noqa: E501
        """design_dashboard_column_read  # noqa: E501

        Get a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_read_with_http_info(designid, dashboardid, columnid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int columnid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardColumn, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'columnid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_column_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_column_read`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_column_read`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if self.api_client.client_side_validation and ('columnid' not in local_var_params or  # noqa: E501
                                                        local_var_params['columnid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `columnid` when calling `design_dashboard_column_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'columnid' in local_var_params:
            path_params['columnid'] = local_var_params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/column/{columnid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_column_update(self, designid, dashboardid, columnid, data, **kwargs):  # noqa: E501
        """design_dashboard_column_update  # noqa: E501

        Update a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_update(designid, dashboardid, columnid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int columnid: (required)
        :param DashboardColumn data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardColumn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_column_update_with_http_info(designid, dashboardid, columnid, data, **kwargs)  # noqa: E501

    def design_dashboard_column_update_with_http_info(self, designid, dashboardid, columnid, data, **kwargs):  # noqa: E501
        """design_dashboard_column_update  # noqa: E501

        Update a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_column_update_with_http_info(designid, dashboardid, columnid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int columnid: (required)
        :param DashboardColumn data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardColumn, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'columnid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_column_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_column_update`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_column_update`")  # noqa: E501
        # verify the required parameter 'columnid' is set
        if self.api_client.client_side_validation and ('columnid' not in local_var_params or  # noqa: E501
                                                        local_var_params['columnid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `columnid` when calling `design_dashboard_column_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_column_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'columnid' in local_var_params:
            path_params['columnid'] = local_var_params['columnid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/column/{columnid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardColumn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_create(self, designid, data, **kwargs):  # noqa: E501
        """design_dashboard_create  # noqa: E501

        Create a dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Dashboard data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_dashboard_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_dashboard_create  # noqa: E501

        Create a dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Dashboard data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Dashboard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_data_list(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_data_list  # noqa: E501

        Get a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_data_list(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_data_list_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_data_list_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_data_list  # noqa: E501

        Get a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_data_list_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Dashboard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_data_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_data_list`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_data_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/data/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_delete(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_delete  # noqa: E501

        Delete a dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_delete(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_delete_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_delete_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_delete  # noqa: E501

        Delete a dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_delete_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_delete`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_list(self, designid, **kwargs):  # noqa: E501
        """design_dashboard_list  # noqa: E501

        Get a list of dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Dashboard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_dashboard_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_dashboard_list  # noqa: E501

        Get a list of dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Dashboard], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dashboard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_read(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_read  # noqa: E501

        Get a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_read(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_read_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_read_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_read  # noqa: E501

        Get a dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_read_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Dashboard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_read`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_row_create(self, designid, dashboardid, data, **kwargs):  # noqa: E501
        """design_dashboard_row_create  # noqa: E501

        Create a dashboard row  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_create(designid, dashboardid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param DashboardRow data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_row_create_with_http_info(designid, dashboardid, data, **kwargs)  # noqa: E501

    def design_dashboard_row_create_with_http_info(self, designid, dashboardid, data, **kwargs):  # noqa: E501
        """design_dashboard_row_create  # noqa: E501

        Create a dashboard row  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_create_with_http_info(designid, dashboardid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param DashboardRow data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardRow, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_row_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_row_create`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_row_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_row_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/row/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_row_delete(self, designid, dashboardid, rowid, data, **kwargs):  # noqa: E501
        """design_dashboard_row_delete  # noqa: E501

        Delete a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_delete(designid, dashboardid, rowid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int rowid: (required)
        :param DashboardRow data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_row_delete_with_http_info(designid, dashboardid, rowid, data, **kwargs)  # noqa: E501

    def design_dashboard_row_delete_with_http_info(self, designid, dashboardid, rowid, data, **kwargs):  # noqa: E501
        """design_dashboard_row_delete  # noqa: E501

        Delete a dashboard column  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_delete_with_http_info(designid, dashboardid, rowid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int rowid: (required)
        :param DashboardRow data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardRow, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'rowid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_row_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_row_delete`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_row_delete`")  # noqa: E501
        # verify the required parameter 'rowid' is set
        if self.api_client.client_side_validation and ('rowid' not in local_var_params or  # noqa: E501
                                                        local_var_params['rowid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rowid` when calling `design_dashboard_row_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_row_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'rowid' in local_var_params:
            path_params['rowid'] = local_var_params['rowid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/row/{rowid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_row_list(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_row_list  # noqa: E501

        Get dashboard rows  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_list(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DashboardRow]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_row_list_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_row_list_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_row_list  # noqa: E501

        Get dashboard rows  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_list_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DashboardRow], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_row_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_row_list`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_row_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/row/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DashboardRow]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_row_read(self, designid, dashboardid, rowid, **kwargs):  # noqa: E501
        """design_dashboard_row_read  # noqa: E501

        Get a dashboard row  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_read(designid, dashboardid, rowid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int rowid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_row_read_with_http_info(designid, dashboardid, rowid, **kwargs)  # noqa: E501

    def design_dashboard_row_read_with_http_info(self, designid, dashboardid, rowid, **kwargs):  # noqa: E501
        """design_dashboard_row_read  # noqa: E501

        Get a dashboard row  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_read_with_http_info(designid, dashboardid, rowid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int rowid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardRow, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'rowid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_row_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_row_read`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_row_read`")  # noqa: E501
        # verify the required parameter 'rowid' is set
        if self.api_client.client_side_validation and ('rowid' not in local_var_params or  # noqa: E501
                                                        local_var_params['rowid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rowid` when calling `design_dashboard_row_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'rowid' in local_var_params:
            path_params['rowid'] = local_var_params['rowid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/row/{rowid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_row_update(self, designid, dashboardid, rowid, data, **kwargs):  # noqa: E501
        """design_dashboard_row_update  # noqa: E501

        Update a dashboard row  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_update(designid, dashboardid, rowid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int rowid: (required)
        :param DashboardRow data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DashboardRow
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_row_update_with_http_info(designid, dashboardid, rowid, data, **kwargs)  # noqa: E501

    def design_dashboard_row_update_with_http_info(self, designid, dashboardid, rowid, data, **kwargs):  # noqa: E501
        """design_dashboard_row_update  # noqa: E501

        Update a dashboard row  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_row_update_with_http_info(designid, dashboardid, rowid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param int rowid: (required)
        :param DashboardRow data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DashboardRow, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'rowid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_row_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_row_update`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_row_update`")  # noqa: E501
        # verify the required parameter 'rowid' is set
        if self.api_client.client_side_validation and ('rowid' not in local_var_params or  # noqa: E501
                                                        local_var_params['rowid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `rowid` when calling `design_dashboard_row_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_row_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501
        if 'rowid' in local_var_params:
            path_params['rowid'] = local_var_params['rowid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/row/{rowid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DashboardRow',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_update(self, designid, dashboardid, data, **kwargs):  # noqa: E501
        """design_dashboard_update  # noqa: E501

        Update a dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_update(designid, dashboardid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param Dashboard data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Dashboard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_update_with_http_info(designid, dashboardid, data, **kwargs)  # noqa: E501

    def design_dashboard_update_with_http_info(self, designid, dashboardid, data, **kwargs):  # noqa: E501
        """design_dashboard_update  # noqa: E501

        Update a dashboards  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_update_with_http_info(designid, dashboardid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dashboardid: (required)
        :param Dashboard data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Dashboard, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_update`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_dashboard_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dashboard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_dashboard_update_list(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_update_list(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param int dashboardid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_dashboard_update_list_with_http_info(designid, dashboardid, **kwargs)  # noqa: E501

    def design_dashboard_update_list_with_http_info(self, designid, dashboardid, **kwargs):  # noqa: E501
        """design_dashboard_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_dashboard_update_list_with_http_info(designid, dashboardid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param int dashboardid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dashboardid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_dashboard_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_dashboard_update_list`")  # noqa: E501
        # verify the required parameter 'dashboardid' is set
        if self.api_client.client_side_validation and ('dashboardid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dashboardid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dashboardid` when calling `design_dashboard_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dashboardid' in local_var_params:
            path_params['dashboardid'] = local_var_params['dashboardid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/dashboard/{dashboardid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_data_create(self, uuid, data, **kwargs):  # noqa: E501
        """design_data_create  # noqa: E501

        Upload design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_create(uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uuid: (required)
        :param str data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_data_create_with_http_info(uuid, data, **kwargs)  # noqa: E501

    def design_data_create_with_http_info(self, uuid, data, **kwargs):  # noqa: E501
        """design_data_create  # noqa: E501

        Upload design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_create_with_http_info(uuid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str uuid: (required)
        :param str data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'uuid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_data_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if self.api_client.client_side_validation and ('uuid' not in local_var_params or  # noqa: E501
                                                        local_var_params['uuid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `uuid` when calling `design_data_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_data_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/data/{uuid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_data_delete(self, designid, dataid, **kwargs):  # noqa: E501
        """design_data_delete  # noqa: E501

        Delete design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_delete(designid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dataid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_data_delete_with_http_info(designid, dataid, **kwargs)  # noqa: E501

    def design_data_delete_with_http_info(self, designid, dataid, **kwargs):  # noqa: E501
        """design_data_delete  # noqa: E501

        Delete design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_delete_with_http_info(designid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dataid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dataid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_data_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_data_delete`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `design_data_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/data/{dataid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_data_list(self, designid, **kwargs):  # noqa: E501
        """design_data_list  # noqa: E501

        Get design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str fields:
        :param str filter:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_data_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_data_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_data_list  # noqa: E501

        Get design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str fields:
        :param str filter:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignData], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'fields',
            'filter'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_data_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_data_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'filter' in local_var_params and local_var_params['filter'] is not None:  # noqa: E501
            query_params.append(('filter', local_var_params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/data/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_data_read(self, designid, dataid, **kwargs):  # noqa: E501
        """design_data_read  # noqa: E501

        Get design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_read(designid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dataid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_data_read_with_http_info(designid, dataid, **kwargs)  # noqa: E501

    def design_data_read_with_http_info(self, designid, dataid, **kwargs):  # noqa: E501
        """design_data_read  # noqa: E501

        Get design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_read_with_http_info(designid, dataid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dataid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dataid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_data_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_data_read`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `design_data_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/data/{dataid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_data_update(self, designid, dataid, data, **kwargs):  # noqa: E501
        """design_data_update  # noqa: E501

        Update design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_update(designid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dataid: (required)
        :param DesignData data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_data_update_with_http_info(designid, dataid, data, **kwargs)  # noqa: E501

    def design_data_update_with_http_info(self, designid, dataid, data, **kwargs):  # noqa: E501
        """design_data_update  # noqa: E501

        Update design data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_data_update_with_http_info(designid, dataid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int dataid: (required)
        :param DesignData data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'dataid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_data_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_data_update`")  # noqa: E501
        # verify the required parameter 'dataid' is set
        if self.api_client.client_side_validation and ('dataid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dataid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dataid` when calling `design_data_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_data_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'dataid' in local_var_params:
            path_params['dataid'] = local_var_params['dataid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/data/{dataid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_energy_create(self, designid, data, **kwargs):  # noqa: E501
        """design_energy_create  # noqa: E501

        Add pin powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_energy_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignPinEnergy data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignPinEnergy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_energy_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_energy_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_energy_create  # noqa: E501

        Add pin powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_energy_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignPinEnergy data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignPinEnergy], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_energy_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_energy_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_energy_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/energy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignPinEnergy]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_energy_list(self, designid, **kwargs):  # noqa: E501
        """design_energy_list  # noqa: E501

        Get list of all pin powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_energy_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int page:
        :param int number:
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param int temperature: Temperature
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedDesignPinEnergy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_energy_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_energy_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_energy_list  # noqa: E501

        Get list of all pin powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_energy_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int page:
        :param int number:
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param int temperature: Temperature
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedDesignPinEnergy, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'page',
            'number',
            'process',
            'rc',
            'voltage',
            'temperature'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_energy_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_energy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] is not None:  # noqa: E501
            query_params.append(('number', local_var_params['number']))  # noqa: E501
        if 'process' in local_var_params and local_var_params['process'] is not None:  # noqa: E501
            query_params.append(('process', local_var_params['process']))  # noqa: E501
        if 'rc' in local_var_params and local_var_params['rc'] is not None:  # noqa: E501
            query_params.append(('rc', local_var_params['rc']))  # noqa: E501
        if 'voltage' in local_var_params and local_var_params['voltage'] is not None:  # noqa: E501
            query_params.append(('voltage', local_var_params['voltage']))  # noqa: E501
        if 'temperature' in local_var_params and local_var_params['temperature'] is not None:  # noqa: E501
            query_params.append(('temperature', local_var_params['temperature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/energy/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedDesignPinEnergy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_ff_create(self, designid, data, **kwargs):  # noqa: E501
        """design_ff_create  # noqa: E501

        Create a new ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignFF data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignFF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_ff_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_ff_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_ff_create  # noqa: E501

        Create a new ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignFF data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignFF, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_ff_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_ff_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_ff_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/ff/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignFF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_ff_delete(self, designid, ffid, **kwargs):  # noqa: E501
        """design_ff_delete  # noqa: E501

        Delete a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_delete(designid, ffid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int ffid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_ff_delete_with_http_info(designid, ffid, **kwargs)  # noqa: E501

    def design_ff_delete_with_http_info(self, designid, ffid, **kwargs):  # noqa: E501
        """design_ff_delete  # noqa: E501

        Delete a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_delete_with_http_info(designid, ffid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int ffid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'ffid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_ff_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_ff_delete`")  # noqa: E501
        # verify the required parameter 'ffid' is set
        if self.api_client.client_side_validation and ('ffid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ffid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ffid` when calling `design_ff_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'ffid' in local_var_params:
            path_params['ffid'] = local_var_params['ffid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/ff/{ffid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_ff_list(self, designid, **kwargs):  # noqa: E501
        """design_ff_list  # noqa: E501

        Get list of ffs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignFF]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_ff_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_ff_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_ff_list  # noqa: E501

        Get list of ffs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignFF], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_ff_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_ff_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/ff/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignFF]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_ff_read(self, designid, ffid, **kwargs):  # noqa: E501
        """design_ff_read  # noqa: E501

        Get a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_read(designid, ffid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int ffid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignFF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_ff_read_with_http_info(designid, ffid, **kwargs)  # noqa: E501

    def design_ff_read_with_http_info(self, designid, ffid, **kwargs):  # noqa: E501
        """design_ff_read  # noqa: E501

        Get a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_read_with_http_info(designid, ffid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int ffid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignFF, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'ffid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_ff_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_ff_read`")  # noqa: E501
        # verify the required parameter 'ffid' is set
        if self.api_client.client_side_validation and ('ffid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ffid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ffid` when calling `design_ff_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'ffid' in local_var_params:
            path_params['ffid'] = local_var_params['ffid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/ff/{ffid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignFF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_ff_update(self, designid, ffid, data, **kwargs):  # noqa: E501
        """design_ff_update  # noqa: E501

        Update a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_update(designid, ffid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int ffid: (required)
        :param DesignFF data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignFF
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_ff_update_with_http_info(designid, ffid, data, **kwargs)  # noqa: E501

    def design_ff_update_with_http_info(self, designid, ffid, data, **kwargs):  # noqa: E501
        """design_ff_update  # noqa: E501

        Update a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_ff_update_with_http_info(designid, ffid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int ffid: (required)
        :param DesignFF data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignFF, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'ffid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_ff_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_ff_update`")  # noqa: E501
        # verify the required parameter 'ffid' is set
        if self.api_client.client_side_validation and ('ffid' not in local_var_params or  # noqa: E501
                                                        local_var_params['ffid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ffid` when calling `design_ff_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_ff_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'ffid' in local_var_params:
            path_params['ffid'] = local_var_params['ffid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/ff/{ffid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignFF',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_hierarchy_group_create(self, designid, data, **kwargs):  # noqa: E501
        """design_hierarchy_group_create  # noqa: E501

        Create new hierarchy group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_group_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Hier data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Hier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_hierarchy_group_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_hierarchy_group_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_hierarchy_group_create  # noqa: E501

        Create new hierarchy group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_group_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Hier data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Hier, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_hierarchy_group_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_hierarchy_group_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_hierarchy_group_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/hierarchy/group/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Hier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_hierarchy_group_delete(self, designid, groupid, **kwargs):  # noqa: E501
        """design_hierarchy_group_delete  # noqa: E501

        Delete a hierarchy group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_group_delete(designid, groupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int groupid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_hierarchy_group_delete_with_http_info(designid, groupid, **kwargs)  # noqa: E501

    def design_hierarchy_group_delete_with_http_info(self, designid, groupid, **kwargs):  # noqa: E501
        """design_hierarchy_group_delete  # noqa: E501

        Delete a hierarchy group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_group_delete_with_http_info(designid, groupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int groupid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'groupid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_hierarchy_group_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_hierarchy_group_delete`")  # noqa: E501
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `design_hierarchy_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/hierarchy/group/{groupid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_hierarchy_group_update(self, designid, groupid, data, **kwargs):  # noqa: E501
        """design_hierarchy_group_update  # noqa: E501

        Update hierarchy group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_group_update(designid, groupid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int groupid: (required)
        :param Hier data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Hier
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_hierarchy_group_update_with_http_info(designid, groupid, data, **kwargs)  # noqa: E501

    def design_hierarchy_group_update_with_http_info(self, designid, groupid, data, **kwargs):  # noqa: E501
        """design_hierarchy_group_update  # noqa: E501

        Update hierarchy group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_group_update_with_http_info(designid, groupid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int groupid: (required)
        :param Hier data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Hier, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'groupid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_hierarchy_group_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_hierarchy_group_update`")  # noqa: E501
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `design_hierarchy_group_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_hierarchy_group_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/hierarchy/group/{groupid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Hier',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_hierarchy_list(self, designid, **kwargs):  # noqa: E501
        """design_hierarchy_list  # noqa: E501

        Get hierarchy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Hier]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_hierarchy_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_hierarchy_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_hierarchy_list  # noqa: E501

        Get hierarchy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Hier], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_hierarchy_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_hierarchy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/hierarchy/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Hier]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_hierarchy_update(self, designid, data, **kwargs):  # noqa: E501
        """design_hierarchy_update  # noqa: E501

        Update hierarchy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_update(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Hier data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Hier]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_hierarchy_update_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_hierarchy_update_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_hierarchy_update  # noqa: E501

        Update hierarchy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_hierarchy_update_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Hier data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Hier], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_hierarchy_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_hierarchy_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_hierarchy_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/hierarchy/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Hier]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_bulk_create(self, designid, data, **kwargs):  # noqa: E501
        """design_instance_bulk_create  # noqa: E501

        Create a new instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_bulk_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param list[Instance] data: (required)
        :param bool _return:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Instance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_bulk_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_instance_bulk_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_instance_bulk_create  # noqa: E501

        Create a new instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_bulk_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param list[Instance] data: (required)
        :param bool _return:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Instance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data',
            '_return'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_bulk_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_bulk_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_instance_bulk_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if '_return' in local_var_params and local_var_params['_return'] is not None:  # noqa: E501
            query_params.append(('return', local_var_params['_return']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/bulk/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Instance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_clone(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_clone  # noqa: E501

        Clone an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_clone(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Instance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_clone_with_http_info(designid, instanceid, **kwargs)  # noqa: E501

    def design_instance_clone_with_http_info(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_clone  # noqa: E501

        Clone an instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_clone_with_http_info(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Instance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_clone`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_create(self, designid, data, **kwargs):  # noqa: E501
        """design_instance_create  # noqa: E501

        Create a new instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Instance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Instance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_instance_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_instance_create  # noqa: E501

        Create a new instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Instance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Instance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_instance_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_delete(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_delete  # noqa: E501

        Delete instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_delete(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_delete_with_http_info(designid, instanceid, **kwargs)  # noqa: E501

    def design_instance_delete_with_http_info(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_delete  # noqa: E501

        Delete instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_delete_with_http_info(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_delete`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_list(self, designid, **kwargs):  # noqa: E501
        """design_instance_list  # noqa: E501

        Get list of instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int page:
        :param int number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_instance_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_instance_list  # noqa: E501

        Get list of instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int page:
        :param int number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'page',
            'number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] is not None:  # noqa: E501
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_read(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_read  # noqa: E501

        Get a design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_read(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Instance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_read_with_http_info(designid, instanceid, **kwargs)  # noqa: E501

    def design_instance_read_with_http_info(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_read  # noqa: E501

        Get a design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_read_with_http_info(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Instance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_read`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_supply_create(self, designid, instanceid, data, **kwargs):  # noqa: E501
        """design_instance_supply_create  # noqa: E501

        Update instance supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_create(designid, instanceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param InstanceSupply data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[InstanceSupply]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_supply_create_with_http_info(designid, instanceid, data, **kwargs)  # noqa: E501

    def design_instance_supply_create_with_http_info(self, designid, instanceid, data, **kwargs):  # noqa: E501
        """design_instance_supply_create  # noqa: E501

        Update instance supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_create_with_http_info(designid, instanceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param InstanceSupply data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[InstanceSupply], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_supply_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_supply_create`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_supply_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_instance_supply_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/supply/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InstanceSupply]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_supply_list(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_supply_list  # noqa: E501

        Get instance supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_list(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[InstanceSupply]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_supply_list_with_http_info(designid, instanceid, **kwargs)  # noqa: E501

    def design_instance_supply_list_with_http_info(self, designid, instanceid, **kwargs):  # noqa: E501
        """design_instance_supply_list  # noqa: E501

        Get instance supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_list_with_http_info(designid, instanceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[InstanceSupply], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_supply_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_supply_list`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_supply_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/supply/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InstanceSupply]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_supply_read(self, designid, instanceid, supplyid, **kwargs):  # noqa: E501
        """design_instance_supply_read  # noqa: E501

        Get an instance supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_read(designid, instanceid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InstanceSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_supply_read_with_http_info(designid, instanceid, supplyid, **kwargs)  # noqa: E501

    def design_instance_supply_read_with_http_info(self, designid, instanceid, supplyid, **kwargs):  # noqa: E501
        """design_instance_supply_read  # noqa: E501

        Get an instance supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_read_with_http_info(designid, instanceid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InstanceSupply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_supply_read`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_instance_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/supply/{supplyid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstanceSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_supply_update(self, designid, instanceid, supplyid, data, **kwargs):  # noqa: E501
        """design_instance_supply_update  # noqa: E501

        Update an instance supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_update(designid, instanceid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param int supplyid: (required)
        :param InstanceSupply data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InstanceSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_supply_update_with_http_info(designid, instanceid, supplyid, data, **kwargs)  # noqa: E501

    def design_instance_supply_update_with_http_info(self, designid, instanceid, supplyid, data, **kwargs):  # noqa: E501
        """design_instance_supply_update  # noqa: E501

        Update an instance supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_supply_update_with_http_info(designid, instanceid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param int supplyid: (required)
        :param InstanceSupply data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InstanceSupply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_supply_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_supply_update`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_supply_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_instance_supply_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_instance_supply_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/supply/{supplyid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InstanceSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_update(self, designid, instanceid, data, **kwargs):  # noqa: E501
        """design_instance_update  # noqa: E501

        Update instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_update(designid, instanceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param Instance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Instance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_update_with_http_info(designid, instanceid, data, **kwargs)  # noqa: E501

    def design_instance_update_with_http_info(self, designid, instanceid, data, **kwargs):  # noqa: E501
        """design_instance_update  # noqa: E501

        Update instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_update_with_http_info(designid, instanceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param Instance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Instance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_update`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_instance_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Instance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instance_updatemaster_create(self, designid, instanceid, masterid, **kwargs):  # noqa: E501
        """design_instance_updatemaster_create  # noqa: E501

        Update instance master  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_updatemaster_create(designid, instanceid, masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param int masterid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Instance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instance_updatemaster_create_with_http_info(designid, instanceid, masterid, **kwargs)  # noqa: E501

    def design_instance_updatemaster_create_with_http_info(self, designid, instanceid, masterid, **kwargs):  # noqa: E501
        """design_instance_updatemaster_create  # noqa: E501

        Update instance master  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instance_updatemaster_create_with_http_info(designid, instanceid, masterid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int instanceid: (required)
        :param int masterid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Instance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'instanceid',
            'masterid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instance_updatemaster_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instance_updatemaster_create`")  # noqa: E501
        # verify the required parameter 'instanceid' is set
        if self.api_client.client_side_validation and ('instanceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['instanceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `instanceid` when calling `design_instance_updatemaster_create`")  # noqa: E501
        # verify the required parameter 'masterid' is set
        if self.api_client.client_side_validation and ('masterid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterid` when calling `design_instance_updatemaster_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'instanceid' in local_var_params:
            path_params['instanceid'] = local_var_params['instanceid']  # noqa: E501
        if 'masterid' in local_var_params:
            path_params['masterid'] = local_var_params['masterid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instance/{instanceid}/updatemaster/{masterid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Instance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_instantiable_list(self, designid, **kwargs):  # noqa: E501
        """design_instantiable_list  # noqa: E501

        Get list of designs that can be instantiated in the given design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instantiable_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_instantiable_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_instantiable_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_instantiable_list  # noqa: E501

        Get list of designs that can be instantiated in the given design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_instantiable_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_instantiable_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_instantiable_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/instantiable/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_latch_create(self, designid, data, **kwargs):  # noqa: E501
        """design_latch_create  # noqa: E501

        Create a new latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignLatch data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignLatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_latch_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_latch_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_latch_create  # noqa: E501

        Create a new latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignLatch data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignLatch, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_latch_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_latch_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_latch_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/latch/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignLatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_latch_delete(self, designid, latchid, **kwargs):  # noqa: E501
        """design_latch_delete  # noqa: E501

        Delete a latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_delete(designid, latchid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int latchid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_latch_delete_with_http_info(designid, latchid, **kwargs)  # noqa: E501

    def design_latch_delete_with_http_info(self, designid, latchid, **kwargs):  # noqa: E501
        """design_latch_delete  # noqa: E501

        Delete a latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_delete_with_http_info(designid, latchid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int latchid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'latchid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_latch_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_latch_delete`")  # noqa: E501
        # verify the required parameter 'latchid' is set
        if self.api_client.client_side_validation and ('latchid' not in local_var_params or  # noqa: E501
                                                        local_var_params['latchid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `latchid` when calling `design_latch_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'latchid' in local_var_params:
            path_params['latchid'] = local_var_params['latchid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/latch/{latchid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_latch_list(self, designid, **kwargs):  # noqa: E501
        """design_latch_list  # noqa: E501

        Get list of latches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignLatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_latch_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_latch_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_latch_list  # noqa: E501

        Get list of latches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignLatch], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_latch_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_latch_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/latch/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignLatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_latch_read(self, designid, latchid, **kwargs):  # noqa: E501
        """design_latch_read  # noqa: E501

        Get a latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_read(designid, latchid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int latchid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignLatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_latch_read_with_http_info(designid, latchid, **kwargs)  # noqa: E501

    def design_latch_read_with_http_info(self, designid, latchid, **kwargs):  # noqa: E501
        """design_latch_read  # noqa: E501

        Get a latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_read_with_http_info(designid, latchid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int latchid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignLatch, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'latchid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_latch_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_latch_read`")  # noqa: E501
        # verify the required parameter 'latchid' is set
        if self.api_client.client_side_validation and ('latchid' not in local_var_params or  # noqa: E501
                                                        local_var_params['latchid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `latchid` when calling `design_latch_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'latchid' in local_var_params:
            path_params['latchid'] = local_var_params['latchid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/latch/{latchid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignLatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_latch_update(self, designid, latchid, data, **kwargs):  # noqa: E501
        """design_latch_update  # noqa: E501

        Update a latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_update(designid, latchid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int latchid: (required)
        :param DesignLatch data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignLatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_latch_update_with_http_info(designid, latchid, data, **kwargs)  # noqa: E501

    def design_latch_update_with_http_info(self, designid, latchid, data, **kwargs):  # noqa: E501
        """design_latch_update  # noqa: E501

        Update a latch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_latch_update_with_http_info(designid, latchid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int latchid: (required)
        :param DesignLatch data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignLatch, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'latchid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_latch_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_latch_update`")  # noqa: E501
        # verify the required parameter 'latchid' is set
        if self.api_client.client_side_validation and ('latchid' not in local_var_params or  # noqa: E501
                                                        local_var_params['latchid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `latchid` when calling `design_latch_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_latch_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'latchid' in local_var_params:
            path_params['latchid'] = local_var_params['latchid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/latch/{latchid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignLatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_leakagepower_create(self, designid, data, **kwargs):  # noqa: E501
        """design_leakagepower_create  # noqa: E501

        Create a new leakage power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param LeakagePower data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LeakagePower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_leakagepower_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_leakagepower_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_leakagepower_create  # noqa: E501

        Create a new leakage power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param LeakagePower data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LeakagePower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_leakagepower_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_leakagepower_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_leakagepower_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/leakagepower/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeakagePower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_leakagepower_delete(self, designid, powerid, **kwargs):  # noqa: E501
        """design_leakagepower_delete  # noqa: E501

        Delete a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_delete(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_leakagepower_delete_with_http_info(designid, powerid, **kwargs)  # noqa: E501

    def design_leakagepower_delete_with_http_info(self, designid, powerid, **kwargs):  # noqa: E501
        """design_leakagepower_delete  # noqa: E501

        Delete a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_delete_with_http_info(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_leakagepower_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_leakagepower_delete`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_leakagepower_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/leakagepower/{powerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_leakagepower_list(self, designid, **kwargs):  # noqa: E501
        """design_leakagepower_list  # noqa: E501

        Get list of leakage powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int page:
        :param int number:
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param int temperature: Temperature
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedLeakagePower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_leakagepower_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_leakagepower_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_leakagepower_list  # noqa: E501

        Get list of leakage powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int page:
        :param int number:
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param int temperature: Temperature
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedLeakagePower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'page',
            'number',
            'process',
            'rc',
            'voltage',
            'temperature'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_leakagepower_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_leakagepower_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] is not None:  # noqa: E501
            query_params.append(('number', local_var_params['number']))  # noqa: E501
        if 'process' in local_var_params and local_var_params['process'] is not None:  # noqa: E501
            query_params.append(('process', local_var_params['process']))  # noqa: E501
        if 'rc' in local_var_params and local_var_params['rc'] is not None:  # noqa: E501
            query_params.append(('rc', local_var_params['rc']))  # noqa: E501
        if 'voltage' in local_var_params and local_var_params['voltage'] is not None:  # noqa: E501
            query_params.append(('voltage', local_var_params['voltage']))  # noqa: E501
        if 'temperature' in local_var_params and local_var_params['temperature'] is not None:  # noqa: E501
            query_params.append(('temperature', local_var_params['temperature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/leakagepower/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedLeakagePower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_leakagepower_read(self, designid, powerid, **kwargs):  # noqa: E501
        """design_leakagepower_read  # noqa: E501

        Get a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_read(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LeakagePower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_leakagepower_read_with_http_info(designid, powerid, **kwargs)  # noqa: E501

    def design_leakagepower_read_with_http_info(self, designid, powerid, **kwargs):  # noqa: E501
        """design_leakagepower_read  # noqa: E501

        Get a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_read_with_http_info(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LeakagePower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_leakagepower_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_leakagepower_read`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_leakagepower_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/leakagepower/{powerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeakagePower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_leakagepower_update(self, designid, powerid, data, **kwargs):  # noqa: E501
        """design_leakagepower_update  # noqa: E501

        Update a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_update(designid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param LeakagePower data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LeakagePower
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_leakagepower_update_with_http_info(designid, powerid, data, **kwargs)  # noqa: E501

    def design_leakagepower_update_with_http_info(self, designid, powerid, data, **kwargs):  # noqa: E501
        """design_leakagepower_update  # noqa: E501

        Update a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_leakagepower_update_with_http_info(designid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param LeakagePower data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LeakagePower, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_leakagepower_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_leakagepower_update`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_leakagepower_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_leakagepower_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/leakagepower/{powerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeakagePower',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_clone(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_clone  # noqa: E501

        Clone a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_clone(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Mode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_clone_with_http_info(designid, modeid, **kwargs)  # noqa: E501

    def design_mode_clone_with_http_info(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_clone  # noqa: E501

        Clone a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_clone_with_http_info(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Mode, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_clone`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_create(self, designid, data, **kwargs):  # noqa: E501
        """design_mode_create  # noqa: E501

        Create a new mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Mode data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Mode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_mode_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_mode_create  # noqa: E501

        Create a new mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Mode data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Mode, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_mode_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_delete(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_delete  # noqa: E501

        Delete a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_delete(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_delete_with_http_info(designid, modeid, **kwargs)  # noqa: E501

    def design_mode_delete_with_http_info(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_delete  # noqa: E501

        Delete a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_delete_with_http_info(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_delete`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_list(self, designid, **kwargs):  # noqa: E501
        """design_mode_list  # noqa: E501

        Get list of design modes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Mode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_mode_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_mode_list  # noqa: E501

        Get list of design modes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Mode], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Mode]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_power_list(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_power_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_power_list(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_power_list_with_http_info(designid, modeid, **kwargs)  # noqa: E501

    def design_mode_power_list_with_http_info(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_power_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_power_list_with_http_info(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_power_list`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_powerdistribution_list(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_powerdistribution_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_powerdistribution_list(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_powerdistribution_list_with_http_info(designid, modeid, **kwargs)  # noqa: E501

    def design_mode_powerdistribution_list_with_http_info(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_powerdistribution_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_powerdistribution_list_with_http_info(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_powerdistribution_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_powerdistribution_list`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_powerdistribution_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/powerdistribution/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_read(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_read  # noqa: E501

        Get a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_read(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Mode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_read_with_http_info(designid, modeid, **kwargs)  # noqa: E501

    def design_mode_read_with_http_info(self, designid, modeid, **kwargs):  # noqa: E501
        """design_mode_read  # noqa: E501

        Get a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_read_with_http_info(designid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Mode, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_read`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_supply_computepower_create(self, designid, modeid, supplyid, data, **kwargs):  # noqa: E501
        """design_mode_supply_computepower_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supply_computepower_create(designid, modeid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param int supplyid: (required)
        :param ComputePower1 data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_supply_computepower_create_with_http_info(designid, modeid, supplyid, data, **kwargs)  # noqa: E501

    def design_mode_supply_computepower_create_with_http_info(self, designid, modeid, supplyid, data, **kwargs):  # noqa: E501
        """design_mode_supply_computepower_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supply_computepower_create_with_http_info(designid, modeid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param int supplyid: (required)
        :param ComputePower1 data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_supply_computepower_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_supply_computepower_create`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_supply_computepower_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_mode_supply_computepower_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_mode_supply_computepower_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/supply/{supplyid}/computepower/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_supply_computepowertable_create(self, designid, modeid, supplyid, data, **kwargs):  # noqa: E501
        """design_mode_supply_computepowertable_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supply_computepowertable_create(designid, modeid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param int supplyid: (required)
        :param ComputePower2 data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_supply_computepowertable_create_with_http_info(designid, modeid, supplyid, data, **kwargs)  # noqa: E501

    def design_mode_supply_computepowertable_create_with_http_info(self, designid, modeid, supplyid, data, **kwargs):  # noqa: E501
        """design_mode_supply_computepowertable_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supply_computepowertable_create_with_http_info(designid, modeid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param int supplyid: (required)
        :param ComputePower2 data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_supply_computepowertable_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_supply_computepowertable_create`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_supply_computepowertable_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_mode_supply_computepowertable_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_mode_supply_computepowertable_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/supply/{supplyid}/computepowertable/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_supplystate_list(self, designid, supplyid, modeid, **kwargs):  # noqa: E501
        """design_mode_supplystate_list  # noqa: E501

        Get list of supply states per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supplystate_list(designid, supplyid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyModeState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_supplystate_list_with_http_info(designid, supplyid, modeid, **kwargs)  # noqa: E501

    def design_mode_supplystate_list_with_http_info(self, designid, supplyid, modeid, **kwargs):  # noqa: E501
        """design_mode_supplystate_list  # noqa: E501

        Get list of supply states per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supplystate_list_with_http_info(designid, supplyid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyModeState, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_supplystate_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_supplystate_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_mode_supplystate_list`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_supplystate_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/supplystate/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyModeState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_supplystate_update(self, designid, supplyid, modeid, data, **kwargs):  # noqa: E501
        """design_mode_supplystate_update  # noqa: E501

        Update a supply state per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supplystate_update(designid, supplyid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param SupplyModeState data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyModeState]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_supplystate_update_with_http_info(designid, supplyid, modeid, data, **kwargs)  # noqa: E501

    def design_mode_supplystate_update_with_http_info(self, designid, supplyid, modeid, data, **kwargs):  # noqa: E501
        """design_mode_supplystate_update  # noqa: E501

        Update a supply state per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_supplystate_update_with_http_info(designid, supplyid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param SupplyModeState data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyModeState], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_supplystate_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_supplystate_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_mode_supplystate_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_supplystate_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_mode_supplystate_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/supplystate/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyModeState]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_mode_update(self, designid, modeid, data, **kwargs):  # noqa: E501
        """design_mode_update  # noqa: E501

        Update a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_update(designid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param Mode data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Mode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_mode_update_with_http_info(designid, modeid, data, **kwargs)  # noqa: E501

    def design_mode_update_with_http_info(self, designid, modeid, data, **kwargs):  # noqa: E501
        """design_mode_update  # noqa: E501

        Update a design mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_mode_update_with_http_info(designid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int modeid: (required)
        :param Mode data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Mode, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_mode_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_mode_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_mode_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_mode_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/mode/{modeid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_parameter_clone(self, designid, paramid, **kwargs):  # noqa: E501
        """design_parameter_clone  # noqa: E501

        Clode a mode param  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_clone(designid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Param
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_parameter_clone_with_http_info(designid, paramid, **kwargs)  # noqa: E501

    def design_parameter_clone_with_http_info(self, designid, paramid, **kwargs):  # noqa: E501
        """design_parameter_clone  # noqa: E501

        Clode a mode param  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_clone_with_http_info(designid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Param, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_parameter_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_parameter_clone`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_parameter_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/{paramid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Param',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_parameter_create(self, designid, data, **kwargs):  # noqa: E501
        """design_parameter_create  # noqa: E501

        Create a new parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Param data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Param
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_parameter_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_parameter_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_parameter_create  # noqa: E501

        Create a new parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Param data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Param, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_parameter_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_parameter_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_parameter_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Param',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_parameter_delete(self, designid, paramid, **kwargs):  # noqa: E501
        """design_parameter_delete  # noqa: E501

        Delete a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_delete(designid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_parameter_delete_with_http_info(designid, paramid, **kwargs)  # noqa: E501

    def design_parameter_delete_with_http_info(self, designid, paramid, **kwargs):  # noqa: E501
        """design_parameter_delete  # noqa: E501

        Delete a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_delete_with_http_info(designid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_parameter_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_parameter_delete`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_parameter_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/{paramid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_parameter_list(self, designid, **kwargs):  # noqa: E501
        """design_parameter_list  # noqa: E501

        Get list of params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Param]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_parameter_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_parameter_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_parameter_list  # noqa: E501

        Get list of params  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Param], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_parameter_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_parameter_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Param]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_parameter_read(self, designid, paramid, **kwargs):  # noqa: E501
        """design_parameter_read  # noqa: E501

        Get a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_read(designid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Param
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_parameter_read_with_http_info(designid, paramid, **kwargs)  # noqa: E501

    def design_parameter_read_with_http_info(self, designid, paramid, **kwargs):  # noqa: E501
        """design_parameter_read  # noqa: E501

        Get a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_read_with_http_info(designid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Param, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_parameter_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_parameter_read`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_parameter_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/{paramid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Param',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_parameter_update(self, designid, paramid, data, **kwargs):  # noqa: E501
        """design_parameter_update  # noqa: E501

        Update a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_update(designid, paramid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param Param data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Param
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_parameter_update_with_http_info(designid, paramid, data, **kwargs)  # noqa: E501

    def design_parameter_update_with_http_info(self, designid, paramid, data, **kwargs):  # noqa: E501
        """design_parameter_update  # noqa: E501

        Update a parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_parameter_update_with_http_info(designid, paramid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int paramid: (required)
        :param Param data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Param, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'paramid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_parameter_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_parameter_update`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_parameter_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_parameter_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/parameter/{paramid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Param',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_permissions_list(self, designid, **kwargs):  # noqa: E501
        """design_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_permissions_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_permissions_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_permissions_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_permissions_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_permissions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_permissions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/permissions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_permissions_update(self, designid, **kwargs):  # noqa: E501
        """design_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_permissions_update(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_permissions_update_with_http_info(designid, **kwargs)  # noqa: E501

    def design_permissions_update_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_permissions_update_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_permissions_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_permissions_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/permissions/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_caps_create(self, designid, pinid, data, **kwargs):  # noqa: E501
        """design_pin_caps_create  # noqa: E501

        Create a new pin cap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_create(designid, pinid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param PinCap data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PinCap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_caps_create_with_http_info(designid, pinid, data, **kwargs)  # noqa: E501

    def design_pin_caps_create_with_http_info(self, designid, pinid, data, **kwargs):  # noqa: E501
        """design_pin_caps_create  # noqa: E501

        Create a new pin cap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_create_with_http_info(designid, pinid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param PinCap data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PinCap, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_caps_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_caps_create`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_caps_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_pin_caps_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/caps/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinCap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_caps_delete(self, designid, pinid, capid, **kwargs):  # noqa: E501
        """design_pin_caps_delete  # noqa: E501

        Delete a pin cap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_delete(designid, pinid, capid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int capid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_caps_delete_with_http_info(designid, pinid, capid, **kwargs)  # noqa: E501

    def design_pin_caps_delete_with_http_info(self, designid, pinid, capid, **kwargs):  # noqa: E501
        """design_pin_caps_delete  # noqa: E501

        Delete a pin cap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_delete_with_http_info(designid, pinid, capid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int capid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'capid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_caps_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_caps_delete`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_caps_delete`")  # noqa: E501
        # verify the required parameter 'capid' is set
        if self.api_client.client_side_validation and ('capid' not in local_var_params or  # noqa: E501
                                                        local_var_params['capid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `capid` when calling `design_pin_caps_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501
        if 'capid' in local_var_params:
            path_params['capid'] = local_var_params['capid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/caps/{capid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_caps_list(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_caps_list  # noqa: E501

        Get list of pin caps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_list(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param float temperature: Temperature
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PinCap]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_caps_list_with_http_info(designid, pinid, **kwargs)  # noqa: E501

    def design_pin_caps_list_with_http_info(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_caps_list  # noqa: E501

        Get list of pin caps  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_list_with_http_info(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param float temperature: Temperature
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PinCap], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'process',
            'rc',
            'voltage',
            'temperature'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_caps_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_caps_list`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_caps_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []
        if 'process' in local_var_params and local_var_params['process'] is not None:  # noqa: E501
            query_params.append(('process', local_var_params['process']))  # noqa: E501
        if 'rc' in local_var_params and local_var_params['rc'] is not None:  # noqa: E501
            query_params.append(('rc', local_var_params['rc']))  # noqa: E501
        if 'voltage' in local_var_params and local_var_params['voltage'] is not None:  # noqa: E501
            query_params.append(('voltage', local_var_params['voltage']))  # noqa: E501
        if 'temperature' in local_var_params and local_var_params['temperature'] is not None:  # noqa: E501
            query_params.append(('temperature', local_var_params['temperature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/caps/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PinCap]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_caps_read(self, designid, pinid, capid, **kwargs):  # noqa: E501
        """design_pin_caps_read  # noqa: E501

        Get a pin cap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_read(designid, pinid, capid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int capid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PinCap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_caps_read_with_http_info(designid, pinid, capid, **kwargs)  # noqa: E501

    def design_pin_caps_read_with_http_info(self, designid, pinid, capid, **kwargs):  # noqa: E501
        """design_pin_caps_read  # noqa: E501

        Get a pin cap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_read_with_http_info(designid, pinid, capid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int capid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PinCap, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'capid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_caps_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_caps_read`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_caps_read`")  # noqa: E501
        # verify the required parameter 'capid' is set
        if self.api_client.client_side_validation and ('capid' not in local_var_params or  # noqa: E501
                                                        local_var_params['capid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `capid` when calling `design_pin_caps_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501
        if 'capid' in local_var_params:
            path_params['capid'] = local_var_params['capid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/caps/{capid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinCap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_caps_update(self, designid, pinid, capid, data, **kwargs):  # noqa: E501
        """design_pin_caps_update  # noqa: E501

        Update a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_update(designid, pinid, capid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int capid: (required)
        :param PinCap data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PinCap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_caps_update_with_http_info(designid, pinid, capid, data, **kwargs)  # noqa: E501

    def design_pin_caps_update_with_http_info(self, designid, pinid, capid, data, **kwargs):  # noqa: E501
        """design_pin_caps_update  # noqa: E501

        Update a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_caps_update_with_http_info(designid, pinid, capid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int capid: (required)
        :param PinCap data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PinCap, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'capid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_caps_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_caps_update`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_caps_update`")  # noqa: E501
        # verify the required parameter 'capid' is set
        if self.api_client.client_side_validation and ('capid' not in local_var_params or  # noqa: E501
                                                        local_var_params['capid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `capid` when calling `design_pin_caps_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_pin_caps_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501
        if 'capid' in local_var_params:
            path_params['capid'] = local_var_params['capid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/caps/{capid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinCap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_create(self, designid, data, **kwargs):  # noqa: E501
        """design_pin_create  # noqa: E501

        Create a new pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignPin data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignPin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_pin_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_pin_create  # noqa: E501

        Create a new pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignPin data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignPin, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_pin_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignPin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_delete(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_delete  # noqa: E501

        Delete a pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_delete(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_delete_with_http_info(designid, pinid, **kwargs)  # noqa: E501

    def design_pin_delete_with_http_info(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_delete  # noqa: E501

        Delete a pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_delete_with_http_info(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_delete`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_energy_create(self, designid, pinid, data, **kwargs):  # noqa: E501
        """design_pin_energy_create  # noqa: E501

        Create a new pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_create(designid, pinid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param PinEnergy data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PinEnergy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_energy_create_with_http_info(designid, pinid, data, **kwargs)  # noqa: E501

    def design_pin_energy_create_with_http_info(self, designid, pinid, data, **kwargs):  # noqa: E501
        """design_pin_energy_create  # noqa: E501

        Create a new pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_create_with_http_info(designid, pinid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param PinEnergy data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PinEnergy, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_energy_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_energy_create`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_energy_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_pin_energy_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/energy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinEnergy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_energy_delete(self, designid, pinid, powerid, **kwargs):  # noqa: E501
        """design_pin_energy_delete  # noqa: E501

        Delete a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_delete(designid, pinid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_energy_delete_with_http_info(designid, pinid, powerid, **kwargs)  # noqa: E501

    def design_pin_energy_delete_with_http_info(self, designid, pinid, powerid, **kwargs):  # noqa: E501
        """design_pin_energy_delete  # noqa: E501

        Delete a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_delete_with_http_info(designid, pinid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_energy_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_energy_delete`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_energy_delete`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_pin_energy_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/energy/{powerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_energy_list(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_energy_list  # noqa: E501

        Get list of pin powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_list(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param int temperature: Temperature
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PinEnergy]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_energy_list_with_http_info(designid, pinid, **kwargs)  # noqa: E501

    def design_pin_energy_list_with_http_info(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_energy_list  # noqa: E501

        Get list of pin powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_list_with_http_info(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param str process: Model corner name
        :param str rc: RC corner name
        :param float voltage: Voltage
        :param int temperature: Temperature
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PinEnergy], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'process',
            'rc',
            'voltage',
            'temperature'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_energy_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_energy_list`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_energy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []
        if 'process' in local_var_params and local_var_params['process'] is not None:  # noqa: E501
            query_params.append(('process', local_var_params['process']))  # noqa: E501
        if 'rc' in local_var_params and local_var_params['rc'] is not None:  # noqa: E501
            query_params.append(('rc', local_var_params['rc']))  # noqa: E501
        if 'voltage' in local_var_params and local_var_params['voltage'] is not None:  # noqa: E501
            query_params.append(('voltage', local_var_params['voltage']))  # noqa: E501
        if 'temperature' in local_var_params and local_var_params['temperature'] is not None:  # noqa: E501
            query_params.append(('temperature', local_var_params['temperature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/energy/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PinEnergy]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_energy_read(self, designid, pinid, powerid, **kwargs):  # noqa: E501
        """design_pin_energy_read  # noqa: E501

        Get a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_read(designid, pinid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PinEnergy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_energy_read_with_http_info(designid, pinid, powerid, **kwargs)  # noqa: E501

    def design_pin_energy_read_with_http_info(self, designid, pinid, powerid, **kwargs):  # noqa: E501
        """design_pin_energy_read  # noqa: E501

        Get a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_read_with_http_info(designid, pinid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PinEnergy, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_energy_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_energy_read`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_energy_read`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_pin_energy_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/energy/{powerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinEnergy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_energy_update(self, designid, pinid, powerid, data, **kwargs):  # noqa: E501
        """design_pin_energy_update  # noqa: E501

        Update a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_update(designid, pinid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int powerid: (required)
        :param PinEnergy data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PinEnergy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_energy_update_with_http_info(designid, pinid, powerid, data, **kwargs)  # noqa: E501

    def design_pin_energy_update_with_http_info(self, designid, pinid, powerid, data, **kwargs):  # noqa: E501
        """design_pin_energy_update  # noqa: E501

        Update a pin power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_energy_update_with_http_info(designid, pinid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param int powerid: (required)
        :param PinEnergy data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PinEnergy, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'powerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_energy_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_energy_update`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_energy_update`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_pin_energy_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_pin_energy_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/energy/{powerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PinEnergy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_list(self, designid, **kwargs):  # noqa: E501
        """design_pin_list  # noqa: E501

        Get list of pins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignPin]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_pin_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_pin_list  # noqa: E501

        Get list of pins  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignPin], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignPin]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_read(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_read  # noqa: E501

        Get a pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_read(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignPin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_read_with_http_info(designid, pinid, **kwargs)  # noqa: E501

    def design_pin_read_with_http_info(self, designid, pinid, **kwargs):  # noqa: E501
        """design_pin_read  # noqa: E501

        Get a pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_read_with_http_info(designid, pinid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignPin, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_read`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignPin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_pin_update(self, designid, pinid, data, **kwargs):  # noqa: E501
        """design_pin_update  # noqa: E501

        Update a pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_update(designid, pinid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param DesignPin data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignPin
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_pin_update_with_http_info(designid, pinid, data, **kwargs)  # noqa: E501

    def design_pin_update_with_http_info(self, designid, pinid, data, **kwargs):  # noqa: E501
        """design_pin_update  # noqa: E501

        Update a pin  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_pin_update_with_http_info(designid, pinid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int pinid: (required)
        :param DesignPin data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignPin, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'pinid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_pin_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_pin_update`")  # noqa: E501
        # verify the required parameter 'pinid' is set
        if self.api_client.client_side_validation and ('pinid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pinid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pinid` when calling `design_pin_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_pin_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'pinid' in local_var_params:
            path_params['pinid'] = local_var_params['pinid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/pin/{pinid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignPin',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_power_create(self, designid, data, **kwargs):  # noqa: E501
        """design_power_create  # noqa: E501

        Create a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Power data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Power
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_power_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_power_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_power_create  # noqa: E501

        Create a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Power data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Power, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_power_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_power_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_power_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/power/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Power',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_power_delete(self, designid, powerid, **kwargs):  # noqa: E501
        """design_power_delete  # noqa: E501

        Delete a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_delete(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_power_delete_with_http_info(designid, powerid, **kwargs)  # noqa: E501

    def design_power_delete_with_http_info(self, designid, powerid, **kwargs):  # noqa: E501
        """design_power_delete  # noqa: E501

        Delete a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_delete_with_http_info(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_power_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_power_delete`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_power_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/power/{powerid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_power_list(self, designid, **kwargs):  # noqa: E501
        """design_power_list  # noqa: E501

        Get list of powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Power]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_power_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_power_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_power_list  # noqa: E501

        Get list of powers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Power], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Power]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_power_read(self, designid, powerid, **kwargs):  # noqa: E501
        """design_power_read  # noqa: E501

        Get a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_read(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Power
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_power_read_with_http_info(designid, powerid, **kwargs)  # noqa: E501

    def design_power_read_with_http_info(self, designid, powerid, **kwargs):  # noqa: E501
        """design_power_read  # noqa: E501

        Get a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_read_with_http_info(designid, powerid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Power, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_power_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_power_read`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_power_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/power/{powerid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Power',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_power_update(self, designid, powerid, data, **kwargs):  # noqa: E501
        """design_power_update  # noqa: E501

        Update a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_update(designid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param Power data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Power
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_power_update_with_http_info(designid, powerid, data, **kwargs)  # noqa: E501

    def design_power_update_with_http_info(self, designid, powerid, data, **kwargs):  # noqa: E501
        """design_power_update  # noqa: E501

        Update a power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_power_update_with_http_info(designid, powerid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int powerid: (required)
        :param Power data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Power, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'powerid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_power_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_power_update`")  # noqa: E501
        # verify the required parameter 'powerid' is set
        if self.api_client.client_side_validation and ('powerid' not in local_var_params or  # noqa: E501
                                                        local_var_params['powerid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `powerid` when calling `design_power_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_power_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'powerid' in local_var_params:
            path_params['powerid'] = local_var_params['powerid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/power/{powerid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Power',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_read(self, designid, **kwargs):  # noqa: E501
        """design_read  # noqa: E501

        Get design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_read(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_read_with_http_info(designid, **kwargs)  # noqa: E501

    def design_read_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_read  # noqa: E501

        Get design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_read_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Design, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Design',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_restore_create(self, designid, **kwargs):  # noqa: E501
        """design_restore_create  # noqa: E501

        Restore a design version as current version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_restore_create(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_restore_create_with_http_info(designid, **kwargs)  # noqa: E501

    def design_restore_create_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_restore_create  # noqa: E501

        Restore a design version as current version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_restore_create_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Design, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_restore_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_restore_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/restore/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Design',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_clone(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_clone  # noqa: E501

        Clone a design scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_clone(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_clone_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_clone_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_clone  # noqa: E501

        Clone a design scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_clone_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_clone`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_create(self, designid, **kwargs):  # noqa: E501
        """design_scenario_create  # noqa: E501

        Create a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_create(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_create_with_http_info(designid, **kwargs)  # noqa: E501

    def design_scenario_create_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_scenario_create  # noqa: E501

        Create a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_create_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_delete(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_delete  # noqa: E501

        Delete a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_delete(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_delete_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_delete_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_delete  # noqa: E501

        Delete a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_delete_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_list(self, designid, **kwargs):  # noqa: E501
        """design_scenario_list  # noqa: E501

        Get list of scenarios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignScenario]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_scenario_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_scenario_list  # noqa: E501

        Get list of scenarios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignScenario], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignScenario]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_mode_config_delete(self, designid, scenarioid, modeid, configid, **kwargs):  # noqa: E501
        """design_scenario_mode_config_delete  # noqa: E501

        Delete a datasheet mode util  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_config_delete(designid, scenarioid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_mode_config_delete_with_http_info(designid, scenarioid, modeid, configid, **kwargs)  # noqa: E501

    def design_scenario_mode_config_delete_with_http_info(self, designid, scenarioid, modeid, configid, **kwargs):  # noqa: E501
        """design_scenario_mode_config_delete  # noqa: E501

        Delete a datasheet mode util  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_config_delete_with_http_info(designid, scenarioid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'modeid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_mode_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_mode_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_mode_config_delete`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_scenario_mode_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_mode_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_mode_config_read(self, designid, scenarioid, modeid, configid, **kwargs):  # noqa: E501
        """design_scenario_mode_config_read  # noqa: E501

        Get datasheet mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_config_read(designid, scenarioid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_mode_config_read_with_http_info(designid, scenarioid, modeid, configid, **kwargs)  # noqa: E501

    def design_scenario_mode_config_read_with_http_info(self, designid, scenarioid, modeid, configid, **kwargs):  # noqa: E501
        """design_scenario_mode_config_read  # noqa: E501

        Get datasheet mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_config_read_with_http_info(designid, scenarioid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'modeid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_mode_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_mode_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_mode_config_read`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_scenario_mode_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_mode_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_mode_config_update(self, designid, scenarioid, modeid, configid, **kwargs):  # noqa: E501
        """design_scenario_mode_config_update  # noqa: E501

        Update a datasheet mode util  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_config_update(designid, scenarioid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_mode_config_update_with_http_info(designid, scenarioid, modeid, configid, **kwargs)  # noqa: E501

    def design_scenario_mode_config_update_with_http_info(self, designid, scenarioid, modeid, configid, **kwargs):  # noqa: E501
        """design_scenario_mode_config_update  # noqa: E501

        Update a datasheet mode util  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_config_update_with_http_info(designid, scenarioid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'modeid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_mode_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_mode_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_mode_config_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_scenario_mode_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_mode_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_mode_create(self, designid, scenarioid, modeid, **kwargs):  # noqa: E501
        """design_scenario_mode_create  # noqa: E501

        Create a scenario mode util  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_create(designid, scenarioid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_mode_create_with_http_info(designid, scenarioid, modeid, **kwargs)  # noqa: E501

    def design_scenario_mode_create_with_http_info(self, designid, scenarioid, modeid, **kwargs):  # noqa: E501
        """design_scenario_mode_create  # noqa: E501

        Create a scenario mode util  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_create_with_http_info(designid, scenarioid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_mode_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_mode_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_mode_create`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_scenario_mode_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_mode_read(self, designid, scenarioid, modeid, **kwargs):  # noqa: E501
        """design_scenario_mode_read  # noqa: E501

        Get list of scenario modes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_read(designid, scenarioid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignScenarioModeUtil]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_mode_read_with_http_info(designid, scenarioid, modeid, **kwargs)  # noqa: E501

    def design_scenario_mode_read_with_http_info(self, designid, scenarioid, modeid, **kwargs):  # noqa: E501
        """design_scenario_mode_read  # noqa: E501

        Get list of scenario modes  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_mode_read_with_http_info(designid, scenarioid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignScenarioModeUtil], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_mode_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_mode_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_mode_read`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_scenario_mode_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignScenarioModeUtil]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_param_config_delete(self, configid, designid, scenarioid, paramid, confgiid, **kwargs):  # noqa: E501
        """design_scenario_param_config_delete  # noqa: E501

        Delete a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_config_delete(configid, designid, scenarioid, paramid, confgiid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str configid: (required)
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param int confgiid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_param_config_delete_with_http_info(configid, designid, scenarioid, paramid, confgiid, **kwargs)  # noqa: E501

    def design_scenario_param_config_delete_with_http_info(self, configid, designid, scenarioid, paramid, confgiid, **kwargs):  # noqa: E501
        """design_scenario_param_config_delete  # noqa: E501

        Delete a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_config_delete_with_http_info(configid, designid, scenarioid, paramid, confgiid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str configid: (required)
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param int confgiid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'configid',
            'designid',
            'scenarioid',
            'paramid',
            'confgiid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_param_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_param_config_delete`")  # noqa: E501
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_param_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_param_config_delete`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_scenario_param_config_delete`")  # noqa: E501
        # verify the required parameter 'confgiid' is set
        if self.api_client.client_side_validation and ('confgiid' not in local_var_params or  # noqa: E501
                                                        local_var_params['confgiid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `confgiid` when calling `design_scenario_param_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501
        if 'confgiid' in local_var_params:
            path_params['confgiid'] = local_var_params['confgiid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_param_config_read(self, designid, scenarioid, paramid, configid, **kwargs):  # noqa: E501
        """design_scenario_param_config_read  # noqa: E501

        Getscenario configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_config_read(designid, scenarioid, paramid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_param_config_read_with_http_info(designid, scenarioid, paramid, configid, **kwargs)  # noqa: E501

    def design_scenario_param_config_read_with_http_info(self, designid, scenarioid, paramid, configid, **kwargs):  # noqa: E501
        """design_scenario_param_config_read  # noqa: E501

        Getscenario configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_config_read_with_http_info(designid, scenarioid, paramid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'paramid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_param_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_param_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_param_config_read`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_scenario_param_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_param_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_param_config_update(self, configid, designid, scenarioid, paramid, confgiid, **kwargs):  # noqa: E501
        """design_scenario_param_config_update  # noqa: E501

        Update a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_config_update(configid, designid, scenarioid, paramid, confgiid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str configid: (required)
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param int confgiid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_param_config_update_with_http_info(configid, designid, scenarioid, paramid, confgiid, **kwargs)  # noqa: E501

    def design_scenario_param_config_update_with_http_info(self, configid, designid, scenarioid, paramid, confgiid, **kwargs):  # noqa: E501
        """design_scenario_param_config_update  # noqa: E501

        Update a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_config_update_with_http_info(configid, designid, scenarioid, paramid, confgiid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str configid: (required)
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param int confgiid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'configid',
            'designid',
            'scenarioid',
            'paramid',
            'confgiid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_param_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_param_config_update`")  # noqa: E501
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_param_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_param_config_update`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_scenario_param_config_update`")  # noqa: E501
        # verify the required parameter 'confgiid' is set
        if self.api_client.client_side_validation and ('confgiid' not in local_var_params or  # noqa: E501
                                                        local_var_params['confgiid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `confgiid` when calling `design_scenario_param_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501
        if 'confgiid' in local_var_params:
            path_params['confgiid'] = local_var_params['confgiid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_param_create(self, designid, scenarioid, paramid, **kwargs):  # noqa: E501
        """design_scenario_param_create  # noqa: E501

        Create a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_create(designid, scenarioid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_param_create_with_http_info(designid, scenarioid, paramid, **kwargs)  # noqa: E501

    def design_scenario_param_create_with_http_info(self, designid, scenarioid, paramid, **kwargs):  # noqa: E501
        """design_scenario_param_create  # noqa: E501

        Create a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_create_with_http_info(designid, scenarioid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_param_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_param_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_param_create`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_scenario_param_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/param/{paramid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_param_read(self, designid, scenarioid, paramid, **kwargs):  # noqa: E501
        """design_scenario_param_read  # noqa: E501

        Get list of scenario configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_read(designid, scenarioid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignScenarioConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_param_read_with_http_info(designid, scenarioid, paramid, **kwargs)  # noqa: E501

    def design_scenario_param_read_with_http_info(self, designid, scenarioid, paramid, **kwargs):  # noqa: E501
        """design_scenario_param_read  # noqa: E501

        Get list of scenario configs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_param_read_with_http_info(designid, scenarioid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignScenarioConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_param_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_param_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_param_read`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `design_scenario_param_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/param/{paramid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignScenarioConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_power_list(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_power_list  # noqa: E501

        Get power of design scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_power_list(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_power_list_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_power_list_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_power_list  # noqa: E501

        Get power of design scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_power_list_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_power_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_powerdistribution_list(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_powerdistribution_list  # noqa: E501

        Get power distribution of a design scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_powerdistribution_list(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_powerdistribution_list_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_powerdistribution_list_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_powerdistribution_list  # noqa: E501

        Get power distribution of a design scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_powerdistribution_list_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_powerdistribution_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_powerdistribution_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_powerdistribution_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/powerdistribution/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_read(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_read  # noqa: E501

        Get a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_read(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_read_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_read_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_read  # noqa: E501

        Get a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_read_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_supply_config_delete(self, designid, scenarioid, supplyid, configid, **kwargs):  # noqa: E501
        """design_scenario_supply_config_delete  # noqa: E501

        Delete a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_config_delete(designid, scenarioid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_supply_config_delete_with_http_info(designid, scenarioid, supplyid, configid, **kwargs)  # noqa: E501

    def design_scenario_supply_config_delete_with_http_info(self, designid, scenarioid, supplyid, configid, **kwargs):  # noqa: E501
        """design_scenario_supply_config_delete  # noqa: E501

        Delete a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_config_delete_with_http_info(designid, scenarioid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioSupply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_supply_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_scenario_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_supply_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_supply_config_read(self, designid, scenarioid, supplyid, configid, **kwargs):  # noqa: E501
        """design_scenario_supply_config_read  # noqa: E501

        Get list of scenario supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_config_read(designid, scenarioid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_supply_config_read_with_http_info(designid, scenarioid, supplyid, configid, **kwargs)  # noqa: E501

    def design_scenario_supply_config_read_with_http_info(self, designid, scenarioid, supplyid, configid, **kwargs):  # noqa: E501
        """design_scenario_supply_config_read  # noqa: E501

        Get list of scenario supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_config_read_with_http_info(designid, scenarioid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioSupply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_supply_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_supply_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_supply_config_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_scenario_supply_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_supply_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_supply_config_update(self, designid, scenarioid, supplyid, configid, **kwargs):  # noqa: E501
        """design_scenario_supply_config_update  # noqa: E501

        Update a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_config_update(designid, scenarioid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_supply_config_update_with_http_info(designid, scenarioid, supplyid, configid, **kwargs)  # noqa: E501

    def design_scenario_supply_config_update_with_http_info(self, designid, scenarioid, supplyid, configid, **kwargs):  # noqa: E501
        """design_scenario_supply_config_update  # noqa: E501

        Update a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_config_update_with_http_info(designid, scenarioid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioSupply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_supply_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_supply_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_supply_config_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_scenario_supply_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `design_scenario_supply_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_supply_create(self, designid, scenarioid, supplyid, **kwargs):  # noqa: E501
        """design_scenario_supply_create  # noqa: E501

        Create a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_create(designid, scenarioid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenarioSupply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_supply_create_with_http_info(designid, scenarioid, supplyid, **kwargs)  # noqa: E501

    def design_scenario_supply_create_with_http_info(self, designid, scenarioid, supplyid, **kwargs):  # noqa: E501
        """design_scenario_supply_create  # noqa: E501

        Create a scenario config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_create_with_http_info(designid, scenarioid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenarioSupply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_supply_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_supply_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_supply_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_scenario_supply_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenarioSupply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_supply_read(self, designid, scenarioid, supplyid, **kwargs):  # noqa: E501
        """design_scenario_supply_read  # noqa: E501

        Get list of scenario supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_read(designid, scenarioid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignScenarioSupply]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_supply_read_with_http_info(designid, scenarioid, supplyid, **kwargs)  # noqa: E501

    def design_scenario_supply_read_with_http_info(self, designid, scenarioid, supplyid, **kwargs):  # noqa: E501
        """design_scenario_supply_read  # noqa: E501

        Get list of scenario supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_supply_read_with_http_info(designid, scenarioid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignScenarioSupply], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_supply_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_scenario_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignScenarioSupply]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_trend_list(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_trend_list  # noqa: E501

        Get a scenario power trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_trend_list(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_trend_list_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_trend_list_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_trend_list  # noqa: E501

        Get a scenario power trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_trend_list_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_trend_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_trend_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_trend_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/trend/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_update(self, designid, scenarioid, data, **kwargs):  # noqa: E501
        """design_scenario_update  # noqa: E501

        Update a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_update(designid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param DesignScenario data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignScenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_update_with_http_info(designid, scenarioid, data, **kwargs)  # noqa: E501

    def design_scenario_update_with_http_info(self, designid, scenarioid, data, **kwargs):  # noqa: E501
        """design_scenario_update  # noqa: E501

        Update a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_update_with_http_info(designid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param DesignScenario data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignScenario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_scenario_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignScenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_scenario_update_list(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_update_list(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[float]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_scenario_update_list_with_http_info(designid, scenarioid, **kwargs)  # noqa: E501

    def design_scenario_update_list_with_http_info(self, designid, scenarioid, **kwargs):  # noqa: E501
        """design_scenario_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_scenario_update_list_with_http_info(designid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[float], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_scenario_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_scenario_update_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `design_scenario_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/scenario/{scenarioid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[float]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_sensor_clone(self, designid, sensorid, **kwargs):  # noqa: E501
        """design_sensor_clone  # noqa: E501

        Clode a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_clone(designid, sensorid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSensor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_sensor_clone_with_http_info(designid, sensorid, **kwargs)  # noqa: E501

    def design_sensor_clone_with_http_info(self, designid, sensorid, **kwargs):  # noqa: E501
        """design_sensor_clone  # noqa: E501

        Clode a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_clone_with_http_info(designid, sensorid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSensor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'sensorid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_sensor_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_sensor_clone`")  # noqa: E501
        # verify the required parameter 'sensorid' is set
        if self.api_client.client_side_validation and ('sensorid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sensorid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sensorid` when calling `design_sensor_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'sensorid' in local_var_params:
            path_params['sensorid'] = local_var_params['sensorid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/sensor/{sensorid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSensor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_sensor_create(self, designid, data, **kwargs):  # noqa: E501
        """design_sensor_create  # noqa: E501

        Create a new sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignSensor data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSensor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_sensor_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_sensor_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_sensor_create  # noqa: E501

        Create a new sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignSensor data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSensor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_sensor_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_sensor_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_sensor_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/sensor/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSensor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_sensor_delete(self, designid, sensorid, **kwargs):  # noqa: E501
        """design_sensor_delete  # noqa: E501

        Delete a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_delete(designid, sensorid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_sensor_delete_with_http_info(designid, sensorid, **kwargs)  # noqa: E501

    def design_sensor_delete_with_http_info(self, designid, sensorid, **kwargs):  # noqa: E501
        """design_sensor_delete  # noqa: E501

        Delete a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_delete_with_http_info(designid, sensorid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'sensorid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_sensor_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_sensor_delete`")  # noqa: E501
        # verify the required parameter 'sensorid' is set
        if self.api_client.client_side_validation and ('sensorid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sensorid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sensorid` when calling `design_sensor_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'sensorid' in local_var_params:
            path_params['sensorid'] = local_var_params['sensorid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/sensor/{sensorid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_sensor_list(self, designid, **kwargs):  # noqa: E501
        """design_sensor_list  # noqa: E501

        Get list of sensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignSensor]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_sensor_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_sensor_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_sensor_list  # noqa: E501

        Get list of sensors  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignSensor], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_sensor_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_sensor_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/sensor/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignSensor]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_sensor_read(self, designid, sensorid, **kwargs):  # noqa: E501
        """design_sensor_read  # noqa: E501

        Get a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_read(designid, sensorid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSensor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_sensor_read_with_http_info(designid, sensorid, **kwargs)  # noqa: E501

    def design_sensor_read_with_http_info(self, designid, sensorid, **kwargs):  # noqa: E501
        """design_sensor_read  # noqa: E501

        Get a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_read_with_http_info(designid, sensorid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSensor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'sensorid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_sensor_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_sensor_read`")  # noqa: E501
        # verify the required parameter 'sensorid' is set
        if self.api_client.client_side_validation and ('sensorid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sensorid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sensorid` when calling `design_sensor_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'sensorid' in local_var_params:
            path_params['sensorid'] = local_var_params['sensorid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/sensor/{sensorid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSensor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_sensor_update(self, designid, sensorid, data, **kwargs):  # noqa: E501
        """design_sensor_update  # noqa: E501

        Update a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_update(designid, sensorid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param DesignSensor data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSensor
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_sensor_update_with_http_info(designid, sensorid, data, **kwargs)  # noqa: E501

    def design_sensor_update_with_http_info(self, designid, sensorid, data, **kwargs):  # noqa: E501
        """design_sensor_update  # noqa: E501

        Update a sensor  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_sensor_update_with_http_info(designid, sensorid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int sensorid: (required)
        :param DesignSensor data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSensor, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'sensorid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_sensor_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_sensor_update`")  # noqa: E501
        # verify the required parameter 'sensorid' is set
        if self.api_client.client_side_validation and ('sensorid' not in local_var_params or  # noqa: E501
                                                        local_var_params['sensorid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sensorid` when calling `design_sensor_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_sensor_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'sensorid' in local_var_params:
            path_params['sensorid'] = local_var_params['sensorid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/sensor/{sensorid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSensor',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_statetable_create(self, designid, data, **kwargs):  # noqa: E501
        """design_statetable_create  # noqa: E501

        Create a new ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignStateTable data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignStateTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_statetable_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_statetable_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_statetable_create  # noqa: E501

        Create a new ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignStateTable data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignStateTable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_statetable_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_statetable_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_statetable_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/statetable/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignStateTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_statetable_delete(self, designid, statetableid, **kwargs):  # noqa: E501
        """design_statetable_delete  # noqa: E501

        Delete a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_delete(designid, statetableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int statetableid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_statetable_delete_with_http_info(designid, statetableid, **kwargs)  # noqa: E501

    def design_statetable_delete_with_http_info(self, designid, statetableid, **kwargs):  # noqa: E501
        """design_statetable_delete  # noqa: E501

        Delete a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_delete_with_http_info(designid, statetableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int statetableid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'statetableid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_statetable_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_statetable_delete`")  # noqa: E501
        # verify the required parameter 'statetableid' is set
        if self.api_client.client_side_validation and ('statetableid' not in local_var_params or  # noqa: E501
                                                        local_var_params['statetableid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `statetableid` when calling `design_statetable_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'statetableid' in local_var_params:
            path_params['statetableid'] = local_var_params['statetableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/statetable/{statetableid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_statetable_list(self, designid, **kwargs):  # noqa: E501
        """design_statetable_list  # noqa: E501

        Get list of statetables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignStateTable]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_statetable_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_statetable_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_statetable_list  # noqa: E501

        Get list of statetables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignStateTable], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_statetable_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_statetable_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/statetable/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignStateTable]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_statetable_read(self, designid, statetableid, **kwargs):  # noqa: E501
        """design_statetable_read  # noqa: E501

        Get a statetable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_read(designid, statetableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int statetableid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignStateTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_statetable_read_with_http_info(designid, statetableid, **kwargs)  # noqa: E501

    def design_statetable_read_with_http_info(self, designid, statetableid, **kwargs):  # noqa: E501
        """design_statetable_read  # noqa: E501

        Get a statetable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_read_with_http_info(designid, statetableid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int statetableid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignStateTable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'statetableid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_statetable_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_statetable_read`")  # noqa: E501
        # verify the required parameter 'statetableid' is set
        if self.api_client.client_side_validation and ('statetableid' not in local_var_params or  # noqa: E501
                                                        local_var_params['statetableid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `statetableid` when calling `design_statetable_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'statetableid' in local_var_params:
            path_params['statetableid'] = local_var_params['statetableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/statetable/{statetableid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignStateTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_statetable_update(self, designid, statetableid, data, **kwargs):  # noqa: E501
        """design_statetable_update  # noqa: E501

        Update a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_update(designid, statetableid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int statetableid: (required)
        :param DesignStateTable data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignStateTable
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_statetable_update_with_http_info(designid, statetableid, data, **kwargs)  # noqa: E501

    def design_statetable_update_with_http_info(self, designid, statetableid, data, **kwargs):  # noqa: E501
        """design_statetable_update  # noqa: E501

        Update a ff  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_statetable_update_with_http_info(designid, statetableid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int statetableid: (required)
        :param DesignStateTable data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignStateTable, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'statetableid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_statetable_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_statetable_update`")  # noqa: E501
        # verify the required parameter 'statetableid' is set
        if self.api_client.client_side_validation and ('statetableid' not in local_var_params or  # noqa: E501
                                                        local_var_params['statetableid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `statetableid` when calling `design_statetable_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_statetable_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'statetableid' in local_var_params:
            path_params['statetableid'] = local_var_params['statetableid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/statetable/{statetableid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignStateTable',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_clone(self, designid, supplyid, **kwargs):  # noqa: E501
        """design_supply_clone  # noqa: E501

        Clode a mode param  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_clone(designid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_clone_with_http_info(designid, supplyid, **kwargs)  # noqa: E501

    def design_supply_clone_with_http_info(self, designid, supplyid, **kwargs):  # noqa: E501
        """design_supply_clone  # noqa: E501

        Clode a mode param  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_clone_with_http_info(designid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Supply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_clone`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supply_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/{supplyid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Supply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_create(self, designid, data, **kwargs):  # noqa: E501
        """design_supply_create  # noqa: E501

        Create a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Supply data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_supply_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_supply_create  # noqa: E501

        Create a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Supply data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Supply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_supply_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Supply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_delete(self, designid, supplyid, **kwargs):  # noqa: E501
        """design_supply_delete  # noqa: E501

        Delete a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_delete(designid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_delete_with_http_info(designid, supplyid, **kwargs)  # noqa: E501

    def design_supply_delete_with_http_info(self, designid, supplyid, **kwargs):  # noqa: E501
        """design_supply_delete  # noqa: E501

        Delete a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_delete_with_http_info(designid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_delete`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supply_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/{supplyid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_list(self, designid, **kwargs):  # noqa: E501
        """design_supply_list  # noqa: E501

        Get a list of supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str name: Design name
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Supply]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_supply_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_supply_list  # noqa: E501

        Get a list of supplies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param str name: Design name
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Supply], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Supply]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_modestate_list(self, designid, supplyid, modeid, **kwargs):  # noqa: E501
        """design_supply_modestate_list  # noqa: E501

        Get list of supply states per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_modestate_list(designid, supplyid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyModeState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_modestate_list_with_http_info(designid, supplyid, modeid, **kwargs)  # noqa: E501

    def design_supply_modestate_list_with_http_info(self, designid, supplyid, modeid, **kwargs):  # noqa: E501
        """design_supply_modestate_list  # noqa: E501

        Get list of supply states per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_modestate_list_with_http_info(designid, supplyid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyModeState, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_modestate_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_modestate_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supply_modestate_list`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_supply_modestate_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/{supplyid}/modestate/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyModeState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_modestate_update(self, designid, supplyid, modeid, data, **kwargs):  # noqa: E501
        """design_supply_modestate_update  # noqa: E501

        Update a supply state per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_modestate_update(designid, supplyid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param SupplyModeState data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyModeState]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_modestate_update_with_http_info(designid, supplyid, modeid, data, **kwargs)  # noqa: E501

    def design_supply_modestate_update_with_http_info(self, designid, supplyid, modeid, data, **kwargs):  # noqa: E501
        """design_supply_modestate_update  # noqa: E501

        Update a supply state per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_modestate_update_with_http_info(designid, supplyid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param SupplyModeState data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyModeState], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_modestate_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_modestate_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supply_modestate_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_supply_modestate_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_supply_modestate_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/{supplyid}/modestate/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyModeState]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_read(self, designid, supplyid, **kwargs):  # noqa: E501
        """design_supply_read  # noqa: E501

        Get a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_read(designid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_read_with_http_info(designid, supplyid, **kwargs)  # noqa: E501

    def design_supply_read_with_http_info(self, designid, supplyid, **kwargs):  # noqa: E501
        """design_supply_read  # noqa: E501

        Get a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_read_with_http_info(designid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Supply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/{supplyid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Supply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supply_update(self, designid, supplyid, data, **kwargs):  # noqa: E501
        """design_supply_update  # noqa: E501

        Update a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_update(designid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param Supply data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Supply
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supply_update_with_http_info(designid, supplyid, data, **kwargs)  # noqa: E501

    def design_supply_update_with_http_info(self, designid, supplyid, data, **kwargs):  # noqa: E501
        """design_supply_update  # noqa: E501

        Update a supply  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supply_update_with_http_info(designid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param Supply data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Supply, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supply_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supply_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supply_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_supply_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supply/{supplyid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Supply',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supplymodestate_list(self, designid, supplyid, modeid, **kwargs):  # noqa: E501
        """design_supplymodestate_list  # noqa: E501

        Get list of supply states per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supplymodestate_list(designid, supplyid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyModeState
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supplymodestate_list_with_http_info(designid, supplyid, modeid, **kwargs)  # noqa: E501

    def design_supplymodestate_list_with_http_info(self, designid, supplyid, modeid, **kwargs):  # noqa: E501
        """design_supplymodestate_list  # noqa: E501

        Get list of supply states per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supplymodestate_list_with_http_info(designid, supplyid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyModeState, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supplymodestate_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supplymodestate_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supplymodestate_list`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_supplymodestate_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supplymodestate/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyModeState',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_supplymodestate_update(self, designid, supplyid, modeid, data, **kwargs):  # noqa: E501
        """design_supplymodestate_update  # noqa: E501

        Update a supply state per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supplymodestate_update(designid, supplyid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param SupplyModeState data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyModeState]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_supplymodestate_update_with_http_info(designid, supplyid, modeid, data, **kwargs)  # noqa: E501

    def design_supplymodestate_update_with_http_info(self, designid, supplyid, modeid, data, **kwargs):  # noqa: E501
        """design_supplymodestate_update  # noqa: E501

        Update a supply state per mode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_supplymodestate_update_with_http_info(designid, supplyid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int supplyid: (required)
        :param int modeid: (required)
        :param SupplyModeState data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyModeState], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'supplyid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_supplymodestate_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_supplymodestate_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `design_supplymodestate_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `design_supplymodestate_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_supplymodestate_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/supplymodestate/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyModeState]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_trend_create(self, designid, data, **kwargs):  # noqa: E501
        """design_trend_create  # noqa: E501

        Create a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_create(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignTrend data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignTrend
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_trend_create_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_trend_create_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_trend_create  # noqa: E501

        Create a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_create_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param DesignTrend data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignTrend, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_trend_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_trend_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_trend_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/trend/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignTrend',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_trend_delete(self, designid, trendid, **kwargs):  # noqa: E501
        """design_trend_delete  # noqa: E501

        Delete a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_delete(designid, trendid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int trendid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_trend_delete_with_http_info(designid, trendid, **kwargs)  # noqa: E501

    def design_trend_delete_with_http_info(self, designid, trendid, **kwargs):  # noqa: E501
        """design_trend_delete  # noqa: E501

        Delete a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_delete_with_http_info(designid, trendid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int trendid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'trendid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_trend_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_trend_delete`")  # noqa: E501
        # verify the required parameter 'trendid' is set
        if self.api_client.client_side_validation and ('trendid' not in local_var_params or  # noqa: E501
                                                        local_var_params['trendid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trendid` when calling `design_trend_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'trendid' in local_var_params:
            path_params['trendid'] = local_var_params['trendid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/trend/{trendid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_trend_list(self, designid, **kwargs):  # noqa: E501
        """design_trend_list  # noqa: E501

        Get list of saved trends  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignTrend]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_trend_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_trend_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_trend_list  # noqa: E501

        Get list of saved trends  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignTrend], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_trend_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_trend_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/trend/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignTrend]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_trend_read(self, designid, trendid, **kwargs):  # noqa: E501
        """design_trend_read  # noqa: E501

        Get a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_read(designid, trendid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int trendid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignTrend
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_trend_read_with_http_info(designid, trendid, **kwargs)  # noqa: E501

    def design_trend_read_with_http_info(self, designid, trendid, **kwargs):  # noqa: E501
        """design_trend_read  # noqa: E501

        Get a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_read_with_http_info(designid, trendid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int trendid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignTrend, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'trendid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_trend_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_trend_read`")  # noqa: E501
        # verify the required parameter 'trendid' is set
        if self.api_client.client_side_validation and ('trendid' not in local_var_params or  # noqa: E501
                                                        local_var_params['trendid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trendid` when calling `design_trend_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'trendid' in local_var_params:
            path_params['trendid'] = local_var_params['trendid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/trend/{trendid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignTrend',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_trend_update(self, designid, trendid, data, **kwargs):  # noqa: E501
        """design_trend_update  # noqa: E501

        Update a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_update(designid, trendid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int trendid: (required)
        :param DesignTrend data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignTrend
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_trend_update_with_http_info(designid, trendid, data, **kwargs)  # noqa: E501

    def design_trend_update_with_http_info(self, designid, trendid, data, **kwargs):  # noqa: E501
        """design_trend_update  # noqa: E501

        Update a trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_trend_update_with_http_info(designid, trendid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int trendid: (required)
        :param DesignTrend data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignTrend, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'trendid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_trend_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_trend_update`")  # noqa: E501
        # verify the required parameter 'trendid' is set
        if self.api_client.client_side_validation and ('trendid' not in local_var_params or  # noqa: E501
                                                        local_var_params['trendid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `trendid` when calling `design_trend_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_trend_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'trendid' in local_var_params:
            path_params['trendid'] = local_var_params['trendid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/trend/{trendid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignTrend',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_update(self, designid, data, **kwargs):  # noqa: E501
        """design_update  # noqa: E501

        Update design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_update(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Design data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Design
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_update_with_http_info(designid, data, **kwargs)  # noqa: E501

    def design_update_with_http_info(self, designid, data, **kwargs):  # noqa: E501
        """design_update  # noqa: E501

        Update design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_update_with_http_info(designid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param Design data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Design, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `design_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Design',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_update_list(self, designid, **kwargs):  # noqa: E501
        """design_update_list  # noqa: E501

        Returns an array of {current, last update} times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_update_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_update_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_update_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_update_list  # noqa: E501

        Returns an array of {current, last update} times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_update_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_verilog_instances_list(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_instances_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_instances_list(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_verilog_instances_list_with_http_info(designid, moduleid, **kwargs)  # noqa: E501

    def design_verilog_instances_list_with_http_info(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_instances_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_instances_list_with_http_info(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'moduleid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_verilog_instances_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_verilog_instances_list`")  # noqa: E501
        # verify the required parameter 'moduleid' is set
        if self.api_client.client_side_validation and ('moduleid' not in local_var_params or  # noqa: E501
                                                        local_var_params['moduleid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `moduleid` when calling `design_verilog_instances_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'moduleid' in local_var_params:
            path_params['moduleid'] = local_var_params['moduleid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/verilog/{moduleid}/instances/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_verilog_list(self, designid, **kwargs):  # noqa: E501
        """design_verilog_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_verilog_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_verilog_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_verilog_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_verilog_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_verilog_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/verilog/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_verilog_module_state_list(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_module_state_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_module_state_list(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_verilog_module_state_list_with_http_info(designid, moduleid, **kwargs)  # noqa: E501

    def design_verilog_module_state_list_with_http_info(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_module_state_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_module_state_list_with_http_info(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'moduleid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_verilog_module_state_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_verilog_module_state_list`")  # noqa: E501
        # verify the required parameter 'moduleid' is set
        if self.api_client.client_side_validation and ('moduleid' not in local_var_params or  # noqa: E501
                                                        local_var_params['moduleid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `moduleid` when calling `design_verilog_module_state_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'moduleid' in local_var_params:
            path_params['moduleid'] = local_var_params['moduleid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/verilog/module/{moduleid}/state/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_verilog_modules_list(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_modules_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_modules_list(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_verilog_modules_list_with_http_info(designid, moduleid, **kwargs)  # noqa: E501

    def design_verilog_modules_list_with_http_info(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_modules_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_modules_list_with_http_info(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'moduleid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_verilog_modules_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_verilog_modules_list`")  # noqa: E501
        # verify the required parameter 'moduleid' is set
        if self.api_client.client_side_validation and ('moduleid' not in local_var_params or  # noqa: E501
                                                        local_var_params['moduleid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `moduleid` when calling `design_verilog_modules_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'moduleid' in local_var_params:
            path_params['moduleid'] = local_var_params['moduleid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/verilog/{moduleid}/modules/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_verilog_wire_state_list(self, designid, wireid, **kwargs):  # noqa: E501
        """design_verilog_wire_state_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_wire_state_list(designid, wireid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str wireid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_verilog_wire_state_list_with_http_info(designid, wireid, **kwargs)  # noqa: E501

    def design_verilog_wire_state_list_with_http_info(self, designid, wireid, **kwargs):  # noqa: E501
        """design_verilog_wire_state_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_wire_state_list_with_http_info(designid, wireid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str wireid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'wireid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_verilog_wire_state_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_verilog_wire_state_list`")  # noqa: E501
        # verify the required parameter 'wireid' is set
        if self.api_client.client_side_validation and ('wireid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wireid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wireid` when calling `design_verilog_wire_state_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'wireid' in local_var_params:
            path_params['wireid'] = local_var_params['wireid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/verilog/wire/{wireid}/state/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_verilog_wires_list(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_wires_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_wires_list(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_verilog_wires_list_with_http_info(designid, moduleid, **kwargs)  # noqa: E501

    def design_verilog_wires_list_with_http_info(self, designid, moduleid, **kwargs):  # noqa: E501
        """design_verilog_wires_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_verilog_wires_list_with_http_info(designid, moduleid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designid: (required)
        :param str moduleid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'moduleid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_verilog_wires_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_verilog_wires_list`")  # noqa: E501
        # verify the required parameter 'moduleid' is set
        if self.api_client.client_side_validation and ('moduleid' not in local_var_params or  # noqa: E501
                                                        local_var_params['moduleid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `moduleid` when calling `design_verilog_wires_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'moduleid' in local_var_params:
            path_params['moduleid'] = local_var_params['moduleid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/verilog/{moduleid}/wires/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_version_list(self, designid, **kwargs):  # noqa: E501
        """design_version_list  # noqa: E501

        Get List of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_version_list(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_version_list_with_http_info(designid, **kwargs)  # noqa: E501

    def design_version_list_with_http_info(self, designid, **kwargs):  # noqa: E501
        """design_version_list  # noqa: E501

        Get List of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_version_list_with_http_info(designid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_version_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/version/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def design_version_read(self, designid, versionid, **kwargs):  # noqa: E501
        """design_version_read  # noqa: E501

        Get a design version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_version_read(designid, versionid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int versionid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.design_version_read_with_http_info(designid, versionid, **kwargs)  # noqa: E501

    def design_version_read_with_http_info(self, designid, versionid, **kwargs):  # noqa: E501
        """design_version_read  # noqa: E501

        Get a design version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.design_version_read_with_http_info(designid, versionid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int designid: (required)
        :param int versionid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designid',
            'versionid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method design_version_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designid' is set
        if self.api_client.client_side_validation and ('designid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designid` when calling `design_version_read`")  # noqa: E501
        # verify the required parameter 'versionid' is set
        if self.api_client.client_side_validation and ('versionid' not in local_var_params or  # noqa: E501
                                                        local_var_params['versionid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `versionid` when calling `design_version_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designid' in local_var_params:
            path_params['designid'] = local_var_params['designid']  # noqa: E501
        if 'versionid' in local_var_params:
            path_params['versionid'] = local_var_params['versionid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/design/{designid}/version/{versionid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
