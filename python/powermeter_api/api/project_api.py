# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powermeter_api.api_client import ApiClient
from powermeter_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ProjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def project_access_create(self, projectid, **kwargs):  # noqa: E501
        """project_access_create  # noqa: E501

        Update project access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_access_create(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_access_create_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_access_create_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_access_create  # noqa: E501

        Update project access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_access_create_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_access_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_access_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/access/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_clone(self, projectid, **kwargs):  # noqa: E501
        """project_clone  # noqa: E501

        Create a copy of project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_clone(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_clone_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_clone_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_clone  # noqa: E501

        Create a copy of project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_clone_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_contrib_device_compute_list(self, projectid, deviceid, **kwargs):  # noqa: E501
        """project_contrib_device_compute_list  # noqa: E501

        Compute a contributor device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_compute_list(projectid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param float p:
        :param float v:
        :param int t:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SwaggerContrib
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_contrib_device_compute_list_with_http_info(projectid, deviceid, **kwargs)  # noqa: E501

    def project_contrib_device_compute_list_with_http_info(self, projectid, deviceid, **kwargs):  # noqa: E501
        """project_contrib_device_compute_list  # noqa: E501

        Compute a contributor device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_compute_list_with_http_info(projectid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param float p:
        :param float v:
        :param int t:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SwaggerContrib, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'deviceid',
            'p',
            'v',
            't'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_contrib_device_compute_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_contrib_device_compute_list`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `project_contrib_device_compute_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []
        if 'p' in local_var_params and local_var_params['p'] is not None:  # noqa: E501
            query_params.append(('p', local_var_params['p']))  # noqa: E501
        if 'v' in local_var_params and local_var_params['v'] is not None:  # noqa: E501
            query_params.append(('v', local_var_params['v']))  # noqa: E501
        if 't' in local_var_params and local_var_params['t'] is not None:  # noqa: E501
            query_params.append(('t', local_var_params['t']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/contrib_device/{deviceid}/compute/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SwaggerContrib',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_contrib_device_create(self, projectid, data, **kwargs):  # noqa: E501
        """project_contrib_device_create  # noqa: E501

        Create a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_create(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param SwaggerContrib data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SwaggerContrib
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_contrib_device_create_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_contrib_device_create_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_contrib_device_create  # noqa: E501

        Create a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_create_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param SwaggerContrib data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SwaggerContrib, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_contrib_device_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_contrib_device_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_contrib_device_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/contrib_device/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SwaggerContrib',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_contrib_device_delete(self, projectid, deviceid, **kwargs):  # noqa: E501
        """project_contrib_device_delete  # noqa: E501

        Delete a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_delete(projectid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_contrib_device_delete_with_http_info(projectid, deviceid, **kwargs)  # noqa: E501

    def project_contrib_device_delete_with_http_info(self, projectid, deviceid, **kwargs):  # noqa: E501
        """project_contrib_device_delete  # noqa: E501

        Delete a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_delete_with_http_info(projectid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'deviceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_contrib_device_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_contrib_device_delete`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `project_contrib_device_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/contrib_device/{deviceid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_contrib_device_list(self, projectid, **kwargs):  # noqa: E501
        """project_contrib_device_list  # noqa: E501

        Get list of contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int page:
        :param int number:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedContribDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_contrib_device_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_contrib_device_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_contrib_device_list  # noqa: E501

        Get list of contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int page:
        :param int number:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedContribDevice, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'page',
            'number'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_contrib_device_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_contrib_device_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params and local_var_params['page'] is not None:  # noqa: E501
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'number' in local_var_params and local_var_params['number'] is not None:  # noqa: E501
            query_params.append(('number', local_var_params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/contrib_device/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedContribDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_contrib_device_read(self, projectid, deviceid, **kwargs):  # noqa: E501
        """project_contrib_device_read  # noqa: E501

        Get a contributor device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_read(projectid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SwaggerContrib
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_contrib_device_read_with_http_info(projectid, deviceid, **kwargs)  # noqa: E501

    def project_contrib_device_read_with_http_info(self, projectid, deviceid, **kwargs):  # noqa: E501
        """project_contrib_device_read  # noqa: E501

        Get a contributor device  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_read_with_http_info(projectid, deviceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SwaggerContrib, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'deviceid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_contrib_device_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_contrib_device_read`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `project_contrib_device_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/contrib_device/{deviceid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SwaggerContrib',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_contrib_device_update(self, projectid, deviceid, data, **kwargs):  # noqa: E501
        """project_contrib_device_update  # noqa: E501

        Update a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_update(projectid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param SwaggerContrib data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SwaggerContrib
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_contrib_device_update_with_http_info(projectid, deviceid, data, **kwargs)  # noqa: E501

    def project_contrib_device_update_with_http_info(self, projectid, deviceid, data, **kwargs):  # noqa: E501
        """project_contrib_device_update  # noqa: E501

        Update a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_contrib_device_update_with_http_info(projectid, deviceid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int deviceid: (required)
        :param SwaggerContrib data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SwaggerContrib, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'deviceid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_contrib_device_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_contrib_device_update`")  # noqa: E501
        # verify the required parameter 'deviceid' is set
        if self.api_client.client_side_validation and ('deviceid' not in local_var_params or  # noqa: E501
                                                        local_var_params['deviceid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `deviceid` when calling `project_contrib_device_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_contrib_device_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'deviceid' in local_var_params:
            path_params['deviceid'] = local_var_params['deviceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/contrib_device/{deviceid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SwaggerContrib',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_create(self, data, **kwargs):  # noqa: E501
        """project_create  # noqa: E501

        Create a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Project data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_create_with_http_info(data, **kwargs)  # noqa: E501

    def project_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """project_create  # noqa: E501

        Create a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param Project data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Project, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_delete(self, projectid, **kwargs):  # noqa: E501
        """project_delete  # noqa: E501

        Delete a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_delete(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_delete_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_delete_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_delete  # noqa: E501

        Delete a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_delete_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_access_create(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_access_create  # noqa: E501

        Update design access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_access_create(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_access_create_with_http_info(projectid, masterdesignid, **kwargs)  # noqa: E501

    def project_design_access_create_with_http_info(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_access_create  # noqa: E501

        Update design access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_access_create_with_http_info(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'masterdesignid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_access_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_access_create`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `project_design_access_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/{masterdesignid}/access/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_clone(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_clone  # noqa: E501

        Create a copy of design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_clone(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_clone_with_http_info(projectid, masterdesignid, **kwargs)  # noqa: E501

    def project_design_clone_with_http_info(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_clone  # noqa: E501

        Create a copy of design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_clone_with_http_info(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'masterdesignid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_clone`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `project_design_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/{masterdesignid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_create(self, projectid, data, **kwargs):  # noqa: E501
        """project_design_create  # noqa: E501

        Create a design, return master design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_create(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param Design data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_create_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_design_create_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_design_create  # noqa: E501

        Create a design, return master design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_create_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param Design data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_design_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_delete(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_delete  # noqa: E501

        Delete a master design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_delete(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_delete_with_http_info(projectid, masterdesignid, **kwargs)  # noqa: E501

    def project_design_delete_with_http_info(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_delete  # noqa: E501

        Delete a master design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_delete_with_http_info(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'masterdesignid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_delete`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `project_design_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/{masterdesignid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_instantiable_list(self, projectid, **kwargs):  # noqa: E501
        """project_design_instantiable_list  # noqa: E501

        Get list of designs that can be instantiated in the given design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_instantiable_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_instantiable_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_design_instantiable_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_design_instantiable_list  # noqa: E501

        Get list of designs that can be instantiated in the given design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_instantiable_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_instantiable_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_instantiable_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/instantiable/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_list(self, projectid, **kwargs):  # noqa: E501
        """project_design_list  # noqa: E501

        Get list of master designs in projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param str name: Design name
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_design_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_design_list  # noqa: E501

        Get list of master designs in projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param str name: Design name
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_read(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_read  # noqa: E501

        Get a master design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_read(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_read_with_http_info(projectid, masterdesignid, **kwargs)  # noqa: E501

    def project_design_read_with_http_info(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_read  # noqa: E501

        Get a master design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_read_with_http_info(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'masterdesignid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_read`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `project_design_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/{masterdesignid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_update(self, projectid, masterdesignid, data, **kwargs):  # noqa: E501
        """project_design_update  # noqa: E501

        Update a design master  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_update(projectid, masterdesignid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param DesignMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_update_with_http_info(projectid, masterdesignid, data, **kwargs)  # noqa: E501

    def project_design_update_with_http_info(self, projectid, masterdesignid, data, **kwargs):  # noqa: E501
        """project_design_update  # noqa: E501

        Update a design master  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_update_with_http_info(projectid, masterdesignid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param DesignMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'masterdesignid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_update`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `project_design_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_design_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/{masterdesignid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_design_versions_list(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_versions_list  # noqa: E501

        Get list of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_versions_list(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_design_versions_list_with_http_info(projectid, masterdesignid, **kwargs)  # noqa: E501

    def project_design_versions_list_with_http_info(self, projectid, masterdesignid, **kwargs):  # noqa: E501
        """project_design_versions_list  # noqa: E501

        Get list of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_design_versions_list_with_http_info(projectid, masterdesignid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int masterdesignid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'masterdesignid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_design_versions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_design_versions_list`")  # noqa: E501
        # verify the required parameter 'masterdesignid' is set
        if self.api_client.client_side_validation and ('masterdesignid' not in local_var_params or  # noqa: E501
                                                        local_var_params['masterdesignid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `masterdesignid` when calling `project_design_versions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'masterdesignid' in local_var_params:
            path_params['masterdesignid'] = local_var_params['masterdesignid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/design/{masterdesignid}/versions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_list(self, **kwargs):  # noqa: E501
        """project_list  # noqa: E501

        Get list of projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: Project name
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_list_with_http_info(**kwargs)  # noqa: E501

    def project_list_with_http_info(self, **kwargs):  # noqa: E501
        """project_list  # noqa: E501

        Get list of projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: Project name
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Project], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_permissions_list(self, projectid, **kwargs):  # noqa: E501
        """project_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_permissions_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_permissions_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_permissions_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_permissions_list  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_permissions_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_permissions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_permissions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/permissions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_permissions_update(self, projectid, **kwargs):  # noqa: E501
        """project_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_permissions_update(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_permissions_update_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_permissions_update_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_permissions_update  # noqa: E501

        Get list of permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_permissions_update_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_permissions_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_permissions_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/permissions/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_read(self, projectid, **kwargs):  # noqa: E501
        """project_read  # noqa: E501

        Get a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_read(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_read_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_read_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_read  # noqa: E501

        Get a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_read_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Project, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_reference_create(self, projectid, data, **kwargs):  # noqa: E501
        """project_reference_create  # noqa: E501

        Add a reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_create(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param Project data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_reference_create_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_reference_create_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_reference_create  # noqa: E501

        Add a reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_create_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param Project data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Project, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_reference_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_reference_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_reference_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/reference/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_reference_delete(self, projectid, refid, **kwargs):  # noqa: E501
        """project_reference_delete  # noqa: E501

        Delete a reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_delete(projectid, refid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int refid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_reference_delete_with_http_info(projectid, refid, **kwargs)  # noqa: E501

    def project_reference_delete_with_http_info(self, projectid, refid, **kwargs):  # noqa: E501
        """project_reference_delete  # noqa: E501

        Delete a reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_delete_with_http_info(projectid, refid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int refid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'refid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_reference_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_reference_delete`")  # noqa: E501
        # verify the required parameter 'refid' is set
        if self.api_client.client_side_validation and ('refid' not in local_var_params or  # noqa: E501
                                                        local_var_params['refid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `refid` when calling `project_reference_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'refid' in local_var_params:
            path_params['refid'] = local_var_params['refid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/reference/{refid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_reference_list(self, projectid, **kwargs):  # noqa: E501
        """project_reference_list  # noqa: E501

        Get list of refernced projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_reference_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_reference_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_reference_list  # noqa: E501

        Get list of refernced projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Project], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_reference_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_reference_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/reference/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_reference_read(self, projectid, refid, **kwargs):  # noqa: E501
        """project_reference_read  # noqa: E501

        Get a reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_read(projectid, refid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int refid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_reference_read_with_http_info(projectid, refid, **kwargs)  # noqa: E501

    def project_reference_read_with_http_info(self, projectid, refid, **kwargs):  # noqa: E501
        """project_reference_read  # noqa: E501

        Get a reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_reference_read_with_http_info(projectid, refid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int refid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Project, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'refid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_reference_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_reference_read`")  # noqa: E501
        # verify the required parameter 'refid' is set
        if self.api_client.client_side_validation and ('refid' not in local_var_params or  # noqa: E501
                                                        local_var_params['refid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `refid` when calling `project_reference_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'refid' in local_var_params:
            path_params['refid'] = local_var_params['refid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/reference/{refid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_referenceable_list(self, projectid, **kwargs):  # noqa: E501
        """project_referenceable_list  # noqa: E501

        Get list of projects referenceable by this project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_referenceable_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Project]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_referenceable_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_referenceable_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_referenceable_list  # noqa: E501

        Get list of projects referenceable by this project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_referenceable_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Project], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_referenceable_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_referenceable_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/referenceable/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Project]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_access_create(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_access_create  # noqa: E501

        Update project datasheet access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_access_create(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_access_create_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_access_create_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_access_create  # noqa: E501

        Update project datasheet access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_access_create_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_access_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_access_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_access_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/access/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_commit_create(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_commit_create(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param ScenarioVersion data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_commit_create_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_commit_create_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_commit_create  # noqa: E501

        Commit a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_commit_create_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param ScenarioVersion data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioVersion, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_commit_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_commit_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_commit_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_commit_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/commit/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_delete(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_delete  # noqa: E501

        Delete a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_delete(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_delete_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_delete_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_delete  # noqa: E501

        Delete a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_delete_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_create(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_design_create  # noqa: E501

        Create scenario PC instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_create(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param DesignInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_create_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_design_create_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_design_create  # noqa: E501

        Create scenario PC instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_create_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param DesignInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_delete(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_delete  # noqa: E501

        Delete a scenario Design instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_delete(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_delete_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_delete_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_delete  # noqa: E501

        Delete a scenario Design instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_delete_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_delete`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_design_list  # noqa: E501

        Get scenario Designs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_design_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_design_list  # noqa: E501

        Get scenario Designs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignInstance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignInstance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_config_create(self, projectid, scenarioid, designinstid, paramid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_create(projectid, scenarioid, designinstid, paramid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param ScenarioParamConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioParamConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_config_create_with_http_info(projectid, scenarioid, designinstid, paramid, data, **kwargs)  # noqa: E501

    def project_scenario_design_param_config_create_with_http_info(self, projectid, scenarioid, designinstid, paramid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_create_with_http_info(projectid, scenarioid, designinstid, paramid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param ScenarioParamConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioParamConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_config_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_config_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_config_create`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_config_create`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_config_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_param_config_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioParamConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_config_delete(self, projectid, scenarioid, designinstid, paramid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_delete(projectid, scenarioid, designinstid, paramid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_config_delete_with_http_info(projectid, scenarioid, designinstid, paramid, configid, **kwargs)  # noqa: E501

    def project_scenario_design_param_config_delete_with_http_info(self, projectid, scenarioid, designinstid, paramid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_delete_with_http_info(projectid, scenarioid, designinstid, paramid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_config_delete`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_config_delete`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_param_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_config_list(self, projectid, scenarioid, designinstid, paramid, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_list(projectid, scenarioid, designinstid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioParamConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_config_list_with_http_info(projectid, scenarioid, designinstid, paramid, **kwargs)  # noqa: E501

    def project_scenario_design_param_config_list_with_http_info(self, projectid, scenarioid, designinstid, paramid, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_list_with_http_info(projectid, scenarioid, designinstid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioParamConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_config_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_config_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_config_list`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioParamConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_config_read(self, projectid, scenarioid, designinstid, paramid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_read  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_read(projectid, scenarioid, designinstid, paramid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioParamConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_config_read_with_http_info(projectid, scenarioid, designinstid, paramid, configid, **kwargs)  # noqa: E501

    def project_scenario_design_param_config_read_with_http_info(self, projectid, scenarioid, designinstid, paramid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_read  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_read_with_http_info(projectid, scenarioid, designinstid, paramid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioParamConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_config_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_config_read`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_param_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioParamConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_config_update(self, projectid, scenarioid, designinstid, paramid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_update(projectid, scenarioid, designinstid, paramid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param ScenarioParamConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioParamConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_config_update_with_http_info(projectid, scenarioid, designinstid, paramid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_design_param_config_update_with_http_info(self, projectid, scenarioid, designinstid, paramid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_config_update_with_http_info(projectid, scenarioid, designinstid, paramid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param int configid: (required)
        :param ScenarioParamConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioParamConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_config_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_config_update`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_param_config_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_param_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioParamConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_create(self, projectid, scenarioid, designinstid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_create(projectid, scenarioid, designinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param ScenarioParam data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioParam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_create_with_http_info(projectid, scenarioid, designinstid, data, **kwargs)  # noqa: E501

    def project_scenario_design_param_create_with_http_info(self, projectid, scenarioid, designinstid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_create_with_http_info(projectid, scenarioid, designinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param ScenarioParam data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioParam, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_create`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_param_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioParam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_list(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_param_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_list(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioParam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_list_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_param_list_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_param_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_list_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioParam], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioParam]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_read(self, projectid, scenarioid, designinstid, paramid, **kwargs):  # noqa: E501
        """project_scenario_design_param_read  # noqa: E501

        Get datasheet design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_read(projectid, scenarioid, designinstid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioParam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_read_with_http_info(projectid, scenarioid, designinstid, paramid, **kwargs)  # noqa: E501

    def project_scenario_design_param_read_with_http_info(self, projectid, scenarioid, designinstid, paramid, **kwargs):  # noqa: E501
        """project_scenario_design_param_read  # noqa: E501

        Get datasheet design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_read_with_http_info(projectid, scenarioid, designinstid, paramid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioParam], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_read`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioParam]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_param_update(self, projectid, scenarioid, designinstid, paramid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_update  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_update(projectid, scenarioid, designinstid, paramid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param ScenarioParam data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioParam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_param_update_with_http_info(projectid, scenarioid, designinstid, paramid, data, **kwargs)  # noqa: E501

    def project_scenario_design_param_update_with_http_info(self, projectid, scenarioid, designinstid, paramid, data, **kwargs):  # noqa: E501
        """project_scenario_design_param_update  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_param_update_with_http_info(projectid, scenarioid, designinstid, paramid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int paramid: (required)
        :param ScenarioParam data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioParam, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'paramid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_param_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_param_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_param_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_param_update`")  # noqa: E501
        # verify the required parameter 'paramid' is set
        if self.api_client.client_side_validation and ('paramid' not in local_var_params or  # noqa: E501
                                                        local_var_params['paramid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `paramid` when calling `project_scenario_design_param_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_param_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'paramid' in local_var_params:
            path_params['paramid'] = local_var_params['paramid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioParam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_power_list(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_power_list(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_power_list_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_power_list_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_power_list_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_power_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_power_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_powerdistribution_list(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_powerdistribution_list  # noqa: E501

        Get project scenario power distribution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_powerdistribution_list(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_powerdistribution_list_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_powerdistribution_list_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_powerdistribution_list  # noqa: E501

        Get project scenario power distribution  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_powerdistribution_list_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_powerdistribution_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_powerdistribution_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_powerdistribution_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_powerdistribution_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/powerdistribution/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_read(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_read  # noqa: E501

        Get a scenario Design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_read(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_read_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_read_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_read  # noqa: E501

        Get a scenario Design  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_read_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_config_create(self, designinstid, projectid, scenarioid, dsigninstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_create(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designinstid: (required)
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int dsigninstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_config_create_with_http_info(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, **kwargs)  # noqa: E501

    def project_scenario_design_supply_config_create_with_http_info(self, designinstid, projectid, scenarioid, dsigninstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_create_with_http_info(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designinstid: (required)
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int dsigninstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designinstid',
            'projectid',
            'scenarioid',
            'dsigninstid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_config_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_config_create`")  # noqa: E501
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_config_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_config_create`")  # noqa: E501
        # verify the required parameter 'dsigninstid' is set
        if self.api_client.client_side_validation and ('dsigninstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dsigninstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dsigninstid` when calling `project_scenario_design_supply_config_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_config_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_supply_config_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'dsigninstid' in local_var_params:
            path_params['dsigninstid'] = local_var_params['dsigninstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_config_delete(self, projectid, scenarioid, designinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_delete(projectid, scenarioid, designinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_config_delete_with_http_info(projectid, scenarioid, designinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_design_supply_config_delete_with_http_info(self, projectid, scenarioid, designinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_delete_with_http_info(projectid, scenarioid, designinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_supply_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_config_list(self, projectid, scenarioid, designinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_list(projectid, scenarioid, designinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyInstConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_config_list_with_http_info(projectid, scenarioid, designinstid, supplyid, **kwargs)  # noqa: E501

    def project_scenario_design_supply_config_list_with_http_info(self, projectid, scenarioid, designinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_list_with_http_info(projectid, scenarioid, designinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyInstConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_config_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_config_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_config_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyInstConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_config_read(self, projectid, scenarioid, designinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_read(projectid, scenarioid, designinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_config_read_with_http_info(projectid, scenarioid, designinstid, supplyid, configid, **kwargs)  # noqa: E501

    def project_scenario_design_supply_config_read_with_http_info(self, projectid, scenarioid, designinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_read_with_http_info(projectid, scenarioid, designinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_config_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_config_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_supply_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_config_update(self, projectid, scenarioid, designinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_update(projectid, scenarioid, designinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_config_update_with_http_info(projectid, scenarioid, designinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_design_supply_config_update_with_http_info(self, projectid, scenarioid, designinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_config_update_with_http_info(projectid, scenarioid, designinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_config_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_config_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_supply_config_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_supply_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_create(self, designinstid, projectid, scenarioid, dsigninstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_create(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designinstid: (required)
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int dsigninstid: (required)
        :param int supplyid: (required)
        :param DesignSupplyInst data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_create_with_http_info(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, **kwargs)  # noqa: E501

    def project_scenario_design_supply_create_with_http_info(self, designinstid, projectid, scenarioid, dsigninstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_design_supply_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_create_with_http_info(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str designinstid: (required)
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int dsigninstid: (required)
        :param int supplyid: (required)
        :param DesignSupplyInst data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'designinstid',
            'projectid',
            'scenarioid',
            'dsigninstid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_create`")  # noqa: E501
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_create`")  # noqa: E501
        # verify the required parameter 'dsigninstid' is set
        if self.api_client.client_side_validation and ('dsigninstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['dsigninstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dsigninstid` when calling `project_scenario_design_supply_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_supply_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'dsigninstid' in local_var_params:
            path_params['dsigninstid'] = local_var_params['dsigninstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_supply_read(self, projectid, scenarioid, designinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_design_supply_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_read(projectid, scenarioid, designinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DesignSupplyInst]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_supply_read_with_http_info(projectid, scenarioid, designinstid, supplyid, **kwargs)  # noqa: E501

    def project_scenario_design_supply_read_with_http_info(self, projectid, scenarioid, designinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_design_supply_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_supply_read_with_http_info(projectid, scenarioid, designinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DesignSupplyInst], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_supply_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_supply_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_design_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DesignSupplyInst]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_thermal_list(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_thermal_list  # noqa: E501

        Compute project scenario steady state thermal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_thermal_list(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_thermal_list_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_thermal_list_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_thermal_list  # noqa: E501

        Compute project scenario steady state thermal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_thermal_list_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_thermal_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_thermal_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_thermal_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_thermal_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/thermal/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_update(self, projectid, scenarioid, designinstid, data, **kwargs):  # noqa: E501
        """project_scenario_design_update  # noqa: E501

        Update a scenario Design instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_update(projectid, scenarioid, designinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param DesignInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_update_with_http_info(projectid, scenarioid, designinstid, data, **kwargs)  # noqa: E501

    def project_scenario_design_update_with_http_info(self, projectid, scenarioid, designinstid, data, **kwargs):  # noqa: E501
        """project_scenario_design_update  # noqa: E501

        Update a scenario Design instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_update_with_http_info(projectid, scenarioid, designinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param DesignInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_config_create(self, projectid, scenarioid, designinstid, modeid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_create(projectid, scenarioid, designinstid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param ScenarioModeUtilConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioModeUtilConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_config_create_with_http_info(projectid, scenarioid, designinstid, modeid, data, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_config_create_with_http_info(self, projectid, scenarioid, designinstid, modeid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_create_with_http_info(projectid, scenarioid, designinstid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param ScenarioModeUtilConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioModeUtilConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_config_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_config_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_config_create`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_config_create`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_config_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_utilization_config_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioModeUtilConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_config_delete(self, projectid, scenarioid, designinstid, modeid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_delete(projectid, scenarioid, designinstid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_config_delete_with_http_info(projectid, scenarioid, designinstid, modeid, configid, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_config_delete_with_http_info(self, projectid, scenarioid, designinstid, modeid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_delete_with_http_info(projectid, scenarioid, designinstid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_config_delete`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_config_delete`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_utilization_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_config_list(self, projectid, scenarioid, designinstid, modeid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_list(projectid, scenarioid, designinstid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioModeUtilConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_config_list_with_http_info(projectid, scenarioid, designinstid, modeid, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_config_list_with_http_info(self, projectid, scenarioid, designinstid, modeid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_list_with_http_info(projectid, scenarioid, designinstid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioModeUtilConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_config_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_config_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_config_list`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioModeUtilConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_config_read(self, projectid, scenarioid, designinstid, modeid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_read  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_read(projectid, scenarioid, designinstid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioModeUtilConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_config_read_with_http_info(projectid, scenarioid, designinstid, modeid, configid, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_config_read_with_http_info(self, projectid, scenarioid, designinstid, modeid, configid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_read  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_read_with_http_info(projectid, scenarioid, designinstid, modeid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioModeUtilConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_config_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_config_read`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_utilization_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioModeUtilConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_config_update(self, projectid, scenarioid, designinstid, modeid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_update(projectid, scenarioid, designinstid, modeid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param ScenarioModeUtilConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioModeUtilConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_config_update_with_http_info(projectid, scenarioid, designinstid, modeid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_config_update_with_http_info(self, projectid, scenarioid, designinstid, modeid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_config_update_with_http_info(projectid, scenarioid, designinstid, modeid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param int configid: (required)
        :param ScenarioModeUtilConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioModeUtilConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_config_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_config_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_design_utilization_config_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_utilization_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioModeUtilConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_create(self, projectid, scenarioid, designinstid, modeid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_create(projectid, scenarioid, designinstid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param ScenarioModeUtil data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_create_with_http_info(projectid, scenarioid, designinstid, modeid, data, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_create_with_http_info(self, projectid, scenarioid, designinstid, modeid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_create_with_http_info(projectid, scenarioid, designinstid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param ScenarioModeUtil data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_create`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_create`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_utilization_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_list(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_list(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioModeUtil]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_list_with_http_info(projectid, scenarioid, designinstid, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_list_with_http_info(self, projectid, scenarioid, designinstid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_list  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_list_with_http_info(projectid, scenarioid, designinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioModeUtil], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_list`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioModeUtil]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_read(self, projectid, scenarioid, designinstid, modeid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_read  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_read(projectid, scenarioid, designinstid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_read_with_http_info(projectid, scenarioid, designinstid, modeid, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_read_with_http_info(self, projectid, scenarioid, designinstid, modeid, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_read  # noqa: E501

        Get scenario design config data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_read_with_http_info(projectid, scenarioid, designinstid, modeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_read`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_design_utilization_update(self, projectid, scenarioid, designinstid, modeid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_update(projectid, scenarioid, designinstid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param ScenarioModeUtil data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioModeUtil
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_design_utilization_update_with_http_info(projectid, scenarioid, designinstid, modeid, data, **kwargs)  # noqa: E501

    def project_scenario_design_utilization_update_with_http_info(self, projectid, scenarioid, designinstid, modeid, data, **kwargs):  # noqa: E501
        """project_scenario_design_utilization_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_design_utilization_update_with_http_info(projectid, scenarioid, designinstid, modeid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int modeid: (required)
        :param ScenarioModeUtil data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioModeUtil, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'modeid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_design_utilization_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_design_utilization_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_design_utilization_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_design_utilization_update`")  # noqa: E501
        # verify the required parameter 'modeid' is set
        if self.api_client.client_side_validation and ('modeid' not in local_var_params or  # noqa: E501
                                                        local_var_params['modeid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `modeid` when calling `project_scenario_design_utilization_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_design_utilization_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'modeid' in local_var_params:
            path_params['modeid'] = local_var_params['modeid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioModeUtil',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_design_supply_read(self, projectid, scenarioid, designinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_design_supply_read  # noqa: E501

        Get scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_design_supply_read(projectid, scenarioid, designinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_design_supply_read_with_http_info(projectid, scenarioid, designinstid, supplyinstid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_design_supply_read_with_http_info(self, projectid, scenarioid, designinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_design_supply_read  # noqa: E501

        Get scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_design_supply_read_with_http_info(projectid, scenarioid, designinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_design_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_design_supply_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_design_supply_read`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_hierarchy_design_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyinstid' is set
        if self.api_client.client_side_validation and ('supplyinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyinstid` when calling `project_scenario_hierarchy_design_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyinstid' in local_var_params:
            path_params['supplyinstid'] = local_var_params['supplyinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/design/{designinstid}/supply/{supplyinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_design_supply_update(self, projectid, scenarioid, designinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_design_supply_update  # noqa: E501

        Create scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_design_supply_update(projectid, scenarioid, designinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: DesignSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_design_supply_update_with_http_info(projectid, scenarioid, designinstid, supplyinstid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_design_supply_update_with_http_info(self, projectid, scenarioid, designinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_design_supply_update  # noqa: E501

        Create scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_design_supply_update_with_http_info(projectid, scenarioid, designinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int designinstid: (required)
        :param int supplyinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(DesignSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'designinstid',
            'supplyinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_design_supply_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_design_supply_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_design_supply_update`")  # noqa: E501
        # verify the required parameter 'designinstid' is set
        if self.api_client.client_side_validation and ('designinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['designinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `designinstid` when calling `project_scenario_hierarchy_design_supply_update`")  # noqa: E501
        # verify the required parameter 'supplyinstid' is set
        if self.api_client.client_side_validation and ('supplyinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyinstid` when calling `project_scenario_hierarchy_design_supply_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'designinstid' in local_var_params:
            path_params['designinstid'] = local_var_params['designinstid']  # noqa: E501
        if 'supplyinstid' in local_var_params:
            path_params['supplyinstid'] = local_var_params['supplyinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/design/{designinstid}/supply/{supplyinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DesignSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_list  # noqa: E501

        Get scenario PCBs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_list  # noqa: E501

        Get scenario PCBs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioHierarchy, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioHierarchy',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_package_supply_read(self, projectid, scenarioid, packinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_package_supply_read  # noqa: E501

        Get scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_package_supply_read(projectid, scenarioid, packinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PackageSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_package_supply_read_with_http_info(projectid, scenarioid, packinstid, supplyinstid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_package_supply_read_with_http_info(self, projectid, scenarioid, packinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_package_supply_read  # noqa: E501

        Get scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_package_supply_read_with_http_info(projectid, scenarioid, packinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PackageSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_package_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_package_supply_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_package_supply_read`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_hierarchy_package_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyinstid' is set
        if self.api_client.client_side_validation and ('supplyinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyinstid` when calling `project_scenario_hierarchy_package_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyinstid' in local_var_params:
            path_params['supplyinstid'] = local_var_params['supplyinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/package/{packinstid}/supply/{supplyinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_package_supply_update(self, projectid, scenarioid, packinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_package_supply_update  # noqa: E501

        Update scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_package_supply_update(projectid, scenarioid, packinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PackageSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_package_supply_update_with_http_info(projectid, scenarioid, packinstid, supplyinstid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_package_supply_update_with_http_info(self, projectid, scenarioid, packinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_package_supply_update  # noqa: E501

        Update scenario PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_package_supply_update_with_http_info(projectid, scenarioid, packinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PackageSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_package_supply_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_package_supply_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_package_supply_update`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_hierarchy_package_supply_update`")  # noqa: E501
        # verify the required parameter 'supplyinstid' is set
        if self.api_client.client_side_validation and ('supplyinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyinstid` when calling `project_scenario_hierarchy_package_supply_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyinstid' in local_var_params:
            path_params['supplyinstid'] = local_var_params['supplyinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/package/{packinstid}/supply/{supplyinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_vr_supply_read(self, projectid, scenarioid, vrinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_vr_supply_read  # noqa: E501

        Create datasheet PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_vr_supply_read(projectid, scenarioid, vrinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VRSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_vr_supply_read_with_http_info(projectid, scenarioid, vrinstid, supplyinstid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_vr_supply_read_with_http_info(self, projectid, scenarioid, vrinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_vr_supply_read  # noqa: E501

        Create datasheet PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_vr_supply_read_with_http_info(projectid, scenarioid, vrinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VRSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_vr_supply_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_vr_supply_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_vr_supply_read`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_hierarchy_vr_supply_read`")  # noqa: E501
        # verify the required parameter 'supplyinstid' is set
        if self.api_client.client_side_validation and ('supplyinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyinstid` when calling `project_scenario_hierarchy_vr_supply_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyinstid' in local_var_params:
            path_params['supplyinstid'] = local_var_params['supplyinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/vr/{vrinstid}/supply/{supplyinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_hierarchy_vr_supply_update(self, projectid, scenarioid, vrinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_vr_supply_update  # noqa: E501

        Create datasheet PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_vr_supply_update(projectid, scenarioid, vrinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VRSupplyInst
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_hierarchy_vr_supply_update_with_http_info(projectid, scenarioid, vrinstid, supplyinstid, **kwargs)  # noqa: E501

    def project_scenario_hierarchy_vr_supply_update_with_http_info(self, projectid, scenarioid, vrinstid, supplyinstid, **kwargs):  # noqa: E501
        """project_scenario_hierarchy_vr_supply_update  # noqa: E501

        Create datasheet PCB package supply instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_hierarchy_vr_supply_update_with_http_info(projectid, scenarioid, vrinstid, supplyinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VRSupplyInst, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_hierarchy_vr_supply_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_hierarchy_vr_supply_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_hierarchy_vr_supply_update`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_hierarchy_vr_supply_update`")  # noqa: E501
        # verify the required parameter 'supplyinstid' is set
        if self.api_client.client_side_validation and ('supplyinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyinstid` when calling `project_scenario_hierarchy_vr_supply_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyinstid' in local_var_params:
            path_params['supplyinstid'] = local_var_params['supplyinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/hierarchy/vr/{vrinstid}/supply/{supplyinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRSupplyInst',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_clone(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_clone  # noqa: E501

        Clone a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_clone(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_clone_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_library_clone_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_clone  # noqa: E501

        Clone a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_clone_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_clone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_clone`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_library_clone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/{scenarioid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_create(self, projectid, data, **kwargs):  # noqa: E501
        """project_scenario_library_create  # noqa: E501

        Create a new scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_create(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param ScenarioMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_create_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_scenario_library_create_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_scenario_library_create  # noqa: E501

        Create a new scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_create_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param ScenarioMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_library_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_delete(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_delete  # noqa: E501

        Delete a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_delete(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_delete_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_library_delete_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_delete  # noqa: E501

        Delete a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_delete_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_library_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/{scenarioid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_list(self, projectid, **kwargs):  # noqa: E501
        """project_scenario_library_list  # noqa: E501

        Get list of project scenarios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_scenario_library_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_scenario_library_list  # noqa: E501

        Get list of project scenarios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_read(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_read  # noqa: E501

        Get a scenarios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_read(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_read_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_library_read_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_read  # noqa: E501

        Get a scenarios  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_read_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_library_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/{scenarioid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_update(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_library_update  # noqa: E501

        Update a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_update(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param ScenarioMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScenarioMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_update_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_library_update_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_library_update  # noqa: E501

        Update a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_update_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param ScenarioMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScenarioMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_library_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_library_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/{scenarioid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenarioMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_library_version_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_version_list  # noqa: E501

        Get List of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_version_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_library_version_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_library_version_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_library_version_list  # noqa: E501

        Get List of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_library_version_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_library_version_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_library_version_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_library_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/library/{scenarioid}/version/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_create(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_package_create  # noqa: E501

        Create scenario Package instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_create(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param PackageInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PackageInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_create_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_package_create_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_package_create  # noqa: E501

        Create scenario Package instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_create_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param PackageInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PackageInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_package_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_delete(self, projectid, scenarioid, packinstid, **kwargs):  # noqa: E501
        """project_scenario_package_delete  # noqa: E501

        Delete a scenario Package instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_delete(projectid, scenarioid, packinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_delete_with_http_info(projectid, scenarioid, packinstid, **kwargs)  # noqa: E501

    def project_scenario_package_delete_with_http_info(self, projectid, scenarioid, packinstid, **kwargs):  # noqa: E501
        """project_scenario_package_delete  # noqa: E501

        Delete a scenario Package instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_delete_with_http_info(projectid, scenarioid, packinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_delete`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_package_list  # noqa: E501

        Get scenario Packages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PackageInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_package_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_package_list  # noqa: E501

        Get scenario Packages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PackageInstance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PackageInstance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_power_list(self, projectid, scenarioid, packinstid, **kwargs):  # noqa: E501
        """project_scenario_package_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_power_list(projectid, scenarioid, packinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_power_list_with_http_info(projectid, scenarioid, packinstid, **kwargs)  # noqa: E501

    def project_scenario_package_power_list_with_http_info(self, projectid, scenarioid, packinstid, **kwargs):  # noqa: E501
        """project_scenario_package_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_power_list_with_http_info(projectid, scenarioid, packinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_power_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_power_list`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_read(self, projectid, scenarioid, packinstid, **kwargs):  # noqa: E501
        """project_scenario_package_read  # noqa: E501

        Get a scenario Pckage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_read(projectid, scenarioid, packinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PackageInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_read_with_http_info(projectid, scenarioid, packinstid, **kwargs)  # noqa: E501

    def project_scenario_package_read_with_http_info(self, projectid, scenarioid, packinstid, **kwargs):  # noqa: E501
        """project_scenario_package_read  # noqa: E501

        Get a scenario Pckage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_read_with_http_info(projectid, scenarioid, packinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PackageInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_read`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_supply_config_create(self, projectid, scenarioid, packinstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_create  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_create(projectid, scenarioid, packinstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_supply_config_create_with_http_info(projectid, scenarioid, packinstid, supplyid, data, **kwargs)  # noqa: E501

    def project_scenario_package_supply_config_create_with_http_info(self, projectid, scenarioid, packinstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_create  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_create_with_http_info(projectid, scenarioid, packinstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_supply_config_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_supply_config_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_supply_config_create`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_supply_config_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_package_supply_config_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_package_supply_config_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_supply_config_delete(self, projectid, scenarioid, packinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_delete(projectid, scenarioid, packinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_supply_config_delete_with_http_info(projectid, scenarioid, packinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_package_supply_config_delete_with_http_info(self, projectid, scenarioid, packinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_delete_with_http_info(projectid, scenarioid, packinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_supply_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_package_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_package_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_package_supply_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_supply_config_list(self, projectid, scenarioid, packinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_list(projectid, scenarioid, packinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyInstConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_supply_config_list_with_http_info(projectid, scenarioid, packinstid, supplyid, **kwargs)  # noqa: E501

    def project_scenario_package_supply_config_list_with_http_info(self, projectid, scenarioid, packinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_list_with_http_info(projectid, scenarioid, packinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyInstConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_supply_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_supply_config_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_supply_config_list`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_supply_config_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_package_supply_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyInstConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_supply_config_read(self, projectid, scenarioid, packinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_read(projectid, scenarioid, packinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_supply_config_read_with_http_info(projectid, scenarioid, packinstid, supplyid, configid, **kwargs)  # noqa: E501

    def project_scenario_package_supply_config_read_with_http_info(self, projectid, scenarioid, packinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_read_with_http_info(projectid, scenarioid, packinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_supply_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_supply_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_supply_config_read`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_supply_config_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_package_supply_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_package_supply_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_supply_config_update(self, projectid, scenarioid, packinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_update(projectid, scenarioid, packinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_supply_config_update_with_http_info(projectid, scenarioid, packinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_package_supply_config_update_with_http_info(self, projectid, scenarioid, packinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_package_supply_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_supply_config_update_with_http_info(projectid, scenarioid, packinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_supply_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_supply_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_supply_config_update`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_supply_config_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_package_supply_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_package_supply_config_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_package_supply_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_package_update(self, projectid, scenarioid, packinstid, data, **kwargs):  # noqa: E501
        """project_scenario_package_update  # noqa: E501

        Update a scenario Package instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_update(projectid, scenarioid, packinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param PackageInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PackageInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_package_update_with_http_info(projectid, scenarioid, packinstid, data, **kwargs)  # noqa: E501

    def project_scenario_package_update_with_http_info(self, projectid, scenarioid, packinstid, data, **kwargs):  # noqa: E501
        """project_scenario_package_update  # noqa: E501

        Update a scenario Package instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_package_update_with_http_info(projectid, scenarioid, packinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int packinstid: (required)
        :param PackageInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PackageInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'packinstid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_package_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_package_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_package_update`")  # noqa: E501
        # verify the required parameter 'packinstid' is set
        if self.api_client.client_side_validation and ('packinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['packinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `packinstid` when calling `project_scenario_package_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_package_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'packinstid' in local_var_params:
            path_params['packinstid'] = local_var_params['packinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PackageInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_create(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_create  # noqa: E501

        Create scenario PC instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_create(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param PCBInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PCBInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_create_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_pcb_create_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_create  # noqa: E501

        Create scenario PC instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_create_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param PCBInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PCBInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_pcb_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PCBInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_delete(self, projectid, scenarioid, pcbinstid, **kwargs):  # noqa: E501
        """project_scenario_pcb_delete  # noqa: E501

        Delete a datasheet PCB instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_delete(projectid, scenarioid, pcbinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_delete_with_http_info(projectid, scenarioid, pcbinstid, **kwargs)  # noqa: E501

    def project_scenario_pcb_delete_with_http_info(self, projectid, scenarioid, pcbinstid, **kwargs):  # noqa: E501
        """project_scenario_pcb_delete  # noqa: E501

        Delete a datasheet PCB instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_delete_with_http_info(projectid, scenarioid, pcbinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_delete`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_pcb_list  # noqa: E501

        Get scenario PCBs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[PCBInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_pcb_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_pcb_list  # noqa: E501

        Get scenario PCBs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[PCBInstance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PCBInstance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_power_list(self, projectid, scenarioid, pcbinstid, **kwargs):  # noqa: E501
        """project_scenario_pcb_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_power_list(projectid, scenarioid, pcbinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_power_list_with_http_info(projectid, scenarioid, pcbinstid, **kwargs)  # noqa: E501

    def project_scenario_pcb_power_list_with_http_info(self, projectid, scenarioid, pcbinstid, **kwargs):  # noqa: E501
        """project_scenario_pcb_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_power_list_with_http_info(projectid, scenarioid, pcbinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_power_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_power_list`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_read(self, projectid, scenarioid, pcbinstid, **kwargs):  # noqa: E501
        """project_scenario_pcb_read  # noqa: E501

        Get a datasheet PCB  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_read(projectid, scenarioid, pcbinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PCBInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_read_with_http_info(projectid, scenarioid, pcbinstid, **kwargs)  # noqa: E501

    def project_scenario_pcb_read_with_http_info(self, projectid, scenarioid, pcbinstid, **kwargs):  # noqa: E501
        """project_scenario_pcb_read  # noqa: E501

        Get a datasheet PCB  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_read_with_http_info(projectid, scenarioid, pcbinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PCBInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_read`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PCBInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_supply_config_create(self, projectid, scenarioid, pcbinstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_create(projectid, scenarioid, pcbinstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_supply_config_create_with_http_info(projectid, scenarioid, pcbinstid, supplyid, data, **kwargs)  # noqa: E501

    def project_scenario_pcb_supply_config_create_with_http_info(self, projectid, scenarioid, pcbinstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_create_with_http_info(projectid, scenarioid, pcbinstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_supply_config_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_supply_config_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_supply_config_create`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_supply_config_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_pcb_supply_config_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_pcb_supply_config_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_supply_config_delete(self, projectid, scenarioid, pcbinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_delete  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_delete(projectid, scenarioid, pcbinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_supply_config_delete_with_http_info(projectid, scenarioid, pcbinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_pcb_supply_config_delete_with_http_info(self, projectid, scenarioid, pcbinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_delete  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_delete_with_http_info(projectid, scenarioid, pcbinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_supply_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_pcb_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_pcb_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_pcb_supply_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_supply_config_list(self, projectid, scenarioid, pcbinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_list(projectid, scenarioid, pcbinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyInstConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_supply_config_list_with_http_info(projectid, scenarioid, pcbinstid, supplyid, **kwargs)  # noqa: E501

    def project_scenario_pcb_supply_config_list_with_http_info(self, projectid, scenarioid, pcbinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_list_with_http_info(projectid, scenarioid, pcbinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyInstConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_supply_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_supply_config_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_supply_config_list`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_supply_config_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_pcb_supply_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyInstConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_supply_config_read(self, projectid, scenarioid, pcbinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_read  # noqa: E501

        Get datasheet design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_read(projectid, scenarioid, pcbinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_supply_config_read_with_http_info(projectid, scenarioid, pcbinstid, supplyid, configid, **kwargs)  # noqa: E501

    def project_scenario_pcb_supply_config_read_with_http_info(self, projectid, scenarioid, pcbinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_read  # noqa: E501

        Get datasheet design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_read_with_http_info(projectid, scenarioid, pcbinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_supply_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_supply_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_supply_config_read`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_supply_config_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_pcb_supply_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_pcb_supply_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_supply_config_update(self, projectid, scenarioid, pcbinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_update  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_update(projectid, scenarioid, pcbinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_supply_config_update_with_http_info(projectid, scenarioid, pcbinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_pcb_supply_config_update_with_http_info(self, projectid, scenarioid, pcbinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_supply_config_update  # noqa: E501

        Create datasheet supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_supply_config_update_with_http_info(projectid, scenarioid, pcbinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_supply_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_supply_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_supply_config_update`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_supply_config_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_pcb_supply_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_pcb_supply_config_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_pcb_supply_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_pcb_update(self, projectid, scenarioid, pcbinstid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_update  # noqa: E501

        Update a datasheet PCB instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_update(projectid, scenarioid, pcbinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param PCBInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PCBInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_pcb_update_with_http_info(projectid, scenarioid, pcbinstid, data, **kwargs)  # noqa: E501

    def project_scenario_pcb_update_with_http_info(self, projectid, scenarioid, pcbinstid, data, **kwargs):  # noqa: E501
        """project_scenario_pcb_update  # noqa: E501

        Update a datasheet PCB instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_pcb_update_with_http_info(projectid, scenarioid, pcbinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int pcbinstid: (required)
        :param PCBInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PCBInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'pcbinstid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_pcb_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_pcb_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_pcb_update`")  # noqa: E501
        # verify the required parameter 'pcbinstid' is set
        if self.api_client.client_side_validation and ('pcbinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['pcbinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pcbinstid` when calling `project_scenario_pcb_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_pcb_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'pcbinstid' in local_var_params:
            path_params['pcbinstid'] = local_var_params['pcbinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PCBInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_power_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_power_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_power_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_power_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_power_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_power_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_powerdistribution_download_read(self, projectid, scenarioid, resolution, **kwargs):  # noqa: E501
        """project_scenario_powerdistribution_download_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_powerdistribution_download_read(projectid, scenarioid, resolution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int resolution: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_powerdistribution_download_read_with_http_info(projectid, scenarioid, resolution, **kwargs)  # noqa: E501

    def project_scenario_powerdistribution_download_read_with_http_info(self, projectid, scenarioid, resolution, **kwargs):  # noqa: E501
        """project_scenario_powerdistribution_download_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_powerdistribution_download_read_with_http_info(projectid, scenarioid, resolution, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int resolution: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'resolution'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_powerdistribution_download_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_powerdistribution_download_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_powerdistribution_download_read`")  # noqa: E501
        # verify the required parameter 'resolution' is set
        if self.api_client.client_side_validation and ('resolution' not in local_var_params or  # noqa: E501
                                                        local_var_params['resolution'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `resolution` when calling `project_scenario_powerdistribution_download_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'resolution' in local_var_params:
            path_params['resolution'] = local_var_params['resolution']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/powerdistribution/download/{resolution}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_read(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_read  # noqa: E501

        Get scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_read(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_read_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_read_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_read  # noqa: E501

        Get scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_read_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Scenario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_trend_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_trend_list  # noqa: E501

        Get a datasheet trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_trend_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_trend_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_trend_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_trend_list  # noqa: E501

        Get a datasheet trend  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_trend_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_trend_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_trend_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_trend_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/trend/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_update(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_update  # noqa: E501

        Update a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_update(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param Scenario data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Scenario
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_update_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_update_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_update  # noqa: E501

        Update a scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_update_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param Scenario data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Scenario, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scenario',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_update_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_update_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_update_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_update_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_update_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_update_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_version_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_version_list  # noqa: E501

        Get List of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_version_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ScenarioVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_version_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_version_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_version_list  # noqa: E501

        Get List of design versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_version_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ScenarioVersion], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_version_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_version_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/version/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScenarioVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_create(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_create  # noqa: E501

        Create scenario PC instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_create(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param VRInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VRInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_create_with_http_info(projectid, scenarioid, data, **kwargs)  # noqa: E501

    def project_scenario_vr_create_with_http_info(self, projectid, scenarioid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_create  # noqa: E501

        Create scenario PC instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_create_with_http_info(projectid, scenarioid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param VRInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VRInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_vr_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_delete(self, projectid, scenarioid, vrinstid, **kwargs):  # noqa: E501
        """project_scenario_vr_delete  # noqa: E501

        Delete a scenario VR instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_delete(projectid, scenarioid, vrinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_delete_with_http_info(projectid, scenarioid, vrinstid, **kwargs)  # noqa: E501

    def project_scenario_vr_delete_with_http_info(self, projectid, scenarioid, vrinstid, **kwargs):  # noqa: E501
        """project_scenario_vr_delete  # noqa: E501

        Delete a scenario VR instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_delete_with_http_info(projectid, scenarioid, vrinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_delete`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_list(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_vr_list  # noqa: E501

        Get scenario VRs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_list(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[VRInstance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_list_with_http_info(projectid, scenarioid, **kwargs)  # noqa: E501

    def project_scenario_vr_list_with_http_info(self, projectid, scenarioid, **kwargs):  # noqa: E501
        """project_scenario_vr_list  # noqa: E501

        Get scenario VRs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_list_with_http_info(projectid, scenarioid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[VRInstance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VRInstance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_power_list(self, projectid, scenarioid, vrinstid, **kwargs):  # noqa: E501
        """project_scenario_vr_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_power_list(projectid, scenarioid, vrinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_power_list_with_http_info(projectid, scenarioid, vrinstid, **kwargs)  # noqa: E501

    def project_scenario_vr_power_list_with_http_info(self, projectid, scenarioid, vrinstid, **kwargs):  # noqa: E501
        """project_scenario_vr_power_list  # noqa: E501

        Get project scenario power  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_power_list_with_http_info(projectid, scenarioid, vrinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_power_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_power_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_power_list`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_power_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/power/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_read(self, projectid, scenarioid, vrinstid, **kwargs):  # noqa: E501
        """project_scenario_vr_read  # noqa: E501

        Get a scenario VR  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_read(projectid, scenarioid, vrinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VRInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_read_with_http_info(projectid, scenarioid, vrinstid, **kwargs)  # noqa: E501

    def project_scenario_vr_read_with_http_info(self, projectid, scenarioid, vrinstid, **kwargs):  # noqa: E501
        """project_scenario_vr_read  # noqa: E501

        Get a scenario VR  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_read_with_http_info(projectid, scenarioid, vrinstid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VRInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_read`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_supply_config_create(self, projectid, scenarioid, vrinstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_create(projectid, scenarioid, vrinstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_supply_config_create_with_http_info(projectid, scenarioid, vrinstid, supplyid, data, **kwargs)  # noqa: E501

    def project_scenario_vr_supply_config_create_with_http_info(self, projectid, scenarioid, vrinstid, supplyid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_create  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_create_with_http_info(projectid, scenarioid, vrinstid, supplyid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_supply_config_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_supply_config_create`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_supply_config_create`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_supply_config_create`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_vr_supply_config_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_vr_supply_config_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_supply_config_delete(self, projectid, scenarioid, vrinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_delete(projectid, scenarioid, vrinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_supply_config_delete_with_http_info(projectid, scenarioid, vrinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_vr_supply_config_delete_with_http_info(self, projectid, scenarioid, vrinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_delete  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_delete_with_http_info(projectid, scenarioid, vrinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_supply_config_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_vr_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_vr_supply_config_delete`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_vr_supply_config_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_supply_config_list(self, projectid, scenarioid, vrinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_list(projectid, scenarioid, vrinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SupplyInstConfig]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_supply_config_list_with_http_info(projectid, scenarioid, vrinstid, supplyid, **kwargs)  # noqa: E501

    def project_scenario_vr_supply_config_list_with_http_info(self, projectid, scenarioid, vrinstid, supplyid, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_list  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_list_with_http_info(projectid, scenarioid, vrinstid, supplyid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SupplyInstConfig], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_supply_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_supply_config_list`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_supply_config_list`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_supply_config_list`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_vr_supply_config_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplyInstConfig]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_supply_config_read(self, projectid, scenarioid, vrinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_read(projectid, scenarioid, vrinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_supply_config_read_with_http_info(projectid, scenarioid, vrinstid, supplyid, configid, **kwargs)  # noqa: E501

    def project_scenario_vr_supply_config_read_with_http_info(self, projectid, scenarioid, vrinstid, supplyid, configid, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_read  # noqa: E501

        Get scenario design supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_read_with_http_info(projectid, scenarioid, vrinstid, supplyid, configid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyid',
            'configid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_supply_config_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_supply_config_read`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_supply_config_read`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_supply_config_read`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_vr_supply_config_read`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_vr_supply_config_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_supply_config_update(self, projectid, scenarioid, vrinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_update(projectid, scenarioid, vrinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SupplyInstConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_supply_config_update_with_http_info(projectid, scenarioid, vrinstid, supplyid, configid, data, **kwargs)  # noqa: E501

    def project_scenario_vr_supply_config_update_with_http_info(self, projectid, scenarioid, vrinstid, supplyid, configid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_supply_config_update  # noqa: E501

        Create scenario supply data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_supply_config_update_with_http_info(projectid, scenarioid, vrinstid, supplyid, configid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param int supplyid: (required)
        :param int configid: (required)
        :param SupplyInstConfig data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SupplyInstConfig, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'supplyid',
            'configid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_supply_config_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_supply_config_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_supply_config_update`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_supply_config_update`")  # noqa: E501
        # verify the required parameter 'supplyid' is set
        if self.api_client.client_side_validation and ('supplyid' not in local_var_params or  # noqa: E501
                                                        local_var_params['supplyid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `supplyid` when calling `project_scenario_vr_supply_config_update`")  # noqa: E501
        # verify the required parameter 'configid' is set
        if self.api_client.client_side_validation and ('configid' not in local_var_params or  # noqa: E501
                                                        local_var_params['configid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `configid` when calling `project_scenario_vr_supply_config_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_vr_supply_config_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501
        if 'supplyid' in local_var_params:
            path_params['supplyid'] = local_var_params['supplyid']  # noqa: E501
        if 'configid' in local_var_params:
            path_params['configid'] = local_var_params['configid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplyInstConfig',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_scenario_vr_update(self, projectid, scenarioid, vrinstid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_update  # noqa: E501

        Update a scenario VR instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_update(projectid, scenarioid, vrinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param VRInstance data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VRInstance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_scenario_vr_update_with_http_info(projectid, scenarioid, vrinstid, data, **kwargs)  # noqa: E501

    def project_scenario_vr_update_with_http_info(self, projectid, scenarioid, vrinstid, data, **kwargs):  # noqa: E501
        """project_scenario_vr_update  # noqa: E501

        Update a scenario VR instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_scenario_vr_update_with_http_info(projectid, scenarioid, vrinstid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int scenarioid: (required)
        :param int vrinstid: (required)
        :param VRInstance data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VRInstance, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'scenarioid',
            'vrinstid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_scenario_vr_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_scenario_vr_update`")  # noqa: E501
        # verify the required parameter 'scenarioid' is set
        if self.api_client.client_side_validation and ('scenarioid' not in local_var_params or  # noqa: E501
                                                        local_var_params['scenarioid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenarioid` when calling `project_scenario_vr_update`")  # noqa: E501
        # verify the required parameter 'vrinstid' is set
        if self.api_client.client_side_validation and ('vrinstid' not in local_var_params or  # noqa: E501
                                                        local_var_params['vrinstid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `vrinstid` when calling `project_scenario_vr_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_scenario_vr_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'scenarioid' in local_var_params:
            path_params['scenarioid'] = local_var_params['scenarioid']  # noqa: E501
        if 'vrinstid' in local_var_params:
            path_params['vrinstid'] = local_var_params['vrinstid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VRInstance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_clone_create(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_clone_create  # noqa: E501

        Clone a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_clone_create(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_clone_create_with_http_info(projectid, simid, **kwargs)  # noqa: E501

    def project_simulation_clone_create_with_http_info(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_clone_create  # noqa: E501

        Clone a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_clone_create_with_http_info(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_clone_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_clone_create`")  # noqa: E501
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `project_simulation_clone_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/{simid}/clone/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_create(self, projectid, data, **kwargs):  # noqa: E501
        """project_simulation_create  # noqa: E501

        Create a new simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_create(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param SimMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SimMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_create_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_simulation_create_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_simulation_create  # noqa: E501

        Create a new simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_create_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param SimMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SimMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_simulation_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SimMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_delete(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_delete  # noqa: E501

        Delete a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_delete(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_delete_with_http_info(projectid, simid, **kwargs)  # noqa: E501

    def project_simulation_delete_with_http_info(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_delete  # noqa: E501

        Delete a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_delete_with_http_info(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_delete`")  # noqa: E501
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `project_simulation_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/{simid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_list(self, projectid, **kwargs):  # noqa: E501
        """project_simulation_list  # noqa: E501

        Get list of simulations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SimMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_simulation_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_simulation_list  # noqa: E501

        Get list of simulations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SimMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SimMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_read(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_read  # noqa: E501

        Get list of simulations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_read(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[SimMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_read_with_http_info(projectid, simid, **kwargs)  # noqa: E501

    def project_simulation_read_with_http_info(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_read  # noqa: E501

        Get list of simulations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_read_with_http_info(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[SimMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_read`")  # noqa: E501
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `project_simulation_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/{simid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SimMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_update(self, projectid, simid, data, **kwargs):  # noqa: E501
        """project_simulation_update  # noqa: E501

        Update a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_update(projectid, simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param SimMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SimMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_update_with_http_info(projectid, simid, data, **kwargs)  # noqa: E501

    def project_simulation_update_with_http_info(self, projectid, simid, data, **kwargs):  # noqa: E501
        """project_simulation_update  # noqa: E501

        Update a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_update_with_http_info(projectid, simid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param SimMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SimMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'simid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_update`")  # noqa: E501
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `project_simulation_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_simulation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/{simid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_simulation_update_list(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_update_list(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_simulation_update_list_with_http_info(projectid, simid, **kwargs)  # noqa: E501

    def project_simulation_update_list_with_http_info(self, projectid, simid, **kwargs):  # noqa: E501
        """project_simulation_update_list  # noqa: E501

        Returns an array of [current, last update] times  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_simulation_update_list_with_http_info(projectid, simid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int simid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'simid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_simulation_update_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_simulation_update_list`")  # noqa: E501
        # verify the required parameter 'simid' is set
        if self.api_client.client_side_validation and ('simid' not in local_var_params or  # noqa: E501
                                                        local_var_params['simid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `simid` when calling `project_simulation_update_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'simid' in local_var_params:
            path_params['simid'] = local_var_params['simid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/simulation/{simid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_update(self, projectid, data, **kwargs):  # noqa: E501
        """project_update  # noqa: E501

        Update a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param Project data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Project
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_update_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_update_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_update  # noqa: E501

        Update a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param Project data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Project, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Project',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_update_times(self, projectid, **kwargs):  # noqa: E501
        """project_update_times  # noqa: E501

        Returns an array of {current, last update} times for current project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update_times(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_update_times_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_update_times_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_update_times  # noqa: E501

        Returns an array of {current, last update} times for current project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_update_times_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_update_times" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_update_times`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_verilog_create(self, projectid, **kwargs):  # noqa: E501
        """project_verilog_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_verilog_create(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_verilog_create_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_verilog_create_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_verilog_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_verilog_create_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_verilog_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_verilog_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/verilog/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_wire_load_create(self, projectid, data, **kwargs):  # noqa: E501
        """project_wire_load_create  # noqa: E501

        Create a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_create(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param WLMMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WLMMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_wire_load_create_with_http_info(projectid, data, **kwargs)  # noqa: E501

    def project_wire_load_create_with_http_info(self, projectid, data, **kwargs):  # noqa: E501
        """project_wire_load_create  # noqa: E501

        Create a contributor devices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_create_with_http_info(projectid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param WLMMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WLMMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_wire_load_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_wire_load_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_wire_load_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/wire_load/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WLMMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_wire_load_delete(self, projectid, wlmid, **kwargs):  # noqa: E501
        """project_wire_load_delete  # noqa: E501

        Delete wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_delete(projectid, wlmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int wlmid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_wire_load_delete_with_http_info(projectid, wlmid, **kwargs)  # noqa: E501

    def project_wire_load_delete_with_http_info(self, projectid, wlmid, **kwargs):  # noqa: E501
        """project_wire_load_delete  # noqa: E501

        Delete wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_delete_with_http_info(projectid, wlmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int wlmid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'wlmid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_wire_load_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_wire_load_delete`")  # noqa: E501
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `project_wire_load_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/wire_load/{wlmid}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_wire_load_list(self, projectid, **kwargs):  # noqa: E501
        """project_wire_load_list  # noqa: E501

        Get list of wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_list(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[WLMMaster]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_wire_load_list_with_http_info(projectid, **kwargs)  # noqa: E501

    def project_wire_load_list_with_http_info(self, projectid, **kwargs):  # noqa: E501
        """project_wire_load_list  # noqa: E501

        Get list of wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_list_with_http_info(projectid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[WLMMaster], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_wire_load_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_wire_load_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/wire_load/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WLMMaster]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_wire_load_read(self, projectid, wlmid, **kwargs):  # noqa: E501
        """project_wire_load_read  # noqa: E501

        Get wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_read(projectid, wlmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int wlmid: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WLMMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_wire_load_read_with_http_info(projectid, wlmid, **kwargs)  # noqa: E501

    def project_wire_load_read_with_http_info(self, projectid, wlmid, **kwargs):  # noqa: E501
        """project_wire_load_read  # noqa: E501

        Get wire load data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_read_with_http_info(projectid, wlmid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int wlmid: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WLMMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'wlmid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_wire_load_read" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_wire_load_read`")  # noqa: E501
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `project_wire_load_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/wire_load/{wlmid}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WLMMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def project_wire_load_update(self, projectid, wlmid, data, **kwargs):  # noqa: E501
        """project_wire_load_update  # noqa: E501

        Update wireload data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_update(projectid, wlmid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int wlmid: (required)
        :param WLMMaster data: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: WLMMaster
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.project_wire_load_update_with_http_info(projectid, wlmid, data, **kwargs)  # noqa: E501

    def project_wire_load_update_with_http_info(self, projectid, wlmid, data, **kwargs):  # noqa: E501
        """project_wire_load_update  # noqa: E501

        Update wireload data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.project_wire_load_update_with_http_info(projectid, wlmid, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int projectid: (required)
        :param int wlmid: (required)
        :param WLMMaster data: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(WLMMaster, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'projectid',
            'wlmid',
            'data'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method project_wire_load_update" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'projectid' is set
        if self.api_client.client_side_validation and ('projectid' not in local_var_params or  # noqa: E501
                                                        local_var_params['projectid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `projectid` when calling `project_wire_load_update`")  # noqa: E501
        # verify the required parameter 'wlmid' is set
        if self.api_client.client_side_validation and ('wlmid' not in local_var_params or  # noqa: E501
                                                        local_var_params['wlmid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `wlmid` when calling `project_wire_load_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if self.api_client.client_side_validation and ('data' not in local_var_params or  # noqa: E501
                                                        local_var_params['data'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `data` when calling `project_wire_load_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'projectid' in local_var_params:
            path_params['projectid'] = local_var_params['projectid']  # noqa: E501
        if 'wlmid' in local_var_params:
            path_params['wlmid'] = local_var_params['wlmid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in local_var_params:
            body_params = local_var_params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/{projectid}/wire_load/{wlmid}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WLMMaster',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def projects_update_times(self, **kwargs):  # noqa: E501
        """projects_update_times  # noqa: E501

        Returns an array of {current, last update} times for all projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_update_times(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UpdateData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.projects_update_times_with_http_info(**kwargs)  # noqa: E501

    def projects_update_times_with_http_info(self, **kwargs):  # noqa: E501
        """projects_update_times  # noqa: E501

        Returns an array of {current, last update} times for all projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.projects_update_times_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UpdateData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method projects_update_times" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/project/update/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
