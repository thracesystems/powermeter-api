# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class ComputedVR(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vin': 'float',
        'vout': 'float',
        'iload': 'float',
        'iq': 'float',
        'iin': 'float',
        'efficiency': 'float',
        'power': 'float'
    }

    attribute_map = {
        'vin': 'Vin',
        'vout': 'Vout',
        'iload': 'Iload',
        'iq': 'Iq',
        'iin': 'Iin',
        'efficiency': 'efficiency',
        'power': 'power'
    }

    def __init__(self, vin=None, vout=None, iload=None, iq=None, iin=None, efficiency=None, power=None, local_vars_configuration=None):  # noqa: E501
        """ComputedVR - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vin = None
        self._vout = None
        self._iload = None
        self._iq = None
        self._iin = None
        self._efficiency = None
        self._power = None
        self.discriminator = None

        if vin is not None:
            self.vin = vin
        if vout is not None:
            self.vout = vout
        if iload is not None:
            self.iload = iload
        if iq is not None:
            self.iq = iq
        if iin is not None:
            self.iin = iin
        if efficiency is not None:
            self.efficiency = efficiency
        if power is not None:
            self.power = power

    @property
    def vin(self):
        """Gets the vin of this ComputedVR.  # noqa: E501


        :return: The vin of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this ComputedVR.


        :param vin: The vin of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._vin = vin

    @property
    def vout(self):
        """Gets the vout of this ComputedVR.  # noqa: E501


        :return: The vout of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._vout

    @vout.setter
    def vout(self, vout):
        """Sets the vout of this ComputedVR.


        :param vout: The vout of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._vout = vout

    @property
    def iload(self):
        """Gets the iload of this ComputedVR.  # noqa: E501


        :return: The iload of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._iload

    @iload.setter
    def iload(self, iload):
        """Sets the iload of this ComputedVR.


        :param iload: The iload of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._iload = iload

    @property
    def iq(self):
        """Gets the iq of this ComputedVR.  # noqa: E501


        :return: The iq of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._iq

    @iq.setter
    def iq(self, iq):
        """Sets the iq of this ComputedVR.


        :param iq: The iq of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._iq = iq

    @property
    def iin(self):
        """Gets the iin of this ComputedVR.  # noqa: E501


        :return: The iin of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._iin

    @iin.setter
    def iin(self, iin):
        """Sets the iin of this ComputedVR.


        :param iin: The iin of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._iin = iin

    @property
    def efficiency(self):
        """Gets the efficiency of this ComputedVR.  # noqa: E501


        :return: The efficiency of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._efficiency

    @efficiency.setter
    def efficiency(self, efficiency):
        """Sets the efficiency of this ComputedVR.


        :param efficiency: The efficiency of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._efficiency = efficiency

    @property
    def power(self):
        """Gets the power of this ComputedVR.  # noqa: E501


        :return: The power of this ComputedVR.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ComputedVR.


        :param power: The power of this ComputedVR.  # noqa: E501
        :type: float
        """

        self._power = power

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputedVR):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputedVR):
            return True

        return self.to_dict() != other.to_dict()
