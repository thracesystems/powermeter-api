# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class DesignTrend(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'excluded_data_ids': 'list[int]',
        'fields': 'str',
        'filter': 'str',
        'title': 'str',
        'subtitle': 'str',
        'xaxistype': 'str',
        'xaxisfield': 'str',
        'xaxislabel': 'str',
        'minx': 'float',
        'maxx': 'float',
        'yaxisfield': 'str',
        'yaxislabel': 'str',
        'miny': 'float',
        'maxy': 'float',
        'linetype': 'str'
    }

    attribute_map = {
        'id': 'id',
        'excluded_data_ids': 'excludedDataIds',
        'fields': 'fields',
        'filter': 'filter',
        'title': 'title',
        'subtitle': 'subtitle',
        'xaxistype': 'xaxistype',
        'xaxisfield': 'xaxisfield',
        'xaxislabel': 'xaxislabel',
        'minx': 'minx',
        'maxx': 'maxx',
        'yaxisfield': 'yaxisfield',
        'yaxislabel': 'yaxislabel',
        'miny': 'miny',
        'maxy': 'maxy',
        'linetype': 'linetype'
    }

    def __init__(self, id=None, excluded_data_ids=None, fields=None, filter=None, title=None, subtitle=None, xaxistype=None, xaxisfield=None, xaxislabel=None, minx=None, maxx=None, yaxisfield=None, yaxislabel=None, miny=None, maxy=None, linetype=None, local_vars_configuration=None):  # noqa: E501
        """DesignTrend - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._excluded_data_ids = None
        self._fields = None
        self._filter = None
        self._title = None
        self._subtitle = None
        self._xaxistype = None
        self._xaxisfield = None
        self._xaxislabel = None
        self._minx = None
        self._maxx = None
        self._yaxisfield = None
        self._yaxislabel = None
        self._miny = None
        self._maxy = None
        self._linetype = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.excluded_data_ids = excluded_data_ids
        self.fields = fields
        self.filter = filter
        self.title = title
        self.subtitle = subtitle
        if xaxistype is not None:
            self.xaxistype = xaxistype
        self.xaxisfield = xaxisfield
        self.xaxislabel = xaxislabel
        self.minx = minx
        self.maxx = maxx
        self.yaxisfield = yaxisfield
        self.yaxislabel = yaxislabel
        self.miny = miny
        self.maxy = maxy
        self.linetype = linetype

    @property
    def id(self):
        """Gets the id of this DesignTrend.  # noqa: E501


        :return: The id of this DesignTrend.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DesignTrend.


        :param id: The id of this DesignTrend.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def excluded_data_ids(self):
        """Gets the excluded_data_ids of this DesignTrend.  # noqa: E501


        :return: The excluded_data_ids of this DesignTrend.  # noqa: E501
        :rtype: list[int]
        """
        return self._excluded_data_ids

    @excluded_data_ids.setter
    def excluded_data_ids(self, excluded_data_ids):
        """Sets the excluded_data_ids of this DesignTrend.


        :param excluded_data_ids: The excluded_data_ids of this DesignTrend.  # noqa: E501
        :type: list[int]
        """

        self._excluded_data_ids = excluded_data_ids

    @property
    def fields(self):
        """Gets the fields of this DesignTrend.  # noqa: E501


        :return: The fields of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this DesignTrend.


        :param fields: The fields of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._fields = fields

    @property
    def filter(self):
        """Gets the filter of this DesignTrend.  # noqa: E501


        :return: The filter of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DesignTrend.


        :param filter: The filter of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def title(self):
        """Gets the title of this DesignTrend.  # noqa: E501


        :return: The title of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DesignTrend.


        :param title: The title of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def subtitle(self):
        """Gets the subtitle of this DesignTrend.  # noqa: E501


        :return: The subtitle of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this DesignTrend.


        :param subtitle: The subtitle of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._subtitle = subtitle

    @property
    def xaxistype(self):
        """Gets the xaxistype of this DesignTrend.  # noqa: E501


        :return: The xaxistype of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._xaxistype

    @xaxistype.setter
    def xaxistype(self, xaxistype):
        """Sets the xaxistype of this DesignTrend.


        :param xaxistype: The xaxistype of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._xaxistype = xaxistype

    @property
    def xaxisfield(self):
        """Gets the xaxisfield of this DesignTrend.  # noqa: E501


        :return: The xaxisfield of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._xaxisfield

    @xaxisfield.setter
    def xaxisfield(self, xaxisfield):
        """Sets the xaxisfield of this DesignTrend.


        :param xaxisfield: The xaxisfield of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._xaxisfield = xaxisfield

    @property
    def xaxislabel(self):
        """Gets the xaxislabel of this DesignTrend.  # noqa: E501


        :return: The xaxislabel of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._xaxislabel

    @xaxislabel.setter
    def xaxislabel(self, xaxislabel):
        """Sets the xaxislabel of this DesignTrend.


        :param xaxislabel: The xaxislabel of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._xaxislabel = xaxislabel

    @property
    def minx(self):
        """Gets the minx of this DesignTrend.  # noqa: E501


        :return: The minx of this DesignTrend.  # noqa: E501
        :rtype: float
        """
        return self._minx

    @minx.setter
    def minx(self, minx):
        """Sets the minx of this DesignTrend.


        :param minx: The minx of this DesignTrend.  # noqa: E501
        :type: float
        """

        self._minx = minx

    @property
    def maxx(self):
        """Gets the maxx of this DesignTrend.  # noqa: E501


        :return: The maxx of this DesignTrend.  # noqa: E501
        :rtype: float
        """
        return self._maxx

    @maxx.setter
    def maxx(self, maxx):
        """Sets the maxx of this DesignTrend.


        :param maxx: The maxx of this DesignTrend.  # noqa: E501
        :type: float
        """

        self._maxx = maxx

    @property
    def yaxisfield(self):
        """Gets the yaxisfield of this DesignTrend.  # noqa: E501


        :return: The yaxisfield of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._yaxisfield

    @yaxisfield.setter
    def yaxisfield(self, yaxisfield):
        """Sets the yaxisfield of this DesignTrend.


        :param yaxisfield: The yaxisfield of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._yaxisfield = yaxisfield

    @property
    def yaxislabel(self):
        """Gets the yaxislabel of this DesignTrend.  # noqa: E501


        :return: The yaxislabel of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._yaxislabel

    @yaxislabel.setter
    def yaxislabel(self, yaxislabel):
        """Sets the yaxislabel of this DesignTrend.


        :param yaxislabel: The yaxislabel of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._yaxislabel = yaxislabel

    @property
    def miny(self):
        """Gets the miny of this DesignTrend.  # noqa: E501


        :return: The miny of this DesignTrend.  # noqa: E501
        :rtype: float
        """
        return self._miny

    @miny.setter
    def miny(self, miny):
        """Sets the miny of this DesignTrend.


        :param miny: The miny of this DesignTrend.  # noqa: E501
        :type: float
        """

        self._miny = miny

    @property
    def maxy(self):
        """Gets the maxy of this DesignTrend.  # noqa: E501


        :return: The maxy of this DesignTrend.  # noqa: E501
        :rtype: float
        """
        return self._maxy

    @maxy.setter
    def maxy(self, maxy):
        """Sets the maxy of this DesignTrend.


        :param maxy: The maxy of this DesignTrend.  # noqa: E501
        :type: float
        """

        self._maxy = maxy

    @property
    def linetype(self):
        """Gets the linetype of this DesignTrend.  # noqa: E501


        :return: The linetype of this DesignTrend.  # noqa: E501
        :rtype: str
        """
        return self._linetype

    @linetype.setter
    def linetype(self, linetype):
        """Sets the linetype of this DesignTrend.


        :param linetype: The linetype of this DesignTrend.  # noqa: E501
        :type: str
        """

        self._linetype = linetype

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesignTrend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesignTrend):
            return True

        return self.to_dict() != other.to_dict()
