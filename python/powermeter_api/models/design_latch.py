# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class DesignLatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'var1': 'str',
        'var2': 'str',
        'bits': 'int',
        'enable': 'str',
        'data_in': 'str',
        'clear': 'str',
        'preset': 'str',
        'clear_preset_var1': 'str',
        'clear_preset_var2': 'str',
        'power_down_function': 'str'
    }

    attribute_map = {
        'id': 'id',
        'var1': 'var1',
        'var2': 'var2',
        'bits': 'bits',
        'enable': 'enable',
        'data_in': 'data_in',
        'clear': 'clear',
        'preset': 'preset',
        'clear_preset_var1': 'clear_preset_var1',
        'clear_preset_var2': 'clear_preset_var2',
        'power_down_function': 'power_down_function'
    }

    def __init__(self, id=None, var1=None, var2=None, bits=None, enable=None, data_in=None, clear=None, preset=None, clear_preset_var1=None, clear_preset_var2=None, power_down_function=None, local_vars_configuration=None):  # noqa: E501
        """DesignLatch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._var1 = None
        self._var2 = None
        self._bits = None
        self._enable = None
        self._data_in = None
        self._clear = None
        self._preset = None
        self._clear_preset_var1 = None
        self._clear_preset_var2 = None
        self._power_down_function = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.var1 = var1
        self.var2 = var2
        self.bits = bits
        self.enable = enable
        self.data_in = data_in
        self.clear = clear
        self.preset = preset
        self.clear_preset_var1 = clear_preset_var1
        self.clear_preset_var2 = clear_preset_var2
        self.power_down_function = power_down_function

    @property
    def id(self):
        """Gets the id of this DesignLatch.  # noqa: E501


        :return: The id of this DesignLatch.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DesignLatch.


        :param id: The id of this DesignLatch.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def var1(self):
        """Gets the var1 of this DesignLatch.  # noqa: E501


        :return: The var1 of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._var1

    @var1.setter
    def var1(self, var1):
        """Sets the var1 of this DesignLatch.


        :param var1: The var1 of this DesignLatch.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and var1 is None:  # noqa: E501
            raise ValueError("Invalid value for `var1`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                var1 is not None and len(var1) < 1):
            raise ValueError("Invalid value for `var1`, length must be greater than or equal to `1`")  # noqa: E501

        self._var1 = var1

    @property
    def var2(self):
        """Gets the var2 of this DesignLatch.  # noqa: E501


        :return: The var2 of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._var2

    @var2.setter
    def var2(self, var2):
        """Sets the var2 of this DesignLatch.


        :param var2: The var2 of this DesignLatch.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and var2 is None:  # noqa: E501
            raise ValueError("Invalid value for `var2`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                var2 is not None and len(var2) < 1):
            raise ValueError("Invalid value for `var2`, length must be greater than or equal to `1`")  # noqa: E501

        self._var2 = var2

    @property
    def bits(self):
        """Gets the bits of this DesignLatch.  # noqa: E501


        :return: The bits of this DesignLatch.  # noqa: E501
        :rtype: int
        """
        return self._bits

    @bits.setter
    def bits(self, bits):
        """Sets the bits of this DesignLatch.


        :param bits: The bits of this DesignLatch.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                bits is not None and bits > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `bits`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bits is not None and bits < 0):  # noqa: E501
            raise ValueError("Invalid value for `bits`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bits = bits

    @property
    def enable(self):
        """Gets the enable of this DesignLatch.  # noqa: E501


        :return: The enable of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this DesignLatch.


        :param enable: The enable of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                enable is not None and len(enable) < 1):
            raise ValueError("Invalid value for `enable`, length must be greater than or equal to `1`")  # noqa: E501

        self._enable = enable

    @property
    def data_in(self):
        """Gets the data_in of this DesignLatch.  # noqa: E501


        :return: The data_in of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._data_in

    @data_in.setter
    def data_in(self, data_in):
        """Sets the data_in of this DesignLatch.


        :param data_in: The data_in of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                data_in is not None and len(data_in) < 1):
            raise ValueError("Invalid value for `data_in`, length must be greater than or equal to `1`")  # noqa: E501

        self._data_in = data_in

    @property
    def clear(self):
        """Gets the clear of this DesignLatch.  # noqa: E501


        :return: The clear of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._clear

    @clear.setter
    def clear(self, clear):
        """Sets the clear of this DesignLatch.


        :param clear: The clear of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                clear is not None and len(clear) < 1):
            raise ValueError("Invalid value for `clear`, length must be greater than or equal to `1`")  # noqa: E501

        self._clear = clear

    @property
    def preset(self):
        """Gets the preset of this DesignLatch.  # noqa: E501


        :return: The preset of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this DesignLatch.


        :param preset: The preset of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                preset is not None and len(preset) < 1):
            raise ValueError("Invalid value for `preset`, length must be greater than or equal to `1`")  # noqa: E501

        self._preset = preset

    @property
    def clear_preset_var1(self):
        """Gets the clear_preset_var1 of this DesignLatch.  # noqa: E501


        :return: The clear_preset_var1 of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._clear_preset_var1

    @clear_preset_var1.setter
    def clear_preset_var1(self, clear_preset_var1):
        """Sets the clear_preset_var1 of this DesignLatch.


        :param clear_preset_var1: The clear_preset_var1 of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                clear_preset_var1 is not None and len(clear_preset_var1) < 1):
            raise ValueError("Invalid value for `clear_preset_var1`, length must be greater than or equal to `1`")  # noqa: E501

        self._clear_preset_var1 = clear_preset_var1

    @property
    def clear_preset_var2(self):
        """Gets the clear_preset_var2 of this DesignLatch.  # noqa: E501


        :return: The clear_preset_var2 of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._clear_preset_var2

    @clear_preset_var2.setter
    def clear_preset_var2(self, clear_preset_var2):
        """Sets the clear_preset_var2 of this DesignLatch.


        :param clear_preset_var2: The clear_preset_var2 of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                clear_preset_var2 is not None and len(clear_preset_var2) < 1):
            raise ValueError("Invalid value for `clear_preset_var2`, length must be greater than or equal to `1`")  # noqa: E501

        self._clear_preset_var2 = clear_preset_var2

    @property
    def power_down_function(self):
        """Gets the power_down_function of this DesignLatch.  # noqa: E501


        :return: The power_down_function of this DesignLatch.  # noqa: E501
        :rtype: str
        """
        return self._power_down_function

    @power_down_function.setter
    def power_down_function(self, power_down_function):
        """Sets the power_down_function of this DesignLatch.


        :param power_down_function: The power_down_function of this DesignLatch.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                power_down_function is not None and len(power_down_function) < 1):
            raise ValueError("Invalid value for `power_down_function`, length must be greater than or equal to `1`")  # noqa: E501

        self._power_down_function = power_down_function

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesignLatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesignLatch):
            return True

        return self.to_dict() != other.to_dict()
