# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Instance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'count': 'str',
        'origin_x': 'float',
        'origin_y': 'float',
        'orientation': 'str',
        'color': 'str',
        'computed_color': 'str',
        'master': 'int',
        'master_name': 'str',
        'master_master': 'int',
        'master_latest_commit': 'int',
        'rename_on_conflict': 'bool',
        'modes': 'list[InstanceMode]',
        'outline': 'str',
        'area': 'float',
        'supplies': 'list[InstanceSupply]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'count': 'count',
        'origin_x': 'origin_x',
        'origin_y': 'origin_y',
        'orientation': 'orientation',
        'color': 'color',
        'computed_color': 'computed_color',
        'master': 'master',
        'master_name': 'master_name',
        'master_master': 'master_master',
        'master_latest_commit': 'master_latest_commit',
        'rename_on_conflict': 'rename_on_conflict',
        'modes': 'modes',
        'outline': 'outline',
        'area': 'area',
        'supplies': 'supplies'
    }

    def __init__(self, id=None, name=None, count=None, origin_x=None, origin_y=None, orientation=None, color=None, computed_color=None, master=None, master_name=None, master_master=None, master_latest_commit=None, rename_on_conflict=None, modes=None, outline=None, area=None, supplies=None, local_vars_configuration=None):  # noqa: E501
        """Instance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._count = None
        self._origin_x = None
        self._origin_y = None
        self._orientation = None
        self._color = None
        self._computed_color = None
        self._master = None
        self._master_name = None
        self._master_master = None
        self._master_latest_commit = None
        self._rename_on_conflict = None
        self._modes = None
        self._outline = None
        self._area = None
        self._supplies = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if count is not None:
            self.count = count
        self.origin_x = origin_x
        self.origin_y = origin_y
        self.orientation = orientation
        self.color = color
        if computed_color is not None:
            self.computed_color = computed_color
        self.master = master
        if master_name is not None:
            self.master_name = master_name
        if master_master is not None:
            self.master_master = master_master
        if master_latest_commit is not None:
            self.master_latest_commit = master_latest_commit
        if rename_on_conflict is not None:
            self.rename_on_conflict = rename_on_conflict
        self.modes = modes
        if outline is not None:
            self.outline = outline
        if area is not None:
            self.area = area
        if supplies is not None:
            self.supplies = supplies

    @property
    def id(self):
        """Gets the id of this Instance.  # noqa: E501


        :return: The id of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instance.


        :param id: The id of this Instance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Instance.  # noqa: E501


        :return: The name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.


        :param name: The name of this Instance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def count(self):
        """Gets the count of this Instance.  # noqa: E501


        :return: The count of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Instance.


        :param count: The count of this Instance.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                count is not None and len(count) < 1):
            raise ValueError("Invalid value for `count`, length must be greater than or equal to `1`")  # noqa: E501

        self._count = count

    @property
    def origin_x(self):
        """Gets the origin_x of this Instance.  # noqa: E501


        :return: The origin_x of this Instance.  # noqa: E501
        :rtype: float
        """
        return self._origin_x

    @origin_x.setter
    def origin_x(self, origin_x):
        """Sets the origin_x of this Instance.


        :param origin_x: The origin_x of this Instance.  # noqa: E501
        :type: float
        """

        self._origin_x = origin_x

    @property
    def origin_y(self):
        """Gets the origin_y of this Instance.  # noqa: E501


        :return: The origin_y of this Instance.  # noqa: E501
        :rtype: float
        """
        return self._origin_y

    @origin_y.setter
    def origin_y(self, origin_y):
        """Sets the origin_y of this Instance.


        :param origin_y: The origin_y of this Instance.  # noqa: E501
        :type: float
        """

        self._origin_y = origin_y

    @property
    def orientation(self):
        """Gets the orientation of this Instance.  # noqa: E501


        :return: The orientation of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this Instance.


        :param orientation: The orientation of this Instance.  # noqa: E501
        :type: str
        """
        allowed_values = [None,"N", "E", "W", "S", "FN", "FS", "FE", "FW"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and orientation not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"  # noqa: E501
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def color(self):
        """Gets the color of this Instance.  # noqa: E501


        :return: The color of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Instance.


        :param color: The color of this Instance.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                color is not None and len(color) < 1):
            raise ValueError("Invalid value for `color`, length must be greater than or equal to `1`")  # noqa: E501

        self._color = color

    @property
    def computed_color(self):
        """Gets the computed_color of this Instance.  # noqa: E501


        :return: The computed_color of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._computed_color

    @computed_color.setter
    def computed_color(self, computed_color):
        """Sets the computed_color of this Instance.


        :param computed_color: The computed_color of this Instance.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                computed_color is not None and len(computed_color) < 1):
            raise ValueError("Invalid value for `computed_color`, length must be greater than or equal to `1`")  # noqa: E501

        self._computed_color = computed_color

    @property
    def master(self):
        """Gets the master of this Instance.  # noqa: E501


        :return: The master of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this Instance.


        :param master: The master of this Instance.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and master is None:  # noqa: E501
            raise ValueError("Invalid value for `master`, must not be `None`")  # noqa: E501

        self._master = master

    @property
    def master_name(self):
        """Gets the master_name of this Instance.  # noqa: E501


        :return: The master_name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._master_name

    @master_name.setter
    def master_name(self, master_name):
        """Sets the master_name of this Instance.


        :param master_name: The master_name of this Instance.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                master_name is not None and len(master_name) < 1):
            raise ValueError("Invalid value for `master_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._master_name = master_name

    @property
    def master_master(self):
        """Gets the master_master of this Instance.  # noqa: E501


        :return: The master_master of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._master_master

    @master_master.setter
    def master_master(self, master_master):
        """Sets the master_master of this Instance.


        :param master_master: The master_master of this Instance.  # noqa: E501
        :type: int
        """

        self._master_master = master_master

    @property
    def master_latest_commit(self):
        """Gets the master_latest_commit of this Instance.  # noqa: E501


        :return: The master_latest_commit of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._master_latest_commit

    @master_latest_commit.setter
    def master_latest_commit(self, master_latest_commit):
        """Sets the master_latest_commit of this Instance.


        :param master_latest_commit: The master_latest_commit of this Instance.  # noqa: E501
        :type: int
        """

        self._master_latest_commit = master_latest_commit

    @property
    def rename_on_conflict(self):
        """Gets the rename_on_conflict of this Instance.  # noqa: E501


        :return: The rename_on_conflict of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._rename_on_conflict

    @rename_on_conflict.setter
    def rename_on_conflict(self, rename_on_conflict):
        """Sets the rename_on_conflict of this Instance.


        :param rename_on_conflict: The rename_on_conflict of this Instance.  # noqa: E501
        :type: bool
        """

        self._rename_on_conflict = rename_on_conflict

    @property
    def modes(self):
        """Gets the modes of this Instance.  # noqa: E501


        :return: The modes of this Instance.  # noqa: E501
        :rtype: list[InstanceMode]
        """
        return self._modes

    @modes.setter
    def modes(self, modes):
        """Sets the modes of this Instance.


        :param modes: The modes of this Instance.  # noqa: E501
        :type: list[InstanceMode]
        """
        if self.local_vars_configuration.client_side_validation and modes is None:  # noqa: E501
            raise ValueError("Invalid value for `modes`, must not be `None`")  # noqa: E501

        self._modes = modes

    @property
    def outline(self):
        """Gets the outline of this Instance.  # noqa: E501


        :return: The outline of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._outline

    @outline.setter
    def outline(self, outline):
        """Sets the outline of this Instance.


        :param outline: The outline of this Instance.  # noqa: E501
        :type: str
        """

        self._outline = outline

    @property
    def area(self):
        """Gets the area of this Instance.  # noqa: E501


        :return: The area of this Instance.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Instance.


        :param area: The area of this Instance.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def supplies(self):
        """Gets the supplies of this Instance.  # noqa: E501


        :return: The supplies of this Instance.  # noqa: E501
        :rtype: list[InstanceSupply]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies):
        """Sets the supplies of this Instance.


        :param supplies: The supplies of this Instance.  # noqa: E501
        :type: list[InstanceSupply]
        """

        self._supplies = supplies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Instance):
            return True

        return self.to_dict() != other.to_dict()
