# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Hier(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'id': 'str',
        'instance': 'bool',
        'group': 'bool',
        'children': 'list[str]',
        'is_open': 'bool',
        'color': 'str',
        'parent': 'int'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'instance': 'instance',
        'group': 'group',
        'children': 'children',
        'is_open': 'is_open',
        'color': 'color',
        'parent': 'parent'
    }

    def __init__(self, name=None, id=None, instance=None, group=None, children=None, is_open=None, color=None, parent=None, local_vars_configuration=None):  # noqa: E501
        """Hier - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._id = None
        self._instance = None
        self._group = None
        self._children = None
        self._is_open = None
        self._color = None
        self._parent = None
        self.discriminator = None

        self.name = name
        if id is not None:
            self.id = id
        if instance is not None:
            self.instance = instance
        if group is not None:
            self.group = group
        if children is not None:
            self.children = children
        if is_open is not None:
            self.is_open = is_open
        self.color = color
        self.parent = parent

    @property
    def name(self):
        """Gets the name of this Hier.  # noqa: E501


        :return: The name of this Hier.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hier.


        :param name: The name of this Hier.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this Hier.  # noqa: E501


        :return: The id of this Hier.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Hier.


        :param id: The id of this Hier.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 1):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def instance(self):
        """Gets the instance of this Hier.  # noqa: E501


        :return: The instance of this Hier.  # noqa: E501
        :rtype: bool
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this Hier.


        :param instance: The instance of this Hier.  # noqa: E501
        :type: bool
        """

        self._instance = instance

    @property
    def group(self):
        """Gets the group of this Hier.  # noqa: E501


        :return: The group of this Hier.  # noqa: E501
        :rtype: bool
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Hier.


        :param group: The group of this Hier.  # noqa: E501
        :type: bool
        """

        self._group = group

    @property
    def children(self):
        """Gets the children of this Hier.  # noqa: E501


        :return: The children of this Hier.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Hier.


        :param children: The children of this Hier.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    @property
    def is_open(self):
        """Gets the is_open of this Hier.  # noqa: E501


        :return: The is_open of this Hier.  # noqa: E501
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """Sets the is_open of this Hier.


        :param is_open: The is_open of this Hier.  # noqa: E501
        :type: bool
        """

        self._is_open = is_open

    @property
    def color(self):
        """Gets the color of this Hier.  # noqa: E501


        :return: The color of this Hier.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Hier.


        :param color: The color of this Hier.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                color is not None and len(color) < 1):
            raise ValueError("Invalid value for `color`, length must be greater than or equal to `1`")  # noqa: E501

        self._color = color

    @property
    def parent(self):
        """Gets the parent of this Hier.  # noqa: E501


        :return: The parent of this Hier.  # noqa: E501
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Hier.


        :param parent: The parent of this Hier.  # noqa: E501
        :type: int
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Hier):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Hier):
            return True

        return self.to_dict() != other.to_dict()
