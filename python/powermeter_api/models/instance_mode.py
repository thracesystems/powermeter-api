# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class InstanceMode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'designmode': 'int',
        'utilizations': 'list[InstanceModeUtilization]',
        'config': 'list[InstanceModeConfig]'
    }

    attribute_map = {
        'id': 'id',
        'designmode': 'designmode',
        'utilizations': 'utilizations',
        'config': 'config'
    }

    def __init__(self, id=None, designmode=None, utilizations=None, config=None, local_vars_configuration=None):  # noqa: E501
        """InstanceMode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._designmode = None
        self._utilizations = None
        self._config = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.designmode = designmode
        self.utilizations = utilizations
        self.config = config

    @property
    def id(self):
        """Gets the id of this InstanceMode.  # noqa: E501


        :return: The id of this InstanceMode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceMode.


        :param id: The id of this InstanceMode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def designmode(self):
        """Gets the designmode of this InstanceMode.  # noqa: E501


        :return: The designmode of this InstanceMode.  # noqa: E501
        :rtype: int
        """
        return self._designmode

    @designmode.setter
    def designmode(self, designmode):
        """Sets the designmode of this InstanceMode.


        :param designmode: The designmode of this InstanceMode.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and designmode is None:  # noqa: E501
            raise ValueError("Invalid value for `designmode`, must not be `None`")  # noqa: E501

        self._designmode = designmode

    @property
    def utilizations(self):
        """Gets the utilizations of this InstanceMode.  # noqa: E501


        :return: The utilizations of this InstanceMode.  # noqa: E501
        :rtype: list[InstanceModeUtilization]
        """
        return self._utilizations

    @utilizations.setter
    def utilizations(self, utilizations):
        """Sets the utilizations of this InstanceMode.


        :param utilizations: The utilizations of this InstanceMode.  # noqa: E501
        :type: list[InstanceModeUtilization]
        """
        if self.local_vars_configuration.client_side_validation and utilizations is None:  # noqa: E501
            raise ValueError("Invalid value for `utilizations`, must not be `None`")  # noqa: E501

        self._utilizations = utilizations

    @property
    def config(self):
        """Gets the config of this InstanceMode.  # noqa: E501


        :return: The config of this InstanceMode.  # noqa: E501
        :rtype: list[InstanceModeConfig]
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this InstanceMode.


        :param config: The config of this InstanceMode.  # noqa: E501
        :type: list[InstanceModeConfig]
        """
        if self.local_vars_configuration.client_side_validation and config is None:  # noqa: E501
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceMode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceMode):
            return True

        return self.to_dict() != other.to_dict()
