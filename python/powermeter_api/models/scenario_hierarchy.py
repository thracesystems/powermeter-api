# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class ScenarioHierarchy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pcb': 'list[PCBInstance]',
        'vr': 'list[VRInstance]',
        'package': 'list[PackageInstance]',
        'design': 'list[DesignInstance]'
    }

    attribute_map = {
        'pcb': 'pcb',
        'vr': 'vr',
        'package': 'package',
        'design': 'design'
    }

    def __init__(self, pcb=None, vr=None, package=None, design=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioHierarchy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._pcb = None
        self._vr = None
        self._package = None
        self._design = None
        self.discriminator = None

        self.pcb = pcb
        self.vr = vr
        self.package = package
        self.design = design

    @property
    def pcb(self):
        """Gets the pcb of this ScenarioHierarchy.  # noqa: E501


        :return: The pcb of this ScenarioHierarchy.  # noqa: E501
        :rtype: list[PCBInstance]
        """
        return self._pcb

    @pcb.setter
    def pcb(self, pcb):
        """Sets the pcb of this ScenarioHierarchy.


        :param pcb: The pcb of this ScenarioHierarchy.  # noqa: E501
        :type: list[PCBInstance]
        """
        if self.local_vars_configuration.client_side_validation and pcb is None:  # noqa: E501
            raise ValueError("Invalid value for `pcb`, must not be `None`")  # noqa: E501

        self._pcb = pcb

    @property
    def vr(self):
        """Gets the vr of this ScenarioHierarchy.  # noqa: E501


        :return: The vr of this ScenarioHierarchy.  # noqa: E501
        :rtype: list[VRInstance]
        """
        return self._vr

    @vr.setter
    def vr(self, vr):
        """Sets the vr of this ScenarioHierarchy.


        :param vr: The vr of this ScenarioHierarchy.  # noqa: E501
        :type: list[VRInstance]
        """
        if self.local_vars_configuration.client_side_validation and vr is None:  # noqa: E501
            raise ValueError("Invalid value for `vr`, must not be `None`")  # noqa: E501

        self._vr = vr

    @property
    def package(self):
        """Gets the package of this ScenarioHierarchy.  # noqa: E501


        :return: The package of this ScenarioHierarchy.  # noqa: E501
        :rtype: list[PackageInstance]
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this ScenarioHierarchy.


        :param package: The package of this ScenarioHierarchy.  # noqa: E501
        :type: list[PackageInstance]
        """
        if self.local_vars_configuration.client_side_validation and package is None:  # noqa: E501
            raise ValueError("Invalid value for `package`, must not be `None`")  # noqa: E501

        self._package = package

    @property
    def design(self):
        """Gets the design of this ScenarioHierarchy.  # noqa: E501


        :return: The design of this ScenarioHierarchy.  # noqa: E501
        :rtype: list[DesignInstance]
        """
        return self._design

    @design.setter
    def design(self, design):
        """Sets the design of this ScenarioHierarchy.


        :param design: The design of this ScenarioHierarchy.  # noqa: E501
        :type: list[DesignInstance]
        """
        if self.local_vars_configuration.client_side_validation and design is None:  # noqa: E501
            raise ValueError("Invalid value for `design`, must not be `None`")  # noqa: E501

        self._design = design

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioHierarchy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioHierarchy):
            return True

        return self.to_dict() != other.to_dict()
