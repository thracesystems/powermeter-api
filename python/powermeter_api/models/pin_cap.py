# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class PinCap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'process': 'str',
        'rc': 'str',
        'voltage': 'float',
        'temperature': 'float',
        'rise_capacitance': 'float',
        'fall_capacitance': 'float'
    }

    attribute_map = {
        'id': 'id',
        'process': 'process',
        'rc': 'rc',
        'voltage': 'voltage',
        'temperature': 'temperature',
        'rise_capacitance': 'rise_capacitance',
        'fall_capacitance': 'fall_capacitance'
    }

    def __init__(self, id=None, process=None, rc=None, voltage=None, temperature=None, rise_capacitance=None, fall_capacitance=None, local_vars_configuration=None):  # noqa: E501
        """PinCap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._process = None
        self._rc = None
        self._voltage = None
        self._temperature = None
        self._rise_capacitance = None
        self._fall_capacitance = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.process = process
        self.rc = rc
        self.voltage = voltage
        self.temperature = temperature
        self.rise_capacitance = rise_capacitance
        self.fall_capacitance = fall_capacitance

    @property
    def id(self):
        """Gets the id of this PinCap.  # noqa: E501


        :return: The id of this PinCap.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PinCap.


        :param id: The id of this PinCap.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def process(self):
        """Gets the process of this PinCap.  # noqa: E501


        :return: The process of this PinCap.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this PinCap.


        :param process: The process of this PinCap.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and process is None:  # noqa: E501
            raise ValueError("Invalid value for `process`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                process is not None and len(process) < 1):
            raise ValueError("Invalid value for `process`, length must be greater than or equal to `1`")  # noqa: E501

        self._process = process

    @property
    def rc(self):
        """Gets the rc of this PinCap.  # noqa: E501


        :return: The rc of this PinCap.  # noqa: E501
        :rtype: str
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this PinCap.


        :param rc: The rc of this PinCap.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and rc is None:  # noqa: E501
            raise ValueError("Invalid value for `rc`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                rc is not None and len(rc) < 1):
            raise ValueError("Invalid value for `rc`, length must be greater than or equal to `1`")  # noqa: E501

        self._rc = rc

    @property
    def voltage(self):
        """Gets the voltage of this PinCap.  # noqa: E501


        :return: The voltage of this PinCap.  # noqa: E501
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this PinCap.


        :param voltage: The voltage of this PinCap.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and voltage is None:  # noqa: E501
            raise ValueError("Invalid value for `voltage`, must not be `None`")  # noqa: E501

        self._voltage = voltage

    @property
    def temperature(self):
        """Gets the temperature of this PinCap.  # noqa: E501


        :return: The temperature of this PinCap.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PinCap.


        :param temperature: The temperature of this PinCap.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and temperature is None:  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must not be `None`")  # noqa: E501

        self._temperature = temperature

    @property
    def rise_capacitance(self):
        """Gets the rise_capacitance of this PinCap.  # noqa: E501


        :return: The rise_capacitance of this PinCap.  # noqa: E501
        :rtype: float
        """
        return self._rise_capacitance

    @rise_capacitance.setter
    def rise_capacitance(self, rise_capacitance):
        """Sets the rise_capacitance of this PinCap.


        :param rise_capacitance: The rise_capacitance of this PinCap.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and rise_capacitance is None:  # noqa: E501
            raise ValueError("Invalid value for `rise_capacitance`, must not be `None`")  # noqa: E501

        self._rise_capacitance = rise_capacitance

    @property
    def fall_capacitance(self):
        """Gets the fall_capacitance of this PinCap.  # noqa: E501


        :return: The fall_capacitance of this PinCap.  # noqa: E501
        :rtype: float
        """
        return self._fall_capacitance

    @fall_capacitance.setter
    def fall_capacitance(self, fall_capacitance):
        """Sets the fall_capacitance of this PinCap.


        :param fall_capacitance: The fall_capacitance of this PinCap.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and fall_capacitance is None:  # noqa: E501
            raise ValueError("Invalid value for `fall_capacitance`, must not be `None`")  # noqa: E501

        self._fall_capacitance = fall_capacitance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PinCap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PinCap):
            return True

        return self.to_dict() != other.to_dict()
