# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class ComputedPower(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'supply': 'str',
        'energy': 'float',
        'leakage': 'float'
    }

    attribute_map = {
        'supply': 'supply',
        'energy': 'energy',
        'leakage': 'leakage'
    }

    def __init__(self, supply=None, energy=None, leakage=None, local_vars_configuration=None):  # noqa: E501
        """ComputedPower - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._supply = None
        self._energy = None
        self._leakage = None
        self.discriminator = None

        self.supply = supply
        self.energy = energy
        self.leakage = leakage

    @property
    def supply(self):
        """Gets the supply of this ComputedPower.  # noqa: E501


        :return: The supply of this ComputedPower.  # noqa: E501
        :rtype: str
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this ComputedPower.


        :param supply: The supply of this ComputedPower.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and supply is None:  # noqa: E501
            raise ValueError("Invalid value for `supply`, must not be `None`")  # noqa: E501

        self._supply = supply

    @property
    def energy(self):
        """Gets the energy of this ComputedPower.  # noqa: E501


        :return: The energy of this ComputedPower.  # noqa: E501
        :rtype: float
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """Sets the energy of this ComputedPower.


        :param energy: The energy of this ComputedPower.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and energy is None:  # noqa: E501
            raise ValueError("Invalid value for `energy`, must not be `None`")  # noqa: E501

        self._energy = energy

    @property
    def leakage(self):
        """Gets the leakage of this ComputedPower.  # noqa: E501


        :return: The leakage of this ComputedPower.  # noqa: E501
        :rtype: float
        """
        return self._leakage

    @leakage.setter
    def leakage(self, leakage):
        """Sets the leakage of this ComputedPower.


        :param leakage: The leakage of this ComputedPower.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and leakage is None:  # noqa: E501
            raise ValueError("Invalid value for `leakage`, must not be `None`")  # noqa: E501

        self._leakage = leakage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputedPower):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputedPower):
            return True

        return self.to_dict() != other.to_dict()
