# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class SwaggerContrib(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'length': 'int',
        'width': 'int',
        'nfin': 'int',
        'voltages': 'list[SwaggerContribVoltages]',
        'currents': 'list[SwaggerContribCurrents]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'length': 'length',
        'width': 'width',
        'nfin': 'nfin',
        'voltages': 'voltages',
        'currents': 'currents'
    }

    def __init__(self, id=None, name=None, length=None, width=None, nfin=None, voltages=None, currents=None, local_vars_configuration=None):  # noqa: E501
        """SwaggerContrib - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._length = None
        self._width = None
        self._nfin = None
        self._voltages = None
        self._currents = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.length = length
        self.width = width
        self.nfin = nfin
        self.voltages = voltages
        self.currents = currents

    @property
    def id(self):
        """Gets the id of this SwaggerContrib.  # noqa: E501


        :return: The id of this SwaggerContrib.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SwaggerContrib.


        :param id: The id of this SwaggerContrib.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SwaggerContrib.  # noqa: E501


        :return: The name of this SwaggerContrib.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SwaggerContrib.


        :param name: The name of this SwaggerContrib.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def length(self):
        """Gets the length of this SwaggerContrib.  # noqa: E501


        :return: The length of this SwaggerContrib.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SwaggerContrib.


        :param length: The length of this SwaggerContrib.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and length is None:  # noqa: E501
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                length is not None and length > 32767):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                length is not None and length < 0):  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._length = length

    @property
    def width(self):
        """Gets the width of this SwaggerContrib.  # noqa: E501


        :return: The width of this SwaggerContrib.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SwaggerContrib.


        :param width: The width of this SwaggerContrib.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width > 32767):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                width is not None and width < 0):  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `0`")  # noqa: E501

        self._width = width

    @property
    def nfin(self):
        """Gets the nfin of this SwaggerContrib.  # noqa: E501


        :return: The nfin of this SwaggerContrib.  # noqa: E501
        :rtype: int
        """
        return self._nfin

    @nfin.setter
    def nfin(self, nfin):
        """Sets the nfin of this SwaggerContrib.


        :param nfin: The nfin of this SwaggerContrib.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                nfin is not None and nfin > 32767):  # noqa: E501
            raise ValueError("Invalid value for `nfin`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nfin is not None and nfin < 0):  # noqa: E501
            raise ValueError("Invalid value for `nfin`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nfin = nfin

    @property
    def voltages(self):
        """Gets the voltages of this SwaggerContrib.  # noqa: E501


        :return: The voltages of this SwaggerContrib.  # noqa: E501
        :rtype: list[SwaggerContribVoltages]
        """
        return self._voltages

    @voltages.setter
    def voltages(self, voltages):
        """Sets the voltages of this SwaggerContrib.


        :param voltages: The voltages of this SwaggerContrib.  # noqa: E501
        :type: list[SwaggerContribVoltages]
        """
        if self.local_vars_configuration.client_side_validation and voltages is None:  # noqa: E501
            raise ValueError("Invalid value for `voltages`, must not be `None`")  # noqa: E501

        self._voltages = voltages

    @property
    def currents(self):
        """Gets the currents of this SwaggerContrib.  # noqa: E501


        :return: The currents of this SwaggerContrib.  # noqa: E501
        :rtype: list[SwaggerContribCurrents]
        """
        return self._currents

    @currents.setter
    def currents(self, currents):
        """Sets the currents of this SwaggerContrib.


        :param currents: The currents of this SwaggerContrib.  # noqa: E501
        :type: list[SwaggerContribCurrents]
        """
        if self.local_vars_configuration.client_side_validation and currents is None:  # noqa: E501
            raise ValueError("Invalid value for `currents`, must not be `None`")  # noqa: E501

        self._currents = currents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwaggerContrib):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SwaggerContrib):
            return True

        return self.to_dict() != other.to_dict()
