# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class SimVar(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'scope': 'int',
        'type': 'str',
        'size': 'int',
        'name': 'str',
        'vcd_id': 'str',
        'msb': 'list[int]',
        'lsb': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'scope': 'scope',
        'type': 'type',
        'size': 'size',
        'name': 'name',
        'vcd_id': 'vcd_id',
        'msb': 'msb',
        'lsb': 'lsb'
    }

    def __init__(self, id=None, scope=None, type=None, size=None, name=None, vcd_id=None, msb=None, lsb=None, local_vars_configuration=None):  # noqa: E501
        """SimVar - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._scope = None
        self._type = None
        self._size = None
        self._name = None
        self._vcd_id = None
        self._msb = None
        self._lsb = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if scope is not None:
            self.scope = scope
        self.type = type
        self.size = size
        self.name = name
        self.vcd_id = vcd_id
        self.msb = msb
        self.lsb = lsb

    @property
    def id(self):
        """Gets the id of this SimVar.  # noqa: E501


        :return: The id of this SimVar.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimVar.


        :param id: The id of this SimVar.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def scope(self):
        """Gets the scope of this SimVar.  # noqa: E501


        :return: The scope of this SimVar.  # noqa: E501
        :rtype: int
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SimVar.


        :param scope: The scope of this SimVar.  # noqa: E501
        :type: int
        """

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this SimVar.  # noqa: E501


        :return: The type of this SimVar.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimVar.


        :param type: The type of this SimVar.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def size(self):
        """Gets the size of this SimVar.  # noqa: E501


        :return: The size of this SimVar.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SimVar.


        :param size: The size of this SimVar.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                size is not None and size > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                size is not None and size < 0):  # noqa: E501
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def name(self):
        """Gets the name of this SimVar.  # noqa: E501


        :return: The name of this SimVar.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimVar.


        :param name: The name of this SimVar.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def vcd_id(self):
        """Gets the vcd_id of this SimVar.  # noqa: E501


        :return: The vcd_id of this SimVar.  # noqa: E501
        :rtype: str
        """
        return self._vcd_id

    @vcd_id.setter
    def vcd_id(self, vcd_id):
        """Sets the vcd_id of this SimVar.


        :param vcd_id: The vcd_id of this SimVar.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vcd_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vcd_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                vcd_id is not None and len(vcd_id) < 1):
            raise ValueError("Invalid value for `vcd_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._vcd_id = vcd_id

    @property
    def msb(self):
        """Gets the msb of this SimVar.  # noqa: E501


        :return: The msb of this SimVar.  # noqa: E501
        :rtype: list[int]
        """
        return self._msb

    @msb.setter
    def msb(self, msb):
        """Sets the msb of this SimVar.


        :param msb: The msb of this SimVar.  # noqa: E501
        :type: list[int]
        """

        self._msb = msb

    @property
    def lsb(self):
        """Gets the lsb of this SimVar.  # noqa: E501


        :return: The lsb of this SimVar.  # noqa: E501
        :rtype: list[int]
        """
        return self._lsb

    @lsb.setter
    def lsb(self, lsb):
        """Sets the lsb of this SimVar.


        :param lsb: The lsb of this SimVar.  # noqa: E501
        :type: list[int]
        """

        self._lsb = lsb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimVar):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimVar):
            return True

        return self.to_dict() != other.to_dict()
