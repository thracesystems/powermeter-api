# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class ComputedContributorPower(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'p': 'str',
        'v': 'float',
        't': 'int',
        'current': 'float',
        'pin_current': 'list[PinCurrent]'
    }

    attribute_map = {
        'p': 'p',
        'v': 'v',
        't': 't',
        'current': 'current',
        'pin_current': 'pin_current'
    }

    def __init__(self, p=None, v=None, t=None, current=None, pin_current=None, local_vars_configuration=None):  # noqa: E501
        """ComputedContributorPower - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._p = None
        self._v = None
        self._t = None
        self._current = None
        self._pin_current = None
        self.discriminator = None

        if p is not None:
            self.p = p
        if v is not None:
            self.v = v
        if t is not None:
            self.t = t
        if current is not None:
            self.current = current
        if pin_current is not None:
            self.pin_current = pin_current

    @property
    def p(self):
        """Gets the p of this ComputedContributorPower.  # noqa: E501

        Process name  # noqa: E501

        :return: The p of this ComputedContributorPower.  # noqa: E501
        :rtype: str
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this ComputedContributorPower.

        Process name  # noqa: E501

        :param p: The p of this ComputedContributorPower.  # noqa: E501
        :type: str
        """

        self._p = p

    @property
    def v(self):
        """Gets the v of this ComputedContributorPower.  # noqa: E501

        Voltage  # noqa: E501

        :return: The v of this ComputedContributorPower.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this ComputedContributorPower.

        Voltage  # noqa: E501

        :param v: The v of this ComputedContributorPower.  # noqa: E501
        :type: float
        """

        self._v = v

    @property
    def t(self):
        """Gets the t of this ComputedContributorPower.  # noqa: E501

        Temperature  # noqa: E501

        :return: The t of this ComputedContributorPower.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this ComputedContributorPower.

        Temperature  # noqa: E501

        :param t: The t of this ComputedContributorPower.  # noqa: E501
        :type: int
        """

        self._t = t

    @property
    def current(self):
        """Gets the current of this ComputedContributorPower.  # noqa: E501

        Drain current  # noqa: E501

        :return: The current of this ComputedContributorPower.  # noqa: E501
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this ComputedContributorPower.

        Drain current  # noqa: E501

        :param current: The current of this ComputedContributorPower.  # noqa: E501
        :type: float
        """

        self._current = current

    @property
    def pin_current(self):
        """Gets the pin_current of this ComputedContributorPower.  # noqa: E501


        :return: The pin_current of this ComputedContributorPower.  # noqa: E501
        :rtype: list[PinCurrent]
        """
        return self._pin_current

    @pin_current.setter
    def pin_current(self, pin_current):
        """Sets the pin_current of this ComputedContributorPower.


        :param pin_current: The pin_current of this ComputedContributorPower.  # noqa: E501
        :type: list[PinCurrent]
        """

        self._pin_current = pin_current

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputedContributorPower):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputedContributorPower):
            return True

        return self.to_dict() != other.to_dict()
