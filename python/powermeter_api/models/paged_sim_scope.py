# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class PagedSimScope(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'page': 'int',
        'pages': 'int',
        'scopes': 'list[SimScope]'
    }

    attribute_map = {
        'page': 'page',
        'pages': 'pages',
        'scopes': 'scopes'
    }

    def __init__(self, page=None, pages=None, scopes=None, local_vars_configuration=None):  # noqa: E501
        """PagedSimScope - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._page = None
        self._pages = None
        self._scopes = None
        self.discriminator = None

        self.page = page
        self.pages = pages
        self.scopes = scopes

    @property
    def page(self):
        """Gets the page of this PagedSimScope.  # noqa: E501


        :return: The page of this PagedSimScope.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PagedSimScope.


        :param page: The page of this PagedSimScope.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and page is None:  # noqa: E501
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    @property
    def pages(self):
        """Gets the pages of this PagedSimScope.  # noqa: E501


        :return: The pages of this PagedSimScope.  # noqa: E501
        :rtype: int
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this PagedSimScope.


        :param pages: The pages of this PagedSimScope.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and pages is None:  # noqa: E501
            raise ValueError("Invalid value for `pages`, must not be `None`")  # noqa: E501

        self._pages = pages

    @property
    def scopes(self):
        """Gets the scopes of this PagedSimScope.  # noqa: E501


        :return: The scopes of this PagedSimScope.  # noqa: E501
        :rtype: list[SimScope]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this PagedSimScope.


        :param scopes: The scopes of this PagedSimScope.  # noqa: E501
        :type: list[SimScope]
        """
        if self.local_vars_configuration.client_side_validation and scopes is None:  # noqa: E501
            raise ValueError("Invalid value for `scopes`, must not be `None`")  # noqa: E501

        self._scopes = scopes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagedSimScope):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PagedSimScope):
            return True

        return self.to_dict() != other.to_dict()
