# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class ComputePower1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'waveform': 'list[ComputePowerWaveform]',
        'equation': 'str',
        'params': 'object',
        'config': 'ComputePowerConfig'
    }

    attribute_map = {
        'waveform': 'waveform',
        'equation': 'equation',
        'params': 'params',
        'config': 'config'
    }

    def __init__(self, waveform=None, equation=None, params=None, config=None, local_vars_configuration=None):  # noqa: E501
        """ComputePower1 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._waveform = None
        self._equation = None
        self._params = None
        self._config = None
        self.discriminator = None

        if waveform is not None:
            self.waveform = waveform
        if equation is not None:
            self.equation = equation
        self.params = params
        self.config = config

    @property
    def waveform(self):
        """Gets the waveform of this ComputePower1.  # noqa: E501


        :return: The waveform of this ComputePower1.  # noqa: E501
        :rtype: list[ComputePowerWaveform]
        """
        return self._waveform

    @waveform.setter
    def waveform(self, waveform):
        """Sets the waveform of this ComputePower1.


        :param waveform: The waveform of this ComputePower1.  # noqa: E501
        :type: list[ComputePowerWaveform]
        """

        self._waveform = waveform

    @property
    def equation(self):
        """Gets the equation of this ComputePower1.  # noqa: E501


        :return: The equation of this ComputePower1.  # noqa: E501
        :rtype: str
        """
        return self._equation

    @equation.setter
    def equation(self, equation):
        """Sets the equation of this ComputePower1.


        :param equation: The equation of this ComputePower1.  # noqa: E501
        :type: str
        """

        self._equation = equation

    @property
    def params(self):
        """Gets the params of this ComputePower1.  # noqa: E501


        :return: The params of this ComputePower1.  # noqa: E501
        :rtype: object
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ComputePower1.


        :param params: The params of this ComputePower1.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and params is None:  # noqa: E501
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    @property
    def config(self):
        """Gets the config of this ComputePower1.  # noqa: E501


        :return: The config of this ComputePower1.  # noqa: E501
        :rtype: ComputePowerConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ComputePower1.


        :param config: The config of this ComputePower1.  # noqa: E501
        :type: ComputePowerConfig
        """
        if self.local_vars_configuration.client_side_validation and config is None:  # noqa: E501
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComputePower1):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ComputePower1):
            return True

        return self.to_dict() != other.to_dict()
