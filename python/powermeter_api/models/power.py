# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Power(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'mode': 'int',
        'mode_name': 'str',
        'supply': 'int',
        'supply_name': 'str',
        'source': 'int',
        'source_name': 'str',
        'tech_scaling': 'bool',
        'confidence': 'float',
        'power_type': 'str',
        'equation': 'object',
        'table_columns': 'object',
        'table': 'object',
        'waveform': 'object',
        'waveform_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mode': 'mode',
        'mode_name': 'mode_name',
        'supply': 'supply',
        'supply_name': 'supply_name',
        'source': 'source',
        'source_name': 'source_name',
        'tech_scaling': 'tech_scaling',
        'confidence': 'confidence',
        'power_type': 'power_type',
        'equation': 'equation',
        'table_columns': 'table_columns',
        'table': 'table',
        'waveform': 'waveform',
        'waveform_type': 'waveform_type'
    }

    def __init__(self, id=None, mode=None, mode_name=None, supply=None, supply_name=None, source=None, source_name=None, tech_scaling=None, confidence=None, power_type=None, equation=None, table_columns=None, table=None, waveform=None, waveform_type=None, local_vars_configuration=None):  # noqa: E501
        """Power - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._mode = None
        self._mode_name = None
        self._supply = None
        self._supply_name = None
        self._source = None
        self._source_name = None
        self._tech_scaling = None
        self._confidence = None
        self._power_type = None
        self._equation = None
        self._table_columns = None
        self._table = None
        self._waveform = None
        self._waveform_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.mode = mode
        if mode_name is not None:
            self.mode_name = mode_name
        self.supply = supply
        if supply_name is not None:
            self.supply_name = supply_name
        self.source = source
        if source_name is not None:
            self.source_name = source_name
        if tech_scaling is not None:
            self.tech_scaling = tech_scaling
        self.confidence = confidence
        self.power_type = power_type
        if equation is not None:
            self.equation = equation
        if table_columns is not None:
            self.table_columns = table_columns
        if table is not None:
            self.table = table
        if waveform is not None:
            self.waveform = waveform
        if waveform_type is not None:
            self.waveform_type = waveform_type

    @property
    def id(self):
        """Gets the id of this Power.  # noqa: E501


        :return: The id of this Power.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Power.


        :param id: The id of this Power.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this Power.  # noqa: E501


        :return: The mode of this Power.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Power.


        :param mode: The mode of this Power.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def mode_name(self):
        """Gets the mode_name of this Power.  # noqa: E501


        :return: The mode_name of this Power.  # noqa: E501
        :rtype: str
        """
        return self._mode_name

    @mode_name.setter
    def mode_name(self, mode_name):
        """Sets the mode_name of this Power.


        :param mode_name: The mode_name of this Power.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                mode_name is not None and len(mode_name) < 1):
            raise ValueError("Invalid value for `mode_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._mode_name = mode_name

    @property
    def supply(self):
        """Gets the supply of this Power.  # noqa: E501


        :return: The supply of this Power.  # noqa: E501
        :rtype: int
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this Power.


        :param supply: The supply of this Power.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and supply is None:  # noqa: E501
            raise ValueError("Invalid value for `supply`, must not be `None`")  # noqa: E501

        self._supply = supply

    @property
    def supply_name(self):
        """Gets the supply_name of this Power.  # noqa: E501


        :return: The supply_name of this Power.  # noqa: E501
        :rtype: str
        """
        return self._supply_name

    @supply_name.setter
    def supply_name(self, supply_name):
        """Sets the supply_name of this Power.


        :param supply_name: The supply_name of this Power.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                supply_name is not None and len(supply_name) < 1):
            raise ValueError("Invalid value for `supply_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._supply_name = supply_name

    @property
    def source(self):
        """Gets the source of this Power.  # noqa: E501


        :return: The source of this Power.  # noqa: E501
        :rtype: int
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Power.


        :param source: The source of this Power.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def source_name(self):
        """Gets the source_name of this Power.  # noqa: E501


        :return: The source_name of this Power.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this Power.


        :param source_name: The source_name of this Power.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                source_name is not None and len(source_name) < 1):
            raise ValueError("Invalid value for `source_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_name = source_name

    @property
    def tech_scaling(self):
        """Gets the tech_scaling of this Power.  # noqa: E501


        :return: The tech_scaling of this Power.  # noqa: E501
        :rtype: bool
        """
        return self._tech_scaling

    @tech_scaling.setter
    def tech_scaling(self, tech_scaling):
        """Sets the tech_scaling of this Power.


        :param tech_scaling: The tech_scaling of this Power.  # noqa: E501
        :type: bool
        """

        self._tech_scaling = tech_scaling

    @property
    def confidence(self):
        """Gets the confidence of this Power.  # noqa: E501


        :return: The confidence of this Power.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Power.


        :param confidence: The confidence of this Power.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and confidence is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                confidence is not None and confidence > 1E+2):  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value less than or equal to `1E+2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                confidence is not None and confidence < 0):  # noqa: E501
            raise ValueError("Invalid value for `confidence`, must be a value greater than or equal to `0`")  # noqa: E501

        self._confidence = confidence

    @property
    def power_type(self):
        """Gets the power_type of this Power.  # noqa: E501


        :return: The power_type of this Power.  # noqa: E501
        :rtype: str
        """
        return self._power_type

    @power_type.setter
    def power_type(self, power_type):
        """Sets the power_type of this Power.


        :param power_type: The power_type of this Power.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and power_type is None:  # noqa: E501
            raise ValueError("Invalid value for `power_type`, must not be `None`")  # noqa: E501
        allowed_values = ["equation", "table", "waveform"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and power_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `power_type` ({0}), must be one of {1}"  # noqa: E501
                .format(power_type, allowed_values)
            )

        self._power_type = power_type

    @property
    def equation(self):
        """Gets the equation of this Power.  # noqa: E501


        :return: The equation of this Power.  # noqa: E501
        :rtype: object
        """
        return self._equation

    @equation.setter
    def equation(self, equation):
        """Sets the equation of this Power.


        :param equation: The equation of this Power.  # noqa: E501
        :type: object
        """

        self._equation = equation

    @property
    def table_columns(self):
        """Gets the table_columns of this Power.  # noqa: E501


        :return: The table_columns of this Power.  # noqa: E501
        :rtype: object
        """
        return self._table_columns

    @table_columns.setter
    def table_columns(self, table_columns):
        """Sets the table_columns of this Power.


        :param table_columns: The table_columns of this Power.  # noqa: E501
        :type: object
        """

        self._table_columns = table_columns

    @property
    def table(self):
        """Gets the table of this Power.  # noqa: E501


        :return: The table of this Power.  # noqa: E501
        :rtype: object
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this Power.


        :param table: The table of this Power.  # noqa: E501
        :type: object
        """

        self._table = table

    @property
    def waveform(self):
        """Gets the waveform of this Power.  # noqa: E501


        :return: The waveform of this Power.  # noqa: E501
        :rtype: object
        """
        return self._waveform

    @waveform.setter
    def waveform(self, waveform):
        """Sets the waveform of this Power.


        :param waveform: The waveform of this Power.  # noqa: E501
        :type: object
        """

        self._waveform = waveform

    @property
    def waveform_type(self):
        """Gets the waveform_type of this Power.  # noqa: E501


        :return: The waveform_type of this Power.  # noqa: E501
        :rtype: str
        """
        return self._waveform_type

    @waveform_type.setter
    def waveform_type(self, waveform_type):
        """Sets the waveform_type of this Power.


        :param waveform_type: The waveform_type of this Power.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                waveform_type is not None and len(waveform_type) < 1):
            raise ValueError("Invalid value for `waveform_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._waveform_type = waveform_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Power):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Power):
            return True

        return self.to_dict() != other.to_dict()
