# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class WLMModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'master_name': 'str',
        'editable': 'bool',
        'wireloads': 'list[WireLoad]',
        'current_version': 'int',
        'version': 'WLMVersion'
    }

    attribute_map = {
        'id': 'id',
        'master_name': 'master_name',
        'editable': 'editable',
        'wireloads': 'wireloads',
        'current_version': 'current_version',
        'version': 'version'
    }

    def __init__(self, id=None, master_name=None, editable=None, wireloads=None, current_version=None, version=None, local_vars_configuration=None):  # noqa: E501
        """WLMModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._master_name = None
        self._editable = None
        self._wireloads = None
        self._current_version = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if master_name is not None:
            self.master_name = master_name
        if editable is not None:
            self.editable = editable
        self.wireloads = wireloads
        if current_version is not None:
            self.current_version = current_version
        self.version = version

    @property
    def id(self):
        """Gets the id of this WLMModel.  # noqa: E501


        :return: The id of this WLMModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WLMModel.


        :param id: The id of this WLMModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def master_name(self):
        """Gets the master_name of this WLMModel.  # noqa: E501


        :return: The master_name of this WLMModel.  # noqa: E501
        :rtype: str
        """
        return self._master_name

    @master_name.setter
    def master_name(self, master_name):
        """Sets the master_name of this WLMModel.


        :param master_name: The master_name of this WLMModel.  # noqa: E501
        :type: str
        """

        self._master_name = master_name

    @property
    def editable(self):
        """Gets the editable of this WLMModel.  # noqa: E501


        :return: The editable of this WLMModel.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this WLMModel.


        :param editable: The editable of this WLMModel.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def wireloads(self):
        """Gets the wireloads of this WLMModel.  # noqa: E501


        :return: The wireloads of this WLMModel.  # noqa: E501
        :rtype: list[WireLoad]
        """
        return self._wireloads

    @wireloads.setter
    def wireloads(self, wireloads):
        """Sets the wireloads of this WLMModel.


        :param wireloads: The wireloads of this WLMModel.  # noqa: E501
        :type: list[WireLoad]
        """
        if self.local_vars_configuration.client_side_validation and wireloads is None:  # noqa: E501
            raise ValueError("Invalid value for `wireloads`, must not be `None`")  # noqa: E501

        self._wireloads = wireloads

    @property
    def current_version(self):
        """Gets the current_version of this WLMModel.  # noqa: E501


        :return: The current_version of this WLMModel.  # noqa: E501
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this WLMModel.


        :param current_version: The current_version of this WLMModel.  # noqa: E501
        :type: int
        """

        self._current_version = current_version

    @property
    def version(self):
        """Gets the version of this WLMModel.  # noqa: E501


        :return: The version of this WLMModel.  # noqa: E501
        :rtype: WLMVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WLMModel.


        :param version: The version of this WLMModel.  # noqa: E501
        :type: WLMVersion
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WLMModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WLMModel):
            return True

        return self.to_dict() != other.to_dict()
