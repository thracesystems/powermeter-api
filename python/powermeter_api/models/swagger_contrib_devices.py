# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class SwaggerContribDevices(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'length': 'int',
        'width': 'int',
        'nfin': 'int',
        'count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'length': 'length',
        'width': 'width',
        'nfin': 'nfin',
        'count': 'count'
    }

    def __init__(self, name=None, length=None, width=None, nfin=None, count=None, local_vars_configuration=None):  # noqa: E501
        """SwaggerContribDevices - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._length = None
        self._width = None
        self._nfin = None
        self._count = None
        self.discriminator = None

        self.name = name
        self.length = length
        self.width = width
        self.nfin = nfin
        self.count = count

    @property
    def name(self):
        """Gets the name of this SwaggerContribDevices.  # noqa: E501


        :return: The name of this SwaggerContribDevices.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SwaggerContribDevices.


        :param name: The name of this SwaggerContribDevices.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def length(self):
        """Gets the length of this SwaggerContribDevices.  # noqa: E501


        :return: The length of this SwaggerContribDevices.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SwaggerContribDevices.


        :param length: The length of this SwaggerContribDevices.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and length is None:  # noqa: E501
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def width(self):
        """Gets the width of this SwaggerContribDevices.  # noqa: E501


        :return: The width of this SwaggerContribDevices.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SwaggerContribDevices.


        :param width: The width of this SwaggerContribDevices.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def nfin(self):
        """Gets the nfin of this SwaggerContribDevices.  # noqa: E501


        :return: The nfin of this SwaggerContribDevices.  # noqa: E501
        :rtype: int
        """
        return self._nfin

    @nfin.setter
    def nfin(self, nfin):
        """Sets the nfin of this SwaggerContribDevices.


        :param nfin: The nfin of this SwaggerContribDevices.  # noqa: E501
        :type: int
        """

        self._nfin = nfin

    @property
    def count(self):
        """Gets the count of this SwaggerContribDevices.  # noqa: E501


        :return: The count of this SwaggerContribDevices.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SwaggerContribDevices.


        :param count: The count of this SwaggerContribDevices.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and count is None:  # noqa: E501
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwaggerContribDevices):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SwaggerContribDevices):
            return True

        return self.to_dict() != other.to_dict()
