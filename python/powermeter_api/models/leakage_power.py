# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class LeakagePower(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'supply': 'int',
        'supply_name': 'str',
        'process': 'str',
        'rc': 'str',
        'voltage': 'float',
        'temperature': 'int',
        'when': 'str',
        'power': 'float',
        'modes': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'supply': 'supply',
        'supply_name': 'supply_name',
        'process': 'process',
        'rc': 'rc',
        'voltage': 'voltage',
        'temperature': 'temperature',
        'when': 'when',
        'power': 'power',
        'modes': 'modes'
    }

    def __init__(self, id=None, supply=None, supply_name=None, process=None, rc=None, voltage=None, temperature=None, when=None, power=None, modes=None, local_vars_configuration=None):  # noqa: E501
        """LeakagePower - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._supply = None
        self._supply_name = None
        self._process = None
        self._rc = None
        self._voltage = None
        self._temperature = None
        self._when = None
        self._power = None
        self._modes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.supply = supply
        if supply_name is not None:
            self.supply_name = supply_name
        self.process = process
        self.rc = rc
        self.voltage = voltage
        self.temperature = temperature
        self.when = when
        if power is not None:
            self.power = power
        if modes is not None:
            self.modes = modes

    @property
    def id(self):
        """Gets the id of this LeakagePower.  # noqa: E501


        :return: The id of this LeakagePower.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeakagePower.


        :param id: The id of this LeakagePower.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def supply(self):
        """Gets the supply of this LeakagePower.  # noqa: E501


        :return: The supply of this LeakagePower.  # noqa: E501
        :rtype: int
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this LeakagePower.


        :param supply: The supply of this LeakagePower.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and supply is None:  # noqa: E501
            raise ValueError("Invalid value for `supply`, must not be `None`")  # noqa: E501

        self._supply = supply

    @property
    def supply_name(self):
        """Gets the supply_name of this LeakagePower.  # noqa: E501


        :return: The supply_name of this LeakagePower.  # noqa: E501
        :rtype: str
        """
        return self._supply_name

    @supply_name.setter
    def supply_name(self, supply_name):
        """Sets the supply_name of this LeakagePower.


        :param supply_name: The supply_name of this LeakagePower.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                supply_name is not None and len(supply_name) < 1):
            raise ValueError("Invalid value for `supply_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._supply_name = supply_name

    @property
    def process(self):
        """Gets the process of this LeakagePower.  # noqa: E501


        :return: The process of this LeakagePower.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this LeakagePower.


        :param process: The process of this LeakagePower.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and process is None:  # noqa: E501
            raise ValueError("Invalid value for `process`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                process is not None and len(process) < 1):
            raise ValueError("Invalid value for `process`, length must be greater than or equal to `1`")  # noqa: E501

        self._process = process

    @property
    def rc(self):
        """Gets the rc of this LeakagePower.  # noqa: E501


        :return: The rc of this LeakagePower.  # noqa: E501
        :rtype: str
        """
        return self._rc

    @rc.setter
    def rc(self, rc):
        """Sets the rc of this LeakagePower.


        :param rc: The rc of this LeakagePower.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and rc is None:  # noqa: E501
            raise ValueError("Invalid value for `rc`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                rc is not None and len(rc) < 1):
            raise ValueError("Invalid value for `rc`, length must be greater than or equal to `1`")  # noqa: E501

        self._rc = rc

    @property
    def voltage(self):
        """Gets the voltage of this LeakagePower.  # noqa: E501


        :return: The voltage of this LeakagePower.  # noqa: E501
        :rtype: float
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this LeakagePower.


        :param voltage: The voltage of this LeakagePower.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and voltage is None:  # noqa: E501
            raise ValueError("Invalid value for `voltage`, must not be `None`")  # noqa: E501

        self._voltage = voltage

    @property
    def temperature(self):
        """Gets the temperature of this LeakagePower.  # noqa: E501


        :return: The temperature of this LeakagePower.  # noqa: E501
        :rtype: int
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this LeakagePower.


        :param temperature: The temperature of this LeakagePower.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and temperature is None:  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                temperature is not None and temperature > 32767):  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                temperature is not None and temperature < -32768):  # noqa: E501
            raise ValueError("Invalid value for `temperature`, must be a value greater than or equal to `-32768`")  # noqa: E501

        self._temperature = temperature

    @property
    def when(self):
        """Gets the when of this LeakagePower.  # noqa: E501


        :return: The when of this LeakagePower.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this LeakagePower.


        :param when: The when of this LeakagePower.  # noqa: E501
        :type: str
        """

        self._when = when

    @property
    def power(self):
        """Gets the power of this LeakagePower.  # noqa: E501


        :return: The power of this LeakagePower.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this LeakagePower.


        :param power: The power of this LeakagePower.  # noqa: E501
        :type: float
        """

        self._power = power

    @property
    def modes(self):
        """Gets the modes of this LeakagePower.  # noqa: E501


        :return: The modes of this LeakagePower.  # noqa: E501
        :rtype: list[int]
        """
        return self._modes

    @modes.setter
    def modes(self, modes):
        """Sets the modes of this LeakagePower.


        :param modes: The modes of this LeakagePower.  # noqa: E501
        :type: list[int]
        """

        self._modes = modes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeakagePower):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LeakagePower):
            return True

        return self.to_dict() != other.to_dict()
