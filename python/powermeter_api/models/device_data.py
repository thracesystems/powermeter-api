# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class DeviceData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'p': 'str',
        't': 'int',
        'vds': 'float',
        'vgs': 'float',
        'vbs': 'float',
        'idrain': 'float',
        'igate': 'float',
        'isource': 'float',
        'ibody': 'float'
    }

    attribute_map = {
        'id': 'id',
        'p': 'p',
        't': 't',
        'vds': 'Vds',
        'vgs': 'Vgs',
        'vbs': 'Vbs',
        'idrain': 'Idrain',
        'igate': 'Igate',
        'isource': 'Isource',
        'ibody': 'Ibody'
    }

    def __init__(self, id=None, p=None, t=None, vds=None, vgs=None, vbs=None, idrain=None, igate=None, isource=None, ibody=None, local_vars_configuration=None):  # noqa: E501
        """DeviceData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._p = None
        self._t = None
        self._vds = None
        self._vgs = None
        self._vbs = None
        self._idrain = None
        self._igate = None
        self._isource = None
        self._ibody = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.p = p
        self.t = t
        self.vds = vds
        self.vgs = vgs
        self.vbs = vbs
        self.idrain = idrain
        self.igate = igate
        self.isource = isource
        self.ibody = ibody

    @property
    def id(self):
        """Gets the id of this DeviceData.  # noqa: E501


        :return: The id of this DeviceData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceData.


        :param id: The id of this DeviceData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def p(self):
        """Gets the p of this DeviceData.  # noqa: E501


        :return: The p of this DeviceData.  # noqa: E501
        :rtype: str
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this DeviceData.


        :param p: The p of this DeviceData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and p is None:  # noqa: E501
            raise ValueError("Invalid value for `p`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                p is not None and len(p) < 1):
            raise ValueError("Invalid value for `p`, length must be greater than or equal to `1`")  # noqa: E501

        self._p = p

    @property
    def t(self):
        """Gets the t of this DeviceData.  # noqa: E501


        :return: The t of this DeviceData.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this DeviceData.


        :param t: The t of this DeviceData.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and t is None:  # noqa: E501
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                t is not None and t > 32767):  # noqa: E501
            raise ValueError("Invalid value for `t`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                t is not None and t < -32768):  # noqa: E501
            raise ValueError("Invalid value for `t`, must be a value greater than or equal to `-32768`")  # noqa: E501

        self._t = t

    @property
    def vds(self):
        """Gets the vds of this DeviceData.  # noqa: E501


        :return: The vds of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._vds

    @vds.setter
    def vds(self, vds):
        """Sets the vds of this DeviceData.


        :param vds: The vds of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and vds is None:  # noqa: E501
            raise ValueError("Invalid value for `vds`, must not be `None`")  # noqa: E501

        self._vds = vds

    @property
    def vgs(self):
        """Gets the vgs of this DeviceData.  # noqa: E501


        :return: The vgs of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._vgs

    @vgs.setter
    def vgs(self, vgs):
        """Sets the vgs of this DeviceData.


        :param vgs: The vgs of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and vgs is None:  # noqa: E501
            raise ValueError("Invalid value for `vgs`, must not be `None`")  # noqa: E501

        self._vgs = vgs

    @property
    def vbs(self):
        """Gets the vbs of this DeviceData.  # noqa: E501


        :return: The vbs of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._vbs

    @vbs.setter
    def vbs(self, vbs):
        """Sets the vbs of this DeviceData.


        :param vbs: The vbs of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and vbs is None:  # noqa: E501
            raise ValueError("Invalid value for `vbs`, must not be `None`")  # noqa: E501

        self._vbs = vbs

    @property
    def idrain(self):
        """Gets the idrain of this DeviceData.  # noqa: E501


        :return: The idrain of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._idrain

    @idrain.setter
    def idrain(self, idrain):
        """Sets the idrain of this DeviceData.


        :param idrain: The idrain of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and idrain is None:  # noqa: E501
            raise ValueError("Invalid value for `idrain`, must not be `None`")  # noqa: E501

        self._idrain = idrain

    @property
    def igate(self):
        """Gets the igate of this DeviceData.  # noqa: E501


        :return: The igate of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._igate

    @igate.setter
    def igate(self, igate):
        """Sets the igate of this DeviceData.


        :param igate: The igate of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and igate is None:  # noqa: E501
            raise ValueError("Invalid value for `igate`, must not be `None`")  # noqa: E501

        self._igate = igate

    @property
    def isource(self):
        """Gets the isource of this DeviceData.  # noqa: E501


        :return: The isource of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._isource

    @isource.setter
    def isource(self, isource):
        """Sets the isource of this DeviceData.


        :param isource: The isource of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and isource is None:  # noqa: E501
            raise ValueError("Invalid value for `isource`, must not be `None`")  # noqa: E501

        self._isource = isource

    @property
    def ibody(self):
        """Gets the ibody of this DeviceData.  # noqa: E501


        :return: The ibody of this DeviceData.  # noqa: E501
        :rtype: float
        """
        return self._ibody

    @ibody.setter
    def ibody(self, ibody):
        """Sets the ibody of this DeviceData.


        :param ibody: The ibody of this DeviceData.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and ibody is None:  # noqa: E501
            raise ValueError("Invalid value for `ibody`, must not be `None`")  # noqa: E501

        self._ibody = ibody

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceData):
            return True

        return self.to_dict() != other.to_dict()
