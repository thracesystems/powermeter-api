# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Design(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'master': 'int',
        'name': 'str',
        'descr': 'str',
        'technology': 'int',
        'outline': 'list[Point]',
        'area': 'float',
        'tags': 'list[str]',
        'editable': 'bool',
        'version': 'DesignVersion',
        'current_version': 'int',
        'project': 'int',
        'uuid': 'str',
        'instantiations': 'int',
        'dashboard_order': 'list[int]',
        'ff_count': 'int',
        'latch_count': 'int',
        'statetable_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'master': 'master',
        'name': 'name',
        'descr': 'descr',
        'technology': 'technology',
        'outline': 'outline',
        'area': 'area',
        'tags': 'tags',
        'editable': 'editable',
        'version': 'version',
        'current_version': 'current_version',
        'project': 'project',
        'uuid': 'uuid',
        'instantiations': 'instantiations',
        'dashboard_order': 'dashboard_order',
        'ff_count': 'ff_count',
        'latch_count': 'latch_count',
        'statetable_count': 'statetable_count'
    }

    def __init__(self, id=None, master=None, name=None, descr=None, technology=None, outline=None, area=None, tags=None, editable=None, version=None, current_version=None, project=None, uuid=None, instantiations=None, dashboard_order=None, ff_count=None, latch_count=None, statetable_count=None, local_vars_configuration=None):  # noqa: E501
        """Design - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._master = None
        self._name = None
        self._descr = None
        self._technology = None
        self._outline = None
        self._area = None
        self._tags = None
        self._editable = None
        self._version = None
        self._current_version = None
        self._project = None
        self._uuid = None
        self._instantiations = None
        self._dashboard_order = None
        self._ff_count = None
        self._latch_count = None
        self._statetable_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if master is not None:
            self.master = master
        if name is not None:
            self.name = name
        if descr is not None:
            self.descr = descr
        if technology is not None:
            self.technology = technology
        self.outline = outline
        self.area = area
        if tags is not None:
            self.tags = tags
        if editable is not None:
            self.editable = editable
        if version is not None:
            self.version = version
        if current_version is not None:
            self.current_version = current_version
        if project is not None:
            self.project = project
        if uuid is not None:
            self.uuid = uuid
        if instantiations is not None:
            self.instantiations = instantiations
        if dashboard_order is not None:
            self.dashboard_order = dashboard_order
        if ff_count is not None:
            self.ff_count = ff_count
        if latch_count is not None:
            self.latch_count = latch_count
        if statetable_count is not None:
            self.statetable_count = statetable_count

    @property
    def id(self):
        """Gets the id of this Design.  # noqa: E501


        :return: The id of this Design.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Design.


        :param id: The id of this Design.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def master(self):
        """Gets the master of this Design.  # noqa: E501


        :return: The master of this Design.  # noqa: E501
        :rtype: int
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this Design.


        :param master: The master of this Design.  # noqa: E501
        :type: int
        """

        self._master = master

    @property
    def name(self):
        """Gets the name of this Design.  # noqa: E501


        :return: The name of this Design.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Design.


        :param name: The name of this Design.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def descr(self):
        """Gets the descr of this Design.  # noqa: E501


        :return: The descr of this Design.  # noqa: E501
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """Sets the descr of this Design.


        :param descr: The descr of this Design.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                descr is not None and len(descr) < 1):
            raise ValueError("Invalid value for `descr`, length must be greater than or equal to `1`")  # noqa: E501

        self._descr = descr

    @property
    def technology(self):
        """Gets the technology of this Design.  # noqa: E501


        :return: The technology of this Design.  # noqa: E501
        :rtype: int
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this Design.


        :param technology: The technology of this Design.  # noqa: E501
        :type: int
        """

        self._technology = technology

    @property
    def outline(self):
        """Gets the outline of this Design.  # noqa: E501


        :return: The outline of this Design.  # noqa: E501
        :rtype: list[Point]
        """
        return self._outline

    @outline.setter
    def outline(self, outline):
        """Sets the outline of this Design.


        :param outline: The outline of this Design.  # noqa: E501
        :type: list[Point]
        """

        self._outline = outline

    @property
    def area(self):
        """Gets the area of this Design.  # noqa: E501


        :return: The area of this Design.  # noqa: E501
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Design.


        :param area: The area of this Design.  # noqa: E501
        :type: float
        """

        self._area = area

    @property
    def tags(self):
        """Gets the tags of this Design.  # noqa: E501


        :return: The tags of this Design.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Design.


        :param tags: The tags of this Design.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def editable(self):
        """Gets the editable of this Design.  # noqa: E501


        :return: The editable of this Design.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Design.


        :param editable: The editable of this Design.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def version(self):
        """Gets the version of this Design.  # noqa: E501


        :return: The version of this Design.  # noqa: E501
        :rtype: DesignVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Design.


        :param version: The version of this Design.  # noqa: E501
        :type: DesignVersion
        """

        self._version = version

    @property
    def current_version(self):
        """Gets the current_version of this Design.  # noqa: E501


        :return: The current_version of this Design.  # noqa: E501
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this Design.


        :param current_version: The current_version of this Design.  # noqa: E501
        :type: int
        """

        self._current_version = current_version

    @property
    def project(self):
        """Gets the project of this Design.  # noqa: E501


        :return: The project of this Design.  # noqa: E501
        :rtype: int
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Design.


        :param project: The project of this Design.  # noqa: E501
        :type: int
        """

        self._project = project

    @property
    def uuid(self):
        """Gets the uuid of this Design.  # noqa: E501


        :return: The uuid of this Design.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Design.


        :param uuid: The uuid of this Design.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def instantiations(self):
        """Gets the instantiations of this Design.  # noqa: E501


        :return: The instantiations of this Design.  # noqa: E501
        :rtype: int
        """
        return self._instantiations

    @instantiations.setter
    def instantiations(self, instantiations):
        """Sets the instantiations of this Design.


        :param instantiations: The instantiations of this Design.  # noqa: E501
        :type: int
        """

        self._instantiations = instantiations

    @property
    def dashboard_order(self):
        """Gets the dashboard_order of this Design.  # noqa: E501


        :return: The dashboard_order of this Design.  # noqa: E501
        :rtype: list[int]
        """
        return self._dashboard_order

    @dashboard_order.setter
    def dashboard_order(self, dashboard_order):
        """Sets the dashboard_order of this Design.


        :param dashboard_order: The dashboard_order of this Design.  # noqa: E501
        :type: list[int]
        """

        self._dashboard_order = dashboard_order

    @property
    def ff_count(self):
        """Gets the ff_count of this Design.  # noqa: E501


        :return: The ff_count of this Design.  # noqa: E501
        :rtype: int
        """
        return self._ff_count

    @ff_count.setter
    def ff_count(self, ff_count):
        """Sets the ff_count of this Design.


        :param ff_count: The ff_count of this Design.  # noqa: E501
        :type: int
        """

        self._ff_count = ff_count

    @property
    def latch_count(self):
        """Gets the latch_count of this Design.  # noqa: E501


        :return: The latch_count of this Design.  # noqa: E501
        :rtype: int
        """
        return self._latch_count

    @latch_count.setter
    def latch_count(self, latch_count):
        """Sets the latch_count of this Design.


        :param latch_count: The latch_count of this Design.  # noqa: E501
        :type: int
        """

        self._latch_count = latch_count

    @property
    def statetable_count(self):
        """Gets the statetable_count of this Design.  # noqa: E501


        :return: The statetable_count of this Design.  # noqa: E501
        :rtype: int
        """
        return self._statetable_count

    @statetable_count.setter
    def statetable_count(self, statetable_count):
        """Sets the statetable_count of this Design.


        :param statetable_count: The statetable_count of this Design.  # noqa: E501
        :type: int
        """

        self._statetable_count = statetable_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Design):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Design):
            return True

        return self.to_dict() != other.to_dict()
