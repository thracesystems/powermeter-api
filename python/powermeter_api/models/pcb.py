# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class PCB(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'editable': 'bool',
        'name': 'str',
        'descr': 'str',
        'r_convection': 'float',
        'c_convection': 'float',
        'width': 'float',
        'height': 'float',
        'thickness': 'float',
        'version': 'PCBVersionSerialzer',
        'current_version': 'int'
    }

    attribute_map = {
        'id': 'id',
        'editable': 'editable',
        'name': 'name',
        'descr': 'descr',
        'r_convection': 'r_convection',
        'c_convection': 'c_convection',
        'width': 'width',
        'height': 'height',
        'thickness': 'thickness',
        'version': 'version',
        'current_version': 'current_version'
    }

    def __init__(self, id=None, editable=None, name=None, descr=None, r_convection=None, c_convection=None, width=None, height=None, thickness=None, version=None, current_version=None, local_vars_configuration=None):  # noqa: E501
        """PCB - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._editable = None
        self._name = None
        self._descr = None
        self._r_convection = None
        self._c_convection = None
        self._width = None
        self._height = None
        self._thickness = None
        self._version = None
        self._current_version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if editable is not None:
            self.editable = editable
        if name is not None:
            self.name = name
        if descr is not None:
            self.descr = descr
        if r_convection is not None:
            self.r_convection = r_convection
        if c_convection is not None:
            self.c_convection = c_convection
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if thickness is not None:
            self.thickness = thickness
        if version is not None:
            self.version = version
        if current_version is not None:
            self.current_version = current_version

    @property
    def id(self):
        """Gets the id of this PCB.  # noqa: E501


        :return: The id of this PCB.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PCB.


        :param id: The id of this PCB.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def editable(self):
        """Gets the editable of this PCB.  # noqa: E501


        :return: The editable of this PCB.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this PCB.


        :param editable: The editable of this PCB.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def name(self):
        """Gets the name of this PCB.  # noqa: E501


        :return: The name of this PCB.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PCB.


        :param name: The name of this PCB.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def descr(self):
        """Gets the descr of this PCB.  # noqa: E501


        :return: The descr of this PCB.  # noqa: E501
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """Sets the descr of this PCB.


        :param descr: The descr of this PCB.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                descr is not None and len(descr) < 1):
            raise ValueError("Invalid value for `descr`, length must be greater than or equal to `1`")  # noqa: E501

        self._descr = descr

    @property
    def r_convection(self):
        """Gets the r_convection of this PCB.  # noqa: E501


        :return: The r_convection of this PCB.  # noqa: E501
        :rtype: float
        """
        return self._r_convection

    @r_convection.setter
    def r_convection(self, r_convection):
        """Sets the r_convection of this PCB.


        :param r_convection: The r_convection of this PCB.  # noqa: E501
        :type: float
        """

        self._r_convection = r_convection

    @property
    def c_convection(self):
        """Gets the c_convection of this PCB.  # noqa: E501


        :return: The c_convection of this PCB.  # noqa: E501
        :rtype: float
        """
        return self._c_convection

    @c_convection.setter
    def c_convection(self, c_convection):
        """Sets the c_convection of this PCB.


        :param c_convection: The c_convection of this PCB.  # noqa: E501
        :type: float
        """

        self._c_convection = c_convection

    @property
    def width(self):
        """Gets the width of this PCB.  # noqa: E501


        :return: The width of this PCB.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this PCB.


        :param width: The width of this PCB.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this PCB.  # noqa: E501


        :return: The height of this PCB.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this PCB.


        :param height: The height of this PCB.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def thickness(self):
        """Gets the thickness of this PCB.  # noqa: E501


        :return: The thickness of this PCB.  # noqa: E501
        :rtype: float
        """
        return self._thickness

    @thickness.setter
    def thickness(self, thickness):
        """Sets the thickness of this PCB.


        :param thickness: The thickness of this PCB.  # noqa: E501
        :type: float
        """

        self._thickness = thickness

    @property
    def version(self):
        """Gets the version of this PCB.  # noqa: E501


        :return: The version of this PCB.  # noqa: E501
        :rtype: PCBVersionSerialzer
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PCB.


        :param version: The version of this PCB.  # noqa: E501
        :type: PCBVersionSerialzer
        """

        self._version = version

    @property
    def current_version(self):
        """Gets the current_version of this PCB.  # noqa: E501


        :return: The current_version of this PCB.  # noqa: E501
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this PCB.


        :param current_version: The current_version of this PCB.  # noqa: E501
        :type: int
        """

        self._current_version = current_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PCB):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PCB):
            return True

        return self.to_dict() != other.to_dict()
