# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Layer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'count': 'int',
        'horizontal': 'bool',
        'thickness': 'float',
        'metal_thickness': 'float',
        'metal_density': 'float',
        'metal_conductivity': 'float',
        'metal_heatcapacity': 'float',
        'imd_conductivity': 'float',
        'imd_heatcapacity': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'count': 'count',
        'horizontal': 'horizontal',
        'thickness': 'thickness',
        'metal_thickness': 'metal_thickness',
        'metal_density': 'metal_density',
        'metal_conductivity': 'metal_conductivity',
        'metal_heatcapacity': 'metal_heatcapacity',
        'imd_conductivity': 'imd_conductivity',
        'imd_heatcapacity': 'imd_heatcapacity'
    }

    def __init__(self, id=None, name=None, count=None, horizontal=None, thickness=None, metal_thickness=None, metal_density=None, metal_conductivity=None, metal_heatcapacity=None, imd_conductivity=None, imd_heatcapacity=None, local_vars_configuration=None):  # noqa: E501
        """Layer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._count = None
        self._horizontal = None
        self._thickness = None
        self._metal_thickness = None
        self._metal_density = None
        self._metal_conductivity = None
        self._metal_heatcapacity = None
        self._imd_conductivity = None
        self._imd_heatcapacity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if count is not None:
            self.count = count
        if horizontal is not None:
            self.horizontal = horizontal
        if thickness is not None:
            self.thickness = thickness
        if metal_thickness is not None:
            self.metal_thickness = metal_thickness
        if metal_density is not None:
            self.metal_density = metal_density
        if metal_conductivity is not None:
            self.metal_conductivity = metal_conductivity
        if metal_heatcapacity is not None:
            self.metal_heatcapacity = metal_heatcapacity
        if imd_conductivity is not None:
            self.imd_conductivity = imd_conductivity
        if imd_heatcapacity is not None:
            self.imd_heatcapacity = imd_heatcapacity

    @property
    def id(self):
        """Gets the id of this Layer.  # noqa: E501


        :return: The id of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Layer.


        :param id: The id of this Layer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Layer.  # noqa: E501


        :return: The name of this Layer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Layer.


        :param name: The name of this Layer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 64):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def count(self):
        """Gets the count of this Layer.  # noqa: E501


        :return: The count of this Layer.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Layer.


        :param count: The count of this Layer.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                count is not None and count > 32767):  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `32767`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                count is not None and count < 0):  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count = count

    @property
    def horizontal(self):
        """Gets the horizontal of this Layer.  # noqa: E501


        :return: The horizontal of this Layer.  # noqa: E501
        :rtype: bool
        """
        return self._horizontal

    @horizontal.setter
    def horizontal(self, horizontal):
        """Sets the horizontal of this Layer.


        :param horizontal: The horizontal of this Layer.  # noqa: E501
        :type: bool
        """

        self._horizontal = horizontal

    @property
    def thickness(self):
        """Gets the thickness of this Layer.  # noqa: E501


        :return: The thickness of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._thickness

    @thickness.setter
    def thickness(self, thickness):
        """Sets the thickness of this Layer.


        :param thickness: The thickness of this Layer.  # noqa: E501
        :type: float
        """

        self._thickness = thickness

    @property
    def metal_thickness(self):
        """Gets the metal_thickness of this Layer.  # noqa: E501


        :return: The metal_thickness of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._metal_thickness

    @metal_thickness.setter
    def metal_thickness(self, metal_thickness):
        """Sets the metal_thickness of this Layer.


        :param metal_thickness: The metal_thickness of this Layer.  # noqa: E501
        :type: float
        """

        self._metal_thickness = metal_thickness

    @property
    def metal_density(self):
        """Gets the metal_density of this Layer.  # noqa: E501


        :return: The metal_density of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._metal_density

    @metal_density.setter
    def metal_density(self, metal_density):
        """Sets the metal_density of this Layer.


        :param metal_density: The metal_density of this Layer.  # noqa: E501
        :type: float
        """

        self._metal_density = metal_density

    @property
    def metal_conductivity(self):
        """Gets the metal_conductivity of this Layer.  # noqa: E501


        :return: The metal_conductivity of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._metal_conductivity

    @metal_conductivity.setter
    def metal_conductivity(self, metal_conductivity):
        """Sets the metal_conductivity of this Layer.


        :param metal_conductivity: The metal_conductivity of this Layer.  # noqa: E501
        :type: float
        """

        self._metal_conductivity = metal_conductivity

    @property
    def metal_heatcapacity(self):
        """Gets the metal_heatcapacity of this Layer.  # noqa: E501


        :return: The metal_heatcapacity of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._metal_heatcapacity

    @metal_heatcapacity.setter
    def metal_heatcapacity(self, metal_heatcapacity):
        """Sets the metal_heatcapacity of this Layer.


        :param metal_heatcapacity: The metal_heatcapacity of this Layer.  # noqa: E501
        :type: float
        """

        self._metal_heatcapacity = metal_heatcapacity

    @property
    def imd_conductivity(self):
        """Gets the imd_conductivity of this Layer.  # noqa: E501


        :return: The imd_conductivity of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._imd_conductivity

    @imd_conductivity.setter
    def imd_conductivity(self, imd_conductivity):
        """Sets the imd_conductivity of this Layer.


        :param imd_conductivity: The imd_conductivity of this Layer.  # noqa: E501
        :type: float
        """

        self._imd_conductivity = imd_conductivity

    @property
    def imd_heatcapacity(self):
        """Gets the imd_heatcapacity of this Layer.  # noqa: E501


        :return: The imd_heatcapacity of this Layer.  # noqa: E501
        :rtype: float
        """
        return self._imd_heatcapacity

    @imd_heatcapacity.setter
    def imd_heatcapacity(self, imd_heatcapacity):
        """Sets the imd_heatcapacity of this Layer.


        :param imd_heatcapacity: The imd_heatcapacity of this Layer.  # noqa: E501
        :type: float
        """

        self._imd_heatcapacity = imd_heatcapacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Layer):
            return True

        return self.to_dict() != other.to_dict()
