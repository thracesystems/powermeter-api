# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Package(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'descr': 'str',
        'editable': 'bool',
        'current_version': 'int',
        'version': 'PackageVersion',
        'width': 'float',
        'height': 'float',
        'die_width_min': 'float',
        'die_width_max': 'float',
        'die_height_min': 'float',
        'die_height_max': 'float',
        'heatspreader_samesize': 'bool',
        'heatspreader_width': 'float',
        'heatspreader_height': 'float',
        'heatspreader_thickness': 'float',
        'heatspreader_conductivity': 'float',
        'heatspreader_heatcapacity': 'float',
        'tim_thickness': 'float',
        'tim_conductivity': 'float',
        'tim_heatcapacity': 'float',
        'underfill_thickness': 'float',
        'c4_width': 'float',
        'c4_number': 'int',
        'c4_conductivity': 'float',
        'c4_heatcapacity': 'float',
        'substrate_samesize': 'bool',
        'substrate_width': 'float',
        'substrate_height': 'float',
        'substrate_thickness': 'float',
        'substrate_conductivity': 'float',
        'substrate_heatcapacity': 'float',
        'solderball_samesize': 'bool',
        'solderball_width': 'float',
        'solderball_height': 'float',
        'solderball_thickness': 'float',
        'solderball_conductivity': 'float',
        'solderball_heatcapacity': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'descr': 'descr',
        'editable': 'editable',
        'current_version': 'current_version',
        'version': 'version',
        'width': 'width',
        'height': 'height',
        'die_width_min': 'die_width_min',
        'die_width_max': 'die_width_max',
        'die_height_min': 'die_height_min',
        'die_height_max': 'die_height_max',
        'heatspreader_samesize': 'heatspreader_samesize',
        'heatspreader_width': 'heatspreader_width',
        'heatspreader_height': 'heatspreader_height',
        'heatspreader_thickness': 'heatspreader_thickness',
        'heatspreader_conductivity': 'heatspreader_conductivity',
        'heatspreader_heatcapacity': 'heatspreader_heatcapacity',
        'tim_thickness': 'tim_thickness',
        'tim_conductivity': 'tim_conductivity',
        'tim_heatcapacity': 'tim_heatcapacity',
        'underfill_thickness': 'underfill_thickness',
        'c4_width': 'c4_width',
        'c4_number': 'c4_number',
        'c4_conductivity': 'c4_conductivity',
        'c4_heatcapacity': 'c4_heatcapacity',
        'substrate_samesize': 'substrate_samesize',
        'substrate_width': 'substrate_width',
        'substrate_height': 'substrate_height',
        'substrate_thickness': 'substrate_thickness',
        'substrate_conductivity': 'substrate_conductivity',
        'substrate_heatcapacity': 'substrate_heatcapacity',
        'solderball_samesize': 'solderball_samesize',
        'solderball_width': 'solderball_width',
        'solderball_height': 'solderball_height',
        'solderball_thickness': 'solderball_thickness',
        'solderball_conductivity': 'solderball_conductivity',
        'solderball_heatcapacity': 'solderball_heatcapacity'
    }

    def __init__(self, id=None, name=None, descr=None, editable=None, current_version=None, version=None, width=None, height=None, die_width_min=None, die_width_max=None, die_height_min=None, die_height_max=None, heatspreader_samesize=None, heatspreader_width=None, heatspreader_height=None, heatspreader_thickness=None, heatspreader_conductivity=None, heatspreader_heatcapacity=None, tim_thickness=None, tim_conductivity=None, tim_heatcapacity=None, underfill_thickness=None, c4_width=None, c4_number=None, c4_conductivity=None, c4_heatcapacity=None, substrate_samesize=None, substrate_width=None, substrate_height=None, substrate_thickness=None, substrate_conductivity=None, substrate_heatcapacity=None, solderball_samesize=None, solderball_width=None, solderball_height=None, solderball_thickness=None, solderball_conductivity=None, solderball_heatcapacity=None, local_vars_configuration=None):  # noqa: E501
        """Package - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._descr = None
        self._editable = None
        self._current_version = None
        self._version = None
        self._width = None
        self._height = None
        self._die_width_min = None
        self._die_width_max = None
        self._die_height_min = None
        self._die_height_max = None
        self._heatspreader_samesize = None
        self._heatspreader_width = None
        self._heatspreader_height = None
        self._heatspreader_thickness = None
        self._heatspreader_conductivity = None
        self._heatspreader_heatcapacity = None
        self._tim_thickness = None
        self._tim_conductivity = None
        self._tim_heatcapacity = None
        self._underfill_thickness = None
        self._c4_width = None
        self._c4_number = None
        self._c4_conductivity = None
        self._c4_heatcapacity = None
        self._substrate_samesize = None
        self._substrate_width = None
        self._substrate_height = None
        self._substrate_thickness = None
        self._substrate_conductivity = None
        self._substrate_heatcapacity = None
        self._solderball_samesize = None
        self._solderball_width = None
        self._solderball_height = None
        self._solderball_thickness = None
        self._solderball_conductivity = None
        self._solderball_heatcapacity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if descr is not None:
            self.descr = descr
        if editable is not None:
            self.editable = editable
        if current_version is not None:
            self.current_version = current_version
        if version is not None:
            self.version = version
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if die_width_min is not None:
            self.die_width_min = die_width_min
        self.die_width_max = die_width_max
        if die_height_min is not None:
            self.die_height_min = die_height_min
        self.die_height_max = die_height_max
        if heatspreader_samesize is not None:
            self.heatspreader_samesize = heatspreader_samesize
        if heatspreader_width is not None:
            self.heatspreader_width = heatspreader_width
        if heatspreader_height is not None:
            self.heatspreader_height = heatspreader_height
        if heatspreader_thickness is not None:
            self.heatspreader_thickness = heatspreader_thickness
        if heatspreader_conductivity is not None:
            self.heatspreader_conductivity = heatspreader_conductivity
        if heatspreader_heatcapacity is not None:
            self.heatspreader_heatcapacity = heatspreader_heatcapacity
        if tim_thickness is not None:
            self.tim_thickness = tim_thickness
        if tim_conductivity is not None:
            self.tim_conductivity = tim_conductivity
        if tim_heatcapacity is not None:
            self.tim_heatcapacity = tim_heatcapacity
        if underfill_thickness is not None:
            self.underfill_thickness = underfill_thickness
        if c4_width is not None:
            self.c4_width = c4_width
        if c4_number is not None:
            self.c4_number = c4_number
        if c4_conductivity is not None:
            self.c4_conductivity = c4_conductivity
        if c4_heatcapacity is not None:
            self.c4_heatcapacity = c4_heatcapacity
        if substrate_samesize is not None:
            self.substrate_samesize = substrate_samesize
        if substrate_width is not None:
            self.substrate_width = substrate_width
        if substrate_height is not None:
            self.substrate_height = substrate_height
        if substrate_thickness is not None:
            self.substrate_thickness = substrate_thickness
        if substrate_conductivity is not None:
            self.substrate_conductivity = substrate_conductivity
        if substrate_heatcapacity is not None:
            self.substrate_heatcapacity = substrate_heatcapacity
        if solderball_samesize is not None:
            self.solderball_samesize = solderball_samesize
        if solderball_width is not None:
            self.solderball_width = solderball_width
        if solderball_height is not None:
            self.solderball_height = solderball_height
        if solderball_thickness is not None:
            self.solderball_thickness = solderball_thickness
        if solderball_conductivity is not None:
            self.solderball_conductivity = solderball_conductivity
        if solderball_heatcapacity is not None:
            self.solderball_heatcapacity = solderball_heatcapacity

    @property
    def id(self):
        """Gets the id of this Package.  # noqa: E501


        :return: The id of this Package.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Package.


        :param id: The id of this Package.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Package.  # noqa: E501


        :return: The name of this Package.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Package.


        :param name: The name of this Package.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def descr(self):
        """Gets the descr of this Package.  # noqa: E501


        :return: The descr of this Package.  # noqa: E501
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """Sets the descr of this Package.


        :param descr: The descr of this Package.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                descr is not None and len(descr) < 1):
            raise ValueError("Invalid value for `descr`, length must be greater than or equal to `1`")  # noqa: E501

        self._descr = descr

    @property
    def editable(self):
        """Gets the editable of this Package.  # noqa: E501


        :return: The editable of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Package.


        :param editable: The editable of this Package.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def current_version(self):
        """Gets the current_version of this Package.  # noqa: E501


        :return: The current_version of this Package.  # noqa: E501
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this Package.


        :param current_version: The current_version of this Package.  # noqa: E501
        :type: int
        """

        self._current_version = current_version

    @property
    def version(self):
        """Gets the version of this Package.  # noqa: E501


        :return: The version of this Package.  # noqa: E501
        :rtype: PackageVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Package.


        :param version: The version of this Package.  # noqa: E501
        :type: PackageVersion
        """

        self._version = version

    @property
    def width(self):
        """Gets the width of this Package.  # noqa: E501


        :return: The width of this Package.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Package.


        :param width: The width of this Package.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Package.  # noqa: E501


        :return: The height of this Package.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Package.


        :param height: The height of this Package.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def die_width_min(self):
        """Gets the die_width_min of this Package.  # noqa: E501


        :return: The die_width_min of this Package.  # noqa: E501
        :rtype: float
        """
        return self._die_width_min

    @die_width_min.setter
    def die_width_min(self, die_width_min):
        """Sets the die_width_min of this Package.


        :param die_width_min: The die_width_min of this Package.  # noqa: E501
        :type: float
        """

        self._die_width_min = die_width_min

    @property
    def die_width_max(self):
        """Gets the die_width_max of this Package.  # noqa: E501


        :return: The die_width_max of this Package.  # noqa: E501
        :rtype: float
        """
        return self._die_width_max

    @die_width_max.setter
    def die_width_max(self, die_width_max):
        """Sets the die_width_max of this Package.


        :param die_width_max: The die_width_max of this Package.  # noqa: E501
        :type: float
        """

        self._die_width_max = die_width_max

    @property
    def die_height_min(self):
        """Gets the die_height_min of this Package.  # noqa: E501


        :return: The die_height_min of this Package.  # noqa: E501
        :rtype: float
        """
        return self._die_height_min

    @die_height_min.setter
    def die_height_min(self, die_height_min):
        """Sets the die_height_min of this Package.


        :param die_height_min: The die_height_min of this Package.  # noqa: E501
        :type: float
        """

        self._die_height_min = die_height_min

    @property
    def die_height_max(self):
        """Gets the die_height_max of this Package.  # noqa: E501


        :return: The die_height_max of this Package.  # noqa: E501
        :rtype: float
        """
        return self._die_height_max

    @die_height_max.setter
    def die_height_max(self, die_height_max):
        """Sets the die_height_max of this Package.


        :param die_height_max: The die_height_max of this Package.  # noqa: E501
        :type: float
        """

        self._die_height_max = die_height_max

    @property
    def heatspreader_samesize(self):
        """Gets the heatspreader_samesize of this Package.  # noqa: E501


        :return: The heatspreader_samesize of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._heatspreader_samesize

    @heatspreader_samesize.setter
    def heatspreader_samesize(self, heatspreader_samesize):
        """Sets the heatspreader_samesize of this Package.


        :param heatspreader_samesize: The heatspreader_samesize of this Package.  # noqa: E501
        :type: bool
        """

        self._heatspreader_samesize = heatspreader_samesize

    @property
    def heatspreader_width(self):
        """Gets the heatspreader_width of this Package.  # noqa: E501


        :return: The heatspreader_width of this Package.  # noqa: E501
        :rtype: float
        """
        return self._heatspreader_width

    @heatspreader_width.setter
    def heatspreader_width(self, heatspreader_width):
        """Sets the heatspreader_width of this Package.


        :param heatspreader_width: The heatspreader_width of this Package.  # noqa: E501
        :type: float
        """

        self._heatspreader_width = heatspreader_width

    @property
    def heatspreader_height(self):
        """Gets the heatspreader_height of this Package.  # noqa: E501


        :return: The heatspreader_height of this Package.  # noqa: E501
        :rtype: float
        """
        return self._heatspreader_height

    @heatspreader_height.setter
    def heatspreader_height(self, heatspreader_height):
        """Sets the heatspreader_height of this Package.


        :param heatspreader_height: The heatspreader_height of this Package.  # noqa: E501
        :type: float
        """

        self._heatspreader_height = heatspreader_height

    @property
    def heatspreader_thickness(self):
        """Gets the heatspreader_thickness of this Package.  # noqa: E501


        :return: The heatspreader_thickness of this Package.  # noqa: E501
        :rtype: float
        """
        return self._heatspreader_thickness

    @heatspreader_thickness.setter
    def heatspreader_thickness(self, heatspreader_thickness):
        """Sets the heatspreader_thickness of this Package.


        :param heatspreader_thickness: The heatspreader_thickness of this Package.  # noqa: E501
        :type: float
        """

        self._heatspreader_thickness = heatspreader_thickness

    @property
    def heatspreader_conductivity(self):
        """Gets the heatspreader_conductivity of this Package.  # noqa: E501


        :return: The heatspreader_conductivity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._heatspreader_conductivity

    @heatspreader_conductivity.setter
    def heatspreader_conductivity(self, heatspreader_conductivity):
        """Sets the heatspreader_conductivity of this Package.


        :param heatspreader_conductivity: The heatspreader_conductivity of this Package.  # noqa: E501
        :type: float
        """

        self._heatspreader_conductivity = heatspreader_conductivity

    @property
    def heatspreader_heatcapacity(self):
        """Gets the heatspreader_heatcapacity of this Package.  # noqa: E501


        :return: The heatspreader_heatcapacity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._heatspreader_heatcapacity

    @heatspreader_heatcapacity.setter
    def heatspreader_heatcapacity(self, heatspreader_heatcapacity):
        """Sets the heatspreader_heatcapacity of this Package.


        :param heatspreader_heatcapacity: The heatspreader_heatcapacity of this Package.  # noqa: E501
        :type: float
        """

        self._heatspreader_heatcapacity = heatspreader_heatcapacity

    @property
    def tim_thickness(self):
        """Gets the tim_thickness of this Package.  # noqa: E501


        :return: The tim_thickness of this Package.  # noqa: E501
        :rtype: float
        """
        return self._tim_thickness

    @tim_thickness.setter
    def tim_thickness(self, tim_thickness):
        """Sets the tim_thickness of this Package.


        :param tim_thickness: The tim_thickness of this Package.  # noqa: E501
        :type: float
        """

        self._tim_thickness = tim_thickness

    @property
    def tim_conductivity(self):
        """Gets the tim_conductivity of this Package.  # noqa: E501


        :return: The tim_conductivity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._tim_conductivity

    @tim_conductivity.setter
    def tim_conductivity(self, tim_conductivity):
        """Sets the tim_conductivity of this Package.


        :param tim_conductivity: The tim_conductivity of this Package.  # noqa: E501
        :type: float
        """

        self._tim_conductivity = tim_conductivity

    @property
    def tim_heatcapacity(self):
        """Gets the tim_heatcapacity of this Package.  # noqa: E501


        :return: The tim_heatcapacity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._tim_heatcapacity

    @tim_heatcapacity.setter
    def tim_heatcapacity(self, tim_heatcapacity):
        """Sets the tim_heatcapacity of this Package.


        :param tim_heatcapacity: The tim_heatcapacity of this Package.  # noqa: E501
        :type: float
        """

        self._tim_heatcapacity = tim_heatcapacity

    @property
    def underfill_thickness(self):
        """Gets the underfill_thickness of this Package.  # noqa: E501


        :return: The underfill_thickness of this Package.  # noqa: E501
        :rtype: float
        """
        return self._underfill_thickness

    @underfill_thickness.setter
    def underfill_thickness(self, underfill_thickness):
        """Sets the underfill_thickness of this Package.


        :param underfill_thickness: The underfill_thickness of this Package.  # noqa: E501
        :type: float
        """

        self._underfill_thickness = underfill_thickness

    @property
    def c4_width(self):
        """Gets the c4_width of this Package.  # noqa: E501


        :return: The c4_width of this Package.  # noqa: E501
        :rtype: float
        """
        return self._c4_width

    @c4_width.setter
    def c4_width(self, c4_width):
        """Sets the c4_width of this Package.


        :param c4_width: The c4_width of this Package.  # noqa: E501
        :type: float
        """

        self._c4_width = c4_width

    @property
    def c4_number(self):
        """Gets the c4_number of this Package.  # noqa: E501


        :return: The c4_number of this Package.  # noqa: E501
        :rtype: int
        """
        return self._c4_number

    @c4_number.setter
    def c4_number(self, c4_number):
        """Sets the c4_number of this Package.


        :param c4_number: The c4_number of this Package.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                c4_number is not None and c4_number > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `c4_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                c4_number is not None and c4_number < 0):  # noqa: E501
            raise ValueError("Invalid value for `c4_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._c4_number = c4_number

    @property
    def c4_conductivity(self):
        """Gets the c4_conductivity of this Package.  # noqa: E501


        :return: The c4_conductivity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._c4_conductivity

    @c4_conductivity.setter
    def c4_conductivity(self, c4_conductivity):
        """Sets the c4_conductivity of this Package.


        :param c4_conductivity: The c4_conductivity of this Package.  # noqa: E501
        :type: float
        """

        self._c4_conductivity = c4_conductivity

    @property
    def c4_heatcapacity(self):
        """Gets the c4_heatcapacity of this Package.  # noqa: E501


        :return: The c4_heatcapacity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._c4_heatcapacity

    @c4_heatcapacity.setter
    def c4_heatcapacity(self, c4_heatcapacity):
        """Sets the c4_heatcapacity of this Package.


        :param c4_heatcapacity: The c4_heatcapacity of this Package.  # noqa: E501
        :type: float
        """

        self._c4_heatcapacity = c4_heatcapacity

    @property
    def substrate_samesize(self):
        """Gets the substrate_samesize of this Package.  # noqa: E501


        :return: The substrate_samesize of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._substrate_samesize

    @substrate_samesize.setter
    def substrate_samesize(self, substrate_samesize):
        """Sets the substrate_samesize of this Package.


        :param substrate_samesize: The substrate_samesize of this Package.  # noqa: E501
        :type: bool
        """

        self._substrate_samesize = substrate_samesize

    @property
    def substrate_width(self):
        """Gets the substrate_width of this Package.  # noqa: E501


        :return: The substrate_width of this Package.  # noqa: E501
        :rtype: float
        """
        return self._substrate_width

    @substrate_width.setter
    def substrate_width(self, substrate_width):
        """Sets the substrate_width of this Package.


        :param substrate_width: The substrate_width of this Package.  # noqa: E501
        :type: float
        """

        self._substrate_width = substrate_width

    @property
    def substrate_height(self):
        """Gets the substrate_height of this Package.  # noqa: E501


        :return: The substrate_height of this Package.  # noqa: E501
        :rtype: float
        """
        return self._substrate_height

    @substrate_height.setter
    def substrate_height(self, substrate_height):
        """Sets the substrate_height of this Package.


        :param substrate_height: The substrate_height of this Package.  # noqa: E501
        :type: float
        """

        self._substrate_height = substrate_height

    @property
    def substrate_thickness(self):
        """Gets the substrate_thickness of this Package.  # noqa: E501


        :return: The substrate_thickness of this Package.  # noqa: E501
        :rtype: float
        """
        return self._substrate_thickness

    @substrate_thickness.setter
    def substrate_thickness(self, substrate_thickness):
        """Sets the substrate_thickness of this Package.


        :param substrate_thickness: The substrate_thickness of this Package.  # noqa: E501
        :type: float
        """

        self._substrate_thickness = substrate_thickness

    @property
    def substrate_conductivity(self):
        """Gets the substrate_conductivity of this Package.  # noqa: E501


        :return: The substrate_conductivity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._substrate_conductivity

    @substrate_conductivity.setter
    def substrate_conductivity(self, substrate_conductivity):
        """Sets the substrate_conductivity of this Package.


        :param substrate_conductivity: The substrate_conductivity of this Package.  # noqa: E501
        :type: float
        """

        self._substrate_conductivity = substrate_conductivity

    @property
    def substrate_heatcapacity(self):
        """Gets the substrate_heatcapacity of this Package.  # noqa: E501


        :return: The substrate_heatcapacity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._substrate_heatcapacity

    @substrate_heatcapacity.setter
    def substrate_heatcapacity(self, substrate_heatcapacity):
        """Sets the substrate_heatcapacity of this Package.


        :param substrate_heatcapacity: The substrate_heatcapacity of this Package.  # noqa: E501
        :type: float
        """

        self._substrate_heatcapacity = substrate_heatcapacity

    @property
    def solderball_samesize(self):
        """Gets the solderball_samesize of this Package.  # noqa: E501


        :return: The solderball_samesize of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._solderball_samesize

    @solderball_samesize.setter
    def solderball_samesize(self, solderball_samesize):
        """Sets the solderball_samesize of this Package.


        :param solderball_samesize: The solderball_samesize of this Package.  # noqa: E501
        :type: bool
        """

        self._solderball_samesize = solderball_samesize

    @property
    def solderball_width(self):
        """Gets the solderball_width of this Package.  # noqa: E501


        :return: The solderball_width of this Package.  # noqa: E501
        :rtype: float
        """
        return self._solderball_width

    @solderball_width.setter
    def solderball_width(self, solderball_width):
        """Sets the solderball_width of this Package.


        :param solderball_width: The solderball_width of this Package.  # noqa: E501
        :type: float
        """

        self._solderball_width = solderball_width

    @property
    def solderball_height(self):
        """Gets the solderball_height of this Package.  # noqa: E501


        :return: The solderball_height of this Package.  # noqa: E501
        :rtype: float
        """
        return self._solderball_height

    @solderball_height.setter
    def solderball_height(self, solderball_height):
        """Sets the solderball_height of this Package.


        :param solderball_height: The solderball_height of this Package.  # noqa: E501
        :type: float
        """

        self._solderball_height = solderball_height

    @property
    def solderball_thickness(self):
        """Gets the solderball_thickness of this Package.  # noqa: E501


        :return: The solderball_thickness of this Package.  # noqa: E501
        :rtype: float
        """
        return self._solderball_thickness

    @solderball_thickness.setter
    def solderball_thickness(self, solderball_thickness):
        """Sets the solderball_thickness of this Package.


        :param solderball_thickness: The solderball_thickness of this Package.  # noqa: E501
        :type: float
        """

        self._solderball_thickness = solderball_thickness

    @property
    def solderball_conductivity(self):
        """Gets the solderball_conductivity of this Package.  # noqa: E501


        :return: The solderball_conductivity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._solderball_conductivity

    @solderball_conductivity.setter
    def solderball_conductivity(self, solderball_conductivity):
        """Sets the solderball_conductivity of this Package.


        :param solderball_conductivity: The solderball_conductivity of this Package.  # noqa: E501
        :type: float
        """

        self._solderball_conductivity = solderball_conductivity

    @property
    def solderball_heatcapacity(self):
        """Gets the solderball_heatcapacity of this Package.  # noqa: E501


        :return: The solderball_heatcapacity of this Package.  # noqa: E501
        :rtype: float
        """
        return self._solderball_heatcapacity

    @solderball_heatcapacity.setter
    def solderball_heatcapacity(self, solderball_heatcapacity):
        """Sets the solderball_heatcapacity of this Package.


        :param solderball_heatcapacity: The solderball_heatcapacity of this Package.  # noqa: E501
        :type: float
        """

        self._solderball_heatcapacity = solderball_heatcapacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Package):
            return True

        return self.to_dict() != other.to_dict()
