# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'technology': 'int',
        'technology_master': 'int',
        'technology_name': 'str',
        'contrib_devices': 'list[SwaggerContribDevices]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'technology': 'technology',
        'technology_master': 'technology_master',
        'technology_name': 'technology_name',
        'contrib_devices': 'contrib_devices'
    }

    def __init__(self, id=None, name=None, technology=None, technology_master=None, technology_name=None, contrib_devices=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._technology = None
        self._technology_master = None
        self._technology_name = None
        self._contrib_devices = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.technology = technology
        if technology_master is not None:
            self.technology_master = technology_master
        if technology_name is not None:
            self.technology_name = technology_name
        if contrib_devices is not None:
            self.contrib_devices = contrib_devices

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def technology(self):
        """Gets the technology of this Project.  # noqa: E501


        :return: The technology of this Project.  # noqa: E501
        :rtype: int
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this Project.


        :param technology: The technology of this Project.  # noqa: E501
        :type: int
        """

        self._technology = technology

    @property
    def technology_master(self):
        """Gets the technology_master of this Project.  # noqa: E501


        :return: The technology_master of this Project.  # noqa: E501
        :rtype: int
        """
        return self._technology_master

    @technology_master.setter
    def technology_master(self, technology_master):
        """Sets the technology_master of this Project.


        :param technology_master: The technology_master of this Project.  # noqa: E501
        :type: int
        """

        self._technology_master = technology_master

    @property
    def technology_name(self):
        """Gets the technology_name of this Project.  # noqa: E501


        :return: The technology_name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._technology_name

    @technology_name.setter
    def technology_name(self, technology_name):
        """Sets the technology_name of this Project.


        :param technology_name: The technology_name of this Project.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                technology_name is not None and len(technology_name) < 1):
            raise ValueError("Invalid value for `technology_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._technology_name = technology_name

    @property
    def contrib_devices(self):
        """Gets the contrib_devices of this Project.  # noqa: E501


        :return: The contrib_devices of this Project.  # noqa: E501
        :rtype: list[SwaggerContribDevices]
        """
        return self._contrib_devices

    @contrib_devices.setter
    def contrib_devices(self, contrib_devices):
        """Sets the contrib_devices of this Project.


        :param contrib_devices: The contrib_devices of this Project.  # noqa: E501
        :type: list[SwaggerContribDevices]
        """

        self._contrib_devices = contrib_devices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
