# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class SimMeasurement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'str',
        'name': 'str',
        'clock_name': 'str',
        'rising': 'bool',
        'expression': 'str',
        'bit_size': 'int',
        'activity_type': 'list[str]',
        'variable': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'clock_name': 'clock_name',
        'rising': 'rising',
        'expression': 'expression',
        'bit_size': 'bit_size',
        'activity_type': 'activity_type',
        'variable': 'variable'
    }

    def __init__(self, id=None, type=None, name=None, clock_name=None, rising=None, expression=None, bit_size=None, activity_type=None, variable=None, local_vars_configuration=None):  # noqa: E501
        """SimMeasurement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._name = None
        self._clock_name = None
        self._rising = None
        self._expression = None
        self._bit_size = None
        self._activity_type = None
        self._variable = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        self.name = name
        self.clock_name = clock_name
        self.rising = rising
        self.expression = expression
        self.bit_size = bit_size
        if activity_type is not None:
            self.activity_type = activity_type
        self.variable = variable

    @property
    def id(self):
        """Gets the id of this SimMeasurement.  # noqa: E501


        :return: The id of this SimMeasurement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimMeasurement.


        :param id: The id of this SimMeasurement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this SimMeasurement.  # noqa: E501


        :return: The type of this SimMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimMeasurement.


        :param type: The type of this SimMeasurement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type is not None and len(type) < 1):
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this SimMeasurement.  # noqa: E501


        :return: The name of this SimMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimMeasurement.


        :param name: The name of this SimMeasurement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def clock_name(self):
        """Gets the clock_name of this SimMeasurement.  # noqa: E501


        :return: The clock_name of this SimMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._clock_name

    @clock_name.setter
    def clock_name(self, clock_name):
        """Sets the clock_name of this SimMeasurement.


        :param clock_name: The clock_name of this SimMeasurement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                clock_name is not None and len(clock_name) < 1):
            raise ValueError("Invalid value for `clock_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._clock_name = clock_name

    @property
    def rising(self):
        """Gets the rising of this SimMeasurement.  # noqa: E501


        :return: The rising of this SimMeasurement.  # noqa: E501
        :rtype: bool
        """
        return self._rising

    @rising.setter
    def rising(self, rising):
        """Sets the rising of this SimMeasurement.


        :param rising: The rising of this SimMeasurement.  # noqa: E501
        :type: bool
        """

        self._rising = rising

    @property
    def expression(self):
        """Gets the expression of this SimMeasurement.  # noqa: E501


        :return: The expression of this SimMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this SimMeasurement.


        :param expression: The expression of this SimMeasurement.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                expression is not None and len(expression) < 1):
            raise ValueError("Invalid value for `expression`, length must be greater than or equal to `1`")  # noqa: E501

        self._expression = expression

    @property
    def bit_size(self):
        """Gets the bit_size of this SimMeasurement.  # noqa: E501


        :return: The bit_size of this SimMeasurement.  # noqa: E501
        :rtype: int
        """
        return self._bit_size

    @bit_size.setter
    def bit_size(self, bit_size):
        """Sets the bit_size of this SimMeasurement.


        :param bit_size: The bit_size of this SimMeasurement.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                bit_size is not None and bit_size > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `bit_size`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                bit_size is not None and bit_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `bit_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bit_size = bit_size

    @property
    def activity_type(self):
        """Gets the activity_type of this SimMeasurement.  # noqa: E501


        :return: The activity_type of this SimMeasurement.  # noqa: E501
        :rtype: list[str]
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this SimMeasurement.


        :param activity_type: The activity_type of this SimMeasurement.  # noqa: E501
        :type: list[str]
        """

        self._activity_type = activity_type

    @property
    def variable(self):
        """Gets the variable of this SimMeasurement.  # noqa: E501


        :return: The variable of this SimMeasurement.  # noqa: E501
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this SimMeasurement.


        :param variable: The variable of this SimMeasurement.  # noqa: E501
        :type: str
        """

        self._variable = variable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimMeasurement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimMeasurement):
            return True

        return self.to_dict() != other.to_dict()
