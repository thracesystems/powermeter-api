# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class InstanceModeConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'parameter': 'int',
        'parameter_name': 'str',
        'parameter_descr': 'str',
        'value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'parameter': 'parameter',
        'parameter_name': 'parameter_name',
        'parameter_descr': 'parameter_descr',
        'value': 'value'
    }

    def __init__(self, id=None, parameter=None, parameter_name=None, parameter_descr=None, value=None, local_vars_configuration=None):  # noqa: E501
        """InstanceModeConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._parameter = None
        self._parameter_name = None
        self._parameter_descr = None
        self._value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.parameter = parameter
        if parameter_name is not None:
            self.parameter_name = parameter_name
        if parameter_descr is not None:
            self.parameter_descr = parameter_descr
        self.value = value

    @property
    def id(self):
        """Gets the id of this InstanceModeConfig.  # noqa: E501


        :return: The id of this InstanceModeConfig.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceModeConfig.


        :param id: The id of this InstanceModeConfig.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def parameter(self):
        """Gets the parameter of this InstanceModeConfig.  # noqa: E501


        :return: The parameter of this InstanceModeConfig.  # noqa: E501
        :rtype: int
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this InstanceModeConfig.


        :param parameter: The parameter of this InstanceModeConfig.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and parameter is None:  # noqa: E501
            raise ValueError("Invalid value for `parameter`, must not be `None`")  # noqa: E501

        self._parameter = parameter

    @property
    def parameter_name(self):
        """Gets the parameter_name of this InstanceModeConfig.  # noqa: E501


        :return: The parameter_name of this InstanceModeConfig.  # noqa: E501
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this InstanceModeConfig.


        :param parameter_name: The parameter_name of this InstanceModeConfig.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                parameter_name is not None and len(parameter_name) < 1):
            raise ValueError("Invalid value for `parameter_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._parameter_name = parameter_name

    @property
    def parameter_descr(self):
        """Gets the parameter_descr of this InstanceModeConfig.  # noqa: E501


        :return: The parameter_descr of this InstanceModeConfig.  # noqa: E501
        :rtype: str
        """
        return self._parameter_descr

    @parameter_descr.setter
    def parameter_descr(self, parameter_descr):
        """Sets the parameter_descr of this InstanceModeConfig.


        :param parameter_descr: The parameter_descr of this InstanceModeConfig.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                parameter_descr is not None and len(parameter_descr) < 1):
            raise ValueError("Invalid value for `parameter_descr`, length must be greater than or equal to `1`")  # noqa: E501

        self._parameter_descr = parameter_descr

    @property
    def value(self):
        """Gets the value of this InstanceModeConfig.  # noqa: E501


        :return: The value of this InstanceModeConfig.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InstanceModeConfig.


        :param value: The value of this InstanceModeConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceModeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceModeConfig):
            return True

        return self.to_dict() != other.to_dict()
