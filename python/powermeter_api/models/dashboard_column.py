# coding: utf-8

"""
    PowerMeter API

    API  # noqa: E501

    The version of the OpenAPI document: 2021.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from powermeter_api.configuration import Configuration


class DashboardColumn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'order': 'int',
        'filter': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'order': 'order',
        'filter': 'filter'
    }

    def __init__(self, id=None, title=None, order=None, filter=None, local_vars_configuration=None):  # noqa: E501
        """DashboardColumn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._order = None
        self._filter = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        self.order = order
        self.filter = filter

    @property
    def id(self):
        """Gets the id of this DashboardColumn.  # noqa: E501


        :return: The id of this DashboardColumn.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardColumn.


        :param id: The id of this DashboardColumn.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this DashboardColumn.  # noqa: E501


        :return: The title of this DashboardColumn.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardColumn.


        :param title: The title of this DashboardColumn.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def order(self):
        """Gets the order of this DashboardColumn.  # noqa: E501


        :return: The order of this DashboardColumn.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DashboardColumn.


        :param order: The order of this DashboardColumn.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def filter(self):
        """Gets the filter of this DashboardColumn.  # noqa: E501


        :return: The filter of this DashboardColumn.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this DashboardColumn.


        :param filter: The filter of this DashboardColumn.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and filter is None:  # noqa: E501
            raise ValueError("Invalid value for `filter`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                filter is not None and len(filter) < 1):
            raise ValueError("Invalid value for `filter`, length must be greater than or equal to `1`")  # noqa: E501

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardColumn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardColumn):
            return True

        return self.to_dict() != other.to_dict()
