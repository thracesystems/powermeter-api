/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ComputePower1;
import org.openapitools.client.model.ComputePower2;
import org.openapitools.client.model.ComputedContributorPower;
import org.openapitools.client.model.ComputedContributorPower1;
import org.openapitools.client.model.ComputedPower;
import org.openapitools.client.model.ComputedPowerArc;
import org.openapitools.client.model.ContribPower;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.DashboardColumn;
import org.openapitools.client.model.DashboardRow;
import org.openapitools.client.model.Design;
import org.openapitools.client.model.DesignData;
import org.openapitools.client.model.DesignFF;
import org.openapitools.client.model.DesignLatch;
import org.openapitools.client.model.DesignMaster;
import org.openapitools.client.model.DesignPin;
import org.openapitools.client.model.DesignPinEnergy;
import org.openapitools.client.model.DesignScenario;
import org.openapitools.client.model.DesignScenarioConfig;
import org.openapitools.client.model.DesignScenarioModeUtil;
import org.openapitools.client.model.DesignScenarioSupply;
import org.openapitools.client.model.DesignSensor;
import org.openapitools.client.model.DesignStateTable;
import org.openapitools.client.model.DesignTrend;
import org.openapitools.client.model.DesignVersion;
import org.openapitools.client.model.Hier;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.InstanceSupply;
import org.openapitools.client.model.LeakagePower;
import org.openapitools.client.model.Mode;
import org.openapitools.client.model.PagedDesignPinEnergy;
import org.openapitools.client.model.PagedInstance;
import org.openapitools.client.model.PagedLeakagePower;
import org.openapitools.client.model.Param;
import org.openapitools.client.model.PinCap;
import org.openapitools.client.model.PinEnergy;
import org.openapitools.client.model.PinState;
import org.openapitools.client.model.PinStateArc;
import org.openapitools.client.model.Power;
import org.openapitools.client.model.Supply;
import org.openapitools.client.model.SupplyModeState;
import org.openapitools.client.model.UpdateData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DesignApi
 */
@Ignore
public class DesignApiTest {

    private final DesignApi api = new DesignApi();

    
    /**
     * 
     *
     * Delete hierarchy groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDesignHierarchyDeleteAllTest() throws ApiException {
        Integer designid = null;
        api.apiDesignHierarchyDeleteAll(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all instances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDesignInstanceDeleteAllTest() throws ApiException {
        Integer designid = null;
        api.apiDesignInstanceDeleteAll(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete design modes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDesignModeDeleteAllTest() throws ApiException {
        Integer designid = null;
        api.apiDesignModeDeleteAll(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete params
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDesignParameterDeleteAllTest() throws ApiException {
        Integer designid = null;
        api.apiDesignParameterDeleteAll(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDesignSupplyDeleteAllTest() throws ApiException {
        Integer designid = null;
        api.apiDesignSupplyDeleteAll(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Commit a version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designCommitCreateTest() throws ApiException {
        Integer designid = null;
        DesignVersion data = null;
        DesignVersion response = api.designCommitCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designComputepowerCreateTest() throws ApiException {
        Integer designid = null;
        String process = null;
        String rc = null;
        BigDecimal voltage = null;
        Integer temperature = null;
        List<PinState> data = null;
        List<ComputedPower> response = api.designComputepowerCreate(designid, process, rc, voltage, temperature, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designComputepowerarcCreateTest() throws ApiException {
        Integer designid = null;
        String process = null;
        String rc = null;
        BigDecimal voltage = null;
        Integer temperature = null;
        List<PinStateArc> data = null;
        ComputedPowerArc response = api.designComputepowerarcCreate(designid, process, rc, voltage, temperature, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerCompute1ListTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        String p = null;
        BigDecimal v = null;
        Integer t = null;
        ComputedContributorPower1 response = api.designContribpowerCompute1List(designid, powerid, p, v, t);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerComputeListTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        String p = null;
        BigDecimal v = null;
        Integer t = null;
        ComputedContributorPower response = api.designContribpowerComputeList(designid, powerid, p, v, t);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new contributor power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerCreateTest() throws ApiException {
        Integer designid = null;
        ContribPower data = null;
        ContribPower response = api.designContribpowerCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a contributor power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerDeleteTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        api.designContribpowerDelete(designid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of contributor powers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerListTest() throws ApiException {
        Integer designid = null;
        List<ContribPower> response = api.designContribpowerList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a contributor power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerReadTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        ContribPower response = api.designContribpowerRead(designid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a contributor power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designContribpowerUpdateTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        ContribPower data = null;
        ContribPower response = api.designContribpowerUpdate(designid, powerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update design dashboard access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardAccessCreateTest() throws ApiException {
        String dashboardid = null;
        String designid = null;
        Integer projectid = null;
        Integer masterdesignid = null;
        api.designDashboardAccessCreate(dashboardid, designid, projectid, masterdesignid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone a dashboard
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardCloneCreateTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Dashboard response = api.designDashboardCloneCreate(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a dashboard column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardColumnCreateTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        DashboardColumn data = null;
        DashboardColumn response = api.designDashboardColumnCreate(designid, dashboardid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a dashboard column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardColumnDeleteTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Integer columnid = null;
        DashboardColumn data = null;
        DashboardColumn response = api.designDashboardColumnDelete(designid, dashboardid, columnid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get dashboard columns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardColumnListTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        List<DashboardColumn> response = api.designDashboardColumnList(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a dashboard column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardColumnReadTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Integer columnid = null;
        DashboardColumn response = api.designDashboardColumnRead(designid, dashboardid, columnid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a dashboard column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardColumnUpdateTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Integer columnid = null;
        DashboardColumn data = null;
        DashboardColumn response = api.designDashboardColumnUpdate(designid, dashboardid, columnid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a dashboards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardCreateTest() throws ApiException {
        Integer designid = null;
        Dashboard data = null;
        Dashboard response = api.designDashboardCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a dashboard
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardDataListTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Dashboard response = api.designDashboardDataList(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a dashboards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardDeleteTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        api.designDashboardDelete(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of dashboards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardListTest() throws ApiException {
        Integer designid = null;
        List<Dashboard> response = api.designDashboardList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a dashboard
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardReadTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Dashboard response = api.designDashboardRead(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a dashboard row
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardRowCreateTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        DashboardRow data = null;
        DashboardRow response = api.designDashboardRowCreate(designid, dashboardid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a dashboard column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardRowDeleteTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Integer rowid = null;
        DashboardRow data = null;
        DashboardRow response = api.designDashboardRowDelete(designid, dashboardid, rowid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get dashboard rows
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardRowListTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        List<DashboardRow> response = api.designDashboardRowList(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a dashboard row
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardRowReadTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Integer rowid = null;
        DashboardRow response = api.designDashboardRowRead(designid, dashboardid, rowid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a dashboard row
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardRowUpdateTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Integer rowid = null;
        DashboardRow data = null;
        DashboardRow response = api.designDashboardRowUpdate(designid, dashboardid, rowid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a dashboards
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardUpdateTest() throws ApiException {
        Integer designid = null;
        Integer dashboardid = null;
        Dashboard data = null;
        Dashboard response = api.designDashboardUpdate(designid, dashboardid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDashboardUpdateListTest() throws ApiException {
        String designid = null;
        Integer dashboardid = null;
        UpdateData response = api.designDashboardUpdateList(designid, dashboardid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Upload design data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDataCreateTest() throws ApiException {
        String uuid = null;
        String data = null;
        api.designDataCreate(uuid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete design data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDataDeleteTest() throws ApiException {
        Integer designid = null;
        Integer dataid = null;
        api.designDataDelete(designid, dataid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get design data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDataListTest() throws ApiException {
        Integer designid = null;
        String fields = null;
        String filter = null;
        List<DesignData> response = api.designDataList(designid, fields, filter);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get design data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDataReadTest() throws ApiException {
        Integer designid = null;
        Integer dataid = null;
        DesignData response = api.designDataRead(designid, dataid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update design data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designDataUpdateTest() throws ApiException {
        Integer designid = null;
        Integer dataid = null;
        DesignData data = null;
        DesignData response = api.designDataUpdate(designid, dataid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add pin powers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designEnergyCreateTest() throws ApiException {
        Integer designid = null;
        DesignPinEnergy data = null;
        List<DesignPinEnergy> response = api.designEnergyCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of all pin powers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designEnergyListTest() throws ApiException {
        Integer designid = null;
        Integer page = null;
        Integer number = null;
        String process = null;
        String rc = null;
        BigDecimal voltage = null;
        Integer temperature = null;
        PagedDesignPinEnergy response = api.designEnergyList(designid, page, number, process, rc, voltage, temperature);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designFfCreateTest() throws ApiException {
        Integer designid = null;
        DesignFF data = null;
        DesignFF response = api.designFfCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designFfDeleteTest() throws ApiException {
        Integer designid = null;
        Integer ffid = null;
        api.designFfDelete(designid, ffid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of ffs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designFfListTest() throws ApiException {
        Integer designid = null;
        List<DesignFF> response = api.designFfList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designFfReadTest() throws ApiException {
        Integer designid = null;
        Integer ffid = null;
        DesignFF response = api.designFfRead(designid, ffid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designFfUpdateTest() throws ApiException {
        Integer designid = null;
        Integer ffid = null;
        DesignFF data = null;
        DesignFF response = api.designFfUpdate(designid, ffid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create new hierarchy group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designHierarchyGroupCreateTest() throws ApiException {
        Integer designid = null;
        Hier data = null;
        Hier response = api.designHierarchyGroupCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a hierarchy group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designHierarchyGroupDeleteTest() throws ApiException {
        Integer designid = null;
        Integer groupid = null;
        api.designHierarchyGroupDelete(designid, groupid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update hierarchy group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designHierarchyGroupUpdateTest() throws ApiException {
        Integer designid = null;
        Integer groupid = null;
        Hier data = null;
        Hier response = api.designHierarchyGroupUpdate(designid, groupid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get hierarchy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designHierarchyListTest() throws ApiException {
        Integer designid = null;
        List<Hier> response = api.designHierarchyList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update hierarchy
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designHierarchyUpdateTest() throws ApiException {
        Integer designid = null;
        Hier data = null;
        List<Hier> response = api.designHierarchyUpdate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceBulkCreateTest() throws ApiException {
        Integer designid = null;
        List<Instance> data = null;
        Boolean _return = null;
        List<Instance> response = api.designInstanceBulkCreate(designid, data, _return);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone an instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceCloneTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        Instance response = api.designInstanceClone(designid, instanceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceCreateTest() throws ApiException {
        Integer designid = null;
        Instance data = null;
        Instance response = api.designInstanceCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceDeleteTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        api.designInstanceDelete(designid, instanceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of instances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceListTest() throws ApiException {
        Integer designid = null;
        Integer page = null;
        Integer number = null;
        PagedInstance response = api.designInstanceList(designid, page, number);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceReadTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        Instance response = api.designInstanceRead(designid, instanceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update instance supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceSupplyCreateTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        InstanceSupply data = null;
        List<InstanceSupply> response = api.designInstanceSupplyCreate(designid, instanceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get instance supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceSupplyListTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        List<InstanceSupply> response = api.designInstanceSupplyList(designid, instanceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get an instance supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceSupplyReadTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        Integer supplyid = null;
        InstanceSupply response = api.designInstanceSupplyRead(designid, instanceid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update an instance supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceSupplyUpdateTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        Integer supplyid = null;
        InstanceSupply data = null;
        InstanceSupply response = api.designInstanceSupplyUpdate(designid, instanceid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceUpdateTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        Instance data = null;
        Instance response = api.designInstanceUpdate(designid, instanceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update instance master
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstanceUpdatemasterCreateTest() throws ApiException {
        Integer designid = null;
        Integer instanceid = null;
        Integer masterid = null;
        List<Instance> response = api.designInstanceUpdatemasterCreate(designid, instanceid, masterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of designs that can be instantiated in the given design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designInstantiableListTest() throws ApiException {
        Integer designid = null;
        List<DesignMaster> response = api.designInstantiableList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new latch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLatchCreateTest() throws ApiException {
        Integer designid = null;
        DesignLatch data = null;
        DesignLatch response = api.designLatchCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a latch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLatchDeleteTest() throws ApiException {
        Integer designid = null;
        Integer latchid = null;
        api.designLatchDelete(designid, latchid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of latches
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLatchListTest() throws ApiException {
        Integer designid = null;
        List<DesignLatch> response = api.designLatchList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a latch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLatchReadTest() throws ApiException {
        Integer designid = null;
        Integer latchid = null;
        DesignLatch response = api.designLatchRead(designid, latchid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a latch
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLatchUpdateTest() throws ApiException {
        Integer designid = null;
        Integer latchid = null;
        DesignLatch data = null;
        DesignLatch response = api.designLatchUpdate(designid, latchid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new leakage power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLeakagepowerCreateTest() throws ApiException {
        Integer designid = null;
        LeakagePower data = null;
        LeakagePower response = api.designLeakagepowerCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLeakagepowerDeleteTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        api.designLeakagepowerDelete(designid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of leakage powers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLeakagepowerListTest() throws ApiException {
        Integer designid = null;
        Integer page = null;
        Integer number = null;
        String process = null;
        String rc = null;
        BigDecimal voltage = null;
        Integer temperature = null;
        PagedLeakagePower response = api.designLeakagepowerList(designid, page, number, process, rc, voltage, temperature);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLeakagepowerReadTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        LeakagePower response = api.designLeakagepowerRead(designid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designLeakagepowerUpdateTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        LeakagePower data = null;
        LeakagePower response = api.designLeakagepowerUpdate(designid, powerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone a design mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeCloneTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        Mode response = api.designModeClone(designid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeCreateTest() throws ApiException {
        Integer designid = null;
        Mode data = null;
        Mode response = api.designModeCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a design mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeDeleteTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        api.designModeDelete(designid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of design modes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeListTest() throws ApiException {
        Integer designid = null;
        List<Mode> response = api.designModeList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModePowerListTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        api.designModePowerList(designid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModePowerdistributionListTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        api.designModePowerdistributionList(designid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a design mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeReadTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        Mode response = api.designModeRead(designid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeSupplyComputepowerCreateTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        Integer supplyid = null;
        ComputePower1 data = null;
        api.designModeSupplyComputepowerCreate(designid, modeid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeSupplyComputepowertableCreateTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        Integer supplyid = null;
        ComputePower2 data = null;
        api.designModeSupplyComputepowertableCreate(designid, modeid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of supply states per mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeSupplystateListTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Integer modeid = null;
        SupplyModeState response = api.designModeSupplystateList(designid, supplyid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a supply state per mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeSupplystateUpdateTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Integer modeid = null;
        SupplyModeState data = null;
        List<SupplyModeState> response = api.designModeSupplystateUpdate(designid, supplyid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a design mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designModeUpdateTest() throws ApiException {
        Integer designid = null;
        Integer modeid = null;
        Mode data = null;
        Mode response = api.designModeUpdate(designid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clode a mode param
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designParameterCloneTest() throws ApiException {
        Integer designid = null;
        Integer paramid = null;
        Param response = api.designParameterClone(designid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designParameterCreateTest() throws ApiException {
        Integer designid = null;
        Param data = null;
        Param response = api.designParameterCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designParameterDeleteTest() throws ApiException {
        Integer designid = null;
        Integer paramid = null;
        api.designParameterDelete(designid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of params
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designParameterListTest() throws ApiException {
        Integer designid = null;
        List<Param> response = api.designParameterList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designParameterReadTest() throws ApiException {
        Integer designid = null;
        Integer paramid = null;
        Param response = api.designParameterRead(designid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a parameter
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designParameterUpdateTest() throws ApiException {
        Integer designid = null;
        Integer paramid = null;
        Param data = null;
        Param response = api.designParameterUpdate(designid, paramid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPermissionsListTest() throws ApiException {
        Integer designid = null;
        api.designPermissionsList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPermissionsUpdateTest() throws ApiException {
        Integer designid = null;
        api.designPermissionsUpdate(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new pin cap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinCapsCreateTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        PinCap data = null;
        PinCap response = api.designPinCapsCreate(designid, pinid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a pin cap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinCapsDeleteTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        Integer capid = null;
        api.designPinCapsDelete(designid, pinid, capid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of pin caps
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinCapsListTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        String process = null;
        String rc = null;
        BigDecimal voltage = null;
        BigDecimal temperature = null;
        List<PinCap> response = api.designPinCapsList(designid, pinid, process, rc, voltage, temperature);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a pin cap
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinCapsReadTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        Integer capid = null;
        PinCap response = api.designPinCapsRead(designid, pinid, capid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a pin power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinCapsUpdateTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        Integer capid = null;
        PinCap data = null;
        PinCap response = api.designPinCapsUpdate(designid, pinid, capid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinCreateTest() throws ApiException {
        Integer designid = null;
        DesignPin data = null;
        DesignPin response = api.designPinCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinDeleteTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        api.designPinDelete(designid, pinid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new pin power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinEnergyCreateTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        PinEnergy data = null;
        PinEnergy response = api.designPinEnergyCreate(designid, pinid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a pin power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinEnergyDeleteTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        Integer powerid = null;
        api.designPinEnergyDelete(designid, pinid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of pin powers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinEnergyListTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        String process = null;
        String rc = null;
        BigDecimal voltage = null;
        Integer temperature = null;
        List<PinEnergy> response = api.designPinEnergyList(designid, pinid, process, rc, voltage, temperature);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a pin power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinEnergyReadTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        Integer powerid = null;
        PinEnergy response = api.designPinEnergyRead(designid, pinid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a pin power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinEnergyUpdateTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        Integer powerid = null;
        PinEnergy data = null;
        PinEnergy response = api.designPinEnergyUpdate(designid, pinid, powerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of pins
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinListTest() throws ApiException {
        Integer designid = null;
        List<DesignPin> response = api.designPinList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinReadTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        DesignPin response = api.designPinRead(designid, pinid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPinUpdateTest() throws ApiException {
        Integer designid = null;
        Integer pinid = null;
        DesignPin data = null;
        DesignPin response = api.designPinUpdate(designid, pinid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPowerCreateTest() throws ApiException {
        Integer designid = null;
        Power data = null;
        Power response = api.designPowerCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPowerDeleteTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        api.designPowerDelete(designid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of powers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPowerListTest() throws ApiException {
        Integer designid = null;
        List<Power> response = api.designPowerList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPowerReadTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        Power response = api.designPowerRead(designid, powerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designPowerUpdateTest() throws ApiException {
        Integer designid = null;
        Integer powerid = null;
        Power data = null;
        Power response = api.designPowerUpdate(designid, powerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designReadTest() throws ApiException {
        Integer designid = null;
        Design response = api.designRead(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restore a design version as current version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designRestoreCreateTest() throws ApiException {
        Integer designid = null;
        Design response = api.designRestoreCreate(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone a design scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioCloneTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        DesignScenario response = api.designScenarioClone(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioCreateTest() throws ApiException {
        Integer designid = null;
        DesignScenario response = api.designScenarioCreate(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioDeleteTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        api.designScenarioDelete(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of scenarios
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioListTest() throws ApiException {
        Integer designid = null;
        List<DesignScenario> response = api.designScenarioList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a datasheet mode util
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioModeConfigDeleteTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer modeid = null;
        Integer configid = null;
        DesignScenarioModeUtil response = api.designScenarioModeConfigDelete(designid, scenarioid, modeid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get datasheet mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioModeConfigReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer modeid = null;
        Integer configid = null;
        DesignScenarioModeUtil response = api.designScenarioModeConfigRead(designid, scenarioid, modeid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a datasheet mode util
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioModeConfigUpdateTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer modeid = null;
        Integer configid = null;
        DesignScenarioModeUtil response = api.designScenarioModeConfigUpdate(designid, scenarioid, modeid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a scenario mode util
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioModeCreateTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer modeid = null;
        DesignScenarioModeUtil response = api.designScenarioModeCreate(designid, scenarioid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of scenario modes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioModeReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer modeid = null;
        List<DesignScenarioModeUtil> response = api.designScenarioModeRead(designid, scenarioid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioParamConfigDeleteTest() throws ApiException {
        String configid = null;
        Integer designid = null;
        Integer scenarioid = null;
        Integer paramid = null;
        Integer confgiid = null;
        DesignScenarioConfig response = api.designScenarioParamConfigDelete(configid, designid, scenarioid, paramid, confgiid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Getscenario configs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioParamConfigReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer paramid = null;
        Integer configid = null;
        DesignScenarioConfig response = api.designScenarioParamConfigRead(designid, scenarioid, paramid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioParamConfigUpdateTest() throws ApiException {
        String configid = null;
        Integer designid = null;
        Integer scenarioid = null;
        Integer paramid = null;
        Integer confgiid = null;
        DesignScenarioConfig response = api.designScenarioParamConfigUpdate(configid, designid, scenarioid, paramid, confgiid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a scenario config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioParamCreateTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer paramid = null;
        DesignScenarioConfig response = api.designScenarioParamCreate(designid, scenarioid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of scenario configs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioParamReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer paramid = null;
        List<DesignScenarioConfig> response = api.designScenarioParamRead(designid, scenarioid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get power of design scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioPowerListTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        api.designScenarioPowerList(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get power distribution of a design scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioPowerdistributionListTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        api.designScenarioPowerdistributionList(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        DesignScenario response = api.designScenarioRead(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioSupplyConfigDeleteTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer supplyid = null;
        Integer configid = null;
        DesignScenarioSupply response = api.designScenarioSupplyConfigDelete(designid, scenarioid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of scenario supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioSupplyConfigReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer supplyid = null;
        Integer configid = null;
        DesignScenarioSupply response = api.designScenarioSupplyConfigRead(designid, scenarioid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioSupplyConfigUpdateTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer supplyid = null;
        Integer configid = null;
        DesignScenarioSupply response = api.designScenarioSupplyConfigUpdate(designid, scenarioid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a scenario config
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioSupplyCreateTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer supplyid = null;
        DesignScenarioSupply response = api.designScenarioSupplyCreate(designid, scenarioid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of scenario supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioSupplyReadTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        Integer supplyid = null;
        List<DesignScenarioSupply> response = api.designScenarioSupplyRead(designid, scenarioid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scenario power trend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioTrendListTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        api.designScenarioTrendList(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioUpdateTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        DesignScenario data = null;
        DesignScenario response = api.designScenarioUpdate(designid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designScenarioUpdateListTest() throws ApiException {
        Integer designid = null;
        Integer scenarioid = null;
        List<BigDecimal> response = api.designScenarioUpdateList(designid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clode a sensor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSensorCloneTest() throws ApiException {
        Integer designid = null;
        Integer sensorid = null;
        DesignSensor response = api.designSensorClone(designid, sensorid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new sensor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSensorCreateTest() throws ApiException {
        Integer designid = null;
        DesignSensor data = null;
        DesignSensor response = api.designSensorCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a sensor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSensorDeleteTest() throws ApiException {
        Integer designid = null;
        Integer sensorid = null;
        api.designSensorDelete(designid, sensorid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of sensors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSensorListTest() throws ApiException {
        Integer designid = null;
        List<DesignSensor> response = api.designSensorList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a sensor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSensorReadTest() throws ApiException {
        Integer designid = null;
        Integer sensorid = null;
        DesignSensor response = api.designSensorRead(designid, sensorid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a sensor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSensorUpdateTest() throws ApiException {
        Integer designid = null;
        Integer sensorid = null;
        DesignSensor data = null;
        DesignSensor response = api.designSensorUpdate(designid, sensorid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designStatetableCreateTest() throws ApiException {
        Integer designid = null;
        DesignStateTable data = null;
        DesignStateTable response = api.designStatetableCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designStatetableDeleteTest() throws ApiException {
        Integer designid = null;
        Integer statetableid = null;
        api.designStatetableDelete(designid, statetableid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of statetables
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designStatetableListTest() throws ApiException {
        Integer designid = null;
        List<DesignStateTable> response = api.designStatetableList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a statetable
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designStatetableReadTest() throws ApiException {
        Integer designid = null;
        Integer statetableid = null;
        DesignStateTable response = api.designStatetableRead(designid, statetableid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a ff
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designStatetableUpdateTest() throws ApiException {
        Integer designid = null;
        Integer statetableid = null;
        DesignStateTable data = null;
        DesignStateTable response = api.designStatetableUpdate(designid, statetableid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clode a mode param
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyCloneTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Supply response = api.designSupplyClone(designid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyCreateTest() throws ApiException {
        Integer designid = null;
        Supply data = null;
        Supply response = api.designSupplyCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyDeleteTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        api.designSupplyDelete(designid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyListTest() throws ApiException {
        Integer designid = null;
        String name = null;
        List<Supply> response = api.designSupplyList(designid, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of supply states per mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyModestateListTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Integer modeid = null;
        SupplyModeState response = api.designSupplyModestateList(designid, supplyid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a supply state per mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyModestateUpdateTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Integer modeid = null;
        SupplyModeState data = null;
        List<SupplyModeState> response = api.designSupplyModestateUpdate(designid, supplyid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyReadTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Supply response = api.designSupplyRead(designid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplyUpdateTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Supply data = null;
        Supply response = api.designSupplyUpdate(designid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of supply states per mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplymodestateListTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Integer modeid = null;
        SupplyModeState response = api.designSupplymodestateList(designid, supplyid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a supply state per mode
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designSupplymodestateUpdateTest() throws ApiException {
        Integer designid = null;
        Integer supplyid = null;
        Integer modeid = null;
        SupplyModeState data = null;
        List<SupplyModeState> response = api.designSupplymodestateUpdate(designid, supplyid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a trend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designTrendCreateTest() throws ApiException {
        Integer designid = null;
        DesignTrend data = null;
        DesignTrend response = api.designTrendCreate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a trend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designTrendDeleteTest() throws ApiException {
        Integer designid = null;
        Integer trendid = null;
        api.designTrendDelete(designid, trendid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of saved trends
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designTrendListTest() throws ApiException {
        Integer designid = null;
        List<DesignTrend> response = api.designTrendList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a trend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designTrendReadTest() throws ApiException {
        Integer designid = null;
        Integer trendid = null;
        DesignTrend response = api.designTrendRead(designid, trendid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a trend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designTrendUpdateTest() throws ApiException {
        Integer designid = null;
        Integer trendid = null;
        DesignTrend data = null;
        DesignTrend response = api.designTrendUpdate(designid, trendid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designUpdateTest() throws ApiException {
        Integer designid = null;
        Design data = null;
        Design response = api.designUpdate(designid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of {current, last update} times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designUpdateListTest() throws ApiException {
        Integer designid = null;
        UpdateData response = api.designUpdateList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVerilogInstancesListTest() throws ApiException {
        String designid = null;
        String moduleid = null;
        api.designVerilogInstancesList(designid, moduleid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVerilogListTest() throws ApiException {
        String designid = null;
        api.designVerilogList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVerilogModuleStateListTest() throws ApiException {
        String designid = null;
        String moduleid = null;
        api.designVerilogModuleStateList(designid, moduleid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVerilogModulesListTest() throws ApiException {
        String designid = null;
        String moduleid = null;
        api.designVerilogModulesList(designid, moduleid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVerilogWireStateListTest() throws ApiException {
        String designid = null;
        String wireid = null;
        api.designVerilogWireStateList(designid, wireid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVerilogWiresListTest() throws ApiException {
        String designid = null;
        String moduleid = null;
        api.designVerilogWiresList(designid, moduleid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get List of design versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVersionListTest() throws ApiException {
        Integer designid = null;
        List<DesignVersion> response = api.designVersionList(designid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a design version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void designVersionReadTest() throws ApiException {
        Integer designid = null;
        Integer versionid = null;
        List<DesignVersion> response = api.designVersionRead(designid, versionid);

        // TODO: test validations
    }
    
}
