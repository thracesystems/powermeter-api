/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Design;
import org.openapitools.client.model.DesignInstance;
import org.openapitools.client.model.DesignMaster;
import org.openapitools.client.model.DesignSupplyInst;
import org.openapitools.client.model.DesignVersion;
import org.openapitools.client.model.PCBInstance;
import org.openapitools.client.model.PackageInstance;
import org.openapitools.client.model.PackageSupplyInst;
import org.openapitools.client.model.PagedContribDevice;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.Scenario;
import org.openapitools.client.model.ScenarioHierarchy;
import org.openapitools.client.model.ScenarioMaster;
import org.openapitools.client.model.ScenarioModeUtil;
import org.openapitools.client.model.ScenarioModeUtilConfig;
import org.openapitools.client.model.ScenarioParam;
import org.openapitools.client.model.ScenarioParamConfig;
import org.openapitools.client.model.ScenarioVersion;
import org.openapitools.client.model.SimMaster;
import org.openapitools.client.model.SupplyInstConfig;
import org.openapitools.client.model.SwaggerContrib;
import org.openapitools.client.model.UpdateData;
import org.openapitools.client.model.VRInstance;
import org.openapitools.client.model.VRSupplyInst;
import org.openapitools.client.model.WLMMaster;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Ignore
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    
    /**
     * 
     *
     * Update project access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectAccessCreateTest() throws ApiException {
        Integer projectid = null;
        api.projectAccessCreate(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a copy of project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectCloneTest() throws ApiException {
        Integer projectid = null;
        api.projectClone(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Compute a contributor device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectContribDeviceComputeListTest() throws ApiException {
        Integer projectid = null;
        Integer deviceid = null;
        BigDecimal p = null;
        BigDecimal v = null;
        Integer t = null;
        SwaggerContrib response = api.projectContribDeviceComputeList(projectid, deviceid, p, v, t);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a contributor devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectContribDeviceCreateTest() throws ApiException {
        Integer projectid = null;
        SwaggerContrib data = null;
        SwaggerContrib response = api.projectContribDeviceCreate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a contributor devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectContribDeviceDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer deviceid = null;
        api.projectContribDeviceDelete(projectid, deviceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of contributor devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectContribDeviceListTest() throws ApiException {
        Integer projectid = null;
        Integer page = null;
        Integer number = null;
        PagedContribDevice response = api.projectContribDeviceList(projectid, page, number);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a contributor device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectContribDeviceReadTest() throws ApiException {
        Integer projectid = null;
        Integer deviceid = null;
        SwaggerContrib response = api.projectContribDeviceRead(projectid, deviceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a contributor devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectContribDeviceUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer deviceid = null;
        SwaggerContrib data = null;
        SwaggerContrib response = api.projectContribDeviceUpdate(projectid, deviceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectCreateTest() throws ApiException {
        Project data = null;
        Project response = api.projectCreate(data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDeleteTest() throws ApiException {
        Integer projectid = null;
        api.projectDelete(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update design access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignAccessCreateTest() throws ApiException {
        Integer projectid = null;
        Integer masterdesignid = null;
        api.projectDesignAccessCreate(projectid, masterdesignid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a copy of design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignCloneTest() throws ApiException {
        Integer projectid = null;
        Integer masterdesignid = null;
        DesignMaster response = api.projectDesignClone(projectid, masterdesignid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a design, return master design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignCreateTest() throws ApiException {
        Integer projectid = null;
        Design data = null;
        DesignMaster response = api.projectDesignCreate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a master design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer masterdesignid = null;
        api.projectDesignDelete(projectid, masterdesignid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of designs that can be instantiated in the given design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignInstantiableListTest() throws ApiException {
        Integer projectid = null;
        List<DesignMaster> response = api.projectDesignInstantiableList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of master designs in projects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignListTest() throws ApiException {
        Integer projectid = null;
        String name = null;
        List<DesignMaster> response = api.projectDesignList(projectid, name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a master design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignReadTest() throws ApiException {
        Integer projectid = null;
        Integer masterdesignid = null;
        DesignMaster response = api.projectDesignRead(projectid, masterdesignid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a design master
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer masterdesignid = null;
        DesignMaster data = null;
        DesignMaster response = api.projectDesignUpdate(projectid, masterdesignid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of design versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectDesignVersionsListTest() throws ApiException {
        Integer projectid = null;
        Integer masterdesignid = null;
        List<DesignVersion> response = api.projectDesignVersionsList(projectid, masterdesignid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of projects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectListTest() throws ApiException {
        String name = null;
        List<Project> response = api.projectList(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectPermissionsListTest() throws ApiException {
        Integer projectid = null;
        api.projectPermissionsList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectPermissionsUpdateTest() throws ApiException {
        Integer projectid = null;
        api.projectPermissionsUpdate(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectReadTest() throws ApiException {
        Integer projectid = null;
        Project response = api.projectRead(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a reference
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectReferenceCreateTest() throws ApiException {
        Integer projectid = null;
        Project data = null;
        Project response = api.projectReferenceCreate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a reference
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectReferenceDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer refid = null;
        api.projectReferenceDelete(projectid, refid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of refernced projects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectReferenceListTest() throws ApiException {
        Integer projectid = null;
        List<Project> response = api.projectReferenceList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a reference
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectReferenceReadTest() throws ApiException {
        Integer projectid = null;
        Integer refid = null;
        Project response = api.projectReferenceRead(projectid, refid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of projects referenceable by this project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectReferenceableListTest() throws ApiException {
        Integer projectid = null;
        List<Project> response = api.projectReferenceableList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update project datasheet access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioAccessCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        api.projectScenarioAccessCreate(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Commit a version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioCommitCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        ScenarioVersion data = null;
        ScenarioVersion response = api.projectScenarioCommitCreate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        api.projectScenarioDelete(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario PC instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        DesignInstance data = null;
        DesignInstance response = api.projectScenarioDesignCreate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario Design instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        api.projectScenarioDesignDelete(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario Designs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<DesignInstance> response = api.projectScenarioDesignList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamConfigCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        ScenarioParamConfig data = null;
        ScenarioParamConfig response = api.projectScenarioDesignParamConfigCreate(projectid, scenarioid, designinstid, paramid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamConfigDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        Integer configid = null;
        api.projectScenarioDesignParamConfigDelete(projectid, scenarioid, designinstid, paramid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamConfigListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        List<ScenarioParamConfig> response = api.projectScenarioDesignParamConfigList(projectid, scenarioid, designinstid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamConfigReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        Integer configid = null;
        ScenarioParamConfig response = api.projectScenarioDesignParamConfigRead(projectid, scenarioid, designinstid, paramid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamConfigUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        Integer configid = null;
        ScenarioParamConfig data = null;
        ScenarioParamConfig response = api.projectScenarioDesignParamConfigUpdate(projectid, scenarioid, designinstid, paramid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        ScenarioParam data = null;
        ScenarioParam response = api.projectScenarioDesignParamCreate(projectid, scenarioid, designinstid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        List<ScenarioParam> response = api.projectScenarioDesignParamList(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get datasheet design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        List<ScenarioParam> response = api.projectScenarioDesignParamRead(projectid, scenarioid, designinstid, paramid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create datasheet supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignParamUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer paramid = null;
        ScenarioParam data = null;
        ScenarioParam response = api.projectScenarioDesignParamUpdate(projectid, scenarioid, designinstid, paramid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project scenario power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignPowerListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        api.projectScenarioDesignPowerList(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project scenario power distribution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignPowerdistributionListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        api.projectScenarioDesignPowerdistributionList(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scenario Design
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        DesignInstance response = api.projectScenarioDesignRead(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyConfigCreateTest() throws ApiException {
        String designinstid = null;
        Integer projectid = null;
        Integer scenarioid = null;
        Integer dsigninstid = null;
        Integer supplyid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioDesignSupplyConfigCreate(designinstid, projectid, scenarioid, dsigninstid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyConfigDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        api.projectScenarioDesignSupplyConfigDelete(projectid, scenarioid, designinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyConfigListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyid = null;
        List<SupplyInstConfig> response = api.projectScenarioDesignSupplyConfigList(projectid, scenarioid, designinstid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyConfigReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig response = api.projectScenarioDesignSupplyConfigRead(projectid, scenarioid, designinstid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyConfigUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioDesignSupplyConfigUpdate(projectid, scenarioid, designinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyCreateTest() throws ApiException {
        String designinstid = null;
        Integer projectid = null;
        Integer scenarioid = null;
        Integer dsigninstid = null;
        Integer supplyid = null;
        DesignSupplyInst data = null;
        DesignSupplyInst response = api.projectScenarioDesignSupplyCreate(designinstid, projectid, scenarioid, dsigninstid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignSupplyReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyid = null;
        List<DesignSupplyInst> response = api.projectScenarioDesignSupplyRead(projectid, scenarioid, designinstid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Compute project scenario steady state thermal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignThermalListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        api.projectScenarioDesignThermalList(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario Design instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        DesignInstance data = null;
        DesignInstance response = api.projectScenarioDesignUpdate(projectid, scenarioid, designinstid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationConfigCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        ScenarioModeUtilConfig data = null;
        ScenarioModeUtilConfig response = api.projectScenarioDesignUtilizationConfigCreate(projectid, scenarioid, designinstid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationConfigDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        Integer configid = null;
        api.projectScenarioDesignUtilizationConfigDelete(projectid, scenarioid, designinstid, modeid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationConfigListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        List<ScenarioModeUtilConfig> response = api.projectScenarioDesignUtilizationConfigList(projectid, scenarioid, designinstid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationConfigReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        Integer configid = null;
        ScenarioModeUtilConfig response = api.projectScenarioDesignUtilizationConfigRead(projectid, scenarioid, designinstid, modeid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationConfigUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        Integer configid = null;
        ScenarioModeUtilConfig data = null;
        ScenarioModeUtilConfig response = api.projectScenarioDesignUtilizationConfigUpdate(projectid, scenarioid, designinstid, modeid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        ScenarioModeUtil data = null;
        ScenarioModeUtil response = api.projectScenarioDesignUtilizationCreate(projectid, scenarioid, designinstid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        List<ScenarioModeUtil> response = api.projectScenarioDesignUtilizationList(projectid, scenarioid, designinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design config data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        ScenarioModeUtil response = api.projectScenarioDesignUtilizationRead(projectid, scenarioid, designinstid, modeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioDesignUtilizationUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer modeid = null;
        ScenarioModeUtil data = null;
        ScenarioModeUtil response = api.projectScenarioDesignUtilizationUpdate(projectid, scenarioid, designinstid, modeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario PCB package supply instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyDesignSupplyReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyinstid = null;
        DesignSupplyInst response = api.projectScenarioHierarchyDesignSupplyRead(projectid, scenarioid, designinstid, supplyinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario PCB package supply instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyDesignSupplyUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer designinstid = null;
        Integer supplyinstid = null;
        DesignSupplyInst response = api.projectScenarioHierarchyDesignSupplyUpdate(projectid, scenarioid, designinstid, supplyinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario PCBs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        ScenarioHierarchy response = api.projectScenarioHierarchyList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario PCB package supply instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyPackageSupplyReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyinstid = null;
        PackageSupplyInst response = api.projectScenarioHierarchyPackageSupplyRead(projectid, scenarioid, packinstid, supplyinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update scenario PCB package supply instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyPackageSupplyUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyinstid = null;
        PackageSupplyInst response = api.projectScenarioHierarchyPackageSupplyUpdate(projectid, scenarioid, packinstid, supplyinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create datasheet PCB package supply instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyVrSupplyReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyinstid = null;
        VRSupplyInst response = api.projectScenarioHierarchyVrSupplyRead(projectid, scenarioid, vrinstid, supplyinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create datasheet PCB package supply instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioHierarchyVrSupplyUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyinstid = null;
        VRSupplyInst response = api.projectScenarioHierarchyVrSupplyUpdate(projectid, scenarioid, vrinstid, supplyinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryCloneTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        ScenarioMaster response = api.projectScenarioLibraryClone(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryCreateTest() throws ApiException {
        Integer projectid = null;
        ScenarioMaster data = null;
        ScenarioMaster response = api.projectScenarioLibraryCreate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        api.projectScenarioLibraryDelete(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of project scenarios
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryListTest() throws ApiException {
        Integer projectid = null;
        List<ScenarioMaster> response = api.projectScenarioLibraryList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scenarios
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<ScenarioMaster> response = api.projectScenarioLibraryRead(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        ScenarioMaster data = null;
        ScenarioMaster response = api.projectScenarioLibraryUpdate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get List of design versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioLibraryVersionListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<ScenarioVersion> response = api.projectScenarioLibraryVersionList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario Package instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        PackageInstance data = null;
        PackageInstance response = api.projectScenarioPackageCreate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario Package instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        api.projectScenarioPackageDelete(projectid, scenarioid, packinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario Packages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<PackageInstance> response = api.projectScenarioPackageList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project scenario power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackagePowerListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        api.projectScenarioPackagePowerList(projectid, scenarioid, packinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scenario Pckage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        PackageInstance response = api.projectScenarioPackageRead(projectid, scenarioid, packinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create datasheet supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageSupplyConfigCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioPackageSupplyConfigCreate(projectid, scenarioid, packinstid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageSupplyConfigDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        api.projectScenarioPackageSupplyConfigDelete(projectid, scenarioid, packinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageSupplyConfigListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyid = null;
        List<SupplyInstConfig> response = api.projectScenarioPackageSupplyConfigList(projectid, scenarioid, packinstid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageSupplyConfigReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig response = api.projectScenarioPackageSupplyConfigRead(projectid, scenarioid, packinstid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageSupplyConfigUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioPackageSupplyConfigUpdate(projectid, scenarioid, packinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario Package instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPackageUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer packinstid = null;
        PackageInstance data = null;
        PackageInstance response = api.projectScenarioPackageUpdate(projectid, scenarioid, packinstid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario PC instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        PCBInstance data = null;
        PCBInstance response = api.projectScenarioPcbCreate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a datasheet PCB instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        api.projectScenarioPcbDelete(projectid, scenarioid, pcbinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario PCBs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<PCBInstance> response = api.projectScenarioPcbList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project scenario power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbPowerListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        api.projectScenarioPcbPowerList(projectid, scenarioid, pcbinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a datasheet PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        PCBInstance response = api.projectScenarioPcbRead(projectid, scenarioid, pcbinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbSupplyConfigCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        Integer supplyid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioPcbSupplyConfigCreate(projectid, scenarioid, pcbinstid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create datasheet supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbSupplyConfigDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        api.projectScenarioPcbSupplyConfigDelete(projectid, scenarioid, pcbinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbSupplyConfigListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        Integer supplyid = null;
        List<SupplyInstConfig> response = api.projectScenarioPcbSupplyConfigList(projectid, scenarioid, pcbinstid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get datasheet design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbSupplyConfigReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig response = api.projectScenarioPcbSupplyConfigRead(projectid, scenarioid, pcbinstid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create datasheet supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbSupplyConfigUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioPcbSupplyConfigUpdate(projectid, scenarioid, pcbinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a datasheet PCB instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPcbUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer pcbinstid = null;
        PCBInstance data = null;
        PCBInstance response = api.projectScenarioPcbUpdate(projectid, scenarioid, pcbinstid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project scenario power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPowerListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        api.projectScenarioPowerList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioPowerdistributionDownloadReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer resolution = null;
        api.projectScenarioPowerdistributionDownloadRead(projectid, scenarioid, resolution);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Scenario response = api.projectScenarioRead(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a datasheet trend
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioTrendListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        api.projectScenarioTrendList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Scenario data = null;
        Scenario response = api.projectScenarioUpdate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioUpdateListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        UpdateData response = api.projectScenarioUpdateList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get List of design versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVersionListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<ScenarioVersion> response = api.projectScenarioVersionList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario PC instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        VRInstance data = null;
        VRInstance response = api.projectScenarioVrCreate(projectid, scenarioid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a scenario VR instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        api.projectScenarioVrDelete(projectid, scenarioid, vrinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario VRs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        List<VRInstance> response = api.projectScenarioVrList(projectid, scenarioid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get project scenario power
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrPowerListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        api.projectScenarioVrPowerList(projectid, scenarioid, vrinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scenario VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        VRInstance response = api.projectScenarioVrRead(projectid, scenarioid, vrinstid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrSupplyConfigCreateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioVrSupplyConfigCreate(projectid, scenarioid, vrinstid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrSupplyConfigDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        api.projectScenarioVrSupplyConfigDelete(projectid, scenarioid, vrinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrSupplyConfigListTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyid = null;
        List<SupplyInstConfig> response = api.projectScenarioVrSupplyConfigList(projectid, scenarioid, vrinstid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scenario design supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrSupplyConfigReadTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig response = api.projectScenarioVrSupplyConfigRead(projectid, scenarioid, vrinstid, supplyid, configid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create scenario supply data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrSupplyConfigUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        Integer supplyid = null;
        Integer configid = null;
        SupplyInstConfig data = null;
        SupplyInstConfig response = api.projectScenarioVrSupplyConfigUpdate(projectid, scenarioid, vrinstid, supplyid, configid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a scenario VR instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectScenarioVrUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer scenarioid = null;
        Integer vrinstid = null;
        VRInstance data = null;
        VRInstance response = api.projectScenarioVrUpdate(projectid, scenarioid, vrinstid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone a simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationCloneCreateTest() throws ApiException {
        Integer projectid = null;
        Integer simid = null;
        api.projectSimulationCloneCreate(projectid, simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationCreateTest() throws ApiException {
        Integer projectid = null;
        SimMaster data = null;
        List<SimMaster> response = api.projectSimulationCreate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer simid = null;
        api.projectSimulationDelete(projectid, simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of simulations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationListTest() throws ApiException {
        Integer projectid = null;
        List<SimMaster> response = api.projectSimulationList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of simulations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationReadTest() throws ApiException {
        Integer projectid = null;
        Integer simid = null;
        List<SimMaster> response = api.projectSimulationRead(projectid, simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer simid = null;
        SimMaster data = null;
        SimMaster response = api.projectSimulationUpdate(projectid, simid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectSimulationUpdateListTest() throws ApiException {
        Integer projectid = null;
        Integer simid = null;
        UpdateData response = api.projectSimulationUpdateList(projectid, simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUpdateTest() throws ApiException {
        Integer projectid = null;
        Project data = null;
        Project response = api.projectUpdate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of {current, last update} times for current project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectUpdateTimesTest() throws ApiException {
        Integer projectid = null;
        UpdateData response = api.projectUpdateTimes(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectVerilogCreateTest() throws ApiException {
        String projectid = null;
        api.projectVerilogCreate(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a contributor devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectWireLoadCreateTest() throws ApiException {
        Integer projectid = null;
        WLMMaster data = null;
        WLMMaster response = api.projectWireLoadCreate(projectid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete wire load data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectWireLoadDeleteTest() throws ApiException {
        Integer projectid = null;
        Integer wlmid = null;
        api.projectWireLoadDelete(projectid, wlmid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of wire load data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectWireLoadListTest() throws ApiException {
        Integer projectid = null;
        List<WLMMaster> response = api.projectWireLoadList(projectid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get wire load data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectWireLoadReadTest() throws ApiException {
        Integer projectid = null;
        Integer wlmid = null;
        WLMMaster response = api.projectWireLoadRead(projectid, wlmid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update wireload data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectWireLoadUpdateTest() throws ApiException {
        Integer projectid = null;
        Integer wlmid = null;
        WLMMaster data = null;
        WLMMaster response = api.projectWireLoadUpdate(projectid, wlmid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of {current, last update} times for all projects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsUpdateTimesTest() throws ApiException {
        UpdateData response = api.projectsUpdateTimes();

        // TODO: test validations
    }
    
}
