/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ComputedVR;
import org.openapitools.client.model.UpdateData;
import org.openapitools.client.model.VR;
import org.openapitools.client.model.VRMaster;
import org.openapitools.client.model.VRSupply;
import org.openapitools.client.model.VRVersion;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VrApi
 */
@Ignore
public class VrApiTest {

    private final VrApi api = new VrApi();

    
    /**
     * 
     *
     * Commit a version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrCommitCreateTest() throws ApiException {
        Integer vrid = null;
        VRVersion data = null;
        VRVersion response = api.vrCommitCreate(vrid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Compute VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrComputeListTest() throws ApiException {
        Integer vrid = null;
        BigDecimal vin = null;
        BigDecimal vout = null;
        BigDecimal iload = null;
        ComputedVR response = api.vrComputeList(vrid, vin, vout, iload);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copy a VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryCloneTest() throws ApiException {
        Integer vrmasterid = null;
        VRMaster response = api.vrLibraryClone(vrmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryCreateTest() throws ApiException {
        VRMaster data = null;
        VRMaster response = api.vrLibraryCreate(data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryDeleteTest() throws ApiException {
        Integer vrmasterid = null;
        api.vrLibraryDelete(vrmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryListTest() throws ApiException {
        List<VRMaster> response = api.vrLibraryList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryUpdateTest() throws ApiException {
        Integer vrmasterid = null;
        VRMaster data = null;
        VRMaster response = api.vrLibraryUpdate(vrmasterid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryUpdateListTest() throws ApiException {
        UpdateData response = api.vrLibraryUpdateList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get VR master versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrLibraryVersionListTest() throws ApiException {
        Integer vrmasterid = null;
        VRVersion response = api.vrLibraryVersionList(vrmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrPermissionsListTest() throws ApiException {
        Integer vrid = null;
        api.vrPermissionsList(vrid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrPermissionsUpdateTest() throws ApiException {
        Integer vrid = null;
        api.vrPermissionsUpdate(vrid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrReadTest() throws ApiException {
        Integer vrid = null;
        VR response = api.vrRead(vrid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restore a VR version as current version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrRestoreCreateTest() throws ApiException {
        Integer vrid = null;
        VR response = api.vrRestoreCreate(vrid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copy a VR supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrSupplyCloneTest() throws ApiException {
        Integer vrid = null;
        Integer supplyid = null;
        VRSupply response = api.vrSupplyClone(vrid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create VR supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrSupplyCreateTest() throws ApiException {
        Integer vrid = null;
        VRSupply data = null;
        VRSupply response = api.vrSupplyCreate(vrid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete VR supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrSupplyDeleteTest() throws ApiException {
        Integer vrid = null;
        Integer supplyid = null;
        api.vrSupplyDelete(vrid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of VR supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrSupplyListTest() throws ApiException {
        Integer vrid = null;
        List<VRSupply> response = api.vrSupplyList(vrid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a VR supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrSupplyReadTest() throws ApiException {
        Integer vrid = null;
        Integer supplyid = null;
        VRSupply response = api.vrSupplyRead(vrid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update VR supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrSupplyUpdateTest() throws ApiException {
        Integer vrid = null;
        Integer supplyid = null;
        VRSupply data = null;
        VRSupply response = api.vrSupplyUpdate(vrid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a VR
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrUpdateTest() throws ApiException {
        Integer vrid = null;
        VR data = null;
        VR response = api.vrUpdate(vrid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrUpdateListTest() throws ApiException {
        Integer vrid = null;
        UpdateData response = api.vrUpdateList(vrid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get VR versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vrVersionListTest() throws ApiException {
        Integer vrid = null;
        List<VRVersion> response = api.vrVersionList(vrid);

        // TODO: test validations
    }
    
}
