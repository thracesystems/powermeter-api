/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MeasuredDataJSON;
import org.openapitools.client.model.PagedMeasuredData;
import org.openapitools.client.model.PagedSimScope;
import org.openapitools.client.model.PagedSimVar;
import org.openapitools.client.model.SimMeasurement;
import org.openapitools.client.model.SimScope;
import org.openapitools.client.model.SimVar;
import org.openapitools.client.model.Simulation;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SimulationApi
 */
@Ignore
public class SimulationApiTest {

    private final SimulationApi api = new SimulationApi();

    
    /**
     * 
     *
     * Delete all scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSimulationScopeDeleteAllTest() throws ApiException {
        Integer simid = null;
        api.apiSimulationScopeDeleteAll(simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update design access
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationAccessCreateTest() throws ApiException {
        Integer simid = null;
        api.simulationAccessCreate(simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Clone a measurement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementCloneCreateTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        SimMeasurement response = api.simulationMeasurementCloneCreate(simid, measureid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementCreateTest() throws ApiException {
        Integer simid = null;
        SimMeasurement data = null;
        SimMeasurement response = api.simulationMeasurementCreate(simid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Append data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementDataCreateTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        List<MeasuredDataJSON> data = null;
        api.simulationMeasurementDataCreate(simid, measureid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementDataDeleteTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        api.simulationMeasurementDataDelete(simid, measureid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get data for a measure
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementDataListTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        PagedMeasuredData response = api.simulationMeasurementDataList(simid, measureid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a measurement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementDeleteTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        api.simulationMeasurementDelete(simid, measureid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of simulations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementListTest() throws ApiException {
        Integer simid = null;
        List<SimMeasurement> response = api.simulationMeasurementList(simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get measurement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementReadTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        SimMeasurement response = api.simulationMeasurementRead(simid, measureid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a measurement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationMeasurementUpdateTest() throws ApiException {
        Integer simid = null;
        Integer measureid = null;
        SimMeasurement data = null;
        SimMeasurement response = api.simulationMeasurementUpdate(simid, measureid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationPermissionsListTest() throws ApiException {
        Integer simid = null;
        api.simulationPermissionsList(simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationPermissionsUpdateTest() throws ApiException {
        Integer simid = null;
        api.simulationPermissionsUpdate(simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationReadTest() throws ApiException {
        Integer simid = null;
        Simulation response = api.simulationRead(simid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeCreateTest() throws ApiException {
        Integer simid = null;
        SimScope data = null;
        SimScope response = api.simulationScopeCreate(simid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeDeleteTest() throws ApiException {
        Integer simid = null;
        Integer scopeid = null;
        SimScope response = api.simulationScopeDelete(simid, scopeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scopes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeListTest() throws ApiException {
        Integer simid = null;
        Integer page = null;
        Integer number = null;
        PagedSimScope response = api.simulationScopeList(simid, page, number);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeReadTest() throws ApiException {
        Integer simid = null;
        Integer scopeid = null;
        SimScope response = api.simulationScopeRead(simid, scopeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeScopeCreateTest() throws ApiException {
        Integer simid = null;
        Integer scopeid = null;
        SimScope data = null;
        SimScope response = api.simulationScopeScopeCreate(simid, scopeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get scopes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeScopeListTest() throws ApiException {
        Integer simid = null;
        Integer scopeid = null;
        SimScope response = api.simulationScopeScopeList(simid, scopeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a var
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeVarCreateTest() throws ApiException {
        Integer simid = null;
        Integer scopeid = null;
        SimVar data = null;
        SimVar response = api.simulationScopeVarCreate(simid, scopeid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get vars
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationScopeVarListTest() throws ApiException {
        Integer simid = null;
        Integer scopeid = null;
        List<SimVar> response = api.simulationScopeVarList(simid, scopeid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a simulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationUpdateTest() throws ApiException {
        Integer simid = null;
        Simulation data = null;
        Simulation response = api.simulationUpdate(simid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get vars
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void simulationVarListTest() throws ApiException {
        Integer simid = null;
        Integer page = null;
        Integer number = null;
        PagedSimVar response = api.simulationVarList(simid, page, number);

        // TODO: test validations
    }
    
}
