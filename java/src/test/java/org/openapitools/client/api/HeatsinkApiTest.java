/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Heatsink;
import org.openapitools.client.model.HeatsinkMaster;
import org.openapitools.client.model.HeatsinkVersion;
import org.openapitools.client.model.UpdateData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HeatsinkApi
 */
@Ignore
public class HeatsinkApiTest {

    private final HeatsinkApi api = new HeatsinkApi();

    
    /**
     * 
     *
     * Clone a heat sink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void haetsinkLibraryCloneTest() throws ApiException {
        Integer heatsinkmasterid = null;
        HeatsinkMaster response = api.haetsinkLibraryClone(heatsinkmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Commit a version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkCommitCreateTest() throws ApiException {
        Integer heatsinkid = null;
        HeatsinkVersion data = null;
        HeatsinkVersion response = api.heatsinkCommitCreate(heatsinkid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a heatsink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryCreateTest() throws ApiException {
        HeatsinkMaster data = null;
        HeatsinkMaster response = api.heatsinkLibraryCreate(data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a heatsink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryDeleteTest() throws ApiException {
        Integer heatsinkmasterid = null;
        api.heatsinkLibraryDelete(heatsinkmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of heat sinks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryListTest() throws ApiException {
        List<HeatsinkMaster> response = api.heatsinkLibraryList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a heatsink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryReadTest() throws ApiException {
        Integer heatsinkmasterid = null;
        HeatsinkMaster response = api.heatsinkLibraryRead(heatsinkmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a heatsink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryUpdateTest() throws ApiException {
        Integer heatsinkmasterid = null;
        HeatsinkMaster data = null;
        HeatsinkMaster response = api.heatsinkLibraryUpdate(heatsinkmasterid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryUpdateListTest() throws ApiException {
        UpdateData response = api.heatsinkLibraryUpdateList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Heatsink versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkLibraryVersionListTest() throws ApiException {
        Integer heatsinkmasterid = null;
        HeatsinkVersion response = api.heatsinkLibraryVersionList(heatsinkmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkPermissionsListTest() throws ApiException {
        Integer heatsinkid = null;
        api.heatsinkPermissionsList(heatsinkid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkPermissionsUpdateTest() throws ApiException {
        Integer heatsinkid = null;
        api.heatsinkPermissionsUpdate(heatsinkid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a heatsink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkReadTest() throws ApiException {
        Integer heatsinkid = null;
        Heatsink response = api.heatsinkRead(heatsinkid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restore a heatsink version as current version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkRestoreCreateTest() throws ApiException {
        Integer heatsinkid = null;
        Heatsink response = api.heatsinkRestoreCreate(heatsinkid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a heatsink
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkUpdateTest() throws ApiException {
        Integer heatsinkid = null;
        Heatsink data = null;
        Heatsink response = api.heatsinkUpdate(heatsinkid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkUpdateListTest() throws ApiException {
        Integer heatsinkid = null;
        UpdateData response = api.heatsinkUpdateList(heatsinkid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get Heatsink versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void heatsinkVersionListTest() throws ApiException {
        Integer heatsinkid = null;
        List<HeatsinkVersion> response = api.heatsinkVersionList(heatsinkid);

        // TODO: test validations
    }
    
}
