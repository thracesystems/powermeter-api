/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PCB;
import org.openapitools.client.model.PCBMaster;
import org.openapitools.client.model.PCBSupply;
import org.openapitools.client.model.PCBVersionSerialzer;
import org.openapitools.client.model.UpdateData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PcbApi
 */
@Ignore
public class PcbApiTest {

    private final PcbApi api = new PcbApi();

    
    /**
     * 
     *
     * Commit a version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbCommitCreateTest() throws ApiException {
        Integer pcbid = null;
        PCBVersionSerialzer data = null;
        PCBVersionSerialzer response = api.pcbCommitCreate(pcbid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copy a PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryCloneTest() throws ApiException {
        Integer pcbmasterid = null;
        PCBMaster response = api.pcbLibraryClone(pcbmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryCreateTest() throws ApiException {
        PCBMaster data = null;
        PCBMaster response = api.pcbLibraryCreate(data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryDeleteTest() throws ApiException {
        Integer pcbmasterid = null;
        api.pcbLibraryDelete(pcbmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryListTest() throws ApiException {
        List<PCBMaster> response = api.pcbLibraryList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryReadTest() throws ApiException {
        Integer pcbmasterid = null;
        PCBMaster response = api.pcbLibraryRead(pcbmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryUpdateTest() throws ApiException {
        Integer pcbmasterid = null;
        PCBMaster data = null;
        PCBMaster response = api.pcbLibraryUpdate(pcbmasterid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryUpdateListTest() throws ApiException {
        UpdateData response = api.pcbLibraryUpdateList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get PCB versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbLibraryVersionListTest() throws ApiException {
        Integer pcbmasterid = null;
        PCBVersionSerialzer response = api.pcbLibraryVersionList(pcbmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbPermissionsListTest() throws ApiException {
        Integer pcbid = null;
        api.pcbPermissionsList(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbPermissionsUpdateTest() throws ApiException {
        Integer pcbid = null;
        api.pcbPermissionsUpdate(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbReadTest() throws ApiException {
        Integer pcbid = null;
        PCB response = api.pcbRead(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restore a pcb version as current version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbRestoreCreateTest() throws ApiException {
        Integer pcbid = null;
        PCB response = api.pcbRestoreCreate(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copy a PCB supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbSupplyCloneTest() throws ApiException {
        Integer pcbid = null;
        Integer supplyid = null;
        PCBSupply response = api.pcbSupplyClone(pcbid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create PCB supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbSupplyCreateTest() throws ApiException {
        Integer pcbid = null;
        PCBSupply response = api.pcbSupplyCreate(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete PCB supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbSupplyDeleteTest() throws ApiException {
        Integer pcbid = null;
        Integer supplyid = null;
        api.pcbSupplyDelete(pcbid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of PCB supplies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbSupplyListTest() throws ApiException {
        Integer pcbid = null;
        List<PCBSupply> response = api.pcbSupplyList(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a PCB supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbSupplyReadTest() throws ApiException {
        Integer pcbid = null;
        Integer supplyid = null;
        PCBSupply response = api.pcbSupplyRead(pcbid, supplyid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update PCB supply
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbSupplyUpdateTest() throws ApiException {
        Integer pcbid = null;
        Integer supplyid = null;
        PCBSupply data = null;
        PCBSupply response = api.pcbSupplyUpdate(pcbid, supplyid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a PCB
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbUpdateTest() throws ApiException {
        Integer pcbid = null;
        PCB data = null;
        PCB response = api.pcbUpdate(pcbid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbUpdateListTest() throws ApiException {
        Integer pcbid = null;
        UpdateData response = api.pcbUpdateList(pcbid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get PCB versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pcbVersionListTest() throws ApiException {
        Integer pcbid = null;
        List<PCBVersionSerialzer> response = api.pcbVersionList(pcbid);

        // TODO: test validations
    }
    
}
