/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.ComputedDeviceData;
import org.openapitools.client.model.Defect0;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceData;
import org.openapitools.client.model.DeviceDataBulk;
import org.openapitools.client.model.Layer;
import org.openapitools.client.model.LayerStack;
import org.openapitools.client.model.ModelCorner;
import org.openapitools.client.model.PowerSource;
import org.openapitools.client.model.RCCorner;
import org.openapitools.client.model.Technology;
import org.openapitools.client.model.TechnologyMaster;
import org.openapitools.client.model.TechnologyVersion;
import org.openapitools.client.model.UpdateData;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TechnologyApi
 */
@Ignore
public class TechnologyApiTest {

    private final TechnologyApi api = new TechnologyApi();

    
    /**
     * 
     *
     * Delete device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTechnologyDeviceDataDeleteAllTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        api.apiTechnologyDeviceDataDeleteAll(techid, deviceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete all devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTechnologyDeviceDeleteAllTest() throws ApiException {
        Integer techid = null;
        api.apiTechnologyDeviceDeleteAll(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Commit a version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyCommitCreateTest() throws ApiException {
        Integer techid = null;
        TechnologyVersion data = null;
        TechnologyVersion response = api.technologyCommitCreate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a d0 data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyD0CreateTest() throws ApiException {
        Integer techid = null;
        Defect0 data = null;
        Defect0 response = api.technologyD0Create(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a d0 data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyD0DeleteTest() throws ApiException {
        Integer techid = null;
        Integer d0id = null;
        api.technologyD0Delete(techid, d0id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of d0 data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyD0ListTest() throws ApiException {
        Integer techid = null;
        List<Defect0> response = api.technologyD0List(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a d0 data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyD0ReadTest() throws ApiException {
        Integer techid = null;
        Integer d0id = null;
        Defect0 response = api.technologyD0Read(techid, d0id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a d0 data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyD0UpdateTest() throws ApiException {
        Integer techid = null;
        Integer d0id = null;
        Defect0 data = null;
        Defect0 response = api.technologyD0Update(techid, d0id, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceCreateTest() throws ApiException {
        Integer techid = null;
        Device data = null;
        Device response = api.technologyDeviceCreate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataBulkCreateTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        List<DeviceDataBulk> data = null;
        api.technologyDeviceDataBulkCreate(techid, deviceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataComputeListTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        String p = null;
        BigDecimal vds = null;
        BigDecimal vgs = null;
        BigDecimal vbs = null;
        Integer t = null;
        ComputedDeviceData response = api.technologyDeviceDataComputeList(techid, deviceid, p, vds, vgs, vbs, t);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataCreateTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        DeviceData data = null;
        DeviceData response = api.technologyDeviceDataCreate(techid, deviceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataDeleteTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        Integer dataid = null;
        DeviceData data = null;
        DeviceData response = api.technologyDeviceDataDelete(techid, deviceid, dataid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataListTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        String p = null;
        Integer t = null;
        List<DeviceData> response = api.technologyDeviceDataList(techid, deviceid, p, t);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataReadTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        Integer dataid = null;
        DeviceData response = api.technologyDeviceDataRead(techid, deviceid, dataid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataTrainCreateTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        api.technologyDeviceDataTrainCreate(techid, deviceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update device data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDataUpdateTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        Integer dataid = null;
        DeviceData data = null;
        DeviceData response = api.technologyDeviceDataUpdate(techid, deviceid, dataid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceDeleteTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        api.technologyDeviceDelete(techid, deviceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceListTest() throws ApiException {
        Integer techid = null;
        String name = null;
        Integer l = null;
        Integer w = null;
        Integer nfin = null;
        List<Device> response = api.technologyDeviceList(techid, name, l, w, nfin);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceReadTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        Device response = api.technologyDeviceRead(techid, deviceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyDeviceUpdateTest() throws ApiException {
        Integer techid = null;
        Integer deviceid = null;
        Device data = null;
        Device response = api.technologyDeviceUpdate(techid, deviceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copy a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackCloneTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        LayerStack response = api.technologyLayerstackClone(techid, stackid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackCreateTest() throws ApiException {
        Integer techid = null;
        LayerStack data = null;
        LayerStack response = api.technologyLayerstackCreate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackDeleteTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        api.technologyLayerstackDelete(techid, stackid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Copy a layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackLayerCloneTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        Integer layerid = null;
        Layer response = api.technologyLayerstackLayerClone(techid, stackid, layerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackLayerCreateTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        Layer data = null;
        Layer response = api.technologyLayerstackLayerCreate(techid, stackid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackLayerDeleteTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        Integer layerid = null;
        api.technologyLayerstackLayerDelete(techid, stackid, layerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of layers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackLayerListTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        List<Layer> response = api.technologyLayerstackLayerList(techid, stackid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackLayerReadTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        Integer layerid = null;
        Layer response = api.technologyLayerstackLayerRead(techid, stackid, layerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a layer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackLayerUpdateTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        Integer layerid = null;
        Layer data = null;
        Layer response = api.technologyLayerstackLayerUpdate(techid, stackid, layerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of layer stacks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackListTest() throws ApiException {
        Integer techid = null;
        List<LayerStack> response = api.technologyLayerstackList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackReadTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        LayerStack response = api.technologyLayerstackRead(techid, stackid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackUpdateTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        LayerStack data = null;
        LayerStack response = api.technologyLayerstackUpdate(techid, stackid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLayerstackUpdateListTest() throws ApiException {
        Integer techid = null;
        Integer stackid = null;
        UpdateData response = api.technologyLayerstackUpdateList(techid, stackid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a copy of technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryCloneTest() throws ApiException {
        Integer techmasterid = null;
        TechnologyMaster response = api.technologyLibraryClone(techmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create new technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryCreateTest() throws ApiException {
        TechnologyMaster data = null;
        TechnologyMaster response = api.technologyLibraryCreate(data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryDeleteTest() throws ApiException {
        Integer techmasterid = null;
        api.technologyLibraryDelete(techmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of technologies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryListTest() throws ApiException {
        String name = null;
        List<TechnologyMaster> response = api.technologyLibraryList(name);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryReadTest() throws ApiException {
        Integer techmasterid = null;
        TechnologyMaster response = api.technologyLibraryRead(techmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryUpdateTest() throws ApiException {
        Integer techmasterid = null;
        TechnologyMaster data = null;
        TechnologyMaster response = api.technologyLibraryUpdate(techmasterid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryUpdateListTest() throws ApiException {
        UpdateData response = api.technologyLibraryUpdateList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get technology versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyLibraryVersionListTest() throws ApiException {
        Integer techmasterid = null;
        List<TechnologyVersion> response = api.technologyLibraryVersionList(techmasterid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyModelCornerCreateTest() throws ApiException {
        Integer techid = null;
        ModelCorner data = null;
        ModelCorner response = api.technologyModelCornerCreate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a model corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyModelCornerDeleteTest() throws ApiException {
        Integer techid = null;
        Integer cornerid = null;
        api.technologyModelCornerDelete(techid, cornerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of model corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyModelCornerListTest() throws ApiException {
        Integer techid = null;
        List<ModelCorner> response = api.technologyModelCornerList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a model corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyModelCornerReadTest() throws ApiException {
        Integer techid = null;
        Integer cornerid = null;
        ModelCorner response = api.technologyModelCornerRead(techid, cornerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a model corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyModelCornerUpdateTest() throws ApiException {
        Integer techid = null;
        Integer cornerid = null;
        ModelCorner data = null;
        ModelCorner response = api.technologyModelCornerUpdate(techid, cornerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyPermissionsListTest() throws ApiException {
        Integer techid = null;
        api.technologyPermissionsList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyPermissionsUpdateTest() throws ApiException {
        Integer techid = null;
        api.technologyPermissionsUpdate(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyRcCornerCreateTest() throws ApiException {
        Integer techid = null;
        RCCorner data = null;
        RCCorner response = api.technologyRcCornerCreate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a model corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyRcCornerDeleteTest() throws ApiException {
        Integer techid = null;
        Integer cornerid = null;
        api.technologyRcCornerDelete(techid, cornerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of RC corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyRcCornerListTest() throws ApiException {
        Integer techid = null;
        List<RCCorner> response = api.technologyRcCornerList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a RC corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyRcCornerReadTest() throws ApiException {
        Integer techid = null;
        Integer cornerid = null;
        RCCorner response = api.technologyRcCornerRead(techid, cornerid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a model corner
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyRcCornerUpdateTest() throws ApiException {
        Integer techid = null;
        Integer cornerid = null;
        RCCorner data = null;
        RCCorner response = api.technologyRcCornerUpdate(techid, cornerid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyReadTest() throws ApiException {
        Integer techid = null;
        Technology response = api.technologyRead(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Restore a technology version as current version
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyRestoreCreateTest() throws ApiException {
        Integer techid = null;
        Technology response = api.technologyRestoreCreate(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologySourceCreateTest() throws ApiException {
        Integer techid = null;
        PowerSource data = null;
        PowerSource response = api.technologySourceCreate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologySourceDeleteTest() throws ApiException {
        Integer techid = null;
        Integer sourceid = null;
        api.technologySourceDelete(techid, sourceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get list of layer stacks
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologySourceListTest() throws ApiException {
        Integer techid = null;
        List<PowerSource> response = api.technologySourceList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologySourceReadTest() throws ApiException {
        Integer techid = null;
        Integer sourceid = null;
        PowerSource response = api.technologySourceRead(techid, sourceid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a layer stack
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologySourceUpdateTest() throws ApiException {
        Integer techid = null;
        Integer sourceid = null;
        PowerSource data = null;
        PowerSource response = api.technologySourceUpdate(techid, sourceid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a technology
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyUpdateTest() throws ApiException {
        Integer techid = null;
        Technology data = null;
        Technology response = api.technologyUpdate(techid, data);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns an array of [current, last update] times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyUpdateListTest() throws ApiException {
        Integer techid = null;
        UpdateData response = api.technologyUpdateList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get technology versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyVersionListTest() throws ApiException {
        Integer techid = null;
        List<TechnologyVersion> response = api.technologyVersionList(techid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get technology versions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void technologyVersionReadTest() throws ApiException {
        Integer techid = null;
        Integer versionid = null;
        TechnologyVersion response = api.technologyVersionRead(techid, versionid);

        // TODO: test validations
    }
    
}
