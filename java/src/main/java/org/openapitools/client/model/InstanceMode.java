/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InstanceModeConfig;
import org.openapitools.client.model.InstanceModeUtilization;

/**
 * InstanceMode
 */

public class InstanceMode {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_DESIGNMODE = "designmode";
  @SerializedName(SERIALIZED_NAME_DESIGNMODE)
  private Integer designmode;

  public static final String SERIALIZED_NAME_UTILIZATIONS = "utilizations";
  @SerializedName(SERIALIZED_NAME_UTILIZATIONS)
  private List<InstanceModeUtilization> utilizations = new ArrayList<InstanceModeUtilization>();

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private List<InstanceModeConfig> config = new ArrayList<InstanceModeConfig>();


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }




  public InstanceMode designmode(Integer designmode) {
    
    this.designmode = designmode;
    return this;
  }

   /**
   * Get designmode
   * @return designmode
  **/
  @ApiModelProperty(required = true, value = "")

  public Integer getDesignmode() {
    return designmode;
  }


  public void setDesignmode(Integer designmode) {
    this.designmode = designmode;
  }


  public InstanceMode utilizations(List<InstanceModeUtilization> utilizations) {
    
    this.utilizations = utilizations;
    return this;
  }

  public InstanceMode addUtilizationsItem(InstanceModeUtilization utilizationsItem) {
    this.utilizations.add(utilizationsItem);
    return this;
  }

   /**
   * Get utilizations
   * @return utilizations
  **/
  @ApiModelProperty(required = true, value = "")

  public List<InstanceModeUtilization> getUtilizations() {
    return utilizations;
  }


  public void setUtilizations(List<InstanceModeUtilization> utilizations) {
    this.utilizations = utilizations;
  }


  public InstanceMode config(List<InstanceModeConfig> config) {
    
    this.config = config;
    return this;
  }

  public InstanceMode addConfigItem(InstanceModeConfig configItem) {
    this.config.add(configItem);
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(required = true, value = "")

  public List<InstanceModeConfig> getConfig() {
    return config;
  }


  public void setConfig(List<InstanceModeConfig> config) {
    this.config = config;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceMode instanceMode = (InstanceMode) o;
    return Objects.equals(this.id, instanceMode.id) &&
        Objects.equals(this.designmode, instanceMode.designmode) &&
        Objects.equals(this.utilizations, instanceMode.utilizations) &&
        Objects.equals(this.config, instanceMode.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, designmode, utilizations, config);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceMode {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    designmode: ").append(toIndentedString(designmode)).append("\n");
    sb.append("    utilizations: ").append(toIndentedString(utilizations)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

