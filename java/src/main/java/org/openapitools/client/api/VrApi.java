/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ComputedVR;
import org.openapitools.client.model.UpdateData;
import org.openapitools.client.model.VR;
import org.openapitools.client.model.VRMaster;
import org.openapitools.client.model.VRSupply;
import org.openapitools.client.model.VRVersion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VrApi {
    private ApiClient localVarApiClient;

    public VrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for vrCommitCreate
     * @param vrid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrCommitCreateCall(Integer vrid, VRVersion data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/commit/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrCommitCreateValidateBeforeCall(Integer vrid, VRVersion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling vrCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = vrCommitCreateCall(vrid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param vrid  (required)
     * @param data  (required)
     * @return VRVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRVersion vrCommitCreate(Integer vrid, VRVersion data) throws ApiException {
        ApiResponse<VRVersion> localVarResp = vrCommitCreateWithHttpInfo(vrid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param vrid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VRVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRVersion> vrCommitCreateWithHttpInfo(Integer vrid, VRVersion data) throws ApiException {
        okhttp3.Call localVarCall = vrCommitCreateValidateBeforeCall(vrid, data, null);
        Type localVarReturnType = new TypeToken<VRVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param vrid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrCommitCreateAsync(Integer vrid, VRVersion data, final ApiCallback<VRVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrCommitCreateValidateBeforeCall(vrid, data, _callback);
        Type localVarReturnType = new TypeToken<VRVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrComputeList
     * @param vrid  (required)
     * @param vin  (required)
     * @param vout  (required)
     * @param iload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrComputeListCall(Integer vrid, BigDecimal vin, BigDecimal vout, BigDecimal iload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/compute/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vin", vin));
        }

        if (vout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vout", vout));
        }

        if (iload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Iload", iload));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrComputeListValidateBeforeCall(Integer vrid, BigDecimal vin, BigDecimal vout, BigDecimal iload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrComputeList(Async)");
        }
        
        // verify the required parameter 'vin' is set
        if (vin == null) {
            throw new ApiException("Missing the required parameter 'vin' when calling vrComputeList(Async)");
        }
        
        // verify the required parameter 'vout' is set
        if (vout == null) {
            throw new ApiException("Missing the required parameter 'vout' when calling vrComputeList(Async)");
        }
        
        // verify the required parameter 'iload' is set
        if (iload == null) {
            throw new ApiException("Missing the required parameter 'iload' when calling vrComputeList(Async)");
        }
        

        okhttp3.Call localVarCall = vrComputeListCall(vrid, vin, vout, iload, _callback);
        return localVarCall;

    }

    /**
     * 
     * Compute VR
     * @param vrid  (required)
     * @param vin  (required)
     * @param vout  (required)
     * @param iload  (required)
     * @return ComputedVR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ComputedVR vrComputeList(Integer vrid, BigDecimal vin, BigDecimal vout, BigDecimal iload) throws ApiException {
        ApiResponse<ComputedVR> localVarResp = vrComputeListWithHttpInfo(vrid, vin, vout, iload);
        return localVarResp.getData();
    }

    /**
     * 
     * Compute VR
     * @param vrid  (required)
     * @param vin  (required)
     * @param vout  (required)
     * @param iload  (required)
     * @return ApiResponse&lt;ComputedVR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputedVR> vrComputeListWithHttpInfo(Integer vrid, BigDecimal vin, BigDecimal vout, BigDecimal iload) throws ApiException {
        okhttp3.Call localVarCall = vrComputeListValidateBeforeCall(vrid, vin, vout, iload, null);
        Type localVarReturnType = new TypeToken<ComputedVR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Compute VR
     * @param vrid  (required)
     * @param vin  (required)
     * @param vout  (required)
     * @param iload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrComputeListAsync(Integer vrid, BigDecimal vin, BigDecimal vout, BigDecimal iload, final ApiCallback<ComputedVR> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrComputeListValidateBeforeCall(vrid, vin, vout, iload, _callback);
        Type localVarReturnType = new TypeToken<ComputedVR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryClone
     * @param vrmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryCloneCall(Integer vrmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/library/{vrmasterid}/clone/"
            .replaceAll("\\{" + "vrmasterid" + "\\}", localVarApiClient.escapeString(vrmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryCloneValidateBeforeCall(Integer vrmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrmasterid' is set
        if (vrmasterid == null) {
            throw new ApiException("Missing the required parameter 'vrmasterid' when calling vrLibraryClone(Async)");
        }
        

        okhttp3.Call localVarCall = vrLibraryCloneCall(vrmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Copy a VR
     * @param vrmasterid  (required)
     * @return VRMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRMaster vrLibraryClone(Integer vrmasterid) throws ApiException {
        ApiResponse<VRMaster> localVarResp = vrLibraryCloneWithHttpInfo(vrmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Copy a VR
     * @param vrmasterid  (required)
     * @return ApiResponse&lt;VRMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRMaster> vrLibraryCloneWithHttpInfo(Integer vrmasterid) throws ApiException {
        okhttp3.Call localVarCall = vrLibraryCloneValidateBeforeCall(vrmasterid, null);
        Type localVarReturnType = new TypeToken<VRMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copy a VR
     * @param vrmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryCloneAsync(Integer vrmasterid, final ApiCallback<VRMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryCloneValidateBeforeCall(vrmasterid, _callback);
        Type localVarReturnType = new TypeToken<VRMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryCreateCall(VRMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/vr/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryCreateValidateBeforeCall(VRMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling vrLibraryCreate(Async)");
        }
        

        okhttp3.Call localVarCall = vrLibraryCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a VR
     * @param data  (required)
     * @return VRMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public VRMaster vrLibraryCreate(VRMaster data) throws ApiException {
        ApiResponse<VRMaster> localVarResp = vrLibraryCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a VR
     * @param data  (required)
     * @return ApiResponse&lt;VRMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRMaster> vrLibraryCreateWithHttpInfo(VRMaster data) throws ApiException {
        okhttp3.Call localVarCall = vrLibraryCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<VRMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a VR
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryCreateAsync(VRMaster data, final ApiCallback<VRMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<VRMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryDelete
     * @param vrmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryDeleteCall(Integer vrmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/library/{vrmasterid}/"
            .replaceAll("\\{" + "vrmasterid" + "\\}", localVarApiClient.escapeString(vrmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryDeleteValidateBeforeCall(Integer vrmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrmasterid' is set
        if (vrmasterid == null) {
            throw new ApiException("Missing the required parameter 'vrmasterid' when calling vrLibraryDelete(Async)");
        }
        

        okhttp3.Call localVarCall = vrLibraryDeleteCall(vrmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete VR
     * @param vrmasterid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void vrLibraryDelete(Integer vrmasterid) throws ApiException {
        vrLibraryDeleteWithHttpInfo(vrmasterid);
    }

    /**
     * 
     * Delete VR
     * @param vrmasterid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vrLibraryDeleteWithHttpInfo(Integer vrmasterid) throws ApiException {
        okhttp3.Call localVarCall = vrLibraryDeleteValidateBeforeCall(vrmasterid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete VR
     * @param vrmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryDeleteAsync(Integer vrmasterid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryDeleteValidateBeforeCall(vrmasterid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = vrLibraryListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of VR
     * @return List&lt;VRMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<VRMaster> vrLibraryList() throws ApiException {
        ApiResponse<List<VRMaster>> localVarResp = vrLibraryListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of VR
     * @return ApiResponse&lt;List&lt;VRMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VRMaster>> vrLibraryListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = vrLibraryListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<VRMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of VR
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryListAsync(final ApiCallback<List<VRMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<VRMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryUpdate
     * @param vrmasterid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryUpdateCall(Integer vrmasterid, VRMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/vr/library/{vrmasterid}/"
            .replaceAll("\\{" + "vrmasterid" + "\\}", localVarApiClient.escapeString(vrmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryUpdateValidateBeforeCall(Integer vrmasterid, VRMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrmasterid' is set
        if (vrmasterid == null) {
            throw new ApiException("Missing the required parameter 'vrmasterid' when calling vrLibraryUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling vrLibraryUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = vrLibraryUpdateCall(vrmasterid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update VR
     * @param vrmasterid  (required)
     * @param data  (required)
     * @return VRMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRMaster vrLibraryUpdate(Integer vrmasterid, VRMaster data) throws ApiException {
        ApiResponse<VRMaster> localVarResp = vrLibraryUpdateWithHttpInfo(vrmasterid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update VR
     * @param vrmasterid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VRMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRMaster> vrLibraryUpdateWithHttpInfo(Integer vrmasterid, VRMaster data) throws ApiException {
        okhttp3.Call localVarCall = vrLibraryUpdateValidateBeforeCall(vrmasterid, data, null);
        Type localVarReturnType = new TypeToken<VRMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update VR
     * @param vrmasterid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryUpdateAsync(Integer vrmasterid, VRMaster data, final ApiCallback<VRMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryUpdateValidateBeforeCall(vrmasterid, data, _callback);
        Type localVarReturnType = new TypeToken<VRMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryUpdateList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryUpdateListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/library/update/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryUpdateListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = vrLibraryUpdateListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData vrLibraryUpdateList() throws ApiException {
        ApiResponse<UpdateData> localVarResp = vrLibraryUpdateListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> vrLibraryUpdateListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = vrLibraryUpdateListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryUpdateListAsync(final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryUpdateListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrLibraryVersionList
     * @param vrmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryVersionListCall(Integer vrmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/library/{vrmasterid}/version/"
            .replaceAll("\\{" + "vrmasterid" + "\\}", localVarApiClient.escapeString(vrmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrLibraryVersionListValidateBeforeCall(Integer vrmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrmasterid' is set
        if (vrmasterid == null) {
            throw new ApiException("Missing the required parameter 'vrmasterid' when calling vrLibraryVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = vrLibraryVersionListCall(vrmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get VR master versions
     * @param vrmasterid  (required)
     * @return VRVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRVersion vrLibraryVersionList(Integer vrmasterid) throws ApiException {
        ApiResponse<VRVersion> localVarResp = vrLibraryVersionListWithHttpInfo(vrmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get VR master versions
     * @param vrmasterid  (required)
     * @return ApiResponse&lt;VRVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRVersion> vrLibraryVersionListWithHttpInfo(Integer vrmasterid) throws ApiException {
        okhttp3.Call localVarCall = vrLibraryVersionListValidateBeforeCall(vrmasterid, null);
        Type localVarReturnType = new TypeToken<VRVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get VR master versions
     * @param vrmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrLibraryVersionListAsync(Integer vrmasterid, final ApiCallback<VRVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrLibraryVersionListValidateBeforeCall(vrmasterid, _callback);
        Type localVarReturnType = new TypeToken<VRVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrPermissionsList
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrPermissionsListCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/permissions/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrPermissionsListValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = vrPermissionsListCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param vrid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void vrPermissionsList(Integer vrid) throws ApiException {
        vrPermissionsListWithHttpInfo(vrid);
    }

    /**
     * 
     * Get list of permissions
     * @param vrid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vrPermissionsListWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrPermissionsListValidateBeforeCall(vrid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrPermissionsListAsync(Integer vrid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrPermissionsListValidateBeforeCall(vrid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrPermissionsUpdate
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrPermissionsUpdateCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/permissions/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrPermissionsUpdateValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = vrPermissionsUpdateCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param vrid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void vrPermissionsUpdate(Integer vrid) throws ApiException {
        vrPermissionsUpdateWithHttpInfo(vrid);
    }

    /**
     * 
     * Get list of permissions
     * @param vrid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vrPermissionsUpdateWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrPermissionsUpdateValidateBeforeCall(vrid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrPermissionsUpdateAsync(Integer vrid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrPermissionsUpdateValidateBeforeCall(vrid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrRead
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrReadCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrReadValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrRead(Async)");
        }
        

        okhttp3.Call localVarCall = vrReadCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a VR
     * @param vrid  (required)
     * @return VR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VR vrRead(Integer vrid) throws ApiException {
        ApiResponse<VR> localVarResp = vrReadWithHttpInfo(vrid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a VR
     * @param vrid  (required)
     * @return ApiResponse&lt;VR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VR> vrReadWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrReadValidateBeforeCall(vrid, null);
        Type localVarReturnType = new TypeToken<VR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a VR
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrReadAsync(Integer vrid, final ApiCallback<VR> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrReadValidateBeforeCall(vrid, _callback);
        Type localVarReturnType = new TypeToken<VR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrRestoreCreate
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrRestoreCreateCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/restore/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrRestoreCreateValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrRestoreCreate(Async)");
        }
        

        okhttp3.Call localVarCall = vrRestoreCreateCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restore a VR version as current version
     * @param vrid  (required)
     * @return VR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VR vrRestoreCreate(Integer vrid) throws ApiException {
        ApiResponse<VR> localVarResp = vrRestoreCreateWithHttpInfo(vrid);
        return localVarResp.getData();
    }

    /**
     * 
     * Restore a VR version as current version
     * @param vrid  (required)
     * @return ApiResponse&lt;VR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VR> vrRestoreCreateWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrRestoreCreateValidateBeforeCall(vrid, null);
        Type localVarReturnType = new TypeToken<VR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restore a VR version as current version
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrRestoreCreateAsync(Integer vrid, final ApiCallback<VR> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrRestoreCreateValidateBeforeCall(vrid, _callback);
        Type localVarReturnType = new TypeToken<VR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrSupplyClone
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyCloneCall(Integer vrid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/supply/{supplyid}/clone/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrSupplyCloneValidateBeforeCall(Integer vrid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrSupplyClone(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling vrSupplyClone(Async)");
        }
        

        okhttp3.Call localVarCall = vrSupplyCloneCall(vrid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Copy a VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @return VRSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRSupply vrSupplyClone(Integer vrid, Integer supplyid) throws ApiException {
        ApiResponse<VRSupply> localVarResp = vrSupplyCloneWithHttpInfo(vrid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Copy a VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;VRSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRSupply> vrSupplyCloneWithHttpInfo(Integer vrid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = vrSupplyCloneValidateBeforeCall(vrid, supplyid, null);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copy a VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyCloneAsync(Integer vrid, Integer supplyid, final ApiCallback<VRSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrSupplyCloneValidateBeforeCall(vrid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrSupplyCreate
     * @param vrid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyCreateCall(Integer vrid, VRSupply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/supply/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrSupplyCreateValidateBeforeCall(Integer vrid, VRSupply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrSupplyCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling vrSupplyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = vrSupplyCreateCall(vrid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create VR supplies
     * @param vrid  (required)
     * @param data  (required)
     * @return VRSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRSupply vrSupplyCreate(Integer vrid, VRSupply data) throws ApiException {
        ApiResponse<VRSupply> localVarResp = vrSupplyCreateWithHttpInfo(vrid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create VR supplies
     * @param vrid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VRSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRSupply> vrSupplyCreateWithHttpInfo(Integer vrid, VRSupply data) throws ApiException {
        okhttp3.Call localVarCall = vrSupplyCreateValidateBeforeCall(vrid, data, null);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create VR supplies
     * @param vrid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyCreateAsync(Integer vrid, VRSupply data, final ApiCallback<VRSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrSupplyCreateValidateBeforeCall(vrid, data, _callback);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrSupplyDelete
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyDeleteCall(Integer vrid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/supply/{supplyid}/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrSupplyDeleteValidateBeforeCall(Integer vrid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrSupplyDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling vrSupplyDelete(Async)");
        }
        

        okhttp3.Call localVarCall = vrSupplyDeleteCall(vrid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void vrSupplyDelete(Integer vrid, Integer supplyid) throws ApiException {
        vrSupplyDeleteWithHttpInfo(vrid, supplyid);
    }

    /**
     * 
     * Delete VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vrSupplyDeleteWithHttpInfo(Integer vrid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = vrSupplyDeleteValidateBeforeCall(vrid, supplyid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyDeleteAsync(Integer vrid, Integer supplyid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrSupplyDeleteValidateBeforeCall(vrid, supplyid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrSupplyList
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyListCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/supply/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrSupplyListValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrSupplyList(Async)");
        }
        

        okhttp3.Call localVarCall = vrSupplyListCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of VR supplies
     * @param vrid  (required)
     * @return List&lt;VRSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<VRSupply> vrSupplyList(Integer vrid) throws ApiException {
        ApiResponse<List<VRSupply>> localVarResp = vrSupplyListWithHttpInfo(vrid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of VR supplies
     * @param vrid  (required)
     * @return ApiResponse&lt;List&lt;VRSupply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VRSupply>> vrSupplyListWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrSupplyListValidateBeforeCall(vrid, null);
        Type localVarReturnType = new TypeToken<List<VRSupply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of VR supplies
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyListAsync(Integer vrid, final ApiCallback<List<VRSupply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrSupplyListValidateBeforeCall(vrid, _callback);
        Type localVarReturnType = new TypeToken<List<VRSupply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrSupplyRead
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyReadCall(Integer vrid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/supply/{supplyid}/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrSupplyReadValidateBeforeCall(Integer vrid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling vrSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = vrSupplyReadCall(vrid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @return VRSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRSupply vrSupplyRead(Integer vrid, Integer supplyid) throws ApiException {
        ApiResponse<VRSupply> localVarResp = vrSupplyReadWithHttpInfo(vrid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;VRSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRSupply> vrSupplyReadWithHttpInfo(Integer vrid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = vrSupplyReadValidateBeforeCall(vrid, supplyid, null);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyReadAsync(Integer vrid, Integer supplyid, final ApiCallback<VRSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrSupplyReadValidateBeforeCall(vrid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrSupplyUpdate
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyUpdateCall(Integer vrid, Integer supplyid, VRSupply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/supply/{supplyid}/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrSupplyUpdateValidateBeforeCall(Integer vrid, Integer supplyid, VRSupply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling vrSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling vrSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = vrSupplyUpdateCall(vrid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return VRSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRSupply vrSupplyUpdate(Integer vrid, Integer supplyid, VRSupply data) throws ApiException {
        ApiResponse<VRSupply> localVarResp = vrSupplyUpdateWithHttpInfo(vrid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VRSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRSupply> vrSupplyUpdateWithHttpInfo(Integer vrid, Integer supplyid, VRSupply data) throws ApiException {
        okhttp3.Call localVarCall = vrSupplyUpdateValidateBeforeCall(vrid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update VR supply
     * @param vrid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrSupplyUpdateAsync(Integer vrid, Integer supplyid, VRSupply data, final ApiCallback<VRSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrSupplyUpdateValidateBeforeCall(vrid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<VRSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrUpdate
     * @param vrid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrUpdateCall(Integer vrid, VR data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrUpdateValidateBeforeCall(Integer vrid, VR data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling vrUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = vrUpdateCall(vrid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a VR
     * @param vrid  (required)
     * @param data  (required)
     * @return VR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VR vrUpdate(Integer vrid, VR data) throws ApiException {
        ApiResponse<VR> localVarResp = vrUpdateWithHttpInfo(vrid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a VR
     * @param vrid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VR> vrUpdateWithHttpInfo(Integer vrid, VR data) throws ApiException {
        okhttp3.Call localVarCall = vrUpdateValidateBeforeCall(vrid, data, null);
        Type localVarReturnType = new TypeToken<VR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a VR
     * @param vrid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrUpdateAsync(Integer vrid, VR data, final ApiCallback<VR> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrUpdateValidateBeforeCall(vrid, data, _callback);
        Type localVarReturnType = new TypeToken<VR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrUpdateList
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrUpdateListCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/update/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrUpdateListValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = vrUpdateListCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param vrid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData vrUpdateList(Integer vrid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = vrUpdateListWithHttpInfo(vrid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param vrid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> vrUpdateListWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrUpdateListValidateBeforeCall(vrid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrUpdateListAsync(Integer vrid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrUpdateListValidateBeforeCall(vrid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vrVersionList
     * @param vrid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrVersionListCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vr/{vrid}/version/"
            .replaceAll("\\{" + "vrid" + "\\}", localVarApiClient.escapeString(vrid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vrVersionListValidateBeforeCall(Integer vrid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'vrid' is set
        if (vrid == null) {
            throw new ApiException("Missing the required parameter 'vrid' when calling vrVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = vrVersionListCall(vrid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get VR versions
     * @param vrid  (required)
     * @return List&lt;VRVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<VRVersion> vrVersionList(Integer vrid) throws ApiException {
        ApiResponse<List<VRVersion>> localVarResp = vrVersionListWithHttpInfo(vrid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get VR versions
     * @param vrid  (required)
     * @return ApiResponse&lt;List&lt;VRVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VRVersion>> vrVersionListWithHttpInfo(Integer vrid) throws ApiException {
        okhttp3.Call localVarCall = vrVersionListValidateBeforeCall(vrid, null);
        Type localVarReturnType = new TypeToken<List<VRVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get VR versions
     * @param vrid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vrVersionListAsync(Integer vrid, final ApiCallback<List<VRVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vrVersionListValidateBeforeCall(vrid, _callback);
        Type localVarReturnType = new TypeToken<List<VRVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
