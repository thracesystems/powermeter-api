/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PCB;
import org.openapitools.client.model.PCBMaster;
import org.openapitools.client.model.PCBSupply;
import org.openapitools.client.model.PCBVersionSerialzer;
import org.openapitools.client.model.UpdateData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PcbApi {
    private ApiClient localVarApiClient;

    public PcbApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PcbApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for pcbCommitCreate
     * @param pcbid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbCommitCreateCall(Integer pcbid, PCBVersionSerialzer data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/commit/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbCommitCreateValidateBeforeCall(Integer pcbid, PCBVersionSerialzer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling pcbCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbCommitCreateCall(pcbid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param pcbid  (required)
     * @param data  (required)
     * @return PCBVersionSerialzer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBVersionSerialzer pcbCommitCreate(Integer pcbid, PCBVersionSerialzer data) throws ApiException {
        ApiResponse<PCBVersionSerialzer> localVarResp = pcbCommitCreateWithHttpInfo(pcbid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param pcbid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PCBVersionSerialzer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBVersionSerialzer> pcbCommitCreateWithHttpInfo(Integer pcbid, PCBVersionSerialzer data) throws ApiException {
        okhttp3.Call localVarCall = pcbCommitCreateValidateBeforeCall(pcbid, data, null);
        Type localVarReturnType = new TypeToken<PCBVersionSerialzer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param pcbid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbCommitCreateAsync(Integer pcbid, PCBVersionSerialzer data, final ApiCallback<PCBVersionSerialzer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbCommitCreateValidateBeforeCall(pcbid, data, _callback);
        Type localVarReturnType = new TypeToken<PCBVersionSerialzer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryClone
     * @param pcbmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryCloneCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/library/{pcbmasterid}/clone/"
            .replaceAll("\\{" + "pcbmasterid" + "\\}", localVarApiClient.escapeString(pcbmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryCloneValidateBeforeCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbmasterid' is set
        if (pcbmasterid == null) {
            throw new ApiException("Missing the required parameter 'pcbmasterid' when calling pcbLibraryClone(Async)");
        }
        

        okhttp3.Call localVarCall = pcbLibraryCloneCall(pcbmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Copy a PCB
     * @param pcbmasterid  (required)
     * @return PCBMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBMaster pcbLibraryClone(Integer pcbmasterid) throws ApiException {
        ApiResponse<PCBMaster> localVarResp = pcbLibraryCloneWithHttpInfo(pcbmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Copy a PCB
     * @param pcbmasterid  (required)
     * @return ApiResponse&lt;PCBMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBMaster> pcbLibraryCloneWithHttpInfo(Integer pcbmasterid) throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryCloneValidateBeforeCall(pcbmasterid, null);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copy a PCB
     * @param pcbmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryCloneAsync(Integer pcbmasterid, final ApiCallback<PCBMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryCloneValidateBeforeCall(pcbmasterid, _callback);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryCreateCall(PCBMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/pcb/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryCreateValidateBeforeCall(PCBMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling pcbLibraryCreate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbLibraryCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a PCB
     * @param data  (required)
     * @return PCBMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public PCBMaster pcbLibraryCreate(PCBMaster data) throws ApiException {
        ApiResponse<PCBMaster> localVarResp = pcbLibraryCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a PCB
     * @param data  (required)
     * @return ApiResponse&lt;PCBMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBMaster> pcbLibraryCreateWithHttpInfo(PCBMaster data) throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a PCB
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryCreateAsync(PCBMaster data, final ApiCallback<PCBMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryDelete
     * @param pcbmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryDeleteCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/library/{pcbmasterid}/"
            .replaceAll("\\{" + "pcbmasterid" + "\\}", localVarApiClient.escapeString(pcbmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryDeleteValidateBeforeCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbmasterid' is set
        if (pcbmasterid == null) {
            throw new ApiException("Missing the required parameter 'pcbmasterid' when calling pcbLibraryDelete(Async)");
        }
        

        okhttp3.Call localVarCall = pcbLibraryDeleteCall(pcbmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete PCB
     * @param pcbmasterid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void pcbLibraryDelete(Integer pcbmasterid) throws ApiException {
        pcbLibraryDeleteWithHttpInfo(pcbmasterid);
    }

    /**
     * 
     * Delete PCB
     * @param pcbmasterid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pcbLibraryDeleteWithHttpInfo(Integer pcbmasterid) throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryDeleteValidateBeforeCall(pcbmasterid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete PCB
     * @param pcbmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryDeleteAsync(Integer pcbmasterid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryDeleteValidateBeforeCall(pcbmasterid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pcbLibraryListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of PCB
     * @return List&lt;PCBMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<PCBMaster> pcbLibraryList() throws ApiException {
        ApiResponse<List<PCBMaster>> localVarResp = pcbLibraryListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of PCB
     * @return ApiResponse&lt;List&lt;PCBMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PCBMaster>> pcbLibraryListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PCBMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of PCB
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryListAsync(final ApiCallback<List<PCBMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PCBMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryRead
     * @param pcbmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryReadCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/library/{pcbmasterid}/"
            .replaceAll("\\{" + "pcbmasterid" + "\\}", localVarApiClient.escapeString(pcbmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryReadValidateBeforeCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbmasterid' is set
        if (pcbmasterid == null) {
            throw new ApiException("Missing the required parameter 'pcbmasterid' when calling pcbLibraryRead(Async)");
        }
        

        okhttp3.Call localVarCall = pcbLibraryReadCall(pcbmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a PCB
     * @param pcbmasterid  (required)
     * @return PCBMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBMaster pcbLibraryRead(Integer pcbmasterid) throws ApiException {
        ApiResponse<PCBMaster> localVarResp = pcbLibraryReadWithHttpInfo(pcbmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a PCB
     * @param pcbmasterid  (required)
     * @return ApiResponse&lt;PCBMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBMaster> pcbLibraryReadWithHttpInfo(Integer pcbmasterid) throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryReadValidateBeforeCall(pcbmasterid, null);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a PCB
     * @param pcbmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryReadAsync(Integer pcbmasterid, final ApiCallback<PCBMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryReadValidateBeforeCall(pcbmasterid, _callback);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryUpdate
     * @param pcbmasterid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryUpdateCall(Integer pcbmasterid, PCBMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/pcb/library/{pcbmasterid}/"
            .replaceAll("\\{" + "pcbmasterid" + "\\}", localVarApiClient.escapeString(pcbmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryUpdateValidateBeforeCall(Integer pcbmasterid, PCBMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbmasterid' is set
        if (pcbmasterid == null) {
            throw new ApiException("Missing the required parameter 'pcbmasterid' when calling pcbLibraryUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling pcbLibraryUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbLibraryUpdateCall(pcbmasterid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update PCB
     * @param pcbmasterid  (required)
     * @param data  (required)
     * @return PCBMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBMaster pcbLibraryUpdate(Integer pcbmasterid, PCBMaster data) throws ApiException {
        ApiResponse<PCBMaster> localVarResp = pcbLibraryUpdateWithHttpInfo(pcbmasterid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update PCB
     * @param pcbmasterid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PCBMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBMaster> pcbLibraryUpdateWithHttpInfo(Integer pcbmasterid, PCBMaster data) throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryUpdateValidateBeforeCall(pcbmasterid, data, null);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update PCB
     * @param pcbmasterid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with data, error details returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryUpdateAsync(Integer pcbmasterid, PCBMaster data, final ApiCallback<PCBMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryUpdateValidateBeforeCall(pcbmasterid, data, _callback);
        Type localVarReturnType = new TypeToken<PCBMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryUpdateList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryUpdateListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/library/update/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryUpdateListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pcbLibraryUpdateListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData pcbLibraryUpdateList() throws ApiException {
        ApiResponse<UpdateData> localVarResp = pcbLibraryUpdateListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> pcbLibraryUpdateListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryUpdateListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryUpdateListAsync(final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryUpdateListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbLibraryVersionList
     * @param pcbmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryVersionListCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/library/{pcbmasterid}/version/"
            .replaceAll("\\{" + "pcbmasterid" + "\\}", localVarApiClient.escapeString(pcbmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbLibraryVersionListValidateBeforeCall(Integer pcbmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbmasterid' is set
        if (pcbmasterid == null) {
            throw new ApiException("Missing the required parameter 'pcbmasterid' when calling pcbLibraryVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = pcbLibraryVersionListCall(pcbmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get PCB versions
     * @param pcbmasterid  (required)
     * @return PCBVersionSerialzer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBVersionSerialzer pcbLibraryVersionList(Integer pcbmasterid) throws ApiException {
        ApiResponse<PCBVersionSerialzer> localVarResp = pcbLibraryVersionListWithHttpInfo(pcbmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get PCB versions
     * @param pcbmasterid  (required)
     * @return ApiResponse&lt;PCBVersionSerialzer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBVersionSerialzer> pcbLibraryVersionListWithHttpInfo(Integer pcbmasterid) throws ApiException {
        okhttp3.Call localVarCall = pcbLibraryVersionListValidateBeforeCall(pcbmasterid, null);
        Type localVarReturnType = new TypeToken<PCBVersionSerialzer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get PCB versions
     * @param pcbmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbLibraryVersionListAsync(Integer pcbmasterid, final ApiCallback<PCBVersionSerialzer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbLibraryVersionListValidateBeforeCall(pcbmasterid, _callback);
        Type localVarReturnType = new TypeToken<PCBVersionSerialzer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbPermissionsList
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbPermissionsListCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/permissions/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbPermissionsListValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = pcbPermissionsListCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param pcbid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void pcbPermissionsList(Integer pcbid) throws ApiException {
        pcbPermissionsListWithHttpInfo(pcbid);
    }

    /**
     * 
     * Get list of permissions
     * @param pcbid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pcbPermissionsListWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbPermissionsListValidateBeforeCall(pcbid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbPermissionsListAsync(Integer pcbid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbPermissionsListValidateBeforeCall(pcbid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbPermissionsUpdate
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbPermissionsUpdateCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/permissions/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbPermissionsUpdateValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbPermissionsUpdateCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param pcbid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void pcbPermissionsUpdate(Integer pcbid) throws ApiException {
        pcbPermissionsUpdateWithHttpInfo(pcbid);
    }

    /**
     * 
     * Get list of permissions
     * @param pcbid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pcbPermissionsUpdateWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbPermissionsUpdateValidateBeforeCall(pcbid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbPermissionsUpdateAsync(Integer pcbid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbPermissionsUpdateValidateBeforeCall(pcbid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbRead
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbReadCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbReadValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbRead(Async)");
        }
        

        okhttp3.Call localVarCall = pcbReadCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a PCB
     * @param pcbid  (required)
     * @return PCB
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCB pcbRead(Integer pcbid) throws ApiException {
        ApiResponse<PCB> localVarResp = pcbReadWithHttpInfo(pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a PCB
     * @param pcbid  (required)
     * @return ApiResponse&lt;PCB&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCB> pcbReadWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbReadValidateBeforeCall(pcbid, null);
        Type localVarReturnType = new TypeToken<PCB>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a PCB
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbReadAsync(Integer pcbid, final ApiCallback<PCB> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbReadValidateBeforeCall(pcbid, _callback);
        Type localVarReturnType = new TypeToken<PCB>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbRestoreCreate
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbRestoreCreateCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/restore/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbRestoreCreateValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbRestoreCreate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbRestoreCreateCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restore a pcb version as current version
     * @param pcbid  (required)
     * @return PCB
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCB pcbRestoreCreate(Integer pcbid) throws ApiException {
        ApiResponse<PCB> localVarResp = pcbRestoreCreateWithHttpInfo(pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Restore a pcb version as current version
     * @param pcbid  (required)
     * @return ApiResponse&lt;PCB&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCB> pcbRestoreCreateWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbRestoreCreateValidateBeforeCall(pcbid, null);
        Type localVarReturnType = new TypeToken<PCB>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restore a pcb version as current version
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbRestoreCreateAsync(Integer pcbid, final ApiCallback<PCB> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbRestoreCreateValidateBeforeCall(pcbid, _callback);
        Type localVarReturnType = new TypeToken<PCB>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbSupplyClone
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyCloneCall(Integer pcbid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/supply/{supplyid}/clone/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbSupplyCloneValidateBeforeCall(Integer pcbid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbSupplyClone(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling pcbSupplyClone(Async)");
        }
        

        okhttp3.Call localVarCall = pcbSupplyCloneCall(pcbid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Copy a PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @return PCBSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBSupply pcbSupplyClone(Integer pcbid, Integer supplyid) throws ApiException {
        ApiResponse<PCBSupply> localVarResp = pcbSupplyCloneWithHttpInfo(pcbid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Copy a PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;PCBSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBSupply> pcbSupplyCloneWithHttpInfo(Integer pcbid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = pcbSupplyCloneValidateBeforeCall(pcbid, supplyid, null);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copy a PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyCloneAsync(Integer pcbid, Integer supplyid, final ApiCallback<PCBSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbSupplyCloneValidateBeforeCall(pcbid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbSupplyCreate
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyCreateCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/supply/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbSupplyCreateValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbSupplyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbSupplyCreateCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create PCB supplies
     * @param pcbid  (required)
     * @return PCBSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBSupply pcbSupplyCreate(Integer pcbid) throws ApiException {
        ApiResponse<PCBSupply> localVarResp = pcbSupplyCreateWithHttpInfo(pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create PCB supplies
     * @param pcbid  (required)
     * @return ApiResponse&lt;PCBSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBSupply> pcbSupplyCreateWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbSupplyCreateValidateBeforeCall(pcbid, null);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create PCB supplies
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyCreateAsync(Integer pcbid, final ApiCallback<PCBSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbSupplyCreateValidateBeforeCall(pcbid, _callback);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbSupplyDelete
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyDeleteCall(Integer pcbid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/supply/{supplyid}/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbSupplyDeleteValidateBeforeCall(Integer pcbid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbSupplyDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling pcbSupplyDelete(Async)");
        }
        

        okhttp3.Call localVarCall = pcbSupplyDeleteCall(pcbid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void pcbSupplyDelete(Integer pcbid, Integer supplyid) throws ApiException {
        pcbSupplyDeleteWithHttpInfo(pcbid, supplyid);
    }

    /**
     * 
     * Delete PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pcbSupplyDeleteWithHttpInfo(Integer pcbid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = pcbSupplyDeleteValidateBeforeCall(pcbid, supplyid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyDeleteAsync(Integer pcbid, Integer supplyid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbSupplyDeleteValidateBeforeCall(pcbid, supplyid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbSupplyList
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyListCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/supply/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbSupplyListValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbSupplyList(Async)");
        }
        

        okhttp3.Call localVarCall = pcbSupplyListCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of PCB supplies
     * @param pcbid  (required)
     * @return List&lt;PCBSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PCBSupply> pcbSupplyList(Integer pcbid) throws ApiException {
        ApiResponse<List<PCBSupply>> localVarResp = pcbSupplyListWithHttpInfo(pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of PCB supplies
     * @param pcbid  (required)
     * @return ApiResponse&lt;List&lt;PCBSupply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PCBSupply>> pcbSupplyListWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbSupplyListValidateBeforeCall(pcbid, null);
        Type localVarReturnType = new TypeToken<List<PCBSupply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of PCB supplies
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyListAsync(Integer pcbid, final ApiCallback<List<PCBSupply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbSupplyListValidateBeforeCall(pcbid, _callback);
        Type localVarReturnType = new TypeToken<List<PCBSupply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbSupplyRead
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyReadCall(Integer pcbid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/supply/{supplyid}/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbSupplyReadValidateBeforeCall(Integer pcbid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling pcbSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = pcbSupplyReadCall(pcbid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @return PCBSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBSupply pcbSupplyRead(Integer pcbid, Integer supplyid) throws ApiException {
        ApiResponse<PCBSupply> localVarResp = pcbSupplyReadWithHttpInfo(pcbid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;PCBSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBSupply> pcbSupplyReadWithHttpInfo(Integer pcbid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = pcbSupplyReadValidateBeforeCall(pcbid, supplyid, null);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyReadAsync(Integer pcbid, Integer supplyid, final ApiCallback<PCBSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbSupplyReadValidateBeforeCall(pcbid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbSupplyUpdate
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyUpdateCall(Integer pcbid, Integer supplyid, PCBSupply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/supply/{supplyid}/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbSupplyUpdateValidateBeforeCall(Integer pcbid, Integer supplyid, PCBSupply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling pcbSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling pcbSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbSupplyUpdateCall(pcbid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return PCBSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBSupply pcbSupplyUpdate(Integer pcbid, Integer supplyid, PCBSupply data) throws ApiException {
        ApiResponse<PCBSupply> localVarResp = pcbSupplyUpdateWithHttpInfo(pcbid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PCBSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBSupply> pcbSupplyUpdateWithHttpInfo(Integer pcbid, Integer supplyid, PCBSupply data) throws ApiException {
        okhttp3.Call localVarCall = pcbSupplyUpdateValidateBeforeCall(pcbid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update PCB supply
     * @param pcbid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbSupplyUpdateAsync(Integer pcbid, Integer supplyid, PCBSupply data, final ApiCallback<PCBSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbSupplyUpdateValidateBeforeCall(pcbid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<PCBSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbUpdate
     * @param pcbid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbUpdateCall(Integer pcbid, PCB data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbUpdateValidateBeforeCall(Integer pcbid, PCB data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling pcbUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = pcbUpdateCall(pcbid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a PCB
     * @param pcbid  (required)
     * @param data  (required)
     * @return PCB
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCB pcbUpdate(Integer pcbid, PCB data) throws ApiException {
        ApiResponse<PCB> localVarResp = pcbUpdateWithHttpInfo(pcbid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a PCB
     * @param pcbid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PCB&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCB> pcbUpdateWithHttpInfo(Integer pcbid, PCB data) throws ApiException {
        okhttp3.Call localVarCall = pcbUpdateValidateBeforeCall(pcbid, data, null);
        Type localVarReturnType = new TypeToken<PCB>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a PCB
     * @param pcbid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbUpdateAsync(Integer pcbid, PCB data, final ApiCallback<PCB> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbUpdateValidateBeforeCall(pcbid, data, _callback);
        Type localVarReturnType = new TypeToken<PCB>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbUpdateList
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbUpdateListCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/update/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbUpdateListValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = pcbUpdateListCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param pcbid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData pcbUpdateList(Integer pcbid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = pcbUpdateListWithHttpInfo(pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param pcbid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> pcbUpdateListWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbUpdateListValidateBeforeCall(pcbid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbUpdateListAsync(Integer pcbid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbUpdateListValidateBeforeCall(pcbid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pcbVersionList
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbVersionListCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pcb/{pcbid}/version/"
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pcbVersionListValidateBeforeCall(Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling pcbVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = pcbVersionListCall(pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get PCB versions
     * @param pcbid  (required)
     * @return List&lt;PCBVersionSerialzer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PCBVersionSerialzer> pcbVersionList(Integer pcbid) throws ApiException {
        ApiResponse<List<PCBVersionSerialzer>> localVarResp = pcbVersionListWithHttpInfo(pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get PCB versions
     * @param pcbid  (required)
     * @return ApiResponse&lt;List&lt;PCBVersionSerialzer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PCBVersionSerialzer>> pcbVersionListWithHttpInfo(Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = pcbVersionListValidateBeforeCall(pcbid, null);
        Type localVarReturnType = new TypeToken<List<PCBVersionSerialzer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get PCB versions
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pcbVersionListAsync(Integer pcbid, final ApiCallback<List<PCBVersionSerialzer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = pcbVersionListValidateBeforeCall(pcbid, _callback);
        Type localVarReturnType = new TypeToken<List<PCBVersionSerialzer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
