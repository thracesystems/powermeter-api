/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Heatsink;
import org.openapitools.client.model.HeatsinkMaster;
import org.openapitools.client.model.HeatsinkVersion;
import org.openapitools.client.model.UpdateData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HeatsinkApi {
    private ApiClient localVarApiClient;

    public HeatsinkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HeatsinkApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for haetsinkLibraryClone
     * @param heatsinkmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call haetsinkLibraryCloneCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/library/{heatsinkmasterid}/clone/"
            .replaceAll("\\{" + "heatsinkmasterid" + "\\}", localVarApiClient.escapeString(heatsinkmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call haetsinkLibraryCloneValidateBeforeCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkmasterid' is set
        if (heatsinkmasterid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkmasterid' when calling haetsinkLibraryClone(Async)");
        }
        

        okhttp3.Call localVarCall = haetsinkLibraryCloneCall(heatsinkmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a heat sink
     * @param heatsinkmasterid  (required)
     * @return HeatsinkMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public HeatsinkMaster haetsinkLibraryClone(Integer heatsinkmasterid) throws ApiException {
        ApiResponse<HeatsinkMaster> localVarResp = haetsinkLibraryCloneWithHttpInfo(heatsinkmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone a heat sink
     * @param heatsinkmasterid  (required)
     * @return ApiResponse&lt;HeatsinkMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeatsinkMaster> haetsinkLibraryCloneWithHttpInfo(Integer heatsinkmasterid) throws ApiException {
        okhttp3.Call localVarCall = haetsinkLibraryCloneValidateBeforeCall(heatsinkmasterid, null);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone a heat sink
     * @param heatsinkmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call haetsinkLibraryCloneAsync(Integer heatsinkmasterid, final ApiCallback<HeatsinkMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = haetsinkLibraryCloneValidateBeforeCall(heatsinkmasterid, _callback);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkCommitCreate
     * @param heatsinkid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkCommitCreateCall(Integer heatsinkid, HeatsinkVersion data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/commit/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkCommitCreateValidateBeforeCall(Integer heatsinkid, HeatsinkVersion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling heatsinkCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkCommitCreateCall(heatsinkid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param heatsinkid  (required)
     * @param data  (required)
     * @return HeatsinkVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public HeatsinkVersion heatsinkCommitCreate(Integer heatsinkid, HeatsinkVersion data) throws ApiException {
        ApiResponse<HeatsinkVersion> localVarResp = heatsinkCommitCreateWithHttpInfo(heatsinkid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param heatsinkid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;HeatsinkVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeatsinkVersion> heatsinkCommitCreateWithHttpInfo(Integer heatsinkid, HeatsinkVersion data) throws ApiException {
        okhttp3.Call localVarCall = heatsinkCommitCreateValidateBeforeCall(heatsinkid, data, null);
        Type localVarReturnType = new TypeToken<HeatsinkVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param heatsinkid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkCommitCreateAsync(Integer heatsinkid, HeatsinkVersion data, final ApiCallback<HeatsinkVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkCommitCreateValidateBeforeCall(heatsinkid, data, _callback);
        Type localVarReturnType = new TypeToken<HeatsinkVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryCreateCall(HeatsinkMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/heatsink/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryCreateValidateBeforeCall(HeatsinkMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling heatsinkLibraryCreate(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkLibraryCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a heatsink
     * @param data  (required)
     * @return HeatsinkMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public HeatsinkMaster heatsinkLibraryCreate(HeatsinkMaster data) throws ApiException {
        ApiResponse<HeatsinkMaster> localVarResp = heatsinkLibraryCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a heatsink
     * @param data  (required)
     * @return ApiResponse&lt;HeatsinkMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeatsinkMaster> heatsinkLibraryCreateWithHttpInfo(HeatsinkMaster data) throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a heatsink
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryCreateAsync(HeatsinkMaster data, final ApiCallback<HeatsinkMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryDelete
     * @param heatsinkmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryDeleteCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/library/{heatsinkmasterid}/"
            .replaceAll("\\{" + "heatsinkmasterid" + "\\}", localVarApiClient.escapeString(heatsinkmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryDeleteValidateBeforeCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkmasterid' is set
        if (heatsinkmasterid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryDelete(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkLibraryDeleteCall(heatsinkmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a heatsink
     * @param heatsinkmasterid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void heatsinkLibraryDelete(Integer heatsinkmasterid) throws ApiException {
        heatsinkLibraryDeleteWithHttpInfo(heatsinkmasterid);
    }

    /**
     * 
     * Delete a heatsink
     * @param heatsinkmasterid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> heatsinkLibraryDeleteWithHttpInfo(Integer heatsinkmasterid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryDeleteValidateBeforeCall(heatsinkmasterid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a heatsink
     * @param heatsinkmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryDeleteAsync(Integer heatsinkmasterid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryDeleteValidateBeforeCall(heatsinkmasterid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = heatsinkLibraryListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of heat sinks
     * @return List&lt;HeatsinkMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<HeatsinkMaster> heatsinkLibraryList() throws ApiException {
        ApiResponse<List<HeatsinkMaster>> localVarResp = heatsinkLibraryListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of heat sinks
     * @return ApiResponse&lt;List&lt;HeatsinkMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HeatsinkMaster>> heatsinkLibraryListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<HeatsinkMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of heat sinks
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryListAsync(final ApiCallback<List<HeatsinkMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<HeatsinkMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryRead
     * @param heatsinkmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryReadCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/library/{heatsinkmasterid}/"
            .replaceAll("\\{" + "heatsinkmasterid" + "\\}", localVarApiClient.escapeString(heatsinkmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryReadValidateBeforeCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkmasterid' is set
        if (heatsinkmasterid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryRead(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkLibraryReadCall(heatsinkmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a heatsink
     * @param heatsinkmasterid  (required)
     * @return HeatsinkMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public HeatsinkMaster heatsinkLibraryRead(Integer heatsinkmasterid) throws ApiException {
        ApiResponse<HeatsinkMaster> localVarResp = heatsinkLibraryReadWithHttpInfo(heatsinkmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a heatsink
     * @param heatsinkmasterid  (required)
     * @return ApiResponse&lt;HeatsinkMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeatsinkMaster> heatsinkLibraryReadWithHttpInfo(Integer heatsinkmasterid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryReadValidateBeforeCall(heatsinkmasterid, null);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a heatsink
     * @param heatsinkmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryReadAsync(Integer heatsinkmasterid, final ApiCallback<HeatsinkMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryReadValidateBeforeCall(heatsinkmasterid, _callback);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryUpdate
     * @param heatsinkmasterid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryUpdateCall(Integer heatsinkmasterid, HeatsinkMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/heatsink/library/{heatsinkmasterid}/"
            .replaceAll("\\{" + "heatsinkmasterid" + "\\}", localVarApiClient.escapeString(heatsinkmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryUpdateValidateBeforeCall(Integer heatsinkmasterid, HeatsinkMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkmasterid' is set
        if (heatsinkmasterid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling heatsinkLibraryUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkLibraryUpdateCall(heatsinkmasterid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a heatsink
     * @param heatsinkmasterid  (required)
     * @param data  (required)
     * @return HeatsinkMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public HeatsinkMaster heatsinkLibraryUpdate(Integer heatsinkmasterid, HeatsinkMaster data) throws ApiException {
        ApiResponse<HeatsinkMaster> localVarResp = heatsinkLibraryUpdateWithHttpInfo(heatsinkmasterid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a heatsink
     * @param heatsinkmasterid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;HeatsinkMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeatsinkMaster> heatsinkLibraryUpdateWithHttpInfo(Integer heatsinkmasterid, HeatsinkMaster data) throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryUpdateValidateBeforeCall(heatsinkmasterid, data, null);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a heatsink
     * @param heatsinkmasterid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryUpdateAsync(Integer heatsinkmasterid, HeatsinkMaster data, final ApiCallback<HeatsinkMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryUpdateValidateBeforeCall(heatsinkmasterid, data, _callback);
        Type localVarReturnType = new TypeToken<HeatsinkMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryUpdateList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryUpdateListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/library/update/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryUpdateListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = heatsinkLibraryUpdateListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData heatsinkLibraryUpdateList() throws ApiException {
        ApiResponse<UpdateData> localVarResp = heatsinkLibraryUpdateListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> heatsinkLibraryUpdateListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryUpdateListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryUpdateListAsync(final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryUpdateListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkLibraryVersionList
     * @param heatsinkmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryVersionListCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/library/{heatsinkmasterid}/version/"
            .replaceAll("\\{" + "heatsinkmasterid" + "\\}", localVarApiClient.escapeString(heatsinkmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkLibraryVersionListValidateBeforeCall(Integer heatsinkmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkmasterid' is set
        if (heatsinkmasterid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkLibraryVersionListCall(heatsinkmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get Heatsink versions
     * @param heatsinkmasterid  (required)
     * @return HeatsinkVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public HeatsinkVersion heatsinkLibraryVersionList(Integer heatsinkmasterid) throws ApiException {
        ApiResponse<HeatsinkVersion> localVarResp = heatsinkLibraryVersionListWithHttpInfo(heatsinkmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Heatsink versions
     * @param heatsinkmasterid  (required)
     * @return ApiResponse&lt;HeatsinkVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HeatsinkVersion> heatsinkLibraryVersionListWithHttpInfo(Integer heatsinkmasterid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkLibraryVersionListValidateBeforeCall(heatsinkmasterid, null);
        Type localVarReturnType = new TypeToken<HeatsinkVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Heatsink versions
     * @param heatsinkmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkLibraryVersionListAsync(Integer heatsinkmasterid, final ApiCallback<HeatsinkVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkLibraryVersionListValidateBeforeCall(heatsinkmasterid, _callback);
        Type localVarReturnType = new TypeToken<HeatsinkVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkPermissionsList
     * @param heatsinkid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkPermissionsListCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/permissions/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkPermissionsListValidateBeforeCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkPermissionsListCall(heatsinkid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param heatsinkid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void heatsinkPermissionsList(Integer heatsinkid) throws ApiException {
        heatsinkPermissionsListWithHttpInfo(heatsinkid);
    }

    /**
     * 
     * Get list of permissions
     * @param heatsinkid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> heatsinkPermissionsListWithHttpInfo(Integer heatsinkid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkPermissionsListValidateBeforeCall(heatsinkid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param heatsinkid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkPermissionsListAsync(Integer heatsinkid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkPermissionsListValidateBeforeCall(heatsinkid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkPermissionsUpdate
     * @param heatsinkid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkPermissionsUpdateCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/permissions/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkPermissionsUpdateValidateBeforeCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkPermissionsUpdateCall(heatsinkid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param heatsinkid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void heatsinkPermissionsUpdate(Integer heatsinkid) throws ApiException {
        heatsinkPermissionsUpdateWithHttpInfo(heatsinkid);
    }

    /**
     * 
     * Get list of permissions
     * @param heatsinkid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> heatsinkPermissionsUpdateWithHttpInfo(Integer heatsinkid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkPermissionsUpdateValidateBeforeCall(heatsinkid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param heatsinkid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkPermissionsUpdateAsync(Integer heatsinkid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkPermissionsUpdateValidateBeforeCall(heatsinkid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkRead
     * @param heatsinkid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkReadCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkReadValidateBeforeCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkRead(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkReadCall(heatsinkid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a heatsink
     * @param heatsinkid  (required)
     * @return Heatsink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Heatsink heatsinkRead(Integer heatsinkid) throws ApiException {
        ApiResponse<Heatsink> localVarResp = heatsinkReadWithHttpInfo(heatsinkid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a heatsink
     * @param heatsinkid  (required)
     * @return ApiResponse&lt;Heatsink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Heatsink> heatsinkReadWithHttpInfo(Integer heatsinkid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkReadValidateBeforeCall(heatsinkid, null);
        Type localVarReturnType = new TypeToken<Heatsink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a heatsink
     * @param heatsinkid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkReadAsync(Integer heatsinkid, final ApiCallback<Heatsink> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkReadValidateBeforeCall(heatsinkid, _callback);
        Type localVarReturnType = new TypeToken<Heatsink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkRestoreCreate
     * @param heatsinkid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkRestoreCreateCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/restore/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkRestoreCreateValidateBeforeCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkRestoreCreate(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkRestoreCreateCall(heatsinkid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restore a heatsink version as current version
     * @param heatsinkid  (required)
     * @return Heatsink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Heatsink heatsinkRestoreCreate(Integer heatsinkid) throws ApiException {
        ApiResponse<Heatsink> localVarResp = heatsinkRestoreCreateWithHttpInfo(heatsinkid);
        return localVarResp.getData();
    }

    /**
     * 
     * Restore a heatsink version as current version
     * @param heatsinkid  (required)
     * @return ApiResponse&lt;Heatsink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Heatsink> heatsinkRestoreCreateWithHttpInfo(Integer heatsinkid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkRestoreCreateValidateBeforeCall(heatsinkid, null);
        Type localVarReturnType = new TypeToken<Heatsink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restore a heatsink version as current version
     * @param heatsinkid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkRestoreCreateAsync(Integer heatsinkid, final ApiCallback<Heatsink> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkRestoreCreateValidateBeforeCall(heatsinkid, _callback);
        Type localVarReturnType = new TypeToken<Heatsink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkUpdate
     * @param heatsinkid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkUpdateCall(Integer heatsinkid, Heatsink data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkUpdateValidateBeforeCall(Integer heatsinkid, Heatsink data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling heatsinkUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkUpdateCall(heatsinkid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a heatsink
     * @param heatsinkid  (required)
     * @param data  (required)
     * @return Heatsink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Heatsink heatsinkUpdate(Integer heatsinkid, Heatsink data) throws ApiException {
        ApiResponse<Heatsink> localVarResp = heatsinkUpdateWithHttpInfo(heatsinkid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a heatsink
     * @param heatsinkid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Heatsink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Heatsink> heatsinkUpdateWithHttpInfo(Integer heatsinkid, Heatsink data) throws ApiException {
        okhttp3.Call localVarCall = heatsinkUpdateValidateBeforeCall(heatsinkid, data, null);
        Type localVarReturnType = new TypeToken<Heatsink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a heatsink
     * @param heatsinkid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkUpdateAsync(Integer heatsinkid, Heatsink data, final ApiCallback<Heatsink> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkUpdateValidateBeforeCall(heatsinkid, data, _callback);
        Type localVarReturnType = new TypeToken<Heatsink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkUpdateList
     * @param heatsinkid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkUpdateListCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/update/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkUpdateListValidateBeforeCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkUpdateListCall(heatsinkid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param heatsinkid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData heatsinkUpdateList(Integer heatsinkid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = heatsinkUpdateListWithHttpInfo(heatsinkid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param heatsinkid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> heatsinkUpdateListWithHttpInfo(Integer heatsinkid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkUpdateListValidateBeforeCall(heatsinkid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param heatsinkid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkUpdateListAsync(Integer heatsinkid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkUpdateListValidateBeforeCall(heatsinkid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for heatsinkVersionList
     * @param heatsinkid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkVersionListCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/heatsink/{heatsinkid}/version/"
            .replaceAll("\\{" + "heatsinkid" + "\\}", localVarApiClient.escapeString(heatsinkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call heatsinkVersionListValidateBeforeCall(Integer heatsinkid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'heatsinkid' is set
        if (heatsinkid == null) {
            throw new ApiException("Missing the required parameter 'heatsinkid' when calling heatsinkVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = heatsinkVersionListCall(heatsinkid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get Heatsink versions
     * @param heatsinkid  (required)
     * @return List&lt;HeatsinkVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<HeatsinkVersion> heatsinkVersionList(Integer heatsinkid) throws ApiException {
        ApiResponse<List<HeatsinkVersion>> localVarResp = heatsinkVersionListWithHttpInfo(heatsinkid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Heatsink versions
     * @param heatsinkid  (required)
     * @return ApiResponse&lt;List&lt;HeatsinkVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HeatsinkVersion>> heatsinkVersionListWithHttpInfo(Integer heatsinkid) throws ApiException {
        okhttp3.Call localVarCall = heatsinkVersionListValidateBeforeCall(heatsinkid, null);
        Type localVarReturnType = new TypeToken<List<HeatsinkVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Heatsink versions
     * @param heatsinkid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call heatsinkVersionListAsync(Integer heatsinkid, final ApiCallback<List<HeatsinkVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = heatsinkVersionListValidateBeforeCall(heatsinkid, _callback);
        Type localVarReturnType = new TypeToken<List<HeatsinkVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
