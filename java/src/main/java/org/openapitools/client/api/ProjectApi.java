/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Design;
import org.openapitools.client.model.DesignInstance;
import org.openapitools.client.model.DesignMaster;
import org.openapitools.client.model.DesignSupplyInst;
import org.openapitools.client.model.DesignVersion;
import org.openapitools.client.model.PCBInstance;
import org.openapitools.client.model.PackageInstance;
import org.openapitools.client.model.PackageSupplyInst;
import org.openapitools.client.model.PagedContribDevice;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.Scenario;
import org.openapitools.client.model.ScenarioHierarchy;
import org.openapitools.client.model.ScenarioMaster;
import org.openapitools.client.model.ScenarioModeUtil;
import org.openapitools.client.model.ScenarioModeUtilConfig;
import org.openapitools.client.model.ScenarioParam;
import org.openapitools.client.model.ScenarioParamConfig;
import org.openapitools.client.model.ScenarioVersion;
import org.openapitools.client.model.SimMaster;
import org.openapitools.client.model.SupplyInstConfig;
import org.openapitools.client.model.SwaggerContrib;
import org.openapitools.client.model.UpdateData;
import org.openapitools.client.model.VRInstance;
import org.openapitools.client.model.VRSupplyInst;
import org.openapitools.client.model.WLMMaster;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for projectAccessCreate
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAccessCreateCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/access/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectAccessCreateValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectAccessCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectAccessCreateCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update project access
     * @param projectid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectAccessCreate(Integer projectid) throws ApiException {
        projectAccessCreateWithHttpInfo(projectid);
    }

    /**
     * 
     * Update project access
     * @param projectid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectAccessCreateWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectAccessCreateValidateBeforeCall(projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update project access
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAccessCreateAsync(Integer projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectAccessCreateValidateBeforeCall(projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectClone
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCloneCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/clone/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCloneValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectClone(Async)");
        }
        

        okhttp3.Call localVarCall = projectCloneCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a copy of project
     * @param projectid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectClone(Integer projectid) throws ApiException {
        projectCloneWithHttpInfo(projectid);
    }

    /**
     * 
     * Create a copy of project
     * @param projectid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectCloneWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectCloneValidateBeforeCall(projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a copy of project
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCloneAsync(Integer projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCloneValidateBeforeCall(projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectContribDeviceComputeList
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param p  (optional)
     * @param v  (optional)
     * @param t  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceComputeListCall(Integer projectid, Integer deviceid, BigDecimal p, BigDecimal v, Integer t, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/contrib_device/{deviceid}/compute/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (p != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p", p));
        }

        if (v != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("v", v));
        }

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectContribDeviceComputeListValidateBeforeCall(Integer projectid, Integer deviceid, BigDecimal p, BigDecimal v, Integer t, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectContribDeviceComputeList(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling projectContribDeviceComputeList(Async)");
        }
        

        okhttp3.Call localVarCall = projectContribDeviceComputeListCall(projectid, deviceid, p, v, t, _callback);
        return localVarCall;

    }

    /**
     * 
     * Compute a contributor device
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param p  (optional)
     * @param v  (optional)
     * @param t  (optional)
     * @return SwaggerContrib
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SwaggerContrib projectContribDeviceComputeList(Integer projectid, Integer deviceid, BigDecimal p, BigDecimal v, Integer t) throws ApiException {
        ApiResponse<SwaggerContrib> localVarResp = projectContribDeviceComputeListWithHttpInfo(projectid, deviceid, p, v, t);
        return localVarResp.getData();
    }

    /**
     * 
     * Compute a contributor device
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param p  (optional)
     * @param v  (optional)
     * @param t  (optional)
     * @return ApiResponse&lt;SwaggerContrib&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwaggerContrib> projectContribDeviceComputeListWithHttpInfo(Integer projectid, Integer deviceid, BigDecimal p, BigDecimal v, Integer t) throws ApiException {
        okhttp3.Call localVarCall = projectContribDeviceComputeListValidateBeforeCall(projectid, deviceid, p, v, t, null);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Compute a contributor device
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param p  (optional)
     * @param v  (optional)
     * @param t  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceComputeListAsync(Integer projectid, Integer deviceid, BigDecimal p, BigDecimal v, Integer t, final ApiCallback<SwaggerContrib> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectContribDeviceComputeListValidateBeforeCall(projectid, deviceid, p, v, t, _callback);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectContribDeviceCreate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceCreateCall(Integer projectid, SwaggerContrib data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/contrib_device/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectContribDeviceCreateValidateBeforeCall(Integer projectid, SwaggerContrib data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectContribDeviceCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectContribDeviceCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectContribDeviceCreateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a contributor devices
     * @param projectid  (required)
     * @param data  (required)
     * @return SwaggerContrib
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SwaggerContrib projectContribDeviceCreate(Integer projectid, SwaggerContrib data) throws ApiException {
        ApiResponse<SwaggerContrib> localVarResp = projectContribDeviceCreateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a contributor devices
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SwaggerContrib&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwaggerContrib> projectContribDeviceCreateWithHttpInfo(Integer projectid, SwaggerContrib data) throws ApiException {
        okhttp3.Call localVarCall = projectContribDeviceCreateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a contributor devices
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceCreateAsync(Integer projectid, SwaggerContrib data, final ApiCallback<SwaggerContrib> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectContribDeviceCreateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectContribDeviceDelete
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceDeleteCall(Integer projectid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/contrib_device/{deviceid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectContribDeviceDeleteValidateBeforeCall(Integer projectid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectContribDeviceDelete(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling projectContribDeviceDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectContribDeviceDeleteCall(projectid, deviceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a contributor devices
     * @param projectid  (required)
     * @param deviceid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectContribDeviceDelete(Integer projectid, Integer deviceid) throws ApiException {
        projectContribDeviceDeleteWithHttpInfo(projectid, deviceid);
    }

    /**
     * 
     * Delete a contributor devices
     * @param projectid  (required)
     * @param deviceid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectContribDeviceDeleteWithHttpInfo(Integer projectid, Integer deviceid) throws ApiException {
        okhttp3.Call localVarCall = projectContribDeviceDeleteValidateBeforeCall(projectid, deviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a contributor devices
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceDeleteAsync(Integer projectid, Integer deviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectContribDeviceDeleteValidateBeforeCall(projectid, deviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectContribDeviceList
     * @param projectid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceListCall(Integer projectid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/contrib_device/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectContribDeviceListValidateBeforeCall(Integer projectid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectContribDeviceList(Async)");
        }
        

        okhttp3.Call localVarCall = projectContribDeviceListCall(projectid, page, number, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of contributor devices
     * @param projectid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return PagedContribDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PagedContribDevice projectContribDeviceList(Integer projectid, Integer page, Integer number) throws ApiException {
        ApiResponse<PagedContribDevice> localVarResp = projectContribDeviceListWithHttpInfo(projectid, page, number);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of contributor devices
     * @param projectid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return ApiResponse&lt;PagedContribDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedContribDevice> projectContribDeviceListWithHttpInfo(Integer projectid, Integer page, Integer number) throws ApiException {
        okhttp3.Call localVarCall = projectContribDeviceListValidateBeforeCall(projectid, page, number, null);
        Type localVarReturnType = new TypeToken<PagedContribDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of contributor devices
     * @param projectid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceListAsync(Integer projectid, Integer page, Integer number, final ApiCallback<PagedContribDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectContribDeviceListValidateBeforeCall(projectid, page, number, _callback);
        Type localVarReturnType = new TypeToken<PagedContribDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectContribDeviceRead
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceReadCall(Integer projectid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/contrib_device/{deviceid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectContribDeviceReadValidateBeforeCall(Integer projectid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectContribDeviceRead(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling projectContribDeviceRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectContribDeviceReadCall(projectid, deviceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a contributor device
     * @param projectid  (required)
     * @param deviceid  (required)
     * @return SwaggerContrib
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SwaggerContrib projectContribDeviceRead(Integer projectid, Integer deviceid) throws ApiException {
        ApiResponse<SwaggerContrib> localVarResp = projectContribDeviceReadWithHttpInfo(projectid, deviceid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a contributor device
     * @param projectid  (required)
     * @param deviceid  (required)
     * @return ApiResponse&lt;SwaggerContrib&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwaggerContrib> projectContribDeviceReadWithHttpInfo(Integer projectid, Integer deviceid) throws ApiException {
        okhttp3.Call localVarCall = projectContribDeviceReadValidateBeforeCall(projectid, deviceid, null);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a contributor device
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceReadAsync(Integer projectid, Integer deviceid, final ApiCallback<SwaggerContrib> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectContribDeviceReadValidateBeforeCall(projectid, deviceid, _callback);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectContribDeviceUpdate
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceUpdateCall(Integer projectid, Integer deviceid, SwaggerContrib data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/contrib_device/{deviceid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectContribDeviceUpdateValidateBeforeCall(Integer projectid, Integer deviceid, SwaggerContrib data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectContribDeviceUpdate(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling projectContribDeviceUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectContribDeviceUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectContribDeviceUpdateCall(projectid, deviceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a contributor devices
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return SwaggerContrib
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SwaggerContrib projectContribDeviceUpdate(Integer projectid, Integer deviceid, SwaggerContrib data) throws ApiException {
        ApiResponse<SwaggerContrib> localVarResp = projectContribDeviceUpdateWithHttpInfo(projectid, deviceid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a contributor devices
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SwaggerContrib&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SwaggerContrib> projectContribDeviceUpdateWithHttpInfo(Integer projectid, Integer deviceid, SwaggerContrib data) throws ApiException {
        okhttp3.Call localVarCall = projectContribDeviceUpdateValidateBeforeCall(projectid, deviceid, data, null);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a contributor devices
     * @param projectid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectContribDeviceUpdateAsync(Integer projectid, Integer deviceid, SwaggerContrib data, final ApiCallback<SwaggerContrib> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectContribDeviceUpdateValidateBeforeCall(projectid, deviceid, data, _callback);
        Type localVarReturnType = new TypeToken<SwaggerContrib>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCreateCall(Project data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectCreateValidateBeforeCall(Project data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a project
     * @param data  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public Project projectCreate(Project data) throws ApiException {
        ApiResponse<Project> localVarResp = projectCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a project
     * @param data  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectCreateWithHttpInfo(Project data) throws ApiException {
        okhttp3.Call localVarCall = projectCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a project
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectCreateAsync(Project data, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDelete
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDeleteCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDeleteValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectDeleteCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a project
     * @param projectid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectDelete(Integer projectid) throws ApiException {
        projectDeleteWithHttpInfo(projectid);
    }

    /**
     * 
     * Delete a project
     * @param projectid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectDeleteWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectDeleteValidateBeforeCall(projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a project
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDeleteAsync(Integer projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDeleteValidateBeforeCall(projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignAccessCreate
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignAccessCreateCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/{masterdesignid}/access/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignAccessCreateValidateBeforeCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignAccessCreate(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling projectDesignAccessCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignAccessCreateCall(projectid, masterdesignid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update design access
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectDesignAccessCreate(Integer projectid, Integer masterdesignid) throws ApiException {
        projectDesignAccessCreateWithHttpInfo(projectid, masterdesignid);
    }

    /**
     * 
     * Update design access
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectDesignAccessCreateWithHttpInfo(Integer projectid, Integer masterdesignid) throws ApiException {
        okhttp3.Call localVarCall = projectDesignAccessCreateValidateBeforeCall(projectid, masterdesignid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update design access
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignAccessCreateAsync(Integer projectid, Integer masterdesignid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignAccessCreateValidateBeforeCall(projectid, masterdesignid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignClone
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignCloneCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/{masterdesignid}/clone/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignCloneValidateBeforeCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignClone(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling projectDesignClone(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignCloneCall(projectid, masterdesignid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a copy of design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return DesignMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignMaster projectDesignClone(Integer projectid, Integer masterdesignid) throws ApiException {
        ApiResponse<DesignMaster> localVarResp = projectDesignCloneWithHttpInfo(projectid, masterdesignid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a copy of design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return ApiResponse&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignMaster> projectDesignCloneWithHttpInfo(Integer projectid, Integer masterdesignid) throws ApiException {
        okhttp3.Call localVarCall = projectDesignCloneValidateBeforeCall(projectid, masterdesignid, null);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a copy of design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignCloneAsync(Integer projectid, Integer masterdesignid, final ApiCallback<DesignMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignCloneValidateBeforeCall(projectid, masterdesignid, _callback);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignCreate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignCreateCall(Integer projectid, Design data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignCreateValidateBeforeCall(Integer projectid, Design data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectDesignCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignCreateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a design, return master design
     * @param projectid  (required)
     * @param data  (required)
     * @return DesignMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignMaster projectDesignCreate(Integer projectid, Design data) throws ApiException {
        ApiResponse<DesignMaster> localVarResp = projectDesignCreateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a design, return master design
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignMaster> projectDesignCreateWithHttpInfo(Integer projectid, Design data) throws ApiException {
        okhttp3.Call localVarCall = projectDesignCreateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a design, return master design
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignCreateAsync(Integer projectid, Design data, final ApiCallback<DesignMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignCreateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignDelete
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignDeleteCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/{masterdesignid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignDeleteValidateBeforeCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignDelete(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling projectDesignDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignDeleteCall(projectid, masterdesignid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a master design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectDesignDelete(Integer projectid, Integer masterdesignid) throws ApiException {
        projectDesignDeleteWithHttpInfo(projectid, masterdesignid);
    }

    /**
     * 
     * Delete a master design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectDesignDeleteWithHttpInfo(Integer projectid, Integer masterdesignid) throws ApiException {
        okhttp3.Call localVarCall = projectDesignDeleteValidateBeforeCall(projectid, masterdesignid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a master design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignDeleteAsync(Integer projectid, Integer masterdesignid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignDeleteValidateBeforeCall(projectid, masterdesignid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignInstantiableList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignInstantiableListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/instantiable/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignInstantiableListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignInstantiableList(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignInstantiableListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of designs that can be instantiated in the given design
     * @param projectid  (required)
     * @return List&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignMaster> projectDesignInstantiableList(Integer projectid) throws ApiException {
        ApiResponse<List<DesignMaster>> localVarResp = projectDesignInstantiableListWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of designs that can be instantiated in the given design
     * @param projectid  (required)
     * @return ApiResponse&lt;List&lt;DesignMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignMaster>> projectDesignInstantiableListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectDesignInstantiableListValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<List<DesignMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of designs that can be instantiated in the given design
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignInstantiableListAsync(Integer projectid, final ApiCallback<List<DesignMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignInstantiableListValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignList
     * @param projectid  (required)
     * @param name Design name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignListCall(Integer projectid, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignListValidateBeforeCall(Integer projectid, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignList(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignListCall(projectid, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of master designs in projects
     * @param projectid  (required)
     * @param name Design name (optional)
     * @return List&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignMaster> projectDesignList(Integer projectid, String name) throws ApiException {
        ApiResponse<List<DesignMaster>> localVarResp = projectDesignListWithHttpInfo(projectid, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of master designs in projects
     * @param projectid  (required)
     * @param name Design name (optional)
     * @return ApiResponse&lt;List&lt;DesignMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignMaster>> projectDesignListWithHttpInfo(Integer projectid, String name) throws ApiException {
        okhttp3.Call localVarCall = projectDesignListValidateBeforeCall(projectid, name, null);
        Type localVarReturnType = new TypeToken<List<DesignMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of master designs in projects
     * @param projectid  (required)
     * @param name Design name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignListAsync(Integer projectid, String name, final ApiCallback<List<DesignMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignListValidateBeforeCall(projectid, name, _callback);
        Type localVarReturnType = new TypeToken<List<DesignMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignRead
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignReadCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/{masterdesignid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignReadValidateBeforeCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignRead(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling projectDesignRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignReadCall(projectid, masterdesignid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a master design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return DesignMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignMaster projectDesignRead(Integer projectid, Integer masterdesignid) throws ApiException {
        ApiResponse<DesignMaster> localVarResp = projectDesignReadWithHttpInfo(projectid, masterdesignid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a master design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return ApiResponse&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignMaster> projectDesignReadWithHttpInfo(Integer projectid, Integer masterdesignid) throws ApiException {
        okhttp3.Call localVarCall = projectDesignReadValidateBeforeCall(projectid, masterdesignid, null);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a master design
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignReadAsync(Integer projectid, Integer masterdesignid, final ApiCallback<DesignMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignReadValidateBeforeCall(projectid, masterdesignid, _callback);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignUpdate
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignUpdateCall(Integer projectid, Integer masterdesignid, DesignMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/{masterdesignid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignUpdateValidateBeforeCall(Integer projectid, Integer masterdesignid, DesignMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignUpdate(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling projectDesignUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectDesignUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignUpdateCall(projectid, masterdesignid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a design master
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param data  (required)
     * @return DesignMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignMaster projectDesignUpdate(Integer projectid, Integer masterdesignid, DesignMaster data) throws ApiException {
        ApiResponse<DesignMaster> localVarResp = projectDesignUpdateWithHttpInfo(projectid, masterdesignid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a design master
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignMaster> projectDesignUpdateWithHttpInfo(Integer projectid, Integer masterdesignid, DesignMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectDesignUpdateValidateBeforeCall(projectid, masterdesignid, data, null);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a design master
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignUpdateAsync(Integer projectid, Integer masterdesignid, DesignMaster data, final ApiCallback<DesignMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignUpdateValidateBeforeCall(projectid, masterdesignid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectDesignVersionsList
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignVersionsListCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/design/{masterdesignid}/versions/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectDesignVersionsListValidateBeforeCall(Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectDesignVersionsList(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling projectDesignVersionsList(Async)");
        }
        

        okhttp3.Call localVarCall = projectDesignVersionsListCall(projectid, masterdesignid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of design versions
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return List&lt;DesignVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignVersion> projectDesignVersionsList(Integer projectid, Integer masterdesignid) throws ApiException {
        ApiResponse<List<DesignVersion>> localVarResp = projectDesignVersionsListWithHttpInfo(projectid, masterdesignid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of design versions
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return ApiResponse&lt;List&lt;DesignVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignVersion>> projectDesignVersionsListWithHttpInfo(Integer projectid, Integer masterdesignid) throws ApiException {
        okhttp3.Call localVarCall = projectDesignVersionsListValidateBeforeCall(projectid, masterdesignid, null);
        Type localVarReturnType = new TypeToken<List<DesignVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of design versions
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectDesignVersionsListAsync(Integer projectid, Integer masterdesignid, final ApiCallback<List<DesignVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectDesignVersionsListValidateBeforeCall(projectid, masterdesignid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectList
     * @param name Project name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectListCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectListValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectListCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of projects
     * @param name Project name (optional)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> projectList(String name) throws ApiException {
        ApiResponse<List<Project>> localVarResp = projectListWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of projects
     * @param name Project name (optional)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> projectListWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = projectListValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of projects
     * @param name Project name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectListAsync(String name, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectListValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectPermissionsList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectPermissionsListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/permissions/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectPermissionsListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = projectPermissionsListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param projectid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectPermissionsList(Integer projectid) throws ApiException {
        projectPermissionsListWithHttpInfo(projectid);
    }

    /**
     * 
     * Get list of permissions
     * @param projectid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectPermissionsListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectPermissionsListValidateBeforeCall(projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectPermissionsListAsync(Integer projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectPermissionsListValidateBeforeCall(projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectPermissionsUpdate
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectPermissionsUpdateCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/permissions/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectPermissionsUpdateValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectPermissionsUpdateCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param projectid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectPermissionsUpdate(Integer projectid) throws ApiException {
        projectPermissionsUpdateWithHttpInfo(projectid);
    }

    /**
     * 
     * Get list of permissions
     * @param projectid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectPermissionsUpdateWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectPermissionsUpdateValidateBeforeCall(projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectPermissionsUpdateAsync(Integer projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectPermissionsUpdateValidateBeforeCall(projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectRead
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReadCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectReadValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectReadCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a project
     * @param projectid  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Project projectRead(Integer projectid) throws ApiException {
        ApiResponse<Project> localVarResp = projectReadWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a project
     * @param projectid  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectReadWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectReadValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a project
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReadAsync(Integer projectid, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectReadValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectReferenceCreate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceCreateCall(Integer projectid, Project data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/reference/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectReferenceCreateValidateBeforeCall(Integer projectid, Project data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectReferenceCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectReferenceCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectReferenceCreateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add a reference
     * @param projectid  (required)
     * @param data  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Project projectReferenceCreate(Integer projectid, Project data) throws ApiException {
        ApiResponse<Project> localVarResp = projectReferenceCreateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a reference
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectReferenceCreateWithHttpInfo(Integer projectid, Project data) throws ApiException {
        okhttp3.Call localVarCall = projectReferenceCreateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a reference
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceCreateAsync(Integer projectid, Project data, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectReferenceCreateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectReferenceDelete
     * @param projectid  (required)
     * @param refid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceDeleteCall(Integer projectid, Integer refid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/reference/{refid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "refid" + "\\}", localVarApiClient.escapeString(refid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectReferenceDeleteValidateBeforeCall(Integer projectid, Integer refid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectReferenceDelete(Async)");
        }
        
        // verify the required parameter 'refid' is set
        if (refid == null) {
            throw new ApiException("Missing the required parameter 'refid' when calling projectReferenceDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectReferenceDeleteCall(projectid, refid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a reference
     * @param projectid  (required)
     * @param refid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectReferenceDelete(Integer projectid, Integer refid) throws ApiException {
        projectReferenceDeleteWithHttpInfo(projectid, refid);
    }

    /**
     * 
     * Delete a reference
     * @param projectid  (required)
     * @param refid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectReferenceDeleteWithHttpInfo(Integer projectid, Integer refid) throws ApiException {
        okhttp3.Call localVarCall = projectReferenceDeleteValidateBeforeCall(projectid, refid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a reference
     * @param projectid  (required)
     * @param refid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceDeleteAsync(Integer projectid, Integer refid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectReferenceDeleteValidateBeforeCall(projectid, refid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectReferenceList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/reference/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectReferenceListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectReferenceList(Async)");
        }
        

        okhttp3.Call localVarCall = projectReferenceListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of refernced projects
     * @param projectid  (required)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> projectReferenceList(Integer projectid) throws ApiException {
        ApiResponse<List<Project>> localVarResp = projectReferenceListWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of refernced projects
     * @param projectid  (required)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> projectReferenceListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectReferenceListValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of refernced projects
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceListAsync(Integer projectid, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectReferenceListValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectReferenceRead
     * @param projectid  (required)
     * @param refid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceReadCall(Integer projectid, Integer refid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/reference/{refid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "refid" + "\\}", localVarApiClient.escapeString(refid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectReferenceReadValidateBeforeCall(Integer projectid, Integer refid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectReferenceRead(Async)");
        }
        
        // verify the required parameter 'refid' is set
        if (refid == null) {
            throw new ApiException("Missing the required parameter 'refid' when calling projectReferenceRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectReferenceReadCall(projectid, refid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a reference
     * @param projectid  (required)
     * @param refid  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Project projectReferenceRead(Integer projectid, Integer refid) throws ApiException {
        ApiResponse<Project> localVarResp = projectReferenceReadWithHttpInfo(projectid, refid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a reference
     * @param projectid  (required)
     * @param refid  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectReferenceReadWithHttpInfo(Integer projectid, Integer refid) throws ApiException {
        okhttp3.Call localVarCall = projectReferenceReadValidateBeforeCall(projectid, refid, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a reference
     * @param projectid  (required)
     * @param refid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceReadAsync(Integer projectid, Integer refid, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectReferenceReadValidateBeforeCall(projectid, refid, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectReferenceableList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceableListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/referenceable/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectReferenceableListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectReferenceableList(Async)");
        }
        

        okhttp3.Call localVarCall = projectReferenceableListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of projects referenceable by this project
     * @param projectid  (required)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Project> projectReferenceableList(Integer projectid) throws ApiException {
        ApiResponse<List<Project>> localVarResp = projectReferenceableListWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of projects referenceable by this project
     * @param projectid  (required)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Project>> projectReferenceableListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectReferenceableListValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of projects referenceable by this project
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectReferenceableListAsync(Integer projectid, final ApiCallback<List<Project>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectReferenceableListValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioAccessCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioAccessCreateCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/access/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioAccessCreateValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioAccessCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioAccessCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioAccessCreateCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update project datasheet access
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioAccessCreate(Integer projectid, Integer scenarioid) throws ApiException {
        projectScenarioAccessCreateWithHttpInfo(projectid, scenarioid);
    }

    /**
     * 
     * Update project datasheet access
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioAccessCreateWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioAccessCreateValidateBeforeCall(projectid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update project datasheet access
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioAccessCreateAsync(Integer projectid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioAccessCreateValidateBeforeCall(projectid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioCommitCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioCommitCreateCall(Integer projectid, Integer scenarioid, ScenarioVersion data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/commit/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioCommitCreateValidateBeforeCall(Integer projectid, Integer scenarioid, ScenarioVersion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioCommitCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioCommitCreateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ScenarioVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioVersion projectScenarioCommitCreate(Integer projectid, Integer scenarioid, ScenarioVersion data) throws ApiException {
        ApiResponse<ScenarioVersion> localVarResp = projectScenarioCommitCreateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioVersion> projectScenarioCommitCreateWithHttpInfo(Integer projectid, Integer scenarioid, ScenarioVersion data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioCommitCreateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioCommitCreateAsync(Integer projectid, Integer scenarioid, ScenarioVersion data, final ApiCallback<ScenarioVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioCommitCreateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDeleteCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDeleteCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDelete(Integer projectid, Integer scenarioid) throws ApiException {
        projectScenarioDeleteWithHttpInfo(projectid, scenarioid);
    }

    /**
     * 
     * Delete a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDeleteWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDeleteValidateBeforeCall(projectid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDeleteAsync(Integer projectid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDeleteValidateBeforeCall(projectid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignCreateCall(Integer projectid, Integer scenarioid, DesignInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignCreateValidateBeforeCall(Integer projectid, Integer scenarioid, DesignInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignCreateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return DesignInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignInstance projectScenarioDesignCreate(Integer projectid, Integer scenarioid, DesignInstance data) throws ApiException {
        ApiResponse<DesignInstance> localVarResp = projectScenarioDesignCreateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignInstance> projectScenarioDesignCreateWithHttpInfo(Integer projectid, Integer scenarioid, DesignInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignCreateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<DesignInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignCreateAsync(Integer projectid, Integer scenarioid, DesignInstance data, final ApiCallback<DesignInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignCreateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignDeleteCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignDelete(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignDeleteCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario Design instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignDelete(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        projectScenarioDesignDeleteWithHttpInfo(projectid, scenarioid, designinstid);
    }

    /**
     * 
     * Delete a scenario Design instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignDeleteValidateBeforeCall(projectid, scenarioid, designinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a scenario Design instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignDeleteAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignDeleteValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario Designs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;DesignInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignInstance> projectScenarioDesignList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<DesignInstance>> localVarResp = projectScenarioDesignListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario Designs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;DesignInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignInstance>> projectScenarioDesignListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<DesignInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario Designs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignListAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<DesignInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamConfigCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigCreateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParamConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamConfigCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParamConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigCreate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigCreate(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignParamConfigCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigCreateCall(projectid, scenarioid, designinstid, paramid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @return ScenarioParamConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioParamConfig projectScenarioDesignParamConfigCreate(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParamConfig data) throws ApiException {
        ApiResponse<ScenarioParamConfig> localVarResp = projectScenarioDesignParamConfigCreateWithHttpInfo(projectid, scenarioid, designinstid, paramid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioParamConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioParamConfig> projectScenarioDesignParamConfigCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParamConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamConfigCreateValidateBeforeCall(projectid, scenarioid, designinstid, paramid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioParamConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigCreateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParamConfig data, final ApiCallback<ScenarioParamConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigCreateValidateBeforeCall(projectid, scenarioid, designinstid, paramid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioParamConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamConfigDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigDeleteCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamConfigDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignParamConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigDeleteCall(projectid, scenarioid, designinstid, paramid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignParamConfigDelete(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid) throws ApiException {
        projectScenarioDesignParamConfigDeleteWithHttpInfo(projectid, scenarioid, designinstid, paramid, configid);
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignParamConfigDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamConfigDeleteValidateBeforeCall(projectid, scenarioid, designinstid, paramid, configid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigDeleteAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigDeleteValidateBeforeCall(projectid, scenarioid, designinstid, paramid, configid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamConfigList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigListCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamConfigListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigList(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigListCall(projectid, scenarioid, designinstid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @return List&lt;ScenarioParamConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioParamConfig> projectScenarioDesignParamConfigList(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid) throws ApiException {
        ApiResponse<List<ScenarioParamConfig>> localVarResp = projectScenarioDesignParamConfigListWithHttpInfo(projectid, scenarioid, designinstid, paramid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioParamConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioParamConfig>> projectScenarioDesignParamConfigListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamConfigListValidateBeforeCall(projectid, scenarioid, designinstid, paramid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioParamConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigListAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, final ApiCallback<List<ScenarioParamConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigListValidateBeforeCall(projectid, scenarioid, designinstid, paramid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioParamConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamConfigRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamConfigReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigRead(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignParamConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigReadCall(projectid, scenarioid, designinstid, paramid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @return ScenarioParamConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioParamConfig projectScenarioDesignParamConfigRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid) throws ApiException {
        ApiResponse<ScenarioParamConfig> localVarResp = projectScenarioDesignParamConfigReadWithHttpInfo(projectid, scenarioid, designinstid, paramid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;ScenarioParamConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioParamConfig> projectScenarioDesignParamConfigReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamConfigReadValidateBeforeCall(projectid, scenarioid, designinstid, paramid, configid, null);
        Type localVarReturnType = new TypeToken<ScenarioParamConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, final ApiCallback<ScenarioParamConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigReadValidateBeforeCall(projectid, scenarioid, designinstid, paramid, configid, _callback);
        Type localVarReturnType = new TypeToken<ScenarioParamConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamConfigUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, ScenarioParamConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamConfigUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, ScenarioParamConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignParamConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigUpdateCall(projectid, scenarioid, designinstid, paramid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ScenarioParamConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioParamConfig projectScenarioDesignParamConfigUpdate(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, ScenarioParamConfig data) throws ApiException {
        ApiResponse<ScenarioParamConfig> localVarResp = projectScenarioDesignParamConfigUpdateWithHttpInfo(projectid, scenarioid, designinstid, paramid, configid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioParamConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioParamConfig> projectScenarioDesignParamConfigUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, ScenarioParamConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamConfigUpdateValidateBeforeCall(projectid, scenarioid, designinstid, paramid, configid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioParamConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamConfigUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, Integer configid, ScenarioParamConfig data, final ApiCallback<ScenarioParamConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamConfigUpdateValidateBeforeCall(projectid, scenarioid, designinstid, paramid, configid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioParamConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamCreateCall(Integer projectid, Integer scenarioid, Integer designinstid, ScenarioParam data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, ScenarioParam data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamCreate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignParamCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamCreateCall(projectid, scenarioid, designinstid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @return ScenarioParam
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioParam projectScenarioDesignParamCreate(Integer projectid, Integer scenarioid, Integer designinstid, ScenarioParam data) throws ApiException {
        ApiResponse<ScenarioParam> localVarResp = projectScenarioDesignParamCreateWithHttpInfo(projectid, scenarioid, designinstid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioParam&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioParam> projectScenarioDesignParamCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, ScenarioParam data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamCreateValidateBeforeCall(projectid, scenarioid, designinstid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioParam>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamCreateAsync(Integer projectid, Integer scenarioid, Integer designinstid, ScenarioParam data, final ApiCallback<ScenarioParam> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamCreateValidateBeforeCall(projectid, scenarioid, designinstid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioParam>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamListCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamListCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return List&lt;ScenarioParam&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioParam> projectScenarioDesignParamList(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        ApiResponse<List<ScenarioParam>> localVarResp = projectScenarioDesignParamListWithHttpInfo(projectid, scenarioid, designinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioParam&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioParam>> projectScenarioDesignParamListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamListValidateBeforeCall(projectid, scenarioid, designinstid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioParam>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamListAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<List<ScenarioParam>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamListValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioParam>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamRead(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamReadCall(projectid, scenarioid, designinstid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get datasheet design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @return List&lt;ScenarioParam&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioParam> projectScenarioDesignParamRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid) throws ApiException {
        ApiResponse<List<ScenarioParam>> localVarResp = projectScenarioDesignParamReadWithHttpInfo(projectid, scenarioid, designinstid, paramid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get datasheet design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioParam&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioParam>> projectScenarioDesignParamReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamReadValidateBeforeCall(projectid, scenarioid, designinstid, paramid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioParam>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get datasheet design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, final ApiCallback<List<ScenarioParam>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamReadValidateBeforeCall(projectid, scenarioid, designinstid, paramid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioParam>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignParamUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParam data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignParamUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParam data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignParamUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamUpdate(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling projectScenarioDesignParamUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignParamUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignParamUpdateCall(projectid, scenarioid, designinstid, paramid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @return ScenarioParam
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioParam projectScenarioDesignParamUpdate(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParam data) throws ApiException {
        ApiResponse<ScenarioParam> localVarResp = projectScenarioDesignParamUpdateWithHttpInfo(projectid, scenarioid, designinstid, paramid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioParam&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioParam> projectScenarioDesignParamUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParam data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignParamUpdateValidateBeforeCall(projectid, scenarioid, designinstid, paramid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioParam>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignParamUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer paramid, ScenarioParam data, final ApiCallback<ScenarioParam> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignParamUpdateValidateBeforeCall(projectid, scenarioid, designinstid, paramid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioParam>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignPowerList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignPowerListCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/power/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignPowerListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignPowerList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignPowerList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignPowerList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignPowerListCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignPowerList(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        projectScenarioDesignPowerListWithHttpInfo(projectid, scenarioid, designinstid);
    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignPowerListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignPowerListValidateBeforeCall(projectid, scenarioid, designinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignPowerListAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignPowerListValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignPowerdistributionList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignPowerdistributionListCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/powerdistribution/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignPowerdistributionListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignPowerdistributionList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignPowerdistributionList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignPowerdistributionList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignPowerdistributionListCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project scenario power distribution
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignPowerdistributionList(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        projectScenarioDesignPowerdistributionListWithHttpInfo(projectid, scenarioid, designinstid);
    }

    /**
     * 
     * Get project scenario power distribution
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignPowerdistributionListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignPowerdistributionListValidateBeforeCall(projectid, scenarioid, designinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get project scenario power distribution
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignPowerdistributionListAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignPowerdistributionListValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignReadCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignReadCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scenario Design
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return DesignInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignInstance projectScenarioDesignRead(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        ApiResponse<DesignInstance> localVarResp = projectScenarioDesignReadWithHttpInfo(projectid, scenarioid, designinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scenario Design
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;DesignInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignInstance> projectScenarioDesignReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignReadValidateBeforeCall(projectid, scenarioid, designinstid, null);
        Type localVarReturnType = new TypeToken<DesignInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scenario Design
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<DesignInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignReadValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        Type localVarReturnType = new TypeToken<DesignInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyConfigCreate
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigCreateCall(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "dsigninstid" + "\\}", localVarApiClient.escapeString(dsigninstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyConfigCreateValidateBeforeCall(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'dsigninstid' is set
        if (dsigninstid == null) {
            throw new ApiException("Missing the required parameter 'dsigninstid' when calling projectScenarioDesignSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignSupplyConfigCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigCreateCall(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioDesignSupplyConfigCreate(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioDesignSupplyConfigCreateWithHttpInfo(designinstid, projectid, scenarioid, dsigninstid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioDesignSupplyConfigCreateWithHttpInfo(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigCreateValidateBeforeCall(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigCreateAsync(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigCreateValidateBeforeCall(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyConfigDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigDeleteCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyConfigDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignSupplyConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigDeleteCall(projectid, scenarioid, designinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignSupplyConfigDelete(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        projectScenarioDesignSupplyConfigDeleteWithHttpInfo(projectid, scenarioid, designinstid, supplyid, configid, data);
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignSupplyConfigDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, configid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigDeleteAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, configid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyConfigList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigListCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyConfigListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigListCall(projectid, scenarioid, designinstid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @return List&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyInstConfig> projectScenarioDesignSupplyConfigList(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid) throws ApiException {
        ApiResponse<List<SupplyInstConfig>> localVarResp = projectScenarioDesignSupplyConfigListWithHttpInfo(projectid, scenarioid, designinstid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;List&lt;SupplyInstConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyInstConfig>> projectScenarioDesignSupplyConfigListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigListValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, null);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigListAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, final ApiCallback<List<SupplyInstConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigListValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyConfigRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyConfigReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignSupplyConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigReadCall(projectid, scenarioid, designinstid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioDesignSupplyConfigRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioDesignSupplyConfigReadWithHttpInfo(projectid, scenarioid, designinstid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioDesignSupplyConfigReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigReadValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigReadValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyConfigUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyConfigUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignSupplyConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigUpdateCall(projectid, scenarioid, designinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioDesignSupplyConfigUpdate(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioDesignSupplyConfigUpdateWithHttpInfo(projectid, scenarioid, designinstid, supplyid, configid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioDesignSupplyConfigUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, configid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyConfigUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, configid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyCreate
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyCreateCall(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, DesignSupplyInst data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "dsigninstid" + "\\}", localVarApiClient.escapeString(dsigninstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyCreateValidateBeforeCall(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, DesignSupplyInst data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyCreate(Async)");
        }
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyCreate(Async)");
        }
        
        // verify the required parameter 'dsigninstid' is set
        if (dsigninstid == null) {
            throw new ApiException("Missing the required parameter 'dsigninstid' when calling projectScenarioDesignSupplyCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignSupplyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyCreateCall(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return DesignSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSupplyInst projectScenarioDesignSupplyCreate(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, DesignSupplyInst data) throws ApiException {
        ApiResponse<DesignSupplyInst> localVarResp = projectScenarioDesignSupplyCreateWithHttpInfo(designinstid, projectid, scenarioid, dsigninstid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSupplyInst> projectScenarioDesignSupplyCreateWithHttpInfo(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, DesignSupplyInst data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyCreateValidateBeforeCall(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<DesignSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param designinstid  (required)
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param dsigninstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyCreateAsync(String designinstid, Integer projectid, Integer scenarioid, Integer dsigninstid, Integer supplyid, DesignSupplyInst data, final ApiCallback<DesignSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyCreateValidateBeforeCall(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignSupplyRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignSupplyReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignSupplyReadCall(projectid, scenarioid, designinstid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @return List&lt;DesignSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignSupplyInst> projectScenarioDesignSupplyRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid) throws ApiException {
        ApiResponse<List<DesignSupplyInst>> localVarResp = projectScenarioDesignSupplyReadWithHttpInfo(projectid, scenarioid, designinstid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;List&lt;DesignSupplyInst&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignSupplyInst>> projectScenarioDesignSupplyReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignSupplyReadValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, null);
        Type localVarReturnType = new TypeToken<List<DesignSupplyInst>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignSupplyReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyid, final ApiCallback<List<DesignSupplyInst>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignSupplyReadValidateBeforeCall(projectid, scenarioid, designinstid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignSupplyInst>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignThermalList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignThermalListCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/thermal/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignThermalListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignThermalList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignThermalList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignThermalList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignThermalListCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Compute project scenario steady state thermal
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignThermalList(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        projectScenarioDesignThermalListWithHttpInfo(projectid, scenarioid, designinstid);
    }

    /**
     * 
     * Compute project scenario steady state thermal
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignThermalListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignThermalListValidateBeforeCall(projectid, scenarioid, designinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Compute project scenario steady state thermal
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignThermalListAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignThermalListValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, DesignInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, DesignInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUpdateCall(projectid, scenarioid, designinstid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario Design instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @return DesignInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignInstance projectScenarioDesignUpdate(Integer projectid, Integer scenarioid, Integer designinstid, DesignInstance data) throws ApiException {
        ApiResponse<DesignInstance> localVarResp = projectScenarioDesignUpdateWithHttpInfo(projectid, scenarioid, designinstid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario Design instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignInstance> projectScenarioDesignUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, DesignInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUpdateValidateBeforeCall(projectid, scenarioid, designinstid, data, null);
        Type localVarReturnType = new TypeToken<DesignInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario Design instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, DesignInstance data, final ApiCallback<DesignInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUpdateValidateBeforeCall(projectid, scenarioid, designinstid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationConfigCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigCreateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtilConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationConfigCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtilConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigCreate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigCreate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationConfigCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigCreateCall(projectid, scenarioid, designinstid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ScenarioModeUtilConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioModeUtilConfig projectScenarioDesignUtilizationConfigCreate(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtilConfig data) throws ApiException {
        ApiResponse<ScenarioModeUtilConfig> localVarResp = projectScenarioDesignUtilizationConfigCreateWithHttpInfo(projectid, scenarioid, designinstid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioModeUtilConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioModeUtilConfig> projectScenarioDesignUtilizationConfigCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtilConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigCreateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioModeUtilConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigCreateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtilConfig data, final ApiCallback<ScenarioModeUtilConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigCreateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioModeUtilConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationConfigDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigDeleteCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationConfigDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigDelete(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigDelete(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignUtilizationConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigDeleteCall(projectid, scenarioid, designinstid, modeid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioDesignUtilizationConfigDelete(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid) throws ApiException {
        projectScenarioDesignUtilizationConfigDeleteWithHttpInfo(projectid, scenarioid, designinstid, modeid, configid);
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioDesignUtilizationConfigDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigDeleteValidateBeforeCall(projectid, scenarioid, designinstid, modeid, configid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigDeleteAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigDeleteValidateBeforeCall(projectid, scenarioid, designinstid, modeid, configid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationConfigList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigListCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationConfigListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigList(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigListCall(projectid, scenarioid, designinstid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @return List&lt;ScenarioModeUtilConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioModeUtilConfig> projectScenarioDesignUtilizationConfigList(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid) throws ApiException {
        ApiResponse<List<ScenarioModeUtilConfig>> localVarResp = projectScenarioDesignUtilizationConfigListWithHttpInfo(projectid, scenarioid, designinstid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioModeUtilConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioModeUtilConfig>> projectScenarioDesignUtilizationConfigListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigListValidateBeforeCall(projectid, scenarioid, designinstid, modeid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioModeUtilConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigListAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, final ApiCallback<List<ScenarioModeUtilConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigListValidateBeforeCall(projectid, scenarioid, designinstid, modeid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioModeUtilConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationConfigRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationConfigReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigRead(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignUtilizationConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigReadCall(projectid, scenarioid, designinstid, modeid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return ScenarioModeUtilConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioModeUtilConfig projectScenarioDesignUtilizationConfigRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid) throws ApiException {
        ApiResponse<ScenarioModeUtilConfig> localVarResp = projectScenarioDesignUtilizationConfigReadWithHttpInfo(projectid, scenarioid, designinstid, modeid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;ScenarioModeUtilConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioModeUtilConfig> projectScenarioDesignUtilizationConfigReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigReadValidateBeforeCall(projectid, scenarioid, designinstid, modeid, configid, null);
        Type localVarReturnType = new TypeToken<ScenarioModeUtilConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, final ApiCallback<ScenarioModeUtilConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigReadValidateBeforeCall(projectid, scenarioid, designinstid, modeid, configid, _callback);
        Type localVarReturnType = new TypeToken<ScenarioModeUtilConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationConfigUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, ScenarioModeUtilConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationConfigUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, ScenarioModeUtilConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioDesignUtilizationConfigUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigUpdateCall(projectid, scenarioid, designinstid, modeid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ScenarioModeUtilConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioModeUtilConfig projectScenarioDesignUtilizationConfigUpdate(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, ScenarioModeUtilConfig data) throws ApiException {
        ApiResponse<ScenarioModeUtilConfig> localVarResp = projectScenarioDesignUtilizationConfigUpdateWithHttpInfo(projectid, scenarioid, designinstid, modeid, configid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioModeUtilConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioModeUtilConfig> projectScenarioDesignUtilizationConfigUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, ScenarioModeUtilConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigUpdateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, configid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioModeUtilConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationConfigUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, Integer configid, ScenarioModeUtilConfig data, final ApiCallback<ScenarioModeUtilConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationConfigUpdateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, configid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioModeUtilConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationCreateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationCreate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationCreate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationCreateCall(projectid, scenarioid, designinstid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioModeUtil projectScenarioDesignUtilizationCreate(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data) throws ApiException {
        ApiResponse<ScenarioModeUtil> localVarResp = projectScenarioDesignUtilizationCreateWithHttpInfo(projectid, scenarioid, designinstid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioModeUtil> projectScenarioDesignUtilizationCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationCreateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationCreateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data, final ApiCallback<ScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationCreateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationListCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationList(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationListCall(projectid, scenarioid, designinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return List&lt;ScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioModeUtil> projectScenarioDesignUtilizationList(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        ApiResponse<List<ScenarioModeUtil>> localVarResp = projectScenarioDesignUtilizationListWithHttpInfo(projectid, scenarioid, designinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioModeUtil&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioModeUtil>> projectScenarioDesignUtilizationListWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationListValidateBeforeCall(projectid, scenarioid, designinstid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioModeUtil>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationListAsync(Integer projectid, Integer scenarioid, Integer designinstid, final ApiCallback<List<ScenarioModeUtil>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationListValidateBeforeCall(projectid, scenarioid, designinstid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioModeUtil>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationRead(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationReadCall(projectid, scenarioid, designinstid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @return ScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioModeUtil projectScenarioDesignUtilizationRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid) throws ApiException {
        ApiResponse<ScenarioModeUtil> localVarResp = projectScenarioDesignUtilizationReadWithHttpInfo(projectid, scenarioid, designinstid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;ScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioModeUtil> projectScenarioDesignUtilizationReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationReadValidateBeforeCall(projectid, scenarioid, designinstid, modeid, null);
        Type localVarReturnType = new TypeToken<ScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design config data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, final ApiCallback<ScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationReadValidateBeforeCall(projectid, scenarioid, designinstid, modeid, _callback);
        Type localVarReturnType = new TypeToken<ScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioDesignUtilizationUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioDesignUtilizationUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationUpdateCall(projectid, scenarioid, designinstid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioModeUtil projectScenarioDesignUtilizationUpdate(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data) throws ApiException {
        ApiResponse<ScenarioModeUtil> localVarResp = projectScenarioDesignUtilizationUpdateWithHttpInfo(projectid, scenarioid, designinstid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioModeUtil> projectScenarioDesignUtilizationUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioDesignUtilizationUpdateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioDesignUtilizationUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer modeid, ScenarioModeUtil data, final ApiCallback<ScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioDesignUtilizationUpdateValidateBeforeCall(projectid, scenarioid, designinstid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyDesignSupplyRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyDesignSupplyReadCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/design/{designinstid}/supply/{supplyinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyinstid" + "\\}", localVarApiClient.escapeString(supplyinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyDesignSupplyReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyDesignSupplyRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyDesignSupplyRead(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioHierarchyDesignSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyinstid' is set
        if (supplyinstid == null) {
            throw new ApiException("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyDesignSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyDesignSupplyReadCall(projectid, scenarioid, designinstid, supplyinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @return DesignSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSupplyInst projectScenarioHierarchyDesignSupplyRead(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid) throws ApiException {
        ApiResponse<DesignSupplyInst> localVarResp = projectScenarioHierarchyDesignSupplyReadWithHttpInfo(projectid, scenarioid, designinstid, supplyinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @return ApiResponse&lt;DesignSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSupplyInst> projectScenarioHierarchyDesignSupplyReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyDesignSupplyReadValidateBeforeCall(projectid, scenarioid, designinstid, supplyinstid, null);
        Type localVarReturnType = new TypeToken<DesignSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyDesignSupplyReadAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid, final ApiCallback<DesignSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyDesignSupplyReadValidateBeforeCall(projectid, scenarioid, designinstid, supplyinstid, _callback);
        Type localVarReturnType = new TypeToken<DesignSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyDesignSupplyUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyDesignSupplyUpdateCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/design/{designinstid}/supply/{supplyinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "designinstid" + "\\}", localVarApiClient.escapeString(designinstid.toString()))
            .replaceAll("\\{" + "supplyinstid" + "\\}", localVarApiClient.escapeString(supplyinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyDesignSupplyUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyDesignSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyDesignSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'designinstid' is set
        if (designinstid == null) {
            throw new ApiException("Missing the required parameter 'designinstid' when calling projectScenarioHierarchyDesignSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyinstid' is set
        if (supplyinstid == null) {
            throw new ApiException("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyDesignSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyDesignSupplyUpdateCall(projectid, scenarioid, designinstid, supplyinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @return DesignSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSupplyInst projectScenarioHierarchyDesignSupplyUpdate(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid) throws ApiException {
        ApiResponse<DesignSupplyInst> localVarResp = projectScenarioHierarchyDesignSupplyUpdateWithHttpInfo(projectid, scenarioid, designinstid, supplyinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @return ApiResponse&lt;DesignSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSupplyInst> projectScenarioHierarchyDesignSupplyUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyDesignSupplyUpdateValidateBeforeCall(projectid, scenarioid, designinstid, supplyinstid, null);
        Type localVarReturnType = new TypeToken<DesignSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param designinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyDesignSupplyUpdateAsync(Integer projectid, Integer scenarioid, Integer designinstid, Integer supplyinstid, final ApiCallback<DesignSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyDesignSupplyUpdateValidateBeforeCall(projectid, scenarioid, designinstid, supplyinstid, _callback);
        Type localVarReturnType = new TypeToken<DesignSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario PCBs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ScenarioHierarchy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioHierarchy projectScenarioHierarchyList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<ScenarioHierarchy> localVarResp = projectScenarioHierarchyListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario PCBs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;ScenarioHierarchy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioHierarchy> projectScenarioHierarchyListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<ScenarioHierarchy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario PCBs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyListAsync(Integer projectid, Integer scenarioid, final ApiCallback<ScenarioHierarchy> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<ScenarioHierarchy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyPackageSupplyRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyPackageSupplyReadCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/package/{packinstid}/supply/{supplyinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyinstid" + "\\}", localVarApiClient.escapeString(supplyinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyPackageSupplyReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyPackageSupplyRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyPackageSupplyRead(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioHierarchyPackageSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyinstid' is set
        if (supplyinstid == null) {
            throw new ApiException("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyPackageSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyPackageSupplyReadCall(projectid, scenarioid, packinstid, supplyinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @return PackageSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PackageSupplyInst projectScenarioHierarchyPackageSupplyRead(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid) throws ApiException {
        ApiResponse<PackageSupplyInst> localVarResp = projectScenarioHierarchyPackageSupplyReadWithHttpInfo(projectid, scenarioid, packinstid, supplyinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @return ApiResponse&lt;PackageSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageSupplyInst> projectScenarioHierarchyPackageSupplyReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyPackageSupplyReadValidateBeforeCall(projectid, scenarioid, packinstid, supplyinstid, null);
        Type localVarReturnType = new TypeToken<PackageSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyPackageSupplyReadAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid, final ApiCallback<PackageSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyPackageSupplyReadValidateBeforeCall(projectid, scenarioid, packinstid, supplyinstid, _callback);
        Type localVarReturnType = new TypeToken<PackageSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyPackageSupplyUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyPackageSupplyUpdateCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/package/{packinstid}/supply/{supplyinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyinstid" + "\\}", localVarApiClient.escapeString(supplyinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyPackageSupplyUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyPackageSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyPackageSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioHierarchyPackageSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyinstid' is set
        if (supplyinstid == null) {
            throw new ApiException("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyPackageSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyPackageSupplyUpdateCall(projectid, scenarioid, packinstid, supplyinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @return PackageSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PackageSupplyInst projectScenarioHierarchyPackageSupplyUpdate(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid) throws ApiException {
        ApiResponse<PackageSupplyInst> localVarResp = projectScenarioHierarchyPackageSupplyUpdateWithHttpInfo(projectid, scenarioid, packinstid, supplyinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Update scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @return ApiResponse&lt;PackageSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageSupplyInst> projectScenarioHierarchyPackageSupplyUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyPackageSupplyUpdateValidateBeforeCall(projectid, scenarioid, packinstid, supplyinstid, null);
        Type localVarReturnType = new TypeToken<PackageSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update scenario PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyPackageSupplyUpdateAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyinstid, final ApiCallback<PackageSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyPackageSupplyUpdateValidateBeforeCall(projectid, scenarioid, packinstid, supplyinstid, _callback);
        Type localVarReturnType = new TypeToken<PackageSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyVrSupplyRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyVrSupplyReadCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/vr/{vrinstid}/supply/{supplyinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyinstid" + "\\}", localVarApiClient.escapeString(supplyinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyVrSupplyReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyVrSupplyRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyVrSupplyRead(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioHierarchyVrSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyinstid' is set
        if (supplyinstid == null) {
            throw new ApiException("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyVrSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyVrSupplyReadCall(projectid, scenarioid, vrinstid, supplyinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create datasheet PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @return VRSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRSupplyInst projectScenarioHierarchyVrSupplyRead(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid) throws ApiException {
        ApiResponse<VRSupplyInst> localVarResp = projectScenarioHierarchyVrSupplyReadWithHttpInfo(projectid, scenarioid, vrinstid, supplyinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create datasheet PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @return ApiResponse&lt;VRSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRSupplyInst> projectScenarioHierarchyVrSupplyReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyVrSupplyReadValidateBeforeCall(projectid, scenarioid, vrinstid, supplyinstid, null);
        Type localVarReturnType = new TypeToken<VRSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create datasheet PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyVrSupplyReadAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid, final ApiCallback<VRSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyVrSupplyReadValidateBeforeCall(projectid, scenarioid, vrinstid, supplyinstid, _callback);
        Type localVarReturnType = new TypeToken<VRSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioHierarchyVrSupplyUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyVrSupplyUpdateCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/hierarchy/vr/{vrinstid}/supply/{supplyinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyinstid" + "\\}", localVarApiClient.escapeString(supplyinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioHierarchyVrSupplyUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioHierarchyVrSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyVrSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioHierarchyVrSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyinstid' is set
        if (supplyinstid == null) {
            throw new ApiException("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyVrSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioHierarchyVrSupplyUpdateCall(projectid, scenarioid, vrinstid, supplyinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create datasheet PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @return VRSupplyInst
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRSupplyInst projectScenarioHierarchyVrSupplyUpdate(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid) throws ApiException {
        ApiResponse<VRSupplyInst> localVarResp = projectScenarioHierarchyVrSupplyUpdateWithHttpInfo(projectid, scenarioid, vrinstid, supplyinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create datasheet PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @return ApiResponse&lt;VRSupplyInst&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRSupplyInst> projectScenarioHierarchyVrSupplyUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioHierarchyVrSupplyUpdateValidateBeforeCall(projectid, scenarioid, vrinstid, supplyinstid, null);
        Type localVarReturnType = new TypeToken<VRSupplyInst>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create datasheet PCB package supply instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioHierarchyVrSupplyUpdateAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyinstid, final ApiCallback<VRSupplyInst> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioHierarchyVrSupplyUpdateValidateBeforeCall(projectid, scenarioid, vrinstid, supplyinstid, _callback);
        Type localVarReturnType = new TypeToken<VRSupplyInst>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryClone
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryCloneCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/{scenarioid}/clone/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryCloneValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryClone(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryClone(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryCloneCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ScenarioMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioMaster projectScenarioLibraryClone(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<ScenarioMaster> localVarResp = projectScenarioLibraryCloneWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;ScenarioMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioMaster> projectScenarioLibraryCloneWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryCloneValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<ScenarioMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryCloneAsync(Integer projectid, Integer scenarioid, final ApiCallback<ScenarioMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryCloneValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<ScenarioMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryCreate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryCreateCall(Integer projectid, ScenarioMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryCreateValidateBeforeCall(Integer projectid, ScenarioMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioLibraryCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryCreateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new scenario
     * @param projectid  (required)
     * @param data  (required)
     * @return ScenarioMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioMaster projectScenarioLibraryCreate(Integer projectid, ScenarioMaster data) throws ApiException {
        ApiResponse<ScenarioMaster> localVarResp = projectScenarioLibraryCreateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new scenario
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioMaster> projectScenarioLibraryCreateWithHttpInfo(Integer projectid, ScenarioMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryCreateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new scenario
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryCreateAsync(Integer projectid, ScenarioMaster data, final ApiCallback<ScenarioMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryCreateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryDeleteCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/{scenarioid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryDeleteCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioLibraryDelete(Integer projectid, Integer scenarioid) throws ApiException {
        projectScenarioLibraryDeleteWithHttpInfo(projectid, scenarioid);
    }

    /**
     * 
     * Delete a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioLibraryDeleteWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryDeleteValidateBeforeCall(projectid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryDeleteAsync(Integer projectid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryDeleteValidateBeforeCall(projectid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of project scenarios
     * @param projectid  (required)
     * @return List&lt;ScenarioMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioMaster> projectScenarioLibraryList(Integer projectid) throws ApiException {
        ApiResponse<List<ScenarioMaster>> localVarResp = projectScenarioLibraryListWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of project scenarios
     * @param projectid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioMaster>> projectScenarioLibraryListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryListValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of project scenarios
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryListAsync(Integer projectid, final ApiCallback<List<ScenarioMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryListValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryReadCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/{scenarioid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryReadValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryReadCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scenarios
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;ScenarioMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioMaster> projectScenarioLibraryRead(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<ScenarioMaster>> localVarResp = projectScenarioLibraryReadWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scenarios
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioMaster>> projectScenarioLibraryReadWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryReadValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scenarios
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryReadAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<ScenarioMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryReadValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryUpdateCall(Integer projectid, Integer scenarioid, ScenarioMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/{scenarioid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, ScenarioMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioLibraryUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryUpdateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ScenarioMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ScenarioMaster projectScenarioLibraryUpdate(Integer projectid, Integer scenarioid, ScenarioMaster data) throws ApiException {
        ApiResponse<ScenarioMaster> localVarResp = projectScenarioLibraryUpdateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ScenarioMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScenarioMaster> projectScenarioLibraryUpdateWithHttpInfo(Integer projectid, Integer scenarioid, ScenarioMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryUpdateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<ScenarioMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryUpdateAsync(Integer projectid, Integer scenarioid, ScenarioMaster data, final ApiCallback<ScenarioMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryUpdateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<ScenarioMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioLibraryVersionList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryVersionListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/library/{scenarioid}/version/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioLibraryVersionListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioLibraryVersionList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioLibraryVersionListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get List of design versions
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;ScenarioVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioVersion> projectScenarioLibraryVersionList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<ScenarioVersion>> localVarResp = projectScenarioLibraryVersionListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get List of design versions
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioVersion>> projectScenarioLibraryVersionListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioLibraryVersionListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get List of design versions
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioLibraryVersionListAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<ScenarioVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioLibraryVersionListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageCreateCall(Integer projectid, Integer scenarioid, PackageInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageCreateValidateBeforeCall(Integer projectid, Integer scenarioid, PackageInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPackageCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageCreateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return PackageInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PackageInstance projectScenarioPackageCreate(Integer projectid, Integer scenarioid, PackageInstance data) throws ApiException {
        ApiResponse<PackageInstance> localVarResp = projectScenarioPackageCreateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PackageInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageInstance> projectScenarioPackageCreateWithHttpInfo(Integer projectid, Integer scenarioid, PackageInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageCreateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<PackageInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageCreateAsync(Integer projectid, Integer scenarioid, PackageInstance data, final ApiCallback<PackageInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageCreateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<PackageInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageDeleteCall(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageDelete(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageDeleteCall(projectid, scenarioid, packinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPackageDelete(Integer projectid, Integer scenarioid, Integer packinstid) throws ApiException {
        projectScenarioPackageDeleteWithHttpInfo(projectid, scenarioid, packinstid);
    }

    /**
     * 
     * Delete a scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPackageDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageDeleteValidateBeforeCall(projectid, scenarioid, packinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageDeleteAsync(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageDeleteValidateBeforeCall(projectid, scenarioid, packinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario Packages
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;PackageInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PackageInstance> projectScenarioPackageList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<PackageInstance>> localVarResp = projectScenarioPackageListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario Packages
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;PackageInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PackageInstance>> projectScenarioPackageListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<PackageInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario Packages
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageListAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<PackageInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<PackageInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackagePowerList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackagePowerListCall(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/power/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackagePowerListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackagePowerList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackagePowerList(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackagePowerList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackagePowerListCall(projectid, scenarioid, packinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPackagePowerList(Integer projectid, Integer scenarioid, Integer packinstid) throws ApiException {
        projectScenarioPackagePowerListWithHttpInfo(projectid, scenarioid, packinstid);
    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPackagePowerListWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackagePowerListValidateBeforeCall(projectid, scenarioid, packinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackagePowerListAsync(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackagePowerListValidateBeforeCall(projectid, scenarioid, packinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageReadCall(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageRead(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageReadCall(projectid, scenarioid, packinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scenario Pckage
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @return PackageInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PackageInstance projectScenarioPackageRead(Integer projectid, Integer scenarioid, Integer packinstid) throws ApiException {
        ApiResponse<PackageInstance> localVarResp = projectScenarioPackageReadWithHttpInfo(projectid, scenarioid, packinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scenario Pckage
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @return ApiResponse&lt;PackageInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageInstance> projectScenarioPackageReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageReadValidateBeforeCall(projectid, scenarioid, packinstid, null);
        Type localVarReturnType = new TypeToken<PackageInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scenario Pckage
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageReadAsync(Integer projectid, Integer scenarioid, Integer packinstid, final ApiCallback<PackageInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageReadValidateBeforeCall(projectid, scenarioid, packinstid, _callback);
        Type localVarReturnType = new TypeToken<PackageInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageSupplyConfigCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigCreateCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageSupplyConfigCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPackageSupplyConfigCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigCreateCall(projectid, scenarioid, packinstid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioPackageSupplyConfigCreate(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioPackageSupplyConfigCreateWithHttpInfo(projectid, scenarioid, packinstid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioPackageSupplyConfigCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigCreateValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigCreateAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigCreateValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageSupplyConfigDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigDeleteCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageSupplyConfigDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioPackageSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPackageSupplyConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigDeleteCall(projectid, scenarioid, packinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPackageSupplyConfigDelete(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        projectScenarioPackageSupplyConfigDeleteWithHttpInfo(projectid, scenarioid, packinstid, supplyid, configid, data);
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPackageSupplyConfigDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, configid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigDeleteAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, configid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageSupplyConfigList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigListCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageSupplyConfigListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigListCall(projectid, scenarioid, packinstid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @return List&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyInstConfig> projectScenarioPackageSupplyConfigList(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid) throws ApiException {
        ApiResponse<List<SupplyInstConfig>> localVarResp = projectScenarioPackageSupplyConfigListWithHttpInfo(projectid, scenarioid, packinstid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;List&lt;SupplyInstConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyInstConfig>> projectScenarioPackageSupplyConfigListWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigListValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, null);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigListAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, final ApiCallback<List<SupplyInstConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigListValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageSupplyConfigRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigReadCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageSupplyConfigReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioPackageSupplyConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigReadCall(projectid, scenarioid, packinstid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioPackageSupplyConfigRead(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioPackageSupplyConfigReadWithHttpInfo(projectid, scenarioid, packinstid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioPackageSupplyConfigReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigReadValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigReadAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigReadValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageSupplyConfigUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigUpdateCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageSupplyConfigUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioPackageSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPackageSupplyConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigUpdateCall(projectid, scenarioid, packinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioPackageSupplyConfigUpdate(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioPackageSupplyConfigUpdateWithHttpInfo(projectid, scenarioid, packinstid, supplyid, configid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioPackageSupplyConfigUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, configid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageSupplyConfigUpdateAsync(Integer projectid, Integer scenarioid, Integer packinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, packinstid, supplyid, configid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPackageUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageUpdateCall(Integer projectid, Integer scenarioid, Integer packinstid, PackageInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "packinstid" + "\\}", localVarApiClient.escapeString(packinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPackageUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer packinstid, PackageInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPackageUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPackageUpdate(Async)");
        }
        
        // verify the required parameter 'packinstid' is set
        if (packinstid == null) {
            throw new ApiException("Missing the required parameter 'packinstid' when calling projectScenarioPackageUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPackageUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPackageUpdateCall(projectid, scenarioid, packinstid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param data  (required)
     * @return PackageInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PackageInstance projectScenarioPackageUpdate(Integer projectid, Integer scenarioid, Integer packinstid, PackageInstance data) throws ApiException {
        ApiResponse<PackageInstance> localVarResp = projectScenarioPackageUpdateWithHttpInfo(projectid, scenarioid, packinstid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PackageInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageInstance> projectScenarioPackageUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer packinstid, PackageInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPackageUpdateValidateBeforeCall(projectid, scenarioid, packinstid, data, null);
        Type localVarReturnType = new TypeToken<PackageInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario Package instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param packinstid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPackageUpdateAsync(Integer projectid, Integer scenarioid, Integer packinstid, PackageInstance data, final ApiCallback<PackageInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPackageUpdateValidateBeforeCall(projectid, scenarioid, packinstid, data, _callback);
        Type localVarReturnType = new TypeToken<PackageInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbCreateCall(Integer projectid, Integer scenarioid, PCBInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbCreateValidateBeforeCall(Integer projectid, Integer scenarioid, PCBInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPcbCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbCreateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return PCBInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBInstance projectScenarioPcbCreate(Integer projectid, Integer scenarioid, PCBInstance data) throws ApiException {
        ApiResponse<PCBInstance> localVarResp = projectScenarioPcbCreateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PCBInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBInstance> projectScenarioPcbCreateWithHttpInfo(Integer projectid, Integer scenarioid, PCBInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbCreateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<PCBInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbCreateAsync(Integer projectid, Integer scenarioid, PCBInstance data, final ApiCallback<PCBInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbCreateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<PCBInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbDeleteCall(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbDelete(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbDeleteCall(projectid, scenarioid, pcbinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a datasheet PCB instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPcbDelete(Integer projectid, Integer scenarioid, Integer pcbinstid) throws ApiException {
        projectScenarioPcbDeleteWithHttpInfo(projectid, scenarioid, pcbinstid);
    }

    /**
     * 
     * Delete a datasheet PCB instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPcbDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbDeleteValidateBeforeCall(projectid, scenarioid, pcbinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a datasheet PCB instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbDeleteAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbDeleteValidateBeforeCall(projectid, scenarioid, pcbinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario PCBs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;PCBInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PCBInstance> projectScenarioPcbList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<PCBInstance>> localVarResp = projectScenarioPcbListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario PCBs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;PCBInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PCBInstance>> projectScenarioPcbListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<PCBInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario PCBs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbListAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<PCBInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<PCBInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbPowerList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbPowerListCall(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/power/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbPowerListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbPowerList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbPowerList(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbPowerList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbPowerListCall(projectid, scenarioid, pcbinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPcbPowerList(Integer projectid, Integer scenarioid, Integer pcbinstid) throws ApiException {
        projectScenarioPcbPowerListWithHttpInfo(projectid, scenarioid, pcbinstid);
    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPcbPowerListWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbPowerListValidateBeforeCall(projectid, scenarioid, pcbinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbPowerListAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbPowerListValidateBeforeCall(projectid, scenarioid, pcbinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbReadCall(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbRead(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbReadCall(projectid, scenarioid, pcbinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a datasheet PCB
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @return PCBInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBInstance projectScenarioPcbRead(Integer projectid, Integer scenarioid, Integer pcbinstid) throws ApiException {
        ApiResponse<PCBInstance> localVarResp = projectScenarioPcbReadWithHttpInfo(projectid, scenarioid, pcbinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a datasheet PCB
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @return ApiResponse&lt;PCBInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBInstance> projectScenarioPcbReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbReadValidateBeforeCall(projectid, scenarioid, pcbinstid, null);
        Type localVarReturnType = new TypeToken<PCBInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a datasheet PCB
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbReadAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, final ApiCallback<PCBInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbReadValidateBeforeCall(projectid, scenarioid, pcbinstid, _callback);
        Type localVarReturnType = new TypeToken<PCBInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbSupplyConfigCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigCreateCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbSupplyConfigCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPcbSupplyConfigCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigCreateCall(projectid, scenarioid, pcbinstid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioPcbSupplyConfigCreate(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioPcbSupplyConfigCreateWithHttpInfo(projectid, scenarioid, pcbinstid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioPcbSupplyConfigCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigCreateValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigCreateAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigCreateValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbSupplyConfigDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigDeleteCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbSupplyConfigDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioPcbSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPcbSupplyConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigDeleteCall(projectid, scenarioid, pcbinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPcbSupplyConfigDelete(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        projectScenarioPcbSupplyConfigDeleteWithHttpInfo(projectid, scenarioid, pcbinstid, supplyid, configid, data);
    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPcbSupplyConfigDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, configid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigDeleteAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, configid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbSupplyConfigList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigListCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbSupplyConfigListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigListCall(projectid, scenarioid, pcbinstid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @return List&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyInstConfig> projectScenarioPcbSupplyConfigList(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid) throws ApiException {
        ApiResponse<List<SupplyInstConfig>> localVarResp = projectScenarioPcbSupplyConfigListWithHttpInfo(projectid, scenarioid, pcbinstid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;List&lt;SupplyInstConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyInstConfig>> projectScenarioPcbSupplyConfigListWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigListValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, null);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigListAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, final ApiCallback<List<SupplyInstConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigListValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbSupplyConfigRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigReadCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbSupplyConfigReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioPcbSupplyConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigReadCall(projectid, scenarioid, pcbinstid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get datasheet design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioPcbSupplyConfigRead(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioPcbSupplyConfigReadWithHttpInfo(projectid, scenarioid, pcbinstid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get datasheet design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioPcbSupplyConfigReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigReadValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get datasheet design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigReadAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigReadValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbSupplyConfigUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigUpdateCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbSupplyConfigUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioPcbSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPcbSupplyConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigUpdateCall(projectid, scenarioid, pcbinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioPcbSupplyConfigUpdate(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioPcbSupplyConfigUpdateWithHttpInfo(projectid, scenarioid, pcbinstid, supplyid, configid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioPcbSupplyConfigUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, configid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create datasheet supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbSupplyConfigUpdateAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, pcbinstid, supplyid, configid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPcbUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbUpdateCall(Integer projectid, Integer scenarioid, Integer pcbinstid, PCBInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "pcbinstid" + "\\}", localVarApiClient.escapeString(pcbinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPcbUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer pcbinstid, PCBInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPcbUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPcbUpdate(Async)");
        }
        
        // verify the required parameter 'pcbinstid' is set
        if (pcbinstid == null) {
            throw new ApiException("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioPcbUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPcbUpdateCall(projectid, scenarioid, pcbinstid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a datasheet PCB instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param data  (required)
     * @return PCBInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PCBInstance projectScenarioPcbUpdate(Integer projectid, Integer scenarioid, Integer pcbinstid, PCBInstance data) throws ApiException {
        ApiResponse<PCBInstance> localVarResp = projectScenarioPcbUpdateWithHttpInfo(projectid, scenarioid, pcbinstid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a datasheet PCB instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PCBInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PCBInstance> projectScenarioPcbUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer pcbinstid, PCBInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPcbUpdateValidateBeforeCall(projectid, scenarioid, pcbinstid, data, null);
        Type localVarReturnType = new TypeToken<PCBInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a datasheet PCB instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param pcbinstid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPcbUpdateAsync(Integer projectid, Integer scenarioid, Integer pcbinstid, PCBInstance data, final ApiCallback<PCBInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPcbUpdateValidateBeforeCall(projectid, scenarioid, pcbinstid, data, _callback);
        Type localVarReturnType = new TypeToken<PCBInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPowerList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPowerListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/power/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPowerListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPowerList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPowerList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPowerListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPowerList(Integer projectid, Integer scenarioid) throws ApiException {
        projectScenarioPowerListWithHttpInfo(projectid, scenarioid);
    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPowerListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPowerListValidateBeforeCall(projectid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPowerListAsync(Integer projectid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPowerListValidateBeforeCall(projectid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioPowerdistributionDownloadRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param resolution  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPowerdistributionDownloadReadCall(Integer projectid, Integer scenarioid, Integer resolution, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/powerdistribution/download/{resolution}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "resolution" + "\\}", localVarApiClient.escapeString(resolution.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioPowerdistributionDownloadReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer resolution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioPowerdistributionDownloadRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioPowerdistributionDownloadRead(Async)");
        }
        
        // verify the required parameter 'resolution' is set
        if (resolution == null) {
            throw new ApiException("Missing the required parameter 'resolution' when calling projectScenarioPowerdistributionDownloadRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioPowerdistributionDownloadReadCall(projectid, scenarioid, resolution, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param resolution  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioPowerdistributionDownloadRead(Integer projectid, Integer scenarioid, Integer resolution) throws ApiException {
        projectScenarioPowerdistributionDownloadReadWithHttpInfo(projectid, scenarioid, resolution);
    }

    /**
     * 
     * 
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param resolution  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioPowerdistributionDownloadReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer resolution) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioPowerdistributionDownloadReadValidateBeforeCall(projectid, scenarioid, resolution, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param resolution  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioPowerdistributionDownloadReadAsync(Integer projectid, Integer scenarioid, Integer resolution, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioPowerdistributionDownloadReadValidateBeforeCall(projectid, scenarioid, resolution, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioReadCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioReadValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioReadCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return Scenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Scenario projectScenarioRead(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<Scenario> localVarResp = projectScenarioReadWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scenario> projectScenarioReadWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioReadValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioReadAsync(Integer projectid, Integer scenarioid, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioReadValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioTrendList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioTrendListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/trend/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioTrendListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioTrendList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioTrendList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioTrendListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a datasheet trend
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioTrendList(Integer projectid, Integer scenarioid) throws ApiException {
        projectScenarioTrendListWithHttpInfo(projectid, scenarioid);
    }

    /**
     * 
     * Get a datasheet trend
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioTrendListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioTrendListValidateBeforeCall(projectid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a datasheet trend
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioTrendListAsync(Integer projectid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioTrendListValidateBeforeCall(projectid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioUpdateCall(Integer projectid, Integer scenarioid, Scenario data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Scenario data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioUpdateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return Scenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Scenario projectScenarioUpdate(Integer projectid, Integer scenarioid, Scenario data) throws ApiException {
        ApiResponse<Scenario> localVarResp = projectScenarioUpdateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Scenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scenario> projectScenarioUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Scenario data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioUpdateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioUpdateAsync(Integer projectid, Integer scenarioid, Scenario data, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioUpdateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioUpdateList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioUpdateListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/update/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioUpdateListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioUpdateList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioUpdateListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData projectScenarioUpdateList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = projectScenarioUpdateListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> projectScenarioUpdateListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioUpdateListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioUpdateListAsync(Integer projectid, Integer scenarioid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioUpdateListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVersionList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVersionListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/version/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVersionListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVersionList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVersionListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get List of design versions
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;ScenarioVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ScenarioVersion> projectScenarioVersionList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<ScenarioVersion>> localVarResp = projectScenarioVersionListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get List of design versions
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;ScenarioVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ScenarioVersion>> projectScenarioVersionListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVersionListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<ScenarioVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get List of design versions
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVersionListAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<ScenarioVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVersionListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<ScenarioVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrCreateCall(Integer projectid, Integer scenarioid, VRInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrCreateValidateBeforeCall(Integer projectid, Integer scenarioid, VRInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioVrCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrCreateCall(projectid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return VRInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRInstance projectScenarioVrCreate(Integer projectid, Integer scenarioid, VRInstance data) throws ApiException {
        ApiResponse<VRInstance> localVarResp = projectScenarioVrCreateWithHttpInfo(projectid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VRInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRInstance> projectScenarioVrCreateWithHttpInfo(Integer projectid, Integer scenarioid, VRInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrCreateValidateBeforeCall(projectid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<VRInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario PC instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrCreateAsync(Integer projectid, Integer scenarioid, VRInstance data, final ApiCallback<VRInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrCreateValidateBeforeCall(projectid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<VRInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrDeleteCall(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrDelete(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrDeleteCall(projectid, scenarioid, vrinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario VR instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioVrDelete(Integer projectid, Integer scenarioid, Integer vrinstid) throws ApiException {
        projectScenarioVrDeleteWithHttpInfo(projectid, scenarioid, vrinstid);
    }

    /**
     * 
     * Delete a scenario VR instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioVrDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrDeleteValidateBeforeCall(projectid, scenarioid, vrinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a scenario VR instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrDeleteAsync(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrDeleteValidateBeforeCall(projectid, scenarioid, vrinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrListCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrListValidateBeforeCall(Integer projectid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrListCall(projectid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario VRs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return List&lt;VRInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<VRInstance> projectScenarioVrList(Integer projectid, Integer scenarioid) throws ApiException {
        ApiResponse<List<VRInstance>> localVarResp = projectScenarioVrListWithHttpInfo(projectid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario VRs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;VRInstance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VRInstance>> projectScenarioVrListWithHttpInfo(Integer projectid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrListValidateBeforeCall(projectid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<VRInstance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario VRs
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrListAsync(Integer projectid, Integer scenarioid, final ApiCallback<List<VRInstance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrListValidateBeforeCall(projectid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<VRInstance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrPowerList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrPowerListCall(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/power/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrPowerListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrPowerList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrPowerList(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrPowerList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrPowerListCall(projectid, scenarioid, vrinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioVrPowerList(Integer projectid, Integer scenarioid, Integer vrinstid) throws ApiException {
        projectScenarioVrPowerListWithHttpInfo(projectid, scenarioid, vrinstid);
    }

    /**
     * 
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioVrPowerListWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrPowerListValidateBeforeCall(projectid, scenarioid, vrinstid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get project scenario power
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrPowerListAsync(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrPowerListValidateBeforeCall(projectid, scenarioid, vrinstid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrReadCall(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrRead(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrReadCall(projectid, scenarioid, vrinstid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scenario VR
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @return VRInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRInstance projectScenarioVrRead(Integer projectid, Integer scenarioid, Integer vrinstid) throws ApiException {
        ApiResponse<VRInstance> localVarResp = projectScenarioVrReadWithHttpInfo(projectid, scenarioid, vrinstid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scenario VR
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @return ApiResponse&lt;VRInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRInstance> projectScenarioVrReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrReadValidateBeforeCall(projectid, scenarioid, vrinstid, null);
        Type localVarReturnType = new TypeToken<VRInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scenario VR
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrReadAsync(Integer projectid, Integer scenarioid, Integer vrinstid, final ApiCallback<VRInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrReadValidateBeforeCall(projectid, scenarioid, vrinstid, _callback);
        Type localVarReturnType = new TypeToken<VRInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrSupplyConfigCreate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigCreateCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrSupplyConfigCreateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioVrSupplyConfigCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigCreateCall(projectid, scenarioid, vrinstid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioVrSupplyConfigCreate(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioVrSupplyConfigCreateWithHttpInfo(projectid, scenarioid, vrinstid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioVrSupplyConfigCreateWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigCreateValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigCreateAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigCreateValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrSupplyConfigDelete
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigDeleteCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrSupplyConfigDeleteValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioVrSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioVrSupplyConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigDeleteCall(projectid, scenarioid, vrinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectScenarioVrSupplyConfigDelete(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        projectScenarioVrSupplyConfigDeleteWithHttpInfo(projectid, scenarioid, vrinstid, supplyid, configid, data);
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectScenarioVrSupplyConfigDeleteWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, configid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigDeleteAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigDeleteValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, configid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrSupplyConfigList
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigListCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrSupplyConfigListValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigList(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigListCall(projectid, scenarioid, vrinstid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @return List&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyInstConfig> projectScenarioVrSupplyConfigList(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid) throws ApiException {
        ApiResponse<List<SupplyInstConfig>> localVarResp = projectScenarioVrSupplyConfigListWithHttpInfo(projectid, scenarioid, vrinstid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;List&lt;SupplyInstConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyInstConfig>> projectScenarioVrSupplyConfigListWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigListValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, null);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigListAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, final ApiCallback<List<SupplyInstConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigListValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyInstConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrSupplyConfigRead
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigReadCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrSupplyConfigReadValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioVrSupplyConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigReadCall(projectid, scenarioid, vrinstid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioVrSupplyConfigRead(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioVrSupplyConfigReadWithHttpInfo(projectid, scenarioid, vrinstid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioVrSupplyConfigReadWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigReadValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scenario design supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigReadAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigReadValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrSupplyConfigUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigUpdateCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrSupplyConfigUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling projectScenarioVrSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioVrSupplyConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigUpdateCall(projectid, scenarioid, vrinstid, supplyid, configid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return SupplyInstConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyInstConfig projectScenarioVrSupplyConfigUpdate(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        ApiResponse<SupplyInstConfig> localVarResp = projectScenarioVrSupplyConfigUpdateWithHttpInfo(projectid, scenarioid, vrinstid, supplyid, configid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SupplyInstConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyInstConfig> projectScenarioVrSupplyConfigUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, configid, data, null);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create scenario supply data
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrSupplyConfigUpdateAsync(Integer projectid, Integer scenarioid, Integer vrinstid, Integer supplyid, Integer configid, SupplyInstConfig data, final ApiCallback<SupplyInstConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrSupplyConfigUpdateValidateBeforeCall(projectid, scenarioid, vrinstid, supplyid, configid, data, _callback);
        Type localVarReturnType = new TypeToken<SupplyInstConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectScenarioVrUpdate
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrUpdateCall(Integer projectid, Integer scenarioid, Integer vrinstid, VRInstance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "vrinstid" + "\\}", localVarApiClient.escapeString(vrinstid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectScenarioVrUpdateValidateBeforeCall(Integer projectid, Integer scenarioid, Integer vrinstid, VRInstance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectScenarioVrUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling projectScenarioVrUpdate(Async)");
        }
        
        // verify the required parameter 'vrinstid' is set
        if (vrinstid == null) {
            throw new ApiException("Missing the required parameter 'vrinstid' when calling projectScenarioVrUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectScenarioVrUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectScenarioVrUpdateCall(projectid, scenarioid, vrinstid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario VR instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param data  (required)
     * @return VRInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VRInstance projectScenarioVrUpdate(Integer projectid, Integer scenarioid, Integer vrinstid, VRInstance data) throws ApiException {
        ApiResponse<VRInstance> localVarResp = projectScenarioVrUpdateWithHttpInfo(projectid, scenarioid, vrinstid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario VR instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;VRInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VRInstance> projectScenarioVrUpdateWithHttpInfo(Integer projectid, Integer scenarioid, Integer vrinstid, VRInstance data) throws ApiException {
        okhttp3.Call localVarCall = projectScenarioVrUpdateValidateBeforeCall(projectid, scenarioid, vrinstid, data, null);
        Type localVarReturnType = new TypeToken<VRInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario VR instance
     * @param projectid  (required)
     * @param scenarioid  (required)
     * @param vrinstid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectScenarioVrUpdateAsync(Integer projectid, Integer scenarioid, Integer vrinstid, VRInstance data, final ApiCallback<VRInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectScenarioVrUpdateValidateBeforeCall(projectid, scenarioid, vrinstid, data, _callback);
        Type localVarReturnType = new TypeToken<VRInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationCloneCreate
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationCloneCreateCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/{simid}/clone/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationCloneCreateValidateBeforeCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationCloneCreate(Async)");
        }
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling projectSimulationCloneCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationCloneCreateCall(projectid, simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectSimulationCloneCreate(Integer projectid, Integer simid) throws ApiException {
        projectSimulationCloneCreateWithHttpInfo(projectid, simid);
    }

    /**
     * 
     * Clone a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectSimulationCloneCreateWithHttpInfo(Integer projectid, Integer simid) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationCloneCreateValidateBeforeCall(projectid, simid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clone a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationCloneCreateAsync(Integer projectid, Integer simid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationCloneCreateValidateBeforeCall(projectid, simid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationCreate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationCreateCall(Integer projectid, SimMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationCreateValidateBeforeCall(Integer projectid, SimMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectSimulationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationCreateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new simulation
     * @param projectid  (required)
     * @param data  (required)
     * @return List&lt;SimMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SimMaster> projectSimulationCreate(Integer projectid, SimMaster data) throws ApiException {
        ApiResponse<List<SimMaster>> localVarResp = projectSimulationCreateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new simulation
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;SimMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimMaster>> projectSimulationCreateWithHttpInfo(Integer projectid, SimMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationCreateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<List<SimMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new simulation
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationCreateAsync(Integer projectid, SimMaster data, final ApiCallback<List<SimMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationCreateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<List<SimMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationDelete
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationDeleteCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/{simid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationDeleteValidateBeforeCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationDelete(Async)");
        }
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling projectSimulationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationDeleteCall(projectid, simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectSimulationDelete(Integer projectid, Integer simid) throws ApiException {
        projectSimulationDeleteWithHttpInfo(projectid, simid);
    }

    /**
     * 
     * Delete a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectSimulationDeleteWithHttpInfo(Integer projectid, Integer simid) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationDeleteValidateBeforeCall(projectid, simid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationDeleteAsync(Integer projectid, Integer simid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationDeleteValidateBeforeCall(projectid, simid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationList(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of simulations
     * @param projectid  (required)
     * @return List&lt;SimMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SimMaster> projectSimulationList(Integer projectid) throws ApiException {
        ApiResponse<List<SimMaster>> localVarResp = projectSimulationListWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of simulations
     * @param projectid  (required)
     * @return ApiResponse&lt;List&lt;SimMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimMaster>> projectSimulationListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationListValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<List<SimMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of simulations
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationListAsync(Integer projectid, final ApiCallback<List<SimMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationListValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<List<SimMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationRead
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationReadCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/{simid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationReadValidateBeforeCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationRead(Async)");
        }
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling projectSimulationRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationReadCall(projectid, simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of simulations
     * @param projectid  (required)
     * @param simid  (required)
     * @return List&lt;SimMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SimMaster> projectSimulationRead(Integer projectid, Integer simid) throws ApiException {
        ApiResponse<List<SimMaster>> localVarResp = projectSimulationReadWithHttpInfo(projectid, simid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of simulations
     * @param projectid  (required)
     * @param simid  (required)
     * @return ApiResponse&lt;List&lt;SimMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimMaster>> projectSimulationReadWithHttpInfo(Integer projectid, Integer simid) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationReadValidateBeforeCall(projectid, simid, null);
        Type localVarReturnType = new TypeToken<List<SimMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of simulations
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationReadAsync(Integer projectid, Integer simid, final ApiCallback<List<SimMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationReadValidateBeforeCall(projectid, simid, _callback);
        Type localVarReturnType = new TypeToken<List<SimMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationUpdate
     * @param projectid  (required)
     * @param simid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationUpdateCall(Integer projectid, Integer simid, SimMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/{simid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationUpdateValidateBeforeCall(Integer projectid, Integer simid, SimMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationUpdate(Async)");
        }
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling projectSimulationUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectSimulationUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationUpdateCall(projectid, simid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @param data  (required)
     * @return SimMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimMaster projectSimulationUpdate(Integer projectid, Integer simid, SimMaster data) throws ApiException {
        ApiResponse<SimMaster> localVarResp = projectSimulationUpdateWithHttpInfo(projectid, simid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimMaster> projectSimulationUpdateWithHttpInfo(Integer projectid, Integer simid, SimMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationUpdateValidateBeforeCall(projectid, simid, data, null);
        Type localVarReturnType = new TypeToken<SimMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a simulation
     * @param projectid  (required)
     * @param simid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationUpdateAsync(Integer projectid, Integer simid, SimMaster data, final ApiCallback<SimMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationUpdateValidateBeforeCall(projectid, simid, data, _callback);
        Type localVarReturnType = new TypeToken<SimMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectSimulationUpdateList
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationUpdateListCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/simulation/{simid}/update/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectSimulationUpdateListValidateBeforeCall(Integer projectid, Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectSimulationUpdateList(Async)");
        }
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling projectSimulationUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = projectSimulationUpdateListCall(projectid, simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param projectid  (required)
     * @param simid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData projectSimulationUpdateList(Integer projectid, Integer simid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = projectSimulationUpdateListWithHttpInfo(projectid, simid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param projectid  (required)
     * @param simid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> projectSimulationUpdateListWithHttpInfo(Integer projectid, Integer simid) throws ApiException {
        okhttp3.Call localVarCall = projectSimulationUpdateListValidateBeforeCall(projectid, simid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param projectid  (required)
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectSimulationUpdateListAsync(Integer projectid, Integer simid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectSimulationUpdateListValidateBeforeCall(projectid, simid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUpdate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUpdateCall(Integer projectid, Project data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUpdateValidateBeforeCall(Integer projectid, Project data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectUpdateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a project
     * @param projectid  (required)
     * @param data  (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Project projectUpdate(Integer projectid, Project data) throws ApiException {
        ApiResponse<Project> localVarResp = projectUpdateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a project
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectUpdateWithHttpInfo(Integer projectid, Project data) throws ApiException {
        okhttp3.Call localVarCall = projectUpdateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a project
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUpdateAsync(Integer projectid, Project data, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUpdateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectUpdateTimes
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUpdateTimesCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/update/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectUpdateTimesValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectUpdateTimes(Async)");
        }
        

        okhttp3.Call localVarCall = projectUpdateTimesCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of {current, last update} times for current project
     * @param projectid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData projectUpdateTimes(Integer projectid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = projectUpdateTimesWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of {current, last update} times for current project
     * @param projectid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> projectUpdateTimesWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectUpdateTimesValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of {current, last update} times for current project
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectUpdateTimesAsync(Integer projectid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectUpdateTimesValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectVerilogCreate
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectVerilogCreateCall(String projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/verilog/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectVerilogCreateValidateBeforeCall(String projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectVerilogCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectVerilogCreateCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param projectid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void projectVerilogCreate(String projectid) throws ApiException {
        projectVerilogCreateWithHttpInfo(projectid);
    }

    /**
     * 
     * 
     * @param projectid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectVerilogCreateWithHttpInfo(String projectid) throws ApiException {
        okhttp3.Call localVarCall = projectVerilogCreateValidateBeforeCall(projectid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectVerilogCreateAsync(String projectid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectVerilogCreateValidateBeforeCall(projectid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWireLoadCreate
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadCreateCall(Integer projectid, WLMMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/wire_load/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWireLoadCreateValidateBeforeCall(Integer projectid, WLMMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectWireLoadCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectWireLoadCreate(Async)");
        }
        

        okhttp3.Call localVarCall = projectWireLoadCreateCall(projectid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a contributor devices
     * @param projectid  (required)
     * @param data  (required)
     * @return WLMMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WLMMaster projectWireLoadCreate(Integer projectid, WLMMaster data) throws ApiException {
        ApiResponse<WLMMaster> localVarResp = projectWireLoadCreateWithHttpInfo(projectid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a contributor devices
     * @param projectid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;WLMMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WLMMaster> projectWireLoadCreateWithHttpInfo(Integer projectid, WLMMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectWireLoadCreateValidateBeforeCall(projectid, data, null);
        Type localVarReturnType = new TypeToken<WLMMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a contributor devices
     * @param projectid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadCreateAsync(Integer projectid, WLMMaster data, final ApiCallback<WLMMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWireLoadCreateValidateBeforeCall(projectid, data, _callback);
        Type localVarReturnType = new TypeToken<WLMMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWireLoadDelete
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadDeleteCall(Integer projectid, Integer wlmid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/wire_load/{wlmid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWireLoadDeleteValidateBeforeCall(Integer projectid, Integer wlmid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectWireLoadDelete(Async)");
        }
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling projectWireLoadDelete(Async)");
        }
        

        okhttp3.Call localVarCall = projectWireLoadDeleteCall(projectid, wlmid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete wire load data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void projectWireLoadDelete(Integer projectid, Integer wlmid) throws ApiException {
        projectWireLoadDeleteWithHttpInfo(projectid, wlmid);
    }

    /**
     * 
     * Delete wire load data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectWireLoadDeleteWithHttpInfo(Integer projectid, Integer wlmid) throws ApiException {
        okhttp3.Call localVarCall = projectWireLoadDeleteValidateBeforeCall(projectid, wlmid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete wire load data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadDeleteAsync(Integer projectid, Integer wlmid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWireLoadDeleteValidateBeforeCall(projectid, wlmid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWireLoadList
     * @param projectid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadListCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/wire_load/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWireLoadListValidateBeforeCall(Integer projectid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectWireLoadList(Async)");
        }
        

        okhttp3.Call localVarCall = projectWireLoadListCall(projectid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of wire load data
     * @param projectid  (required)
     * @return List&lt;WLMMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<WLMMaster> projectWireLoadList(Integer projectid) throws ApiException {
        ApiResponse<List<WLMMaster>> localVarResp = projectWireLoadListWithHttpInfo(projectid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of wire load data
     * @param projectid  (required)
     * @return ApiResponse&lt;List&lt;WLMMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WLMMaster>> projectWireLoadListWithHttpInfo(Integer projectid) throws ApiException {
        okhttp3.Call localVarCall = projectWireLoadListValidateBeforeCall(projectid, null);
        Type localVarReturnType = new TypeToken<List<WLMMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of wire load data
     * @param projectid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadListAsync(Integer projectid, final ApiCallback<List<WLMMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWireLoadListValidateBeforeCall(projectid, _callback);
        Type localVarReturnType = new TypeToken<List<WLMMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWireLoadRead
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadReadCall(Integer projectid, Integer wlmid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{projectid}/wire_load/{wlmid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWireLoadReadValidateBeforeCall(Integer projectid, Integer wlmid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectWireLoadRead(Async)");
        }
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling projectWireLoadRead(Async)");
        }
        

        okhttp3.Call localVarCall = projectWireLoadReadCall(projectid, wlmid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get wire load data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @return WLMMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WLMMaster projectWireLoadRead(Integer projectid, Integer wlmid) throws ApiException {
        ApiResponse<WLMMaster> localVarResp = projectWireLoadReadWithHttpInfo(projectid, wlmid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get wire load data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @return ApiResponse&lt;WLMMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WLMMaster> projectWireLoadReadWithHttpInfo(Integer projectid, Integer wlmid) throws ApiException {
        okhttp3.Call localVarCall = projectWireLoadReadValidateBeforeCall(projectid, wlmid, null);
        Type localVarReturnType = new TypeToken<WLMMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get wire load data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadReadAsync(Integer projectid, Integer wlmid, final ApiCallback<WLMMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWireLoadReadValidateBeforeCall(projectid, wlmid, _callback);
        Type localVarReturnType = new TypeToken<WLMMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectWireLoadUpdate
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadUpdateCall(Integer projectid, Integer wlmid, WLMMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/project/{projectid}/wire_load/{wlmid}/"
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectWireLoadUpdateValidateBeforeCall(Integer projectid, Integer wlmid, WLMMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling projectWireLoadUpdate(Async)");
        }
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling projectWireLoadUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling projectWireLoadUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = projectWireLoadUpdateCall(projectid, wlmid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update wireload data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param data  (required)
     * @return WLMMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WLMMaster projectWireLoadUpdate(Integer projectid, Integer wlmid, WLMMaster data) throws ApiException {
        ApiResponse<WLMMaster> localVarResp = projectWireLoadUpdateWithHttpInfo(projectid, wlmid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update wireload data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;WLMMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WLMMaster> projectWireLoadUpdateWithHttpInfo(Integer projectid, Integer wlmid, WLMMaster data) throws ApiException {
        okhttp3.Call localVarCall = projectWireLoadUpdateValidateBeforeCall(projectid, wlmid, data, null);
        Type localVarReturnType = new TypeToken<WLMMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update wireload data
     * @param projectid  (required)
     * @param wlmid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectWireLoadUpdateAsync(Integer projectid, Integer wlmid, WLMMaster data, final ApiCallback<WLMMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectWireLoadUpdateValidateBeforeCall(projectid, wlmid, data, _callback);
        Type localVarReturnType = new TypeToken<WLMMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsUpdateTimes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateTimesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/update/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsUpdateTimesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = projectsUpdateTimesCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of {current, last update} times for all projects
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData projectsUpdateTimes() throws ApiException {
        ApiResponse<UpdateData> localVarResp = projectsUpdateTimesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of {current, last update} times for all projects
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> projectsUpdateTimesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = projectsUpdateTimesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of {current, last update} times for all projects
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateTimesAsync(final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsUpdateTimesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
