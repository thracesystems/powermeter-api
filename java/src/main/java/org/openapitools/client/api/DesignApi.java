/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ComputePower1;
import org.openapitools.client.model.ComputePower2;
import org.openapitools.client.model.ComputedContributorPower;
import org.openapitools.client.model.ComputedContributorPower1;
import org.openapitools.client.model.ComputedPower;
import org.openapitools.client.model.ComputedPowerArc;
import org.openapitools.client.model.ContribPower;
import org.openapitools.client.model.Dashboard;
import org.openapitools.client.model.DashboardColumn;
import org.openapitools.client.model.DashboardRow;
import org.openapitools.client.model.Design;
import org.openapitools.client.model.DesignData;
import org.openapitools.client.model.DesignFF;
import org.openapitools.client.model.DesignLatch;
import org.openapitools.client.model.DesignMaster;
import org.openapitools.client.model.DesignPin;
import org.openapitools.client.model.DesignPinEnergy;
import org.openapitools.client.model.DesignScenario;
import org.openapitools.client.model.DesignScenarioConfig;
import org.openapitools.client.model.DesignScenarioModeUtil;
import org.openapitools.client.model.DesignScenarioSupply;
import org.openapitools.client.model.DesignSensor;
import org.openapitools.client.model.DesignStateTable;
import org.openapitools.client.model.DesignTrend;
import org.openapitools.client.model.DesignVersion;
import org.openapitools.client.model.Hier;
import org.openapitools.client.model.Instance;
import org.openapitools.client.model.InstanceSupply;
import org.openapitools.client.model.LeakagePower;
import org.openapitools.client.model.Mode;
import org.openapitools.client.model.PagedDesignPinEnergy;
import org.openapitools.client.model.PagedInstance;
import org.openapitools.client.model.PagedLeakagePower;
import org.openapitools.client.model.Param;
import org.openapitools.client.model.PinCap;
import org.openapitools.client.model.PinEnergy;
import org.openapitools.client.model.PinState;
import org.openapitools.client.model.PinStateArc;
import org.openapitools.client.model.Power;
import org.openapitools.client.model.Supply;
import org.openapitools.client.model.SupplyModeState;
import org.openapitools.client.model.UpdateData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DesignApi {
    private ApiClient localVarApiClient;

    public DesignApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DesignApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiDesignHierarchyDeleteAll
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignHierarchyDeleteAllCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/hierarchy/group/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDesignHierarchyDeleteAllValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling apiDesignHierarchyDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiDesignHierarchyDeleteAllCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete hierarchy groups
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiDesignHierarchyDeleteAll(Integer designid) throws ApiException {
        apiDesignHierarchyDeleteAllWithHttpInfo(designid);
    }

    /**
     * 
     * Delete hierarchy groups
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDesignHierarchyDeleteAllWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = apiDesignHierarchyDeleteAllValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete hierarchy groups
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignHierarchyDeleteAllAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDesignHierarchyDeleteAllValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDesignInstanceDeleteAll
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignInstanceDeleteAllCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDesignInstanceDeleteAllValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling apiDesignInstanceDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiDesignInstanceDeleteAllCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete all instances
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiDesignInstanceDeleteAll(Integer designid) throws ApiException {
        apiDesignInstanceDeleteAllWithHttpInfo(designid);
    }

    /**
     * 
     * Delete all instances
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDesignInstanceDeleteAllWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = apiDesignInstanceDeleteAllValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete all instances
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignInstanceDeleteAllAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDesignInstanceDeleteAllValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDesignModeDeleteAll
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignModeDeleteAllCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDesignModeDeleteAllValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling apiDesignModeDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiDesignModeDeleteAllCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete design modes
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiDesignModeDeleteAll(Integer designid) throws ApiException {
        apiDesignModeDeleteAllWithHttpInfo(designid);
    }

    /**
     * 
     * Delete design modes
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDesignModeDeleteAllWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = apiDesignModeDeleteAllValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete design modes
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignModeDeleteAllAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDesignModeDeleteAllValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDesignParameterDeleteAll
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignParameterDeleteAllCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDesignParameterDeleteAllValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling apiDesignParameterDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiDesignParameterDeleteAllCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete params
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiDesignParameterDeleteAll(Integer designid) throws ApiException {
        apiDesignParameterDeleteAllWithHttpInfo(designid);
    }

    /**
     * 
     * Delete params
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDesignParameterDeleteAllWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = apiDesignParameterDeleteAllValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete params
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignParameterDeleteAllAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDesignParameterDeleteAllValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiDesignSupplyDeleteAll
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignSupplyDeleteAllCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiDesignSupplyDeleteAllValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling apiDesignSupplyDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiDesignSupplyDeleteAllCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete supplies
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiDesignSupplyDeleteAll(Integer designid) throws ApiException {
        apiDesignSupplyDeleteAllWithHttpInfo(designid);
    }

    /**
     * 
     * Delete supplies
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiDesignSupplyDeleteAllWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = apiDesignSupplyDeleteAllValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete supplies
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiDesignSupplyDeleteAllAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiDesignSupplyDeleteAllValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designCommitCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designCommitCreateCall(Integer designid, DesignVersion data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/commit/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designCommitCreateValidateBeforeCall(Integer designid, DesignVersion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designCommitCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param designid  (required)
     * @param data  (required)
     * @return DesignVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignVersion designCommitCreate(Integer designid, DesignVersion data) throws ApiException {
        ApiResponse<DesignVersion> localVarResp = designCommitCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignVersion> designCommitCreateWithHttpInfo(Integer designid, DesignVersion data) throws ApiException {
        okhttp3.Call localVarCall = designCommitCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designCommitCreateAsync(Integer designid, DesignVersion data, final ApiCallback<DesignVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = designCommitCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designComputepowerCreate
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designComputepowerCreateCall(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinState> data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/computepower/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process", process));
        }

        if (rc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc", rc));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (temperature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temperature", temperature));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designComputepowerCreateValidateBeforeCall(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinState> data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'process' is set
        if (process == null) {
            throw new ApiException("Missing the required parameter 'process' when calling designComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'rc' is set
        if (rc == null) {
            throw new ApiException("Missing the required parameter 'rc' when calling designComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'voltage' is set
        if (voltage == null) {
            throw new ApiException("Missing the required parameter 'voltage' when calling designComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling designComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designComputepowerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designComputepowerCreateCall(designid, process, rc, voltage, temperature, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @return List&lt;ComputedPower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<ComputedPower> designComputepowerCreate(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinState> data) throws ApiException {
        ApiResponse<List<ComputedPower>> localVarResp = designComputepowerCreateWithHttpInfo(designid, process, rc, voltage, temperature, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;ComputedPower&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ComputedPower>> designComputepowerCreateWithHttpInfo(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinState> data) throws ApiException {
        okhttp3.Call localVarCall = designComputepowerCreateValidateBeforeCall(designid, process, rc, voltage, temperature, data, null);
        Type localVarReturnType = new TypeToken<List<ComputedPower>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designComputepowerCreateAsync(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinState> data, final ApiCallback<List<ComputedPower>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designComputepowerCreateValidateBeforeCall(designid, process, rc, voltage, temperature, data, _callback);
        Type localVarReturnType = new TypeToken<List<ComputedPower>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designComputepowerarcCreate
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designComputepowerarcCreateCall(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinStateArc> data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/computepowerarc/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process", process));
        }

        if (rc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc", rc));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (temperature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temperature", temperature));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designComputepowerarcCreateValidateBeforeCall(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinStateArc> data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designComputepowerarcCreate(Async)");
        }
        
        // verify the required parameter 'process' is set
        if (process == null) {
            throw new ApiException("Missing the required parameter 'process' when calling designComputepowerarcCreate(Async)");
        }
        
        // verify the required parameter 'rc' is set
        if (rc == null) {
            throw new ApiException("Missing the required parameter 'rc' when calling designComputepowerarcCreate(Async)");
        }
        
        // verify the required parameter 'voltage' is set
        if (voltage == null) {
            throw new ApiException("Missing the required parameter 'voltage' when calling designComputepowerarcCreate(Async)");
        }
        
        // verify the required parameter 'temperature' is set
        if (temperature == null) {
            throw new ApiException("Missing the required parameter 'temperature' when calling designComputepowerarcCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designComputepowerarcCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designComputepowerarcCreateCall(designid, process, rc, voltage, temperature, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @return ComputedPowerArc
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ComputedPowerArc designComputepowerarcCreate(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinStateArc> data) throws ApiException {
        ApiResponse<ComputedPowerArc> localVarResp = designComputepowerarcCreateWithHttpInfo(designid, process, rc, voltage, temperature, data);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ComputedPowerArc&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputedPowerArc> designComputepowerarcCreateWithHttpInfo(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinStateArc> data) throws ApiException {
        okhttp3.Call localVarCall = designComputepowerarcCreateValidateBeforeCall(designid, process, rc, voltage, temperature, data, null);
        Type localVarReturnType = new TypeToken<ComputedPowerArc>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param process  (required)
     * @param rc  (required)
     * @param voltage  (required)
     * @param temperature  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designComputepowerarcCreateAsync(Integer designid, String process, String rc, BigDecimal voltage, Integer temperature, List<PinStateArc> data, final ApiCallback<ComputedPowerArc> _callback) throws ApiException {

        okhttp3.Call localVarCall = designComputepowerarcCreateValidateBeforeCall(designid, process, rc, voltage, temperature, data, _callback);
        Type localVarReturnType = new TypeToken<ComputedPowerArc>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerCompute1List
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerCompute1ListCall(Integer designid, Integer powerid, String p, BigDecimal v, Integer t, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/{powerid}/compute1/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (p != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p", p));
        }

        if (v != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("v", v));
        }

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerCompute1ListValidateBeforeCall(Integer designid, Integer powerid, String p, BigDecimal v, Integer t, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerCompute1List(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designContribpowerCompute1List(Async)");
        }
        
        // verify the required parameter 'p' is set
        if (p == null) {
            throw new ApiException("Missing the required parameter 'p' when calling designContribpowerCompute1List(Async)");
        }
        
        // verify the required parameter 'v' is set
        if (v == null) {
            throw new ApiException("Missing the required parameter 'v' when calling designContribpowerCompute1List(Async)");
        }
        
        // verify the required parameter 't' is set
        if (t == null) {
            throw new ApiException("Missing the required parameter 't' when calling designContribpowerCompute1List(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerCompute1ListCall(designid, powerid, p, v, t, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get device data
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @return ComputedContributorPower1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ComputedContributorPower1 designContribpowerCompute1List(Integer designid, Integer powerid, String p, BigDecimal v, Integer t) throws ApiException {
        ApiResponse<ComputedContributorPower1> localVarResp = designContribpowerCompute1ListWithHttpInfo(designid, powerid, p, v, t);
        return localVarResp.getData();
    }

    /**
     * 
     * Get device data
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @return ApiResponse&lt;ComputedContributorPower1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputedContributorPower1> designContribpowerCompute1ListWithHttpInfo(Integer designid, Integer powerid, String p, BigDecimal v, Integer t) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerCompute1ListValidateBeforeCall(designid, powerid, p, v, t, null);
        Type localVarReturnType = new TypeToken<ComputedContributorPower1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get device data
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerCompute1ListAsync(Integer designid, Integer powerid, String p, BigDecimal v, Integer t, final ApiCallback<ComputedContributorPower1> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerCompute1ListValidateBeforeCall(designid, powerid, p, v, t, _callback);
        Type localVarReturnType = new TypeToken<ComputedContributorPower1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerComputeList
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerComputeListCall(Integer designid, Integer powerid, String p, BigDecimal v, Integer t, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/{powerid}/compute/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (p != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p", p));
        }

        if (v != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("v", v));
        }

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerComputeListValidateBeforeCall(Integer designid, Integer powerid, String p, BigDecimal v, Integer t, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerComputeList(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designContribpowerComputeList(Async)");
        }
        
        // verify the required parameter 'p' is set
        if (p == null) {
            throw new ApiException("Missing the required parameter 'p' when calling designContribpowerComputeList(Async)");
        }
        
        // verify the required parameter 'v' is set
        if (v == null) {
            throw new ApiException("Missing the required parameter 'v' when calling designContribpowerComputeList(Async)");
        }
        
        // verify the required parameter 't' is set
        if (t == null) {
            throw new ApiException("Missing the required parameter 't' when calling designContribpowerComputeList(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerComputeListCall(designid, powerid, p, v, t, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get device data
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @return ComputedContributorPower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ComputedContributorPower designContribpowerComputeList(Integer designid, Integer powerid, String p, BigDecimal v, Integer t) throws ApiException {
        ApiResponse<ComputedContributorPower> localVarResp = designContribpowerComputeListWithHttpInfo(designid, powerid, p, v, t);
        return localVarResp.getData();
    }

    /**
     * 
     * Get device data
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @return ApiResponse&lt;ComputedContributorPower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputedContributorPower> designContribpowerComputeListWithHttpInfo(Integer designid, Integer powerid, String p, BigDecimal v, Integer t) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerComputeListValidateBeforeCall(designid, powerid, p, v, t, null);
        Type localVarReturnType = new TypeToken<ComputedContributorPower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get device data
     * @param designid  (required)
     * @param powerid  (required)
     * @param p Process name (required)
     * @param v Voltage (required)
     * @param t Temperature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerComputeListAsync(Integer designid, Integer powerid, String p, BigDecimal v, Integer t, final ApiCallback<ComputedContributorPower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerComputeListValidateBeforeCall(designid, powerid, p, v, t, _callback);
        Type localVarReturnType = new TypeToken<ComputedContributorPower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerCreateCall(Integer designid, ContribPower data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerCreateValidateBeforeCall(Integer designid, ContribPower data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designContribpowerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new contributor power
     * @param designid  (required)
     * @param data  (required)
     * @return ContribPower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ContribPower designContribpowerCreate(Integer designid, ContribPower data) throws ApiException {
        ApiResponse<ContribPower> localVarResp = designContribpowerCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new contributor power
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ContribPower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContribPower> designContribpowerCreateWithHttpInfo(Integer designid, ContribPower data) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<ContribPower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new contributor power
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerCreateAsync(Integer designid, ContribPower data, final ApiCallback<ContribPower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<ContribPower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerDelete
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerDeleteCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerDeleteValidateBeforeCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerDelete(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designContribpowerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerDeleteCall(designid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designContribpowerDelete(Integer designid, Integer powerid) throws ApiException {
        designContribpowerDeleteWithHttpInfo(designid, powerid);
    }

    /**
     * 
     * Delete a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designContribpowerDeleteWithHttpInfo(Integer designid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerDeleteValidateBeforeCall(designid, powerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerDeleteAsync(Integer designid, Integer powerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerDeleteValidateBeforeCall(designid, powerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerList(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of contributor powers
     * @param designid  (required)
     * @return List&lt;ContribPower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public List<ContribPower> designContribpowerList(Integer designid) throws ApiException {
        ApiResponse<List<ContribPower>> localVarResp = designContribpowerListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of contributor powers
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;ContribPower&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContribPower>> designContribpowerListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<ContribPower>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of contributor powers
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerListAsync(Integer designid, final ApiCallback<List<ContribPower>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<ContribPower>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerRead
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerReadCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerReadValidateBeforeCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerRead(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designContribpowerRead(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerReadCall(designid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @return ContribPower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ContribPower designContribpowerRead(Integer designid, Integer powerid) throws ApiException {
        ApiResponse<ContribPower> localVarResp = designContribpowerReadWithHttpInfo(designid, powerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;ContribPower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContribPower> designContribpowerReadWithHttpInfo(Integer designid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerReadValidateBeforeCall(designid, powerid, null);
        Type localVarReturnType = new TypeToken<ContribPower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerReadAsync(Integer designid, Integer powerid, final ApiCallback<ContribPower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerReadValidateBeforeCall(designid, powerid, _callback);
        Type localVarReturnType = new TypeToken<ContribPower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designContribpowerUpdate
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerUpdateCall(Integer designid, Integer powerid, ContribPower data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/contribpower/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designContribpowerUpdateValidateBeforeCall(Integer designid, Integer powerid, ContribPower data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designContribpowerUpdate(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designContribpowerUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designContribpowerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designContribpowerUpdateCall(designid, powerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return ContribPower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ContribPower designContribpowerUpdate(Integer designid, Integer powerid, ContribPower data) throws ApiException {
        ApiResponse<ContribPower> localVarResp = designContribpowerUpdateWithHttpInfo(designid, powerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ContribPower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContribPower> designContribpowerUpdateWithHttpInfo(Integer designid, Integer powerid, ContribPower data) throws ApiException {
        okhttp3.Call localVarCall = designContribpowerUpdateValidateBeforeCall(designid, powerid, data, null);
        Type localVarReturnType = new TypeToken<ContribPower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a contributor power
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designContribpowerUpdateAsync(Integer designid, Integer powerid, ContribPower data, final ApiCallback<ContribPower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designContribpowerUpdateValidateBeforeCall(designid, powerid, data, _callback);
        Type localVarReturnType = new TypeToken<ContribPower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardAccessCreate
     * @param dashboardid  (required)
     * @param designid  (required)
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardAccessCreateCall(String dashboardid, String designid, Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/access/"
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "projectid" + "\\}", localVarApiClient.escapeString(projectid.toString()))
            .replaceAll("\\{" + "masterdesignid" + "\\}", localVarApiClient.escapeString(masterdesignid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardAccessCreateValidateBeforeCall(String dashboardid, String designid, Integer projectid, Integer masterdesignid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardAccessCreate(Async)");
        }
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardAccessCreate(Async)");
        }
        
        // verify the required parameter 'projectid' is set
        if (projectid == null) {
            throw new ApiException("Missing the required parameter 'projectid' when calling designDashboardAccessCreate(Async)");
        }
        
        // verify the required parameter 'masterdesignid' is set
        if (masterdesignid == null) {
            throw new ApiException("Missing the required parameter 'masterdesignid' when calling designDashboardAccessCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardAccessCreateCall(dashboardid, designid, projectid, masterdesignid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update design dashboard access
     * @param dashboardid  (required)
     * @param designid  (required)
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designDashboardAccessCreate(String dashboardid, String designid, Integer projectid, Integer masterdesignid) throws ApiException {
        designDashboardAccessCreateWithHttpInfo(dashboardid, designid, projectid, masterdesignid);
    }

    /**
     * 
     * Update design dashboard access
     * @param dashboardid  (required)
     * @param designid  (required)
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designDashboardAccessCreateWithHttpInfo(String dashboardid, String designid, Integer projectid, Integer masterdesignid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardAccessCreateValidateBeforeCall(dashboardid, designid, projectid, masterdesignid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update design dashboard access
     * @param dashboardid  (required)
     * @param designid  (required)
     * @param projectid  (required)
     * @param masterdesignid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardAccessCreateAsync(String dashboardid, String designid, Integer projectid, Integer masterdesignid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardAccessCreateValidateBeforeCall(dashboardid, designid, projectid, masterdesignid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardCloneCreate
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardCloneCreateCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardCloneCreateValidateBeforeCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardCloneCreate(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardCloneCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardCloneCreateCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard designDashboardCloneCreate(Integer designid, Integer dashboardid) throws ApiException {
        ApiResponse<Dashboard> localVarResp = designDashboardCloneCreateWithHttpInfo(designid, dashboardid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> designDashboardCloneCreateWithHttpInfo(Integer designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardCloneCreateValidateBeforeCall(designid, dashboardid, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardCloneCreateAsync(Integer designid, Integer dashboardid, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardCloneCreateValidateBeforeCall(designid, dashboardid, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardColumnCreate
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnCreateCall(Integer designid, Integer dashboardid, DashboardColumn data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/column/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardColumnCreateValidateBeforeCall(Integer designid, Integer dashboardid, DashboardColumn data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardColumnCreate(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardColumnCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardColumnCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardColumnCreateCall(designid, dashboardid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @return DashboardColumn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardColumn designDashboardColumnCreate(Integer designid, Integer dashboardid, DashboardColumn data) throws ApiException {
        ApiResponse<DashboardColumn> localVarResp = designDashboardColumnCreateWithHttpInfo(designid, dashboardid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DashboardColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardColumn> designDashboardColumnCreateWithHttpInfo(Integer designid, Integer dashboardid, DashboardColumn data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardColumnCreateValidateBeforeCall(designid, dashboardid, data, null);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnCreateAsync(Integer designid, Integer dashboardid, DashboardColumn data, final ApiCallback<DashboardColumn> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardColumnCreateValidateBeforeCall(designid, dashboardid, data, _callback);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardColumnDelete
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnDeleteCall(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/column/{columnid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "columnid" + "\\}", localVarApiClient.escapeString(columnid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardColumnDeleteValidateBeforeCall(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardColumnDelete(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardColumnDelete(Async)");
        }
        
        // verify the required parameter 'columnid' is set
        if (columnid == null) {
            throw new ApiException("Missing the required parameter 'columnid' when calling designDashboardColumnDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardColumnDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardColumnDeleteCall(designid, dashboardid, columnid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @return DashboardColumn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardColumn designDashboardColumnDelete(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data) throws ApiException {
        ApiResponse<DashboardColumn> localVarResp = designDashboardColumnDeleteWithHttpInfo(designid, dashboardid, columnid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DashboardColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardColumn> designDashboardColumnDeleteWithHttpInfo(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardColumnDeleteValidateBeforeCall(designid, dashboardid, columnid, data, null);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnDeleteAsync(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data, final ApiCallback<DashboardColumn> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardColumnDeleteValidateBeforeCall(designid, dashboardid, columnid, data, _callback);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardColumnList
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnListCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/column/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardColumnListValidateBeforeCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardColumnList(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardColumnList(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardColumnListCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get dashboard columns
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return List&lt;DashboardColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DashboardColumn> designDashboardColumnList(Integer designid, Integer dashboardid) throws ApiException {
        ApiResponse<List<DashboardColumn>> localVarResp = designDashboardColumnListWithHttpInfo(designid, dashboardid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get dashboard columns
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;List&lt;DashboardColumn&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DashboardColumn>> designDashboardColumnListWithHttpInfo(Integer designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardColumnListValidateBeforeCall(designid, dashboardid, null);
        Type localVarReturnType = new TypeToken<List<DashboardColumn>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dashboard columns
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnListAsync(Integer designid, Integer dashboardid, final ApiCallback<List<DashboardColumn>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardColumnListValidateBeforeCall(designid, dashboardid, _callback);
        Type localVarReturnType = new TypeToken<List<DashboardColumn>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardColumnRead
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnReadCall(Integer designid, Integer dashboardid, Integer columnid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/column/{columnid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "columnid" + "\\}", localVarApiClient.escapeString(columnid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardColumnReadValidateBeforeCall(Integer designid, Integer dashboardid, Integer columnid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardColumnRead(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardColumnRead(Async)");
        }
        
        // verify the required parameter 'columnid' is set
        if (columnid == null) {
            throw new ApiException("Missing the required parameter 'columnid' when calling designDashboardColumnRead(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardColumnReadCall(designid, dashboardid, columnid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @return DashboardColumn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardColumn designDashboardColumnRead(Integer designid, Integer dashboardid, Integer columnid) throws ApiException {
        ApiResponse<DashboardColumn> localVarResp = designDashboardColumnReadWithHttpInfo(designid, dashboardid, columnid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @return ApiResponse&lt;DashboardColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardColumn> designDashboardColumnReadWithHttpInfo(Integer designid, Integer dashboardid, Integer columnid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardColumnReadValidateBeforeCall(designid, dashboardid, columnid, null);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnReadAsync(Integer designid, Integer dashboardid, Integer columnid, final ApiCallback<DashboardColumn> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardColumnReadValidateBeforeCall(designid, dashboardid, columnid, _callback);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardColumnUpdate
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnUpdateCall(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/column/{columnid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "columnid" + "\\}", localVarApiClient.escapeString(columnid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardColumnUpdateValidateBeforeCall(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardColumnUpdate(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardColumnUpdate(Async)");
        }
        
        // verify the required parameter 'columnid' is set
        if (columnid == null) {
            throw new ApiException("Missing the required parameter 'columnid' when calling designDashboardColumnUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardColumnUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardColumnUpdateCall(designid, dashboardid, columnid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @return DashboardColumn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardColumn designDashboardColumnUpdate(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data) throws ApiException {
        ApiResponse<DashboardColumn> localVarResp = designDashboardColumnUpdateWithHttpInfo(designid, dashboardid, columnid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DashboardColumn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardColumn> designDashboardColumnUpdateWithHttpInfo(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardColumnUpdateValidateBeforeCall(designid, dashboardid, columnid, data, null);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param columnid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardColumnUpdateAsync(Integer designid, Integer dashboardid, Integer columnid, DashboardColumn data, final ApiCallback<DashboardColumn> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardColumnUpdateValidateBeforeCall(designid, dashboardid, columnid, data, _callback);
        Type localVarReturnType = new TypeToken<DashboardColumn>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardCreateCall(Integer designid, Dashboard data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardCreateValidateBeforeCall(Integer designid, Dashboard data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a dashboards
     * @param designid  (required)
     * @param data  (required)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard designDashboardCreate(Integer designid, Dashboard data) throws ApiException {
        ApiResponse<Dashboard> localVarResp = designDashboardCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a dashboards
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> designDashboardCreateWithHttpInfo(Integer designid, Dashboard data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a dashboards
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardCreateAsync(Integer designid, Dashboard data, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardDataList
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardDataListCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/data/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardDataListValidateBeforeCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardDataList(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardDataList(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardDataListCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard designDashboardDataList(Integer designid, Integer dashboardid) throws ApiException {
        ApiResponse<Dashboard> localVarResp = designDashboardDataListWithHttpInfo(designid, dashboardid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> designDashboardDataListWithHttpInfo(Integer designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardDataListValidateBeforeCall(designid, dashboardid, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardDataListAsync(Integer designid, Integer dashboardid, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardDataListValidateBeforeCall(designid, dashboardid, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardDelete
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardDeleteCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardDeleteValidateBeforeCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardDelete(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardDeleteCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a dashboards
     * @param designid  (required)
     * @param dashboardid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designDashboardDelete(Integer designid, Integer dashboardid) throws ApiException {
        designDashboardDeleteWithHttpInfo(designid, dashboardid);
    }

    /**
     * 
     * Delete a dashboards
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designDashboardDeleteWithHttpInfo(Integer designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardDeleteValidateBeforeCall(designid, dashboardid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a dashboards
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardDeleteAsync(Integer designid, Integer dashboardid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardDeleteValidateBeforeCall(designid, dashboardid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardList(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a list of dashboards
     * @param designid  (required)
     * @return List&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Dashboard> designDashboardList(Integer designid) throws ApiException {
        ApiResponse<List<Dashboard>> localVarResp = designDashboardListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of dashboards
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;Dashboard&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Dashboard>> designDashboardListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<Dashboard>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of dashboards
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardListAsync(Integer designid, final ApiCallback<List<Dashboard>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<Dashboard>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardRead
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardReadCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardReadValidateBeforeCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardRead(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardRead(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardReadCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard designDashboardRead(Integer designid, Integer dashboardid) throws ApiException {
        ApiResponse<Dashboard> localVarResp = designDashboardReadWithHttpInfo(designid, dashboardid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> designDashboardReadWithHttpInfo(Integer designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardReadValidateBeforeCall(designid, dashboardid, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a dashboard
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardReadAsync(Integer designid, Integer dashboardid, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardReadValidateBeforeCall(designid, dashboardid, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardRowCreate
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowCreateCall(Integer designid, Integer dashboardid, DashboardRow data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/row/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardRowCreateValidateBeforeCall(Integer designid, Integer dashboardid, DashboardRow data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardRowCreate(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardRowCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardRowCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardRowCreateCall(designid, dashboardid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @return DashboardRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardRow designDashboardRowCreate(Integer designid, Integer dashboardid, DashboardRow data) throws ApiException {
        ApiResponse<DashboardRow> localVarResp = designDashboardRowCreateWithHttpInfo(designid, dashboardid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DashboardRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardRow> designDashboardRowCreateWithHttpInfo(Integer designid, Integer dashboardid, DashboardRow data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardRowCreateValidateBeforeCall(designid, dashboardid, data, null);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowCreateAsync(Integer designid, Integer dashboardid, DashboardRow data, final ApiCallback<DashboardRow> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardRowCreateValidateBeforeCall(designid, dashboardid, data, _callback);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardRowDelete
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowDeleteCall(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/row/{rowid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "rowid" + "\\}", localVarApiClient.escapeString(rowid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardRowDeleteValidateBeforeCall(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardRowDelete(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardRowDelete(Async)");
        }
        
        // verify the required parameter 'rowid' is set
        if (rowid == null) {
            throw new ApiException("Missing the required parameter 'rowid' when calling designDashboardRowDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardRowDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardRowDeleteCall(designid, dashboardid, rowid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @return DashboardRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardRow designDashboardRowDelete(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data) throws ApiException {
        ApiResponse<DashboardRow> localVarResp = designDashboardRowDeleteWithHttpInfo(designid, dashboardid, rowid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DashboardRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardRow> designDashboardRowDeleteWithHttpInfo(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardRowDeleteValidateBeforeCall(designid, dashboardid, rowid, data, null);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a dashboard column
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowDeleteAsync(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data, final ApiCallback<DashboardRow> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardRowDeleteValidateBeforeCall(designid, dashboardid, rowid, data, _callback);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardRowList
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowListCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/row/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardRowListValidateBeforeCall(Integer designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardRowList(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardRowList(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardRowListCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get dashboard rows
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return List&lt;DashboardRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DashboardRow> designDashboardRowList(Integer designid, Integer dashboardid) throws ApiException {
        ApiResponse<List<DashboardRow>> localVarResp = designDashboardRowListWithHttpInfo(designid, dashboardid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get dashboard rows
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;List&lt;DashboardRow&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DashboardRow>> designDashboardRowListWithHttpInfo(Integer designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardRowListValidateBeforeCall(designid, dashboardid, null);
        Type localVarReturnType = new TypeToken<List<DashboardRow>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get dashboard rows
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowListAsync(Integer designid, Integer dashboardid, final ApiCallback<List<DashboardRow>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardRowListValidateBeforeCall(designid, dashboardid, _callback);
        Type localVarReturnType = new TypeToken<List<DashboardRow>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardRowRead
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowReadCall(Integer designid, Integer dashboardid, Integer rowid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/row/{rowid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "rowid" + "\\}", localVarApiClient.escapeString(rowid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardRowReadValidateBeforeCall(Integer designid, Integer dashboardid, Integer rowid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardRowRead(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardRowRead(Async)");
        }
        
        // verify the required parameter 'rowid' is set
        if (rowid == null) {
            throw new ApiException("Missing the required parameter 'rowid' when calling designDashboardRowRead(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardRowReadCall(designid, dashboardid, rowid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @return DashboardRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardRow designDashboardRowRead(Integer designid, Integer dashboardid, Integer rowid) throws ApiException {
        ApiResponse<DashboardRow> localVarResp = designDashboardRowReadWithHttpInfo(designid, dashboardid, rowid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @return ApiResponse&lt;DashboardRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardRow> designDashboardRowReadWithHttpInfo(Integer designid, Integer dashboardid, Integer rowid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardRowReadValidateBeforeCall(designid, dashboardid, rowid, null);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowReadAsync(Integer designid, Integer dashboardid, Integer rowid, final ApiCallback<DashboardRow> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardRowReadValidateBeforeCall(designid, dashboardid, rowid, _callback);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardRowUpdate
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowUpdateCall(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/row/{rowid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()))
            .replaceAll("\\{" + "rowid" + "\\}", localVarApiClient.escapeString(rowid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardRowUpdateValidateBeforeCall(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardRowUpdate(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardRowUpdate(Async)");
        }
        
        // verify the required parameter 'rowid' is set
        if (rowid == null) {
            throw new ApiException("Missing the required parameter 'rowid' when calling designDashboardRowUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardRowUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardRowUpdateCall(designid, dashboardid, rowid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @return DashboardRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DashboardRow designDashboardRowUpdate(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data) throws ApiException {
        ApiResponse<DashboardRow> localVarResp = designDashboardRowUpdateWithHttpInfo(designid, dashboardid, rowid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DashboardRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DashboardRow> designDashboardRowUpdateWithHttpInfo(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardRowUpdateValidateBeforeCall(designid, dashboardid, rowid, data, null);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a dashboard row
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param rowid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardRowUpdateAsync(Integer designid, Integer dashboardid, Integer rowid, DashboardRow data, final ApiCallback<DashboardRow> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardRowUpdateValidateBeforeCall(designid, dashboardid, rowid, data, _callback);
        Type localVarReturnType = new TypeToken<DashboardRow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardUpdate
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardUpdateCall(Integer designid, Integer dashboardid, Dashboard data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardUpdateValidateBeforeCall(Integer designid, Integer dashboardid, Dashboard data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardUpdate(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDashboardUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardUpdateCall(designid, dashboardid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a dashboards
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Dashboard designDashboardUpdate(Integer designid, Integer dashboardid, Dashboard data) throws ApiException {
        ApiResponse<Dashboard> localVarResp = designDashboardUpdateWithHttpInfo(designid, dashboardid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a dashboards
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboard> designDashboardUpdateWithHttpInfo(Integer designid, Integer dashboardid, Dashboard data) throws ApiException {
        okhttp3.Call localVarCall = designDashboardUpdateValidateBeforeCall(designid, dashboardid, data, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a dashboards
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, error returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardUpdateAsync(Integer designid, Integer dashboardid, Dashboard data, final ApiCallback<Dashboard> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardUpdateValidateBeforeCall(designid, dashboardid, data, _callback);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDashboardUpdateList
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardUpdateListCall(String designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/dashboard/{dashboardid}/update/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dashboardid" + "\\}", localVarApiClient.escapeString(dashboardid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDashboardUpdateListValidateBeforeCall(String designid, Integer dashboardid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDashboardUpdateList(Async)");
        }
        
        // verify the required parameter 'dashboardid' is set
        if (dashboardid == null) {
            throw new ApiException("Missing the required parameter 'dashboardid' when calling designDashboardUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = designDashboardUpdateListCall(designid, dashboardid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData designDashboardUpdateList(String designid, Integer dashboardid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = designDashboardUpdateListWithHttpInfo(designid, dashboardid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param designid  (required)
     * @param dashboardid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> designDashboardUpdateListWithHttpInfo(String designid, Integer dashboardid) throws ApiException {
        okhttp3.Call localVarCall = designDashboardUpdateListValidateBeforeCall(designid, dashboardid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param designid  (required)
     * @param dashboardid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDashboardUpdateListAsync(String designid, Integer dashboardid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDashboardUpdateListValidateBeforeCall(designid, dashboardid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDataCreate
     * @param uuid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataCreateCall(String uuid, String data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/data/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDataCreateValidateBeforeCall(String uuid, String data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling designDataCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDataCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designDataCreateCall(uuid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Upload design data
     * @param uuid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designDataCreate(String uuid, String data) throws ApiException {
        designDataCreateWithHttpInfo(uuid, data);
    }

    /**
     * 
     * Upload design data
     * @param uuid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designDataCreateWithHttpInfo(String uuid, String data) throws ApiException {
        okhttp3.Call localVarCall = designDataCreateValidateBeforeCall(uuid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Upload design data
     * @param uuid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataCreateAsync(String uuid, String data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDataCreateValidateBeforeCall(uuid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDataDelete
     * @param designid  (required)
     * @param dataid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataDeleteCall(Integer designid, Integer dataid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/data/{dataid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDataDeleteValidateBeforeCall(Integer designid, Integer dataid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDataDelete(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling designDataDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designDataDeleteCall(designid, dataid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete design data
     * @param designid  (required)
     * @param dataid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designDataDelete(Integer designid, Integer dataid) throws ApiException {
        designDataDeleteWithHttpInfo(designid, dataid);
    }

    /**
     * 
     * Delete design data
     * @param designid  (required)
     * @param dataid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designDataDeleteWithHttpInfo(Integer designid, Integer dataid) throws ApiException {
        okhttp3.Call localVarCall = designDataDeleteValidateBeforeCall(designid, dataid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete design data
     * @param designid  (required)
     * @param dataid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataDeleteAsync(Integer designid, Integer dataid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDataDeleteValidateBeforeCall(designid, dataid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDataList
     * @param designid  (required)
     * @param fields  (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataListCall(Integer designid, String fields, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/data/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDataListValidateBeforeCall(Integer designid, String fields, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDataList(Async)");
        }
        

        okhttp3.Call localVarCall = designDataListCall(designid, fields, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get design data
     * @param designid  (required)
     * @param fields  (optional)
     * @param filter  (optional)
     * @return List&lt;DesignData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignData> designDataList(Integer designid, String fields, String filter) throws ApiException {
        ApiResponse<List<DesignData>> localVarResp = designDataListWithHttpInfo(designid, fields, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Get design data
     * @param designid  (required)
     * @param fields  (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;List&lt;DesignData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignData>> designDataListWithHttpInfo(Integer designid, String fields, String filter) throws ApiException {
        okhttp3.Call localVarCall = designDataListValidateBeforeCall(designid, fields, filter, null);
        Type localVarReturnType = new TypeToken<List<DesignData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get design data
     * @param designid  (required)
     * @param fields  (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataListAsync(Integer designid, String fields, String filter, final ApiCallback<List<DesignData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDataListValidateBeforeCall(designid, fields, filter, _callback);
        Type localVarReturnType = new TypeToken<List<DesignData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDataRead
     * @param designid  (required)
     * @param dataid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataReadCall(Integer designid, Integer dataid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/data/{dataid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDataReadValidateBeforeCall(Integer designid, Integer dataid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDataRead(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling designDataRead(Async)");
        }
        

        okhttp3.Call localVarCall = designDataReadCall(designid, dataid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get design data
     * @param designid  (required)
     * @param dataid  (required)
     * @return DesignData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignData designDataRead(Integer designid, Integer dataid) throws ApiException {
        ApiResponse<DesignData> localVarResp = designDataReadWithHttpInfo(designid, dataid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get design data
     * @param designid  (required)
     * @param dataid  (required)
     * @return ApiResponse&lt;DesignData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignData> designDataReadWithHttpInfo(Integer designid, Integer dataid) throws ApiException {
        okhttp3.Call localVarCall = designDataReadValidateBeforeCall(designid, dataid, null);
        Type localVarReturnType = new TypeToken<DesignData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get design data
     * @param designid  (required)
     * @param dataid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataReadAsync(Integer designid, Integer dataid, final ApiCallback<DesignData> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDataReadValidateBeforeCall(designid, dataid, _callback);
        Type localVarReturnType = new TypeToken<DesignData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designDataUpdate
     * @param designid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataUpdateCall(Integer designid, Integer dataid, DesignData data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/data/{dataid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designDataUpdateValidateBeforeCall(Integer designid, Integer dataid, DesignData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designDataUpdate(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling designDataUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designDataUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designDataUpdateCall(designid, dataid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update design data
     * @param designid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return DesignData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignData designDataUpdate(Integer designid, Integer dataid, DesignData data) throws ApiException {
        ApiResponse<DesignData> localVarResp = designDataUpdateWithHttpInfo(designid, dataid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update design data
     * @param designid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignData> designDataUpdateWithHttpInfo(Integer designid, Integer dataid, DesignData data) throws ApiException {
        okhttp3.Call localVarCall = designDataUpdateValidateBeforeCall(designid, dataid, data, null);
        Type localVarReturnType = new TypeToken<DesignData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update design data
     * @param designid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designDataUpdateAsync(Integer designid, Integer dataid, DesignData data, final ApiCallback<DesignData> _callback) throws ApiException {

        okhttp3.Call localVarCall = designDataUpdateValidateBeforeCall(designid, dataid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designEnergyCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designEnergyCreateCall(Integer designid, DesignPinEnergy data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/energy/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designEnergyCreateValidateBeforeCall(Integer designid, DesignPinEnergy data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designEnergyCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designEnergyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designEnergyCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add pin powers
     * @param designid  (required)
     * @param data  (required)
     * @return List&lt;DesignPinEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignPinEnergy> designEnergyCreate(Integer designid, DesignPinEnergy data) throws ApiException {
        ApiResponse<List<DesignPinEnergy>> localVarResp = designEnergyCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Add pin powers
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;DesignPinEnergy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignPinEnergy>> designEnergyCreateWithHttpInfo(Integer designid, DesignPinEnergy data) throws ApiException {
        okhttp3.Call localVarCall = designEnergyCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<List<DesignPinEnergy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add pin powers
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designEnergyCreateAsync(Integer designid, DesignPinEnergy data, final ApiCallback<List<DesignPinEnergy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designEnergyCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<List<DesignPinEnergy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designEnergyList
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designEnergyListCall(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/energy/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process", process));
        }

        if (rc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc", rc));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (temperature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temperature", temperature));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designEnergyListValidateBeforeCall(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designEnergyList(Async)");
        }
        

        okhttp3.Call localVarCall = designEnergyListCall(designid, page, number, process, rc, voltage, temperature, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of all pin powers
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return PagedDesignPinEnergy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public PagedDesignPinEnergy designEnergyList(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature) throws ApiException {
        ApiResponse<PagedDesignPinEnergy> localVarResp = designEnergyListWithHttpInfo(designid, page, number, process, rc, voltage, temperature);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of all pin powers
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return ApiResponse&lt;PagedDesignPinEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedDesignPinEnergy> designEnergyListWithHttpInfo(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature) throws ApiException {
        okhttp3.Call localVarCall = designEnergyListValidateBeforeCall(designid, page, number, process, rc, voltage, temperature, null);
        Type localVarReturnType = new TypeToken<PagedDesignPinEnergy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of all pin powers
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designEnergyListAsync(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback<PagedDesignPinEnergy> _callback) throws ApiException {

        okhttp3.Call localVarCall = designEnergyListValidateBeforeCall(designid, page, number, process, rc, voltage, temperature, _callback);
        Type localVarReturnType = new TypeToken<PagedDesignPinEnergy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designFfCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfCreateCall(Integer designid, DesignFF data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/ff/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designFfCreateValidateBeforeCall(Integer designid, DesignFF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designFfCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designFfCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designFfCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new ff
     * @param designid  (required)
     * @param data  (required)
     * @return DesignFF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignFF designFfCreate(Integer designid, DesignFF data) throws ApiException {
        ApiResponse<DesignFF> localVarResp = designFfCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new ff
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignFF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignFF> designFfCreateWithHttpInfo(Integer designid, DesignFF data) throws ApiException {
        okhttp3.Call localVarCall = designFfCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignFF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new ff
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfCreateAsync(Integer designid, DesignFF data, final ApiCallback<DesignFF> _callback) throws ApiException {

        okhttp3.Call localVarCall = designFfCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignFF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designFfDelete
     * @param designid  (required)
     * @param ffid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfDeleteCall(Integer designid, Integer ffid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/ff/{ffid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "ffid" + "\\}", localVarApiClient.escapeString(ffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designFfDeleteValidateBeforeCall(Integer designid, Integer ffid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designFfDelete(Async)");
        }
        
        // verify the required parameter 'ffid' is set
        if (ffid == null) {
            throw new ApiException("Missing the required parameter 'ffid' when calling designFfDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designFfDeleteCall(designid, ffid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designFfDelete(Integer designid, Integer ffid) throws ApiException {
        designFfDeleteWithHttpInfo(designid, ffid);
    }

    /**
     * 
     * Delete a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designFfDeleteWithHttpInfo(Integer designid, Integer ffid) throws ApiException {
        okhttp3.Call localVarCall = designFfDeleteValidateBeforeCall(designid, ffid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfDeleteAsync(Integer designid, Integer ffid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designFfDeleteValidateBeforeCall(designid, ffid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designFfList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/ff/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designFfListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designFfList(Async)");
        }
        

        okhttp3.Call localVarCall = designFfListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of ffs
     * @param designid  (required)
     * @return List&lt;DesignFF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignFF> designFfList(Integer designid) throws ApiException {
        ApiResponse<List<DesignFF>> localVarResp = designFfListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of ffs
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignFF&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignFF>> designFfListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designFfListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignFF>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of ffs
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfListAsync(Integer designid, final ApiCallback<List<DesignFF>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designFfListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignFF>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designFfRead
     * @param designid  (required)
     * @param ffid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfReadCall(Integer designid, Integer ffid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/ff/{ffid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "ffid" + "\\}", localVarApiClient.escapeString(ffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designFfReadValidateBeforeCall(Integer designid, Integer ffid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designFfRead(Async)");
        }
        
        // verify the required parameter 'ffid' is set
        if (ffid == null) {
            throw new ApiException("Missing the required parameter 'ffid' when calling designFfRead(Async)");
        }
        

        okhttp3.Call localVarCall = designFfReadCall(designid, ffid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @return DesignFF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignFF designFfRead(Integer designid, Integer ffid) throws ApiException {
        ApiResponse<DesignFF> localVarResp = designFfReadWithHttpInfo(designid, ffid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @return ApiResponse&lt;DesignFF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignFF> designFfReadWithHttpInfo(Integer designid, Integer ffid) throws ApiException {
        okhttp3.Call localVarCall = designFfReadValidateBeforeCall(designid, ffid, null);
        Type localVarReturnType = new TypeToken<DesignFF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfReadAsync(Integer designid, Integer ffid, final ApiCallback<DesignFF> _callback) throws ApiException {

        okhttp3.Call localVarCall = designFfReadValidateBeforeCall(designid, ffid, _callback);
        Type localVarReturnType = new TypeToken<DesignFF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designFfUpdate
     * @param designid  (required)
     * @param ffid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfUpdateCall(Integer designid, Integer ffid, DesignFF data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/ff/{ffid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "ffid" + "\\}", localVarApiClient.escapeString(ffid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designFfUpdateValidateBeforeCall(Integer designid, Integer ffid, DesignFF data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designFfUpdate(Async)");
        }
        
        // verify the required parameter 'ffid' is set
        if (ffid == null) {
            throw new ApiException("Missing the required parameter 'ffid' when calling designFfUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designFfUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designFfUpdateCall(designid, ffid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @param data  (required)
     * @return DesignFF
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignFF designFfUpdate(Integer designid, Integer ffid, DesignFF data) throws ApiException {
        ApiResponse<DesignFF> localVarResp = designFfUpdateWithHttpInfo(designid, ffid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignFF&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignFF> designFfUpdateWithHttpInfo(Integer designid, Integer ffid, DesignFF data) throws ApiException {
        okhttp3.Call localVarCall = designFfUpdateValidateBeforeCall(designid, ffid, data, null);
        Type localVarReturnType = new TypeToken<DesignFF>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a ff
     * @param designid  (required)
     * @param ffid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designFfUpdateAsync(Integer designid, Integer ffid, DesignFF data, final ApiCallback<DesignFF> _callback) throws ApiException {

        okhttp3.Call localVarCall = designFfUpdateValidateBeforeCall(designid, ffid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignFF>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designHierarchyGroupCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyGroupCreateCall(Integer designid, Hier data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/hierarchy/group/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designHierarchyGroupCreateValidateBeforeCall(Integer designid, Hier data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designHierarchyGroupCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designHierarchyGroupCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designHierarchyGroupCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create new hierarchy group
     * @param designid  (required)
     * @param data  (required)
     * @return Hier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Hier designHierarchyGroupCreate(Integer designid, Hier data) throws ApiException {
        ApiResponse<Hier> localVarResp = designHierarchyGroupCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new hierarchy group
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Hier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hier> designHierarchyGroupCreateWithHttpInfo(Integer designid, Hier data) throws ApiException {
        okhttp3.Call localVarCall = designHierarchyGroupCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Hier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new hierarchy group
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyGroupCreateAsync(Integer designid, Hier data, final ApiCallback<Hier> _callback) throws ApiException {

        okhttp3.Call localVarCall = designHierarchyGroupCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Hier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designHierarchyGroupDelete
     * @param designid  (required)
     * @param groupid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyGroupDeleteCall(Integer designid, Integer groupid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/hierarchy/group/{groupid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "groupid" + "\\}", localVarApiClient.escapeString(groupid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designHierarchyGroupDeleteValidateBeforeCall(Integer designid, Integer groupid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designHierarchyGroupDelete(Async)");
        }
        
        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling designHierarchyGroupDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designHierarchyGroupDeleteCall(designid, groupid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a hierarchy group
     * @param designid  (required)
     * @param groupid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designHierarchyGroupDelete(Integer designid, Integer groupid) throws ApiException {
        designHierarchyGroupDeleteWithHttpInfo(designid, groupid);
    }

    /**
     * 
     * Delete a hierarchy group
     * @param designid  (required)
     * @param groupid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designHierarchyGroupDeleteWithHttpInfo(Integer designid, Integer groupid) throws ApiException {
        okhttp3.Call localVarCall = designHierarchyGroupDeleteValidateBeforeCall(designid, groupid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a hierarchy group
     * @param designid  (required)
     * @param groupid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyGroupDeleteAsync(Integer designid, Integer groupid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designHierarchyGroupDeleteValidateBeforeCall(designid, groupid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designHierarchyGroupUpdate
     * @param designid  (required)
     * @param groupid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyGroupUpdateCall(Integer designid, Integer groupid, Hier data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/hierarchy/group/{groupid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "groupid" + "\\}", localVarApiClient.escapeString(groupid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designHierarchyGroupUpdateValidateBeforeCall(Integer designid, Integer groupid, Hier data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designHierarchyGroupUpdate(Async)");
        }
        
        // verify the required parameter 'groupid' is set
        if (groupid == null) {
            throw new ApiException("Missing the required parameter 'groupid' when calling designHierarchyGroupUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designHierarchyGroupUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designHierarchyGroupUpdateCall(designid, groupid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update hierarchy group
     * @param designid  (required)
     * @param groupid  (required)
     * @param data  (required)
     * @return Hier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Hier designHierarchyGroupUpdate(Integer designid, Integer groupid, Hier data) throws ApiException {
        ApiResponse<Hier> localVarResp = designHierarchyGroupUpdateWithHttpInfo(designid, groupid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update hierarchy group
     * @param designid  (required)
     * @param groupid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Hier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hier> designHierarchyGroupUpdateWithHttpInfo(Integer designid, Integer groupid, Hier data) throws ApiException {
        okhttp3.Call localVarCall = designHierarchyGroupUpdateValidateBeforeCall(designid, groupid, data, null);
        Type localVarReturnType = new TypeToken<Hier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update hierarchy group
     * @param designid  (required)
     * @param groupid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error messag ereturned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyGroupUpdateAsync(Integer designid, Integer groupid, Hier data, final ApiCallback<Hier> _callback) throws ApiException {

        okhttp3.Call localVarCall = designHierarchyGroupUpdateValidateBeforeCall(designid, groupid, data, _callback);
        Type localVarReturnType = new TypeToken<Hier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designHierarchyList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/hierarchy/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designHierarchyListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designHierarchyList(Async)");
        }
        

        okhttp3.Call localVarCall = designHierarchyListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get hierarchy
     * @param designid  (required)
     * @return List&lt;Hier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Hier> designHierarchyList(Integer designid) throws ApiException {
        ApiResponse<List<Hier>> localVarResp = designHierarchyListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get hierarchy
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;Hier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hier>> designHierarchyListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designHierarchyListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<Hier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get hierarchy
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyListAsync(Integer designid, final ApiCallback<List<Hier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designHierarchyListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<Hier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designHierarchyUpdate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyUpdateCall(Integer designid, Hier data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/hierarchy/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designHierarchyUpdateValidateBeforeCall(Integer designid, Hier data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designHierarchyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designHierarchyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designHierarchyUpdateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update hierarchy
     * @param designid  (required)
     * @param data  (required)
     * @return List&lt;Hier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Hier> designHierarchyUpdate(Integer designid, Hier data) throws ApiException {
        ApiResponse<List<Hier>> localVarResp = designHierarchyUpdateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update hierarchy
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;Hier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hier>> designHierarchyUpdateWithHttpInfo(Integer designid, Hier data) throws ApiException {
        okhttp3.Call localVarCall = designHierarchyUpdateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<List<Hier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update hierarchy
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designHierarchyUpdateAsync(Integer designid, Hier data, final ApiCallback<List<Hier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designHierarchyUpdateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<List<Hier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceBulkCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _return  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceBulkCreateCall(Integer designid, List<Instance> data, Boolean _return, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/bulk/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (_return != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return", _return));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceBulkCreateValidateBeforeCall(Integer designid, List<Instance> data, Boolean _return, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceBulkCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designInstanceBulkCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceBulkCreateCall(designid, data, _return, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new instance
     * @param designid  (required)
     * @param data  (required)
     * @param _return  (optional, default to false)
     * @return List&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Instance> designInstanceBulkCreate(Integer designid, List<Instance> data, Boolean _return) throws ApiException {
        ApiResponse<List<Instance>> localVarResp = designInstanceBulkCreateWithHttpInfo(designid, data, _return);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new instance
     * @param designid  (required)
     * @param data  (required)
     * @param _return  (optional, default to false)
     * @return ApiResponse&lt;List&lt;Instance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Instance>> designInstanceBulkCreateWithHttpInfo(Integer designid, List<Instance> data, Boolean _return) throws ApiException {
        okhttp3.Call localVarCall = designInstanceBulkCreateValidateBeforeCall(designid, data, _return, null);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new instance
     * @param designid  (required)
     * @param data  (required)
     * @param _return  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceBulkCreateAsync(Integer designid, List<Instance> data, Boolean _return, final ApiCallback<List<Instance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceBulkCreateValidateBeforeCall(designid, data, _return, _callback);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceClone
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceCloneCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceCloneValidateBeforeCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceClone(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceClone(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceCloneCall(designid, instanceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone an instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Instance designInstanceClone(Integer designid, Integer instanceid) throws ApiException {
        ApiResponse<Instance> localVarResp = designInstanceCloneWithHttpInfo(designid, instanceid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone an instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> designInstanceCloneWithHttpInfo(Integer designid, Integer instanceid) throws ApiException {
        okhttp3.Call localVarCall = designInstanceCloneValidateBeforeCall(designid, instanceid, null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone an instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceCloneAsync(Integer designid, Integer instanceid, final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceCloneValidateBeforeCall(designid, instanceid, _callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceCreateCall(Integer designid, Instance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceCreateValidateBeforeCall(Integer designid, Instance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designInstanceCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new instance
     * @param designid  (required)
     * @param data  (required)
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Instance designInstanceCreate(Integer designid, Instance data) throws ApiException {
        ApiResponse<Instance> localVarResp = designInstanceCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new instance
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> designInstanceCreateWithHttpInfo(Integer designid, Instance data) throws ApiException {
        okhttp3.Call localVarCall = designInstanceCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new instance
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inout data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceCreateAsync(Integer designid, Instance data, final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceDelete
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceDeleteCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceDeleteValidateBeforeCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceDelete(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceDeleteCall(designid, instanceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designInstanceDelete(Integer designid, Integer instanceid) throws ApiException {
        designInstanceDeleteWithHttpInfo(designid, instanceid);
    }

    /**
     * 
     * Delete instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designInstanceDeleteWithHttpInfo(Integer designid, Integer instanceid) throws ApiException {
        okhttp3.Call localVarCall = designInstanceDeleteValidateBeforeCall(designid, instanceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceDeleteAsync(Integer designid, Integer instanceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceDeleteValidateBeforeCall(designid, instanceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceList
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceListCall(Integer designid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceListValidateBeforeCall(Integer designid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceList(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceListCall(designid, page, number, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of instances
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return PagedInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PagedInstance designInstanceList(Integer designid, Integer page, Integer number) throws ApiException {
        ApiResponse<PagedInstance> localVarResp = designInstanceListWithHttpInfo(designid, page, number);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of instances
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return ApiResponse&lt;PagedInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedInstance> designInstanceListWithHttpInfo(Integer designid, Integer page, Integer number) throws ApiException {
        okhttp3.Call localVarCall = designInstanceListValidateBeforeCall(designid, page, number, null);
        Type localVarReturnType = new TypeToken<PagedInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of instances
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceListAsync(Integer designid, Integer page, Integer number, final ApiCallback<PagedInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceListValidateBeforeCall(designid, page, number, _callback);
        Type localVarReturnType = new TypeToken<PagedInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceRead
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceReadCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceReadValidateBeforeCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceRead(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceRead(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceReadCall(designid, instanceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a design
     * @param designid  (required)
     * @param instanceid  (required)
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Instance designInstanceRead(Integer designid, Integer instanceid) throws ApiException {
        ApiResponse<Instance> localVarResp = designInstanceReadWithHttpInfo(designid, instanceid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a design
     * @param designid  (required)
     * @param instanceid  (required)
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> designInstanceReadWithHttpInfo(Integer designid, Integer instanceid) throws ApiException {
        okhttp3.Call localVarCall = designInstanceReadValidateBeforeCall(designid, instanceid, null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a design
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceReadAsync(Integer designid, Integer instanceid, final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceReadValidateBeforeCall(designid, instanceid, _callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceSupplyCreate
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyCreateCall(Integer designid, Integer instanceid, InstanceSupply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/supply/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceSupplyCreateValidateBeforeCall(Integer designid, Integer instanceid, InstanceSupply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceSupplyCreate(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceSupplyCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designInstanceSupplyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceSupplyCreateCall(designid, instanceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update instance supplies
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @return List&lt;InstanceSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<InstanceSupply> designInstanceSupplyCreate(Integer designid, Integer instanceid, InstanceSupply data) throws ApiException {
        ApiResponse<List<InstanceSupply>> localVarResp = designInstanceSupplyCreateWithHttpInfo(designid, instanceid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update instance supplies
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;InstanceSupply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InstanceSupply>> designInstanceSupplyCreateWithHttpInfo(Integer designid, Integer instanceid, InstanceSupply data) throws ApiException {
        okhttp3.Call localVarCall = designInstanceSupplyCreateValidateBeforeCall(designid, instanceid, data, null);
        Type localVarReturnType = new TypeToken<List<InstanceSupply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update instance supplies
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyCreateAsync(Integer designid, Integer instanceid, InstanceSupply data, final ApiCallback<List<InstanceSupply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceSupplyCreateValidateBeforeCall(designid, instanceid, data, _callback);
        Type localVarReturnType = new TypeToken<List<InstanceSupply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceSupplyList
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not auhtorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyListCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/supply/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceSupplyListValidateBeforeCall(Integer designid, Integer instanceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceSupplyList(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceSupplyList(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceSupplyListCall(designid, instanceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get instance supplies
     * @param designid  (required)
     * @param instanceid  (required)
     * @return List&lt;InstanceSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not auhtorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<InstanceSupply> designInstanceSupplyList(Integer designid, Integer instanceid) throws ApiException {
        ApiResponse<List<InstanceSupply>> localVarResp = designInstanceSupplyListWithHttpInfo(designid, instanceid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get instance supplies
     * @param designid  (required)
     * @param instanceid  (required)
     * @return ApiResponse&lt;List&lt;InstanceSupply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not auhtorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InstanceSupply>> designInstanceSupplyListWithHttpInfo(Integer designid, Integer instanceid) throws ApiException {
        okhttp3.Call localVarCall = designInstanceSupplyListValidateBeforeCall(designid, instanceid, null);
        Type localVarReturnType = new TypeToken<List<InstanceSupply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get instance supplies
     * @param designid  (required)
     * @param instanceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not auhtorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyListAsync(Integer designid, Integer instanceid, final ApiCallback<List<InstanceSupply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceSupplyListValidateBeforeCall(designid, instanceid, _callback);
        Type localVarReturnType = new TypeToken<List<InstanceSupply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceSupplyRead
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyReadCall(Integer designid, Integer instanceid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceSupplyReadValidateBeforeCall(Integer designid, Integer instanceid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceSupplyRead(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designInstanceSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceSupplyReadCall(designid, instanceid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get an instance supply
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @return InstanceSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public InstanceSupply designInstanceSupplyRead(Integer designid, Integer instanceid, Integer supplyid) throws ApiException {
        ApiResponse<InstanceSupply> localVarResp = designInstanceSupplyReadWithHttpInfo(designid, instanceid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an instance supply
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;InstanceSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceSupply> designInstanceSupplyReadWithHttpInfo(Integer designid, Integer instanceid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = designInstanceSupplyReadValidateBeforeCall(designid, instanceid, supplyid, null);
        Type localVarReturnType = new TypeToken<InstanceSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an instance supply
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyReadAsync(Integer designid, Integer instanceid, Integer supplyid, final ApiCallback<InstanceSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceSupplyReadValidateBeforeCall(designid, instanceid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<InstanceSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceSupplyUpdate
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyUpdateCall(Integer designid, Integer instanceid, Integer supplyid, InstanceSupply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceSupplyUpdateValidateBeforeCall(Integer designid, Integer instanceid, Integer supplyid, InstanceSupply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designInstanceSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designInstanceSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceSupplyUpdateCall(designid, instanceid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update an instance supply
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return InstanceSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public InstanceSupply designInstanceSupplyUpdate(Integer designid, Integer instanceid, Integer supplyid, InstanceSupply data) throws ApiException {
        ApiResponse<InstanceSupply> localVarResp = designInstanceSupplyUpdateWithHttpInfo(designid, instanceid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an instance supply
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;InstanceSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstanceSupply> designInstanceSupplyUpdateWithHttpInfo(Integer designid, Integer instanceid, Integer supplyid, InstanceSupply data) throws ApiException {
        okhttp3.Call localVarCall = designInstanceSupplyUpdateValidateBeforeCall(designid, instanceid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<InstanceSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an instance supply
     * @param designid  (required)
     * @param instanceid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceSupplyUpdateAsync(Integer designid, Integer instanceid, Integer supplyid, InstanceSupply data, final ApiCallback<InstanceSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceSupplyUpdateValidateBeforeCall(designid, instanceid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<InstanceSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceUpdate
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceUpdateCall(Integer designid, Integer instanceid, Instance data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceUpdateValidateBeforeCall(Integer designid, Integer instanceid, Instance data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceUpdate(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designInstanceUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceUpdateCall(designid, instanceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @return Instance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Instance designInstanceUpdate(Integer designid, Integer instanceid, Instance data) throws ApiException {
        ApiResponse<Instance> localVarResp = designInstanceUpdateWithHttpInfo(designid, instanceid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Instance> designInstanceUpdateWithHttpInfo(Integer designid, Integer instanceid, Instance data) throws ApiException {
        okhttp3.Call localVarCall = designInstanceUpdateValidateBeforeCall(designid, instanceid, data, null);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update instance
     * @param designid  (required)
     * @param instanceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authoried </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceUpdateAsync(Integer designid, Integer instanceid, Instance data, final ApiCallback<Instance> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceUpdateValidateBeforeCall(designid, instanceid, data, _callback);
        Type localVarReturnType = new TypeToken<Instance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstanceUpdatemasterCreate
     * @param designid  (required)
     * @param instanceid  (required)
     * @param masterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceUpdatemasterCreateCall(Integer designid, Integer instanceid, Integer masterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instance/{instanceid}/updatemaster/{masterid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "instanceid" + "\\}", localVarApiClient.escapeString(instanceid.toString()))
            .replaceAll("\\{" + "masterid" + "\\}", localVarApiClient.escapeString(masterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstanceUpdatemasterCreateValidateBeforeCall(Integer designid, Integer instanceid, Integer masterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstanceUpdatemasterCreate(Async)");
        }
        
        // verify the required parameter 'instanceid' is set
        if (instanceid == null) {
            throw new ApiException("Missing the required parameter 'instanceid' when calling designInstanceUpdatemasterCreate(Async)");
        }
        
        // verify the required parameter 'masterid' is set
        if (masterid == null) {
            throw new ApiException("Missing the required parameter 'masterid' when calling designInstanceUpdatemasterCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designInstanceUpdatemasterCreateCall(designid, instanceid, masterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update instance master
     * @param designid  (required)
     * @param instanceid  (required)
     * @param masterid  (required)
     * @return List&lt;Instance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Instance> designInstanceUpdatemasterCreate(Integer designid, Integer instanceid, Integer masterid) throws ApiException {
        ApiResponse<List<Instance>> localVarResp = designInstanceUpdatemasterCreateWithHttpInfo(designid, instanceid, masterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Update instance master
     * @param designid  (required)
     * @param instanceid  (required)
     * @param masterid  (required)
     * @return ApiResponse&lt;List&lt;Instance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Instance>> designInstanceUpdatemasterCreateWithHttpInfo(Integer designid, Integer instanceid, Integer masterid) throws ApiException {
        okhttp3.Call localVarCall = designInstanceUpdatemasterCreateValidateBeforeCall(designid, instanceid, masterid, null);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update instance master
     * @param designid  (required)
     * @param instanceid  (required)
     * @param masterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstanceUpdatemasterCreateAsync(Integer designid, Integer instanceid, Integer masterid, final ApiCallback<List<Instance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstanceUpdatemasterCreateValidateBeforeCall(designid, instanceid, masterid, _callback);
        Type localVarReturnType = new TypeToken<List<Instance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designInstantiableList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstantiableListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/instantiable/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designInstantiableListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designInstantiableList(Async)");
        }
        

        okhttp3.Call localVarCall = designInstantiableListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of designs that can be instantiated in the given design
     * @param designid  (required)
     * @return List&lt;DesignMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignMaster> designInstantiableList(Integer designid) throws ApiException {
        ApiResponse<List<DesignMaster>> localVarResp = designInstantiableListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of designs that can be instantiated in the given design
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignMaster>> designInstantiableListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designInstantiableListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of designs that can be instantiated in the given design
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designInstantiableListAsync(Integer designid, final ApiCallback<List<DesignMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designInstantiableListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLatchCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchCreateCall(Integer designid, DesignLatch data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/latch/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLatchCreateValidateBeforeCall(Integer designid, DesignLatch data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLatchCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designLatchCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designLatchCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new latch
     * @param designid  (required)
     * @param data  (required)
     * @return DesignLatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignLatch designLatchCreate(Integer designid, DesignLatch data) throws ApiException {
        ApiResponse<DesignLatch> localVarResp = designLatchCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new latch
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignLatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignLatch> designLatchCreateWithHttpInfo(Integer designid, DesignLatch data) throws ApiException {
        okhttp3.Call localVarCall = designLatchCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignLatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new latch
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchCreateAsync(Integer designid, DesignLatch data, final ApiCallback<DesignLatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLatchCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignLatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLatchDelete
     * @param designid  (required)
     * @param latchid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchDeleteCall(Integer designid, Integer latchid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/latch/{latchid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "latchid" + "\\}", localVarApiClient.escapeString(latchid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLatchDeleteValidateBeforeCall(Integer designid, Integer latchid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLatchDelete(Async)");
        }
        
        // verify the required parameter 'latchid' is set
        if (latchid == null) {
            throw new ApiException("Missing the required parameter 'latchid' when calling designLatchDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designLatchDeleteCall(designid, latchid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designLatchDelete(Integer designid, Integer latchid) throws ApiException {
        designLatchDeleteWithHttpInfo(designid, latchid);
    }

    /**
     * 
     * Delete a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designLatchDeleteWithHttpInfo(Integer designid, Integer latchid) throws ApiException {
        okhttp3.Call localVarCall = designLatchDeleteValidateBeforeCall(designid, latchid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchDeleteAsync(Integer designid, Integer latchid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLatchDeleteValidateBeforeCall(designid, latchid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLatchList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/latch/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLatchListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLatchList(Async)");
        }
        

        okhttp3.Call localVarCall = designLatchListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of latches
     * @param designid  (required)
     * @return List&lt;DesignLatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignLatch> designLatchList(Integer designid) throws ApiException {
        ApiResponse<List<DesignLatch>> localVarResp = designLatchListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of latches
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignLatch&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignLatch>> designLatchListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designLatchListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignLatch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of latches
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchListAsync(Integer designid, final ApiCallback<List<DesignLatch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLatchListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignLatch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLatchRead
     * @param designid  (required)
     * @param latchid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchReadCall(Integer designid, Integer latchid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/latch/{latchid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "latchid" + "\\}", localVarApiClient.escapeString(latchid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLatchReadValidateBeforeCall(Integer designid, Integer latchid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLatchRead(Async)");
        }
        
        // verify the required parameter 'latchid' is set
        if (latchid == null) {
            throw new ApiException("Missing the required parameter 'latchid' when calling designLatchRead(Async)");
        }
        

        okhttp3.Call localVarCall = designLatchReadCall(designid, latchid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @return DesignLatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignLatch designLatchRead(Integer designid, Integer latchid) throws ApiException {
        ApiResponse<DesignLatch> localVarResp = designLatchReadWithHttpInfo(designid, latchid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @return ApiResponse&lt;DesignLatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignLatch> designLatchReadWithHttpInfo(Integer designid, Integer latchid) throws ApiException {
        okhttp3.Call localVarCall = designLatchReadValidateBeforeCall(designid, latchid, null);
        Type localVarReturnType = new TypeToken<DesignLatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchReadAsync(Integer designid, Integer latchid, final ApiCallback<DesignLatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLatchReadValidateBeforeCall(designid, latchid, _callback);
        Type localVarReturnType = new TypeToken<DesignLatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLatchUpdate
     * @param designid  (required)
     * @param latchid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchUpdateCall(Integer designid, Integer latchid, DesignLatch data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/latch/{latchid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "latchid" + "\\}", localVarApiClient.escapeString(latchid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLatchUpdateValidateBeforeCall(Integer designid, Integer latchid, DesignLatch data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLatchUpdate(Async)");
        }
        
        // verify the required parameter 'latchid' is set
        if (latchid == null) {
            throw new ApiException("Missing the required parameter 'latchid' when calling designLatchUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designLatchUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designLatchUpdateCall(designid, latchid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @param data  (required)
     * @return DesignLatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignLatch designLatchUpdate(Integer designid, Integer latchid, DesignLatch data) throws ApiException {
        ApiResponse<DesignLatch> localVarResp = designLatchUpdateWithHttpInfo(designid, latchid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignLatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignLatch> designLatchUpdateWithHttpInfo(Integer designid, Integer latchid, DesignLatch data) throws ApiException {
        okhttp3.Call localVarCall = designLatchUpdateValidateBeforeCall(designid, latchid, data, null);
        Type localVarReturnType = new TypeToken<DesignLatch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a latch
     * @param designid  (required)
     * @param latchid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLatchUpdateAsync(Integer designid, Integer latchid, DesignLatch data, final ApiCallback<DesignLatch> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLatchUpdateValidateBeforeCall(designid, latchid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignLatch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLeakagepowerCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerCreateCall(Integer designid, LeakagePower data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/leakagepower/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLeakagepowerCreateValidateBeforeCall(Integer designid, LeakagePower data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLeakagepowerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designLeakagepowerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designLeakagepowerCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new leakage power
     * @param designid  (required)
     * @param data  (required)
     * @return LeakagePower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LeakagePower designLeakagepowerCreate(Integer designid, LeakagePower data) throws ApiException {
        ApiResponse<LeakagePower> localVarResp = designLeakagepowerCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new leakage power
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;LeakagePower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeakagePower> designLeakagepowerCreateWithHttpInfo(Integer designid, LeakagePower data) throws ApiException {
        okhttp3.Call localVarCall = designLeakagepowerCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<LeakagePower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new leakage power
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerCreateAsync(Integer designid, LeakagePower data, final ApiCallback<LeakagePower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLeakagepowerCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<LeakagePower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLeakagepowerDelete
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerDeleteCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/leakagepower/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLeakagepowerDeleteValidateBeforeCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLeakagepowerDelete(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designLeakagepowerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designLeakagepowerDeleteCall(designid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designLeakagepowerDelete(Integer designid, Integer powerid) throws ApiException {
        designLeakagepowerDeleteWithHttpInfo(designid, powerid);
    }

    /**
     * 
     * Delete a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designLeakagepowerDeleteWithHttpInfo(Integer designid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designLeakagepowerDeleteValidateBeforeCall(designid, powerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerDeleteAsync(Integer designid, Integer powerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLeakagepowerDeleteValidateBeforeCall(designid, powerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLeakagepowerList
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerListCall(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/leakagepower/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process", process));
        }

        if (rc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc", rc));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (temperature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temperature", temperature));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLeakagepowerListValidateBeforeCall(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLeakagepowerList(Async)");
        }
        

        okhttp3.Call localVarCall = designLeakagepowerListCall(designid, page, number, process, rc, voltage, temperature, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of leakage powers
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return PagedLeakagePower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PagedLeakagePower designLeakagepowerList(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature) throws ApiException {
        ApiResponse<PagedLeakagePower> localVarResp = designLeakagepowerListWithHttpInfo(designid, page, number, process, rc, voltage, temperature);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of leakage powers
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return ApiResponse&lt;PagedLeakagePower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedLeakagePower> designLeakagepowerListWithHttpInfo(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature) throws ApiException {
        okhttp3.Call localVarCall = designLeakagepowerListValidateBeforeCall(designid, page, number, process, rc, voltage, temperature, null);
        Type localVarReturnType = new TypeToken<PagedLeakagePower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of leakage powers
     * @param designid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerListAsync(Integer designid, Integer page, Integer number, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback<PagedLeakagePower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLeakagepowerListValidateBeforeCall(designid, page, number, process, rc, voltage, temperature, _callback);
        Type localVarReturnType = new TypeToken<PagedLeakagePower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLeakagepowerRead
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerReadCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/leakagepower/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLeakagepowerReadValidateBeforeCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLeakagepowerRead(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designLeakagepowerRead(Async)");
        }
        

        okhttp3.Call localVarCall = designLeakagepowerReadCall(designid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @return LeakagePower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LeakagePower designLeakagepowerRead(Integer designid, Integer powerid) throws ApiException {
        ApiResponse<LeakagePower> localVarResp = designLeakagepowerReadWithHttpInfo(designid, powerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;LeakagePower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeakagePower> designLeakagepowerReadWithHttpInfo(Integer designid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designLeakagepowerReadValidateBeforeCall(designid, powerid, null);
        Type localVarReturnType = new TypeToken<LeakagePower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerReadAsync(Integer designid, Integer powerid, final ApiCallback<LeakagePower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLeakagepowerReadValidateBeforeCall(designid, powerid, _callback);
        Type localVarReturnType = new TypeToken<LeakagePower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designLeakagepowerUpdate
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerUpdateCall(Integer designid, Integer powerid, LeakagePower data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/leakagepower/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designLeakagepowerUpdateValidateBeforeCall(Integer designid, Integer powerid, LeakagePower data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designLeakagepowerUpdate(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designLeakagepowerUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designLeakagepowerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designLeakagepowerUpdateCall(designid, powerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return LeakagePower
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LeakagePower designLeakagepowerUpdate(Integer designid, Integer powerid, LeakagePower data) throws ApiException {
        ApiResponse<LeakagePower> localVarResp = designLeakagepowerUpdateWithHttpInfo(designid, powerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;LeakagePower&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeakagePower> designLeakagepowerUpdateWithHttpInfo(Integer designid, Integer powerid, LeakagePower data) throws ApiException {
        okhttp3.Call localVarCall = designLeakagepowerUpdateValidateBeforeCall(designid, powerid, data, null);
        Type localVarReturnType = new TypeToken<LeakagePower>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a parameter
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designLeakagepowerUpdateAsync(Integer designid, Integer powerid, LeakagePower data, final ApiCallback<LeakagePower> _callback) throws ApiException {

        okhttp3.Call localVarCall = designLeakagepowerUpdateValidateBeforeCall(designid, powerid, data, _callback);
        Type localVarReturnType = new TypeToken<LeakagePower>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeClone
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeCloneCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeCloneValidateBeforeCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeClone(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeClone(Async)");
        }
        

        okhttp3.Call localVarCall = designModeCloneCall(designid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @return Mode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Mode designModeClone(Integer designid, Integer modeid) throws ApiException {
        ApiResponse<Mode> localVarResp = designModeCloneWithHttpInfo(designid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mode> designModeCloneWithHttpInfo(Integer designid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designModeCloneValidateBeforeCall(designid, modeid, null);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeCloneAsync(Integer designid, Integer modeid, final ApiCallback<Mode> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeCloneValidateBeforeCall(designid, modeid, _callback);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeCreateCall(Integer designid, Mode data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeCreateValidateBeforeCall(Integer designid, Mode data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designModeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designModeCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new mode
     * @param designid  (required)
     * @param data  (required)
     * @return Mode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Mode designModeCreate(Integer designid, Mode data) throws ApiException {
        ApiResponse<Mode> localVarResp = designModeCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new mode
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mode> designModeCreateWithHttpInfo(Integer designid, Mode data) throws ApiException {
        okhttp3.Call localVarCall = designModeCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new mode
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeCreateAsync(Integer designid, Mode data, final ApiCallback<Mode> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeDelete
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeDeleteCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeDeleteValidateBeforeCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeDelete(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designModeDeleteCall(designid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designModeDelete(Integer designid, Integer modeid) throws ApiException {
        designModeDeleteWithHttpInfo(designid, modeid);
    }

    /**
     * 
     * Delete a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designModeDeleteWithHttpInfo(Integer designid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designModeDeleteValidateBeforeCall(designid, modeid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeDeleteAsync(Integer designid, Integer modeid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeDeleteValidateBeforeCall(designid, modeid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeList(Async)");
        }
        

        okhttp3.Call localVarCall = designModeListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of design modes
     * @param designid  (required)
     * @return List&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Mode> designModeList(Integer designid) throws ApiException {
        ApiResponse<List<Mode>> localVarResp = designModeListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of design modes
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;Mode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Mode>> designModeListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designModeListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of design modes
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeListAsync(Integer designid, final ApiCallback<List<Mode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<Mode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModePowerList
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModePowerListCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/power/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModePowerListValidateBeforeCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModePowerList(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModePowerList(Async)");
        }
        

        okhttp3.Call localVarCall = designModePowerListCall(designid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designModePowerList(Integer designid, Integer modeid) throws ApiException {
        designModePowerListWithHttpInfo(designid, modeid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designModePowerListWithHttpInfo(Integer designid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designModePowerListValidateBeforeCall(designid, modeid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModePowerListAsync(Integer designid, Integer modeid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModePowerListValidateBeforeCall(designid, modeid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModePowerdistributionList
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModePowerdistributionListCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/powerdistribution/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModePowerdistributionListValidateBeforeCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModePowerdistributionList(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModePowerdistributionList(Async)");
        }
        

        okhttp3.Call localVarCall = designModePowerdistributionListCall(designid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designModePowerdistributionList(Integer designid, Integer modeid) throws ApiException {
        designModePowerdistributionListWithHttpInfo(designid, modeid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designModePowerdistributionListWithHttpInfo(Integer designid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designModePowerdistributionListValidateBeforeCall(designid, modeid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModePowerdistributionListAsync(Integer designid, Integer modeid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModePowerdistributionListValidateBeforeCall(designid, modeid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeRead
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeReadCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeReadValidateBeforeCall(Integer designid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeRead(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeRead(Async)");
        }
        

        okhttp3.Call localVarCall = designModeReadCall(designid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @return Mode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Mode designModeRead(Integer designid, Integer modeid) throws ApiException {
        ApiResponse<Mode> localVarResp = designModeReadWithHttpInfo(designid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mode> designModeReadWithHttpInfo(Integer designid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designModeReadValidateBeforeCall(designid, modeid, null);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeReadAsync(Integer designid, Integer modeid, final ApiCallback<Mode> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeReadValidateBeforeCall(designid, modeid, _callback);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeSupplyComputepowerCreate
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplyComputepowerCreateCall(Integer designid, Integer modeid, Integer supplyid, ComputePower1 data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/supply/{supplyid}/computepower/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeSupplyComputepowerCreateValidateBeforeCall(Integer designid, Integer modeid, Integer supplyid, ComputePower1 data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeSupplyComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeSupplyComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designModeSupplyComputepowerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designModeSupplyComputepowerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designModeSupplyComputepowerCreateCall(designid, modeid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public void designModeSupplyComputepowerCreate(Integer designid, Integer modeid, Integer supplyid, ComputePower1 data) throws ApiException {
        designModeSupplyComputepowerCreateWithHttpInfo(designid, modeid, supplyid, data);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designModeSupplyComputepowerCreateWithHttpInfo(Integer designid, Integer modeid, Integer supplyid, ComputePower1 data) throws ApiException {
        okhttp3.Call localVarCall = designModeSupplyComputepowerCreateValidateBeforeCall(designid, modeid, supplyid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplyComputepowerCreateAsync(Integer designid, Integer modeid, Integer supplyid, ComputePower1 data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeSupplyComputepowerCreateValidateBeforeCall(designid, modeid, supplyid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeSupplyComputepowertableCreate
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplyComputepowertableCreateCall(Integer designid, Integer modeid, Integer supplyid, ComputePower2 data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/supply/{supplyid}/computepowertable/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeSupplyComputepowertableCreateValidateBeforeCall(Integer designid, Integer modeid, Integer supplyid, ComputePower2 data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeSupplyComputepowertableCreate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeSupplyComputepowertableCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designModeSupplyComputepowertableCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designModeSupplyComputepowertableCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designModeSupplyComputepowertableCreateCall(designid, modeid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public void designModeSupplyComputepowertableCreate(Integer designid, Integer modeid, Integer supplyid, ComputePower2 data) throws ApiException {
        designModeSupplyComputepowertableCreateWithHttpInfo(designid, modeid, supplyid, data);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designModeSupplyComputepowertableCreateWithHttpInfo(Integer designid, Integer modeid, Integer supplyid, ComputePower2 data) throws ApiException {
        okhttp3.Call localVarCall = designModeSupplyComputepowertableCreateValidateBeforeCall(designid, modeid, supplyid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param modeid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Computed value(s) returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error. Message returned </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplyComputepowertableCreateAsync(Integer designid, Integer modeid, Integer supplyid, ComputePower2 data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeSupplyComputepowertableCreateValidateBeforeCall(designid, modeid, supplyid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeSupplystateList
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplystateListCall(Integer designid, Integer supplyid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/supplystate/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeSupplystateListValidateBeforeCall(Integer designid, Integer supplyid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeSupplystateList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designModeSupplystateList(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeSupplystateList(Async)");
        }
        

        okhttp3.Call localVarCall = designModeSupplystateListCall(designid, supplyid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @return SupplyModeState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyModeState designModeSupplystateList(Integer designid, Integer supplyid, Integer modeid) throws ApiException {
        ApiResponse<SupplyModeState> localVarResp = designModeSupplystateListWithHttpInfo(designid, supplyid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;SupplyModeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyModeState> designModeSupplystateListWithHttpInfo(Integer designid, Integer supplyid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designModeSupplystateListValidateBeforeCall(designid, supplyid, modeid, null);
        Type localVarReturnType = new TypeToken<SupplyModeState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplystateListAsync(Integer designid, Integer supplyid, Integer modeid, final ApiCallback<SupplyModeState> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeSupplystateListValidateBeforeCall(designid, supplyid, modeid, _callback);
        Type localVarReturnType = new TypeToken<SupplyModeState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeSupplystateUpdate
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplystateUpdateCall(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/supplystate/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeSupplystateUpdateValidateBeforeCall(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeSupplystateUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designModeSupplystateUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeSupplystateUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designModeSupplystateUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designModeSupplystateUpdateCall(designid, supplyid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return List&lt;SupplyModeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyModeState> designModeSupplystateUpdate(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data) throws ApiException {
        ApiResponse<List<SupplyModeState>> localVarResp = designModeSupplystateUpdateWithHttpInfo(designid, supplyid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;SupplyModeState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyModeState>> designModeSupplystateUpdateWithHttpInfo(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data) throws ApiException {
        okhttp3.Call localVarCall = designModeSupplystateUpdateValidateBeforeCall(designid, supplyid, modeid, data, null);
        Type localVarReturnType = new TypeToken<List<SupplyModeState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeSupplystateUpdateAsync(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback<List<SupplyModeState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeSupplystateUpdateValidateBeforeCall(designid, supplyid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyModeState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designModeUpdate
     * @param designid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeUpdateCall(Integer designid, Integer modeid, Mode data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/mode/{modeid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designModeUpdateValidateBeforeCall(Integer designid, Integer modeid, Mode data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designModeUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designModeUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designModeUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designModeUpdateCall(designid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return Mode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Mode designModeUpdate(Integer designid, Integer modeid, Mode data) throws ApiException {
        ApiResponse<Mode> localVarResp = designModeUpdateWithHttpInfo(designid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Mode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mode> designModeUpdateWithHttpInfo(Integer designid, Integer modeid, Mode data) throws ApiException {
        okhttp3.Call localVarCall = designModeUpdateValidateBeforeCall(designid, modeid, data, null);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a design mode
     * @param designid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designModeUpdateAsync(Integer designid, Integer modeid, Mode data, final ApiCallback<Mode> _callback) throws ApiException {

        okhttp3.Call localVarCall = designModeUpdateValidateBeforeCall(designid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<Mode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designParameterClone
     * @param designid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterCloneCall(Integer designid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/{paramid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designParameterCloneValidateBeforeCall(Integer designid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designParameterClone(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designParameterClone(Async)");
        }
        

        okhttp3.Call localVarCall = designParameterCloneCall(designid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clode a mode param
     * @param designid  (required)
     * @param paramid  (required)
     * @return Param
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Param designParameterClone(Integer designid, Integer paramid) throws ApiException {
        ApiResponse<Param> localVarResp = designParameterCloneWithHttpInfo(designid, paramid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clode a mode param
     * @param designid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;Param&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Param> designParameterCloneWithHttpInfo(Integer designid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = designParameterCloneValidateBeforeCall(designid, paramid, null);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clode a mode param
     * @param designid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterCloneAsync(Integer designid, Integer paramid, final ApiCallback<Param> _callback) throws ApiException {

        okhttp3.Call localVarCall = designParameterCloneValidateBeforeCall(designid, paramid, _callback);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designParameterCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterCreateCall(Integer designid, Param data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designParameterCreateValidateBeforeCall(Integer designid, Param data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designParameterCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designParameterCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designParameterCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new parameter
     * @param designid  (required)
     * @param data  (required)
     * @return Param
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Param designParameterCreate(Integer designid, Param data) throws ApiException {
        ApiResponse<Param> localVarResp = designParameterCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new parameter
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Param&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Param> designParameterCreateWithHttpInfo(Integer designid, Param data) throws ApiException {
        okhttp3.Call localVarCall = designParameterCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new parameter
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterCreateAsync(Integer designid, Param data, final ApiCallback<Param> _callback) throws ApiException {

        okhttp3.Call localVarCall = designParameterCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designParameterDelete
     * @param designid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterDeleteCall(Integer designid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/{paramid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designParameterDeleteValidateBeforeCall(Integer designid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designParameterDelete(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designParameterDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designParameterDeleteCall(designid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designParameterDelete(Integer designid, Integer paramid) throws ApiException {
        designParameterDeleteWithHttpInfo(designid, paramid);
    }

    /**
     * 
     * Delete a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designParameterDeleteWithHttpInfo(Integer designid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = designParameterDeleteValidateBeforeCall(designid, paramid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterDeleteAsync(Integer designid, Integer paramid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designParameterDeleteValidateBeforeCall(designid, paramid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designParameterList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designParameterListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designParameterList(Async)");
        }
        

        okhttp3.Call localVarCall = designParameterListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of params
     * @param designid  (required)
     * @return List&lt;Param&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Param> designParameterList(Integer designid) throws ApiException {
        ApiResponse<List<Param>> localVarResp = designParameterListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of params
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;Param&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Param>> designParameterListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designParameterListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<Param>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of params
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterListAsync(Integer designid, final ApiCallback<List<Param>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designParameterListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<Param>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designParameterRead
     * @param designid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterReadCall(Integer designid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/{paramid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designParameterReadValidateBeforeCall(Integer designid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designParameterRead(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designParameterRead(Async)");
        }
        

        okhttp3.Call localVarCall = designParameterReadCall(designid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @return Param
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Param designParameterRead(Integer designid, Integer paramid) throws ApiException {
        ApiResponse<Param> localVarResp = designParameterReadWithHttpInfo(designid, paramid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;Param&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Param> designParameterReadWithHttpInfo(Integer designid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = designParameterReadValidateBeforeCall(designid, paramid, null);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterReadAsync(Integer designid, Integer paramid, final ApiCallback<Param> _callback) throws ApiException {

        okhttp3.Call localVarCall = designParameterReadValidateBeforeCall(designid, paramid, _callback);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designParameterUpdate
     * @param designid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterUpdateCall(Integer designid, Integer paramid, Param data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/parameter/{paramid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designParameterUpdateValidateBeforeCall(Integer designid, Integer paramid, Param data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designParameterUpdate(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designParameterUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designParameterUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designParameterUpdateCall(designid, paramid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @return Param
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Param designParameterUpdate(Integer designid, Integer paramid, Param data) throws ApiException {
        ApiResponse<Param> localVarResp = designParameterUpdateWithHttpInfo(designid, paramid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Param&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Param> designParameterUpdateWithHttpInfo(Integer designid, Integer paramid, Param data) throws ApiException {
        okhttp3.Call localVarCall = designParameterUpdateValidateBeforeCall(designid, paramid, data, null);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a parameter
     * @param designid  (required)
     * @param paramid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designParameterUpdateAsync(Integer designid, Integer paramid, Param data, final ApiCallback<Param> _callback) throws ApiException {

        okhttp3.Call localVarCall = designParameterUpdateValidateBeforeCall(designid, paramid, data, _callback);
        Type localVarReturnType = new TypeToken<Param>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPermissionsList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPermissionsListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/permissions/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPermissionsListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = designPermissionsListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designPermissionsList(Integer designid) throws ApiException {
        designPermissionsListWithHttpInfo(designid);
    }

    /**
     * 
     * Get list of permissions
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designPermissionsListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designPermissionsListValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPermissionsListAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPermissionsListValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPermissionsUpdate
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPermissionsUpdateCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/permissions/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPermissionsUpdateValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designPermissionsUpdateCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designPermissionsUpdate(Integer designid) throws ApiException {
        designPermissionsUpdateWithHttpInfo(designid);
    }

    /**
     * 
     * Get list of permissions
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designPermissionsUpdateWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designPermissionsUpdateValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPermissionsUpdateAsync(Integer designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPermissionsUpdateValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinCapsCreate
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsCreateCall(Integer designid, Integer pinid, PinCap data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/caps/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinCapsCreateValidateBeforeCall(Integer designid, Integer pinid, PinCap data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinCapsCreate(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinCapsCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPinCapsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designPinCapsCreateCall(designid, pinid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @return PinCap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PinCap designPinCapsCreate(Integer designid, Integer pinid, PinCap data) throws ApiException {
        ApiResponse<PinCap> localVarResp = designPinCapsCreateWithHttpInfo(designid, pinid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PinCap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PinCap> designPinCapsCreateWithHttpInfo(Integer designid, Integer pinid, PinCap data) throws ApiException {
        okhttp3.Call localVarCall = designPinCapsCreateValidateBeforeCall(designid, pinid, data, null);
        Type localVarReturnType = new TypeToken<PinCap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsCreateAsync(Integer designid, Integer pinid, PinCap data, final ApiCallback<PinCap> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinCapsCreateValidateBeforeCall(designid, pinid, data, _callback);
        Type localVarReturnType = new TypeToken<PinCap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinCapsDelete
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsDeleteCall(Integer designid, Integer pinid, Integer capid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/caps/{capid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()))
            .replaceAll("\\{" + "capid" + "\\}", localVarApiClient.escapeString(capid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinCapsDeleteValidateBeforeCall(Integer designid, Integer pinid, Integer capid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinCapsDelete(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinCapsDelete(Async)");
        }
        
        // verify the required parameter 'capid' is set
        if (capid == null) {
            throw new ApiException("Missing the required parameter 'capid' when calling designPinCapsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designPinCapsDeleteCall(designid, pinid, capid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designPinCapsDelete(Integer designid, Integer pinid, Integer capid) throws ApiException {
        designPinCapsDeleteWithHttpInfo(designid, pinid, capid);
    }

    /**
     * 
     * Delete a pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designPinCapsDeleteWithHttpInfo(Integer designid, Integer pinid, Integer capid) throws ApiException {
        okhttp3.Call localVarCall = designPinCapsDeleteValidateBeforeCall(designid, pinid, capid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsDeleteAsync(Integer designid, Integer pinid, Integer capid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinCapsDeleteValidateBeforeCall(designid, pinid, capid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinCapsList
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsListCall(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, BigDecimal temperature, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/caps/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process", process));
        }

        if (rc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc", rc));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (temperature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temperature", temperature));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinCapsListValidateBeforeCall(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, BigDecimal temperature, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinCapsList(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinCapsList(Async)");
        }
        

        okhttp3.Call localVarCall = designPinCapsListCall(designid, pinid, process, rc, voltage, temperature, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of pin caps
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return List&lt;PinCap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public List<PinCap> designPinCapsList(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, BigDecimal temperature) throws ApiException {
        ApiResponse<List<PinCap>> localVarResp = designPinCapsListWithHttpInfo(designid, pinid, process, rc, voltage, temperature);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of pin caps
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return ApiResponse&lt;List&lt;PinCap&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PinCap>> designPinCapsListWithHttpInfo(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, BigDecimal temperature) throws ApiException {
        okhttp3.Call localVarCall = designPinCapsListValidateBeforeCall(designid, pinid, process, rc, voltage, temperature, null);
        Type localVarReturnType = new TypeToken<List<PinCap>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of pin caps
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsListAsync(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, BigDecimal temperature, final ApiCallback<List<PinCap>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinCapsListValidateBeforeCall(designid, pinid, process, rc, voltage, temperature, _callback);
        Type localVarReturnType = new TypeToken<List<PinCap>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinCapsRead
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsReadCall(Integer designid, Integer pinid, Integer capid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/caps/{capid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()))
            .replaceAll("\\{" + "capid" + "\\}", localVarApiClient.escapeString(capid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinCapsReadValidateBeforeCall(Integer designid, Integer pinid, Integer capid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinCapsRead(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinCapsRead(Async)");
        }
        
        // verify the required parameter 'capid' is set
        if (capid == null) {
            throw new ApiException("Missing the required parameter 'capid' when calling designPinCapsRead(Async)");
        }
        

        okhttp3.Call localVarCall = designPinCapsReadCall(designid, pinid, capid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @return PinCap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PinCap designPinCapsRead(Integer designid, Integer pinid, Integer capid) throws ApiException {
        ApiResponse<PinCap> localVarResp = designPinCapsReadWithHttpInfo(designid, pinid, capid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @return ApiResponse&lt;PinCap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PinCap> designPinCapsReadWithHttpInfo(Integer designid, Integer pinid, Integer capid) throws ApiException {
        okhttp3.Call localVarCall = designPinCapsReadValidateBeforeCall(designid, pinid, capid, null);
        Type localVarReturnType = new TypeToken<PinCap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a pin cap
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsReadAsync(Integer designid, Integer pinid, Integer capid, final ApiCallback<PinCap> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinCapsReadValidateBeforeCall(designid, pinid, capid, _callback);
        Type localVarReturnType = new TypeToken<PinCap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinCapsUpdate
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsUpdateCall(Integer designid, Integer pinid, Integer capid, PinCap data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/caps/{capid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()))
            .replaceAll("\\{" + "capid" + "\\}", localVarApiClient.escapeString(capid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinCapsUpdateValidateBeforeCall(Integer designid, Integer pinid, Integer capid, PinCap data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinCapsUpdate(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinCapsUpdate(Async)");
        }
        
        // verify the required parameter 'capid' is set
        if (capid == null) {
            throw new ApiException("Missing the required parameter 'capid' when calling designPinCapsUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPinCapsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designPinCapsUpdateCall(designid, pinid, capid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param data  (required)
     * @return PinCap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PinCap designPinCapsUpdate(Integer designid, Integer pinid, Integer capid, PinCap data) throws ApiException {
        ApiResponse<PinCap> localVarResp = designPinCapsUpdateWithHttpInfo(designid, pinid, capid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PinCap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PinCap> designPinCapsUpdateWithHttpInfo(Integer designid, Integer pinid, Integer capid, PinCap data) throws ApiException {
        okhttp3.Call localVarCall = designPinCapsUpdateValidateBeforeCall(designid, pinid, capid, data, null);
        Type localVarReturnType = new TypeToken<PinCap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param capid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCapsUpdateAsync(Integer designid, Integer pinid, Integer capid, PinCap data, final ApiCallback<PinCap> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinCapsUpdateValidateBeforeCall(designid, pinid, capid, data, _callback);
        Type localVarReturnType = new TypeToken<PinCap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCreateCall(Integer designid, DesignPin data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinCreateValidateBeforeCall(Integer designid, DesignPin data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPinCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designPinCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new pin
     * @param designid  (required)
     * @param data  (required)
     * @return DesignPin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignPin designPinCreate(Integer designid, DesignPin data) throws ApiException {
        ApiResponse<DesignPin> localVarResp = designPinCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new pin
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignPin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignPin> designPinCreateWithHttpInfo(Integer designid, DesignPin data) throws ApiException {
        okhttp3.Call localVarCall = designPinCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignPin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new pin
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinCreateAsync(Integer designid, DesignPin data, final ApiCallback<DesignPin> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignPin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinDelete
     * @param designid  (required)
     * @param pinid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinDeleteCall(Integer designid, Integer pinid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinDeleteValidateBeforeCall(Integer designid, Integer pinid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinDelete(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designPinDeleteCall(designid, pinid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designPinDelete(Integer designid, Integer pinid) throws ApiException {
        designPinDeleteWithHttpInfo(designid, pinid);
    }

    /**
     * 
     * Delete a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designPinDeleteWithHttpInfo(Integer designid, Integer pinid) throws ApiException {
        okhttp3.Call localVarCall = designPinDeleteValidateBeforeCall(designid, pinid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinDeleteAsync(Integer designid, Integer pinid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinDeleteValidateBeforeCall(designid, pinid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinEnergyCreate
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyCreateCall(Integer designid, Integer pinid, PinEnergy data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/energy/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinEnergyCreateValidateBeforeCall(Integer designid, Integer pinid, PinEnergy data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinEnergyCreate(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinEnergyCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPinEnergyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designPinEnergyCreateCall(designid, pinid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @return PinEnergy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PinEnergy designPinEnergyCreate(Integer designid, Integer pinid, PinEnergy data) throws ApiException {
        ApiResponse<PinEnergy> localVarResp = designPinEnergyCreateWithHttpInfo(designid, pinid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PinEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PinEnergy> designPinEnergyCreateWithHttpInfo(Integer designid, Integer pinid, PinEnergy data) throws ApiException {
        okhttp3.Call localVarCall = designPinEnergyCreateValidateBeforeCall(designid, pinid, data, null);
        Type localVarReturnType = new TypeToken<PinEnergy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyCreateAsync(Integer designid, Integer pinid, PinEnergy data, final ApiCallback<PinEnergy> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinEnergyCreateValidateBeforeCall(designid, pinid, data, _callback);
        Type localVarReturnType = new TypeToken<PinEnergy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinEnergyDelete
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyDeleteCall(Integer designid, Integer pinid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/energy/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinEnergyDeleteValidateBeforeCall(Integer designid, Integer pinid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinEnergyDelete(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinEnergyDelete(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designPinEnergyDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designPinEnergyDeleteCall(designid, pinid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designPinEnergyDelete(Integer designid, Integer pinid, Integer powerid) throws ApiException {
        designPinEnergyDeleteWithHttpInfo(designid, pinid, powerid);
    }

    /**
     * 
     * Delete a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designPinEnergyDeleteWithHttpInfo(Integer designid, Integer pinid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designPinEnergyDeleteValidateBeforeCall(designid, pinid, powerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyDeleteAsync(Integer designid, Integer pinid, Integer powerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinEnergyDeleteValidateBeforeCall(designid, pinid, powerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinEnergyList
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyListCall(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/energy/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (process != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("process", process));
        }

        if (rc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rc", rc));
        }

        if (voltage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("voltage", voltage));
        }

        if (temperature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temperature", temperature));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinEnergyListValidateBeforeCall(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinEnergyList(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinEnergyList(Async)");
        }
        

        okhttp3.Call localVarCall = designPinEnergyListCall(designid, pinid, process, rc, voltage, temperature, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of pin powers
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return List&lt;PinEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public List<PinEnergy> designPinEnergyList(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, Integer temperature) throws ApiException {
        ApiResponse<List<PinEnergy>> localVarResp = designPinEnergyListWithHttpInfo(designid, pinid, process, rc, voltage, temperature);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of pin powers
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @return ApiResponse&lt;List&lt;PinEnergy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PinEnergy>> designPinEnergyListWithHttpInfo(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, Integer temperature) throws ApiException {
        okhttp3.Call localVarCall = designPinEnergyListValidateBeforeCall(designid, pinid, process, rc, voltage, temperature, null);
        Type localVarReturnType = new TypeToken<List<PinEnergy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of pin powers
     * @param designid  (required)
     * @param pinid  (required)
     * @param process Model corner name (optional)
     * @param rc RC corner name (optional)
     * @param voltage Voltage (optional)
     * @param temperature Temperature (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyListAsync(Integer designid, Integer pinid, String process, String rc, BigDecimal voltage, Integer temperature, final ApiCallback<List<PinEnergy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinEnergyListValidateBeforeCall(designid, pinid, process, rc, voltage, temperature, _callback);
        Type localVarReturnType = new TypeToken<List<PinEnergy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinEnergyRead
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyReadCall(Integer designid, Integer pinid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/energy/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinEnergyReadValidateBeforeCall(Integer designid, Integer pinid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinEnergyRead(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinEnergyRead(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designPinEnergyRead(Async)");
        }
        

        okhttp3.Call localVarCall = designPinEnergyReadCall(designid, pinid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @return PinEnergy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PinEnergy designPinEnergyRead(Integer designid, Integer pinid, Integer powerid) throws ApiException {
        ApiResponse<PinEnergy> localVarResp = designPinEnergyReadWithHttpInfo(designid, pinid, powerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;PinEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PinEnergy> designPinEnergyReadWithHttpInfo(Integer designid, Integer pinid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designPinEnergyReadValidateBeforeCall(designid, pinid, powerid, null);
        Type localVarReturnType = new TypeToken<PinEnergy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyReadAsync(Integer designid, Integer pinid, Integer powerid, final ApiCallback<PinEnergy> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinEnergyReadValidateBeforeCall(designid, pinid, powerid, _callback);
        Type localVarReturnType = new TypeToken<PinEnergy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinEnergyUpdate
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyUpdateCall(Integer designid, Integer pinid, Integer powerid, PinEnergy data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/energy/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinEnergyUpdateValidateBeforeCall(Integer designid, Integer pinid, Integer powerid, PinEnergy data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinEnergyUpdate(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinEnergyUpdate(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designPinEnergyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPinEnergyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designPinEnergyUpdateCall(designid, pinid, powerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return PinEnergy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PinEnergy designPinEnergyUpdate(Integer designid, Integer pinid, Integer powerid, PinEnergy data) throws ApiException {
        ApiResponse<PinEnergy> localVarResp = designPinEnergyUpdateWithHttpInfo(designid, pinid, powerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PinEnergy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PinEnergy> designPinEnergyUpdateWithHttpInfo(Integer designid, Integer pinid, Integer powerid, PinEnergy data) throws ApiException {
        okhttp3.Call localVarCall = designPinEnergyUpdateValidateBeforeCall(designid, pinid, powerid, data, null);
        Type localVarReturnType = new TypeToken<PinEnergy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a pin power
     * @param designid  (required)
     * @param pinid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinEnergyUpdateAsync(Integer designid, Integer pinid, Integer powerid, PinEnergy data, final ApiCallback<PinEnergy> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinEnergyUpdateValidateBeforeCall(designid, pinid, powerid, data, _callback);
        Type localVarReturnType = new TypeToken<PinEnergy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinList(Async)");
        }
        

        okhttp3.Call localVarCall = designPinListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of pins
     * @param designid  (required)
     * @return List&lt;DesignPin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignPin> designPinList(Integer designid) throws ApiException {
        ApiResponse<List<DesignPin>> localVarResp = designPinListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of pins
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignPin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignPin>> designPinListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designPinListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignPin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of pins
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinListAsync(Integer designid, final ApiCallback<List<DesignPin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignPin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinRead
     * @param designid  (required)
     * @param pinid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinReadCall(Integer designid, Integer pinid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinReadValidateBeforeCall(Integer designid, Integer pinid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinRead(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinRead(Async)");
        }
        

        okhttp3.Call localVarCall = designPinReadCall(designid, pinid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @return DesignPin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignPin designPinRead(Integer designid, Integer pinid) throws ApiException {
        ApiResponse<DesignPin> localVarResp = designPinReadWithHttpInfo(designid, pinid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @return ApiResponse&lt;DesignPin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignPin> designPinReadWithHttpInfo(Integer designid, Integer pinid) throws ApiException {
        okhttp3.Call localVarCall = designPinReadValidateBeforeCall(designid, pinid, null);
        Type localVarReturnType = new TypeToken<DesignPin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinReadAsync(Integer designid, Integer pinid, final ApiCallback<DesignPin> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinReadValidateBeforeCall(designid, pinid, _callback);
        Type localVarReturnType = new TypeToken<DesignPin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPinUpdate
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinUpdateCall(Integer designid, Integer pinid, DesignPin data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/pin/{pinid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "pinid" + "\\}", localVarApiClient.escapeString(pinid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPinUpdateValidateBeforeCall(Integer designid, Integer pinid, DesignPin data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPinUpdate(Async)");
        }
        
        // verify the required parameter 'pinid' is set
        if (pinid == null) {
            throw new ApiException("Missing the required parameter 'pinid' when calling designPinUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPinUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designPinUpdateCall(designid, pinid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @return DesignPin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignPin designPinUpdate(Integer designid, Integer pinid, DesignPin data) throws ApiException {
        ApiResponse<DesignPin> localVarResp = designPinUpdateWithHttpInfo(designid, pinid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignPin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignPin> designPinUpdateWithHttpInfo(Integer designid, Integer pinid, DesignPin data) throws ApiException {
        okhttp3.Call localVarCall = designPinUpdateValidateBeforeCall(designid, pinid, data, null);
        Type localVarReturnType = new TypeToken<DesignPin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a pin
     * @param designid  (required)
     * @param pinid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPinUpdateAsync(Integer designid, Integer pinid, DesignPin data, final ApiCallback<DesignPin> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPinUpdateValidateBeforeCall(designid, pinid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignPin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPowerCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerCreateCall(Integer designid, Power data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/power/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPowerCreateValidateBeforeCall(Integer designid, Power data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPowerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPowerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designPowerCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a power
     * @param designid  (required)
     * @param data  (required)
     * @return Power
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Power designPowerCreate(Integer designid, Power data) throws ApiException {
        ApiResponse<Power> localVarResp = designPowerCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a power
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Power&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Power> designPowerCreateWithHttpInfo(Integer designid, Power data) throws ApiException {
        okhttp3.Call localVarCall = designPowerCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Power>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a power
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerCreateAsync(Integer designid, Power data, final ApiCallback<Power> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPowerCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Power>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPowerDelete
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerDeleteCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/power/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPowerDeleteValidateBeforeCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPowerDelete(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designPowerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designPowerDeleteCall(designid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a power
     * @param designid  (required)
     * @param powerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designPowerDelete(Integer designid, Integer powerid) throws ApiException {
        designPowerDeleteWithHttpInfo(designid, powerid);
    }

    /**
     * 
     * Delete a power
     * @param designid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designPowerDeleteWithHttpInfo(Integer designid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designPowerDeleteValidateBeforeCall(designid, powerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a power
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerDeleteAsync(Integer designid, Integer powerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPowerDeleteValidateBeforeCall(designid, powerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPowerList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/power/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPowerListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPowerList(Async)");
        }
        

        okhttp3.Call localVarCall = designPowerListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of powers
     * @param designid  (required)
     * @return List&lt;Power&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Power> designPowerList(Integer designid) throws ApiException {
        ApiResponse<List<Power>> localVarResp = designPowerListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of powers
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;Power&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Power>> designPowerListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designPowerListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<Power>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of powers
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerListAsync(Integer designid, final ApiCallback<List<Power>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPowerListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<Power>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPowerRead
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerReadCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/power/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPowerReadValidateBeforeCall(Integer designid, Integer powerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPowerRead(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designPowerRead(Async)");
        }
        

        okhttp3.Call localVarCall = designPowerReadCall(designid, powerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a power
     * @param designid  (required)
     * @param powerid  (required)
     * @return Power
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Power designPowerRead(Integer designid, Integer powerid) throws ApiException {
        ApiResponse<Power> localVarResp = designPowerReadWithHttpInfo(designid, powerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a power
     * @param designid  (required)
     * @param powerid  (required)
     * @return ApiResponse&lt;Power&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Power> designPowerReadWithHttpInfo(Integer designid, Integer powerid) throws ApiException {
        okhttp3.Call localVarCall = designPowerReadValidateBeforeCall(designid, powerid, null);
        Type localVarReturnType = new TypeToken<Power>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a power
     * @param designid  (required)
     * @param powerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerReadAsync(Integer designid, Integer powerid, final ApiCallback<Power> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPowerReadValidateBeforeCall(designid, powerid, _callback);
        Type localVarReturnType = new TypeToken<Power>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designPowerUpdate
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerUpdateCall(Integer designid, Integer powerid, Power data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/power/{powerid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "powerid" + "\\}", localVarApiClient.escapeString(powerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designPowerUpdateValidateBeforeCall(Integer designid, Integer powerid, Power data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designPowerUpdate(Async)");
        }
        
        // verify the required parameter 'powerid' is set
        if (powerid == null) {
            throw new ApiException("Missing the required parameter 'powerid' when calling designPowerUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designPowerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designPowerUpdateCall(designid, powerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a power
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return Power
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Power designPowerUpdate(Integer designid, Integer powerid, Power data) throws ApiException {
        ApiResponse<Power> localVarResp = designPowerUpdateWithHttpInfo(designid, powerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a power
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Power&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Power> designPowerUpdateWithHttpInfo(Integer designid, Integer powerid, Power data) throws ApiException {
        okhttp3.Call localVarCall = designPowerUpdateValidateBeforeCall(designid, powerid, data, null);
        Type localVarReturnType = new TypeToken<Power>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a power
     * @param designid  (required)
     * @param powerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designPowerUpdateAsync(Integer designid, Integer powerid, Power data, final ApiCallback<Power> _callback) throws ApiException {

        okhttp3.Call localVarCall = designPowerUpdateValidateBeforeCall(designid, powerid, data, _callback);
        Type localVarReturnType = new TypeToken<Power>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designRead
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designReadCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designReadValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designRead(Async)");
        }
        

        okhttp3.Call localVarCall = designReadCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get design
     * @param designid  (required)
     * @return Design
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Design designRead(Integer designid) throws ApiException {
        ApiResponse<Design> localVarResp = designReadWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get design
     * @param designid  (required)
     * @return ApiResponse&lt;Design&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Design> designReadWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designReadValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<Design>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get design
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designReadAsync(Integer designid, final ApiCallback<Design> _callback) throws ApiException {

        okhttp3.Call localVarCall = designReadValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<Design>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designRestoreCreate
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error mesage returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designRestoreCreateCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/restore/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designRestoreCreateValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designRestoreCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designRestoreCreateCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restore a design version as current version
     * @param designid  (required)
     * @return Design
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error mesage returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Design designRestoreCreate(Integer designid) throws ApiException {
        ApiResponse<Design> localVarResp = designRestoreCreateWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Restore a design version as current version
     * @param designid  (required)
     * @return ApiResponse&lt;Design&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error mesage returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Design> designRestoreCreateWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designRestoreCreateValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<Design>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restore a design version as current version
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error mesage returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designRestoreCreateAsync(Integer designid, final ApiCallback<Design> _callback) throws ApiException {

        okhttp3.Call localVarCall = designRestoreCreateValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<Design>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioClone
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioCloneCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioCloneValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioClone(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioClone(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioCloneCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return DesignScenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenario designScenarioClone(Integer designid, Integer scenarioid) throws ApiException {
        ApiResponse<DesignScenario> localVarResp = designScenarioCloneWithHttpInfo(designid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone a design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;DesignScenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenario> designScenarioCloneWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioCloneValidateBeforeCall(designid, scenarioid, null);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone a design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioCloneAsync(Integer designid, Integer scenarioid, final ApiCallback<DesignScenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioCloneValidateBeforeCall(designid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioCreate
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioCreateCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioCreateValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioCreateCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a scenario
     * @param designid  (required)
     * @return DesignScenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenario designScenarioCreate(Integer designid) throws ApiException {
        ApiResponse<DesignScenario> localVarResp = designScenarioCreateWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a scenario
     * @param designid  (required)
     * @return ApiResponse&lt;DesignScenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenario> designScenarioCreateWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioCreateValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a scenario
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioCreateAsync(Integer designid, final ApiCallback<DesignScenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioCreateValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioDelete
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioDeleteCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioDeleteValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioDeleteCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designScenarioDelete(Integer designid, Integer scenarioid) throws ApiException {
        designScenarioDeleteWithHttpInfo(designid, scenarioid);
    }

    /**
     * 
     * Delete a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designScenarioDeleteWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioDeleteValidateBeforeCall(designid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioDeleteAsync(Integer designid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioDeleteValidateBeforeCall(designid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioList(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of scenarios
     * @param designid  (required)
     * @return List&lt;DesignScenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignScenario> designScenarioList(Integer designid) throws ApiException {
        ApiResponse<List<DesignScenario>> localVarResp = designScenarioListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of scenarios
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignScenario&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignScenario>> designScenarioListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignScenario>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of scenarios
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioListAsync(Integer designid, final ApiCallback<List<DesignScenario>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignScenario>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioModeConfigDelete
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeConfigDeleteCall(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioModeConfigDeleteValidateBeforeCall(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioModeConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioModeConfigDelete(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designScenarioModeConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioModeConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioModeConfigDeleteCall(designid, scenarioid, modeid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a datasheet mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return DesignScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioModeUtil designScenarioModeConfigDelete(Integer designid, Integer scenarioid, Integer modeid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioModeUtil> localVarResp = designScenarioModeConfigDeleteWithHttpInfo(designid, scenarioid, modeid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a datasheet mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioModeUtil> designScenarioModeConfigDeleteWithHttpInfo(Integer designid, Integer scenarioid, Integer modeid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioModeConfigDeleteValidateBeforeCall(designid, scenarioid, modeid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a datasheet mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeConfigDeleteAsync(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback<DesignScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioModeConfigDeleteValidateBeforeCall(designid, scenarioid, modeid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioModeConfigRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeConfigReadCall(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioModeConfigReadValidateBeforeCall(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioModeConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioModeConfigRead(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designScenarioModeConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioModeConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioModeConfigReadCall(designid, scenarioid, modeid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get datasheet mode
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return DesignScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioModeUtil designScenarioModeConfigRead(Integer designid, Integer scenarioid, Integer modeid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioModeUtil> localVarResp = designScenarioModeConfigReadWithHttpInfo(designid, scenarioid, modeid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get datasheet mode
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioModeUtil> designScenarioModeConfigReadWithHttpInfo(Integer designid, Integer scenarioid, Integer modeid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioModeConfigReadValidateBeforeCall(designid, scenarioid, modeid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get datasheet mode
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeConfigReadAsync(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback<DesignScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioModeConfigReadValidateBeforeCall(designid, scenarioid, modeid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioModeConfigUpdate
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeConfigUpdateCall(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioModeConfigUpdateValidateBeforeCall(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioModeConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioModeConfigUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designScenarioModeConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioModeConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioModeConfigUpdateCall(designid, scenarioid, modeid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a datasheet mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return DesignScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioModeUtil designScenarioModeConfigUpdate(Integer designid, Integer scenarioid, Integer modeid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioModeUtil> localVarResp = designScenarioModeConfigUpdateWithHttpInfo(designid, scenarioid, modeid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a datasheet mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioModeUtil> designScenarioModeConfigUpdateWithHttpInfo(Integer designid, Integer scenarioid, Integer modeid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioModeConfigUpdateValidateBeforeCall(designid, scenarioid, modeid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a datasheet mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeConfigUpdateAsync(Integer designid, Integer scenarioid, Integer modeid, Integer configid, final ApiCallback<DesignScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioModeConfigUpdateValidateBeforeCall(designid, scenarioid, modeid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioModeCreate
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeCreateCall(Integer designid, Integer scenarioid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/mode/{modeid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioModeCreateValidateBeforeCall(Integer designid, Integer scenarioid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioModeCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioModeCreate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designScenarioModeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioModeCreateCall(designid, scenarioid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a scenario mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @return DesignScenarioModeUtil
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioModeUtil designScenarioModeCreate(Integer designid, Integer scenarioid, Integer modeid) throws ApiException {
        ApiResponse<DesignScenarioModeUtil> localVarResp = designScenarioModeCreateWithHttpInfo(designid, scenarioid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a scenario mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;DesignScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioModeUtil> designScenarioModeCreateWithHttpInfo(Integer designid, Integer scenarioid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioModeCreateValidateBeforeCall(designid, scenarioid, modeid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a scenario mode util
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeCreateAsync(Integer designid, Integer scenarioid, Integer modeid, final ApiCallback<DesignScenarioModeUtil> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioModeCreateValidateBeforeCall(designid, scenarioid, modeid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioModeUtil>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioModeRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeReadCall(Integer designid, Integer scenarioid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/mode/{modeid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioModeReadValidateBeforeCall(Integer designid, Integer scenarioid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioModeRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioModeRead(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designScenarioModeRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioModeReadCall(designid, scenarioid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of scenario modes
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @return List&lt;DesignScenarioModeUtil&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignScenarioModeUtil> designScenarioModeRead(Integer designid, Integer scenarioid, Integer modeid) throws ApiException {
        ApiResponse<List<DesignScenarioModeUtil>> localVarResp = designScenarioModeReadWithHttpInfo(designid, scenarioid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of scenario modes
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;List&lt;DesignScenarioModeUtil&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignScenarioModeUtil>> designScenarioModeReadWithHttpInfo(Integer designid, Integer scenarioid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioModeReadValidateBeforeCall(designid, scenarioid, modeid, null);
        Type localVarReturnType = new TypeToken<List<DesignScenarioModeUtil>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of scenario modes
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioModeReadAsync(Integer designid, Integer scenarioid, Integer modeid, final ApiCallback<List<DesignScenarioModeUtil>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioModeReadValidateBeforeCall(designid, scenarioid, modeid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignScenarioModeUtil>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioParamConfigDelete
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamConfigDeleteCall(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/"
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()))
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()))
            .replaceAll("\\{" + "confgiid" + "\\}", localVarApiClient.escapeString(confgiid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioParamConfigDeleteValidateBeforeCall(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designScenarioParamConfigDelete(Async)");
        }
        
        // verify the required parameter 'confgiid' is set
        if (confgiid == null) {
            throw new ApiException("Missing the required parameter 'confgiid' when calling designScenarioParamConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioParamConfigDeleteCall(configid, designid, scenarioid, paramid, confgiid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario config
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @return DesignScenarioConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioConfig designScenarioParamConfigDelete(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid) throws ApiException {
        ApiResponse<DesignScenarioConfig> localVarResp = designScenarioParamConfigDeleteWithHttpInfo(configid, designid, scenarioid, paramid, confgiid);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a scenario config
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @return ApiResponse&lt;DesignScenarioConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioConfig> designScenarioParamConfigDeleteWithHttpInfo(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioParamConfigDeleteValidateBeforeCall(configid, designid, scenarioid, paramid, confgiid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a scenario config
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamConfigDeleteAsync(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid, final ApiCallback<DesignScenarioConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioParamConfigDeleteValidateBeforeCall(configid, designid, scenarioid, paramid, confgiid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioParamConfigRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamConfigReadCall(Integer designid, Integer scenarioid, Integer paramid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioParamConfigReadValidateBeforeCall(Integer designid, Integer scenarioid, Integer paramid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioParamConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioParamConfigRead(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designScenarioParamConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioParamConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioParamConfigReadCall(designid, scenarioid, paramid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Getscenario configs
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @return DesignScenarioConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioConfig designScenarioParamConfigRead(Integer designid, Integer scenarioid, Integer paramid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioConfig> localVarResp = designScenarioParamConfigReadWithHttpInfo(designid, scenarioid, paramid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Getscenario configs
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioConfig> designScenarioParamConfigReadWithHttpInfo(Integer designid, Integer scenarioid, Integer paramid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioParamConfigReadValidateBeforeCall(designid, scenarioid, paramid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Getscenario configs
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamConfigReadAsync(Integer designid, Integer scenarioid, Integer paramid, Integer configid, final ApiCallback<DesignScenarioConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioParamConfigReadValidateBeforeCall(designid, scenarioid, paramid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioParamConfigUpdate
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamConfigUpdateCall(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/"
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()))
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()))
            .replaceAll("\\{" + "confgiid" + "\\}", localVarApiClient.escapeString(confgiid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioParamConfigUpdateValidateBeforeCall(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designScenarioParamConfigUpdate(Async)");
        }
        
        // verify the required parameter 'confgiid' is set
        if (confgiid == null) {
            throw new ApiException("Missing the required parameter 'confgiid' when calling designScenarioParamConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioParamConfigUpdateCall(configid, designid, scenarioid, paramid, confgiid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario config
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @return DesignScenarioConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioConfig designScenarioParamConfigUpdate(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid) throws ApiException {
        ApiResponse<DesignScenarioConfig> localVarResp = designScenarioParamConfigUpdateWithHttpInfo(configid, designid, scenarioid, paramid, confgiid);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario config
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @return ApiResponse&lt;DesignScenarioConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioConfig> designScenarioParamConfigUpdateWithHttpInfo(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioParamConfigUpdateValidateBeforeCall(configid, designid, scenarioid, paramid, confgiid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario config
     * @param configid  (required)
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param confgiid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamConfigUpdateAsync(String configid, Integer designid, Integer scenarioid, Integer paramid, Integer confgiid, final ApiCallback<DesignScenarioConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioParamConfigUpdateValidateBeforeCall(configid, designid, scenarioid, paramid, confgiid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioParamCreate
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamCreateCall(Integer designid, Integer scenarioid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/param/{paramid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioParamCreateValidateBeforeCall(Integer designid, Integer scenarioid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioParamCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioParamCreate(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designScenarioParamCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioParamCreateCall(designid, scenarioid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @return DesignScenarioConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioConfig designScenarioParamCreate(Integer designid, Integer scenarioid, Integer paramid) throws ApiException {
        ApiResponse<DesignScenarioConfig> localVarResp = designScenarioParamCreateWithHttpInfo(designid, scenarioid, paramid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;DesignScenarioConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioConfig> designScenarioParamCreateWithHttpInfo(Integer designid, Integer scenarioid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioParamCreateValidateBeforeCall(designid, scenarioid, paramid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamCreateAsync(Integer designid, Integer scenarioid, Integer paramid, final ApiCallback<DesignScenarioConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioParamCreateValidateBeforeCall(designid, scenarioid, paramid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioParamRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamReadCall(Integer designid, Integer scenarioid, Integer paramid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/param/{paramid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "paramid" + "\\}", localVarApiClient.escapeString(paramid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioParamReadValidateBeforeCall(Integer designid, Integer scenarioid, Integer paramid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioParamRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioParamRead(Async)");
        }
        
        // verify the required parameter 'paramid' is set
        if (paramid == null) {
            throw new ApiException("Missing the required parameter 'paramid' when calling designScenarioParamRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioParamReadCall(designid, scenarioid, paramid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of scenario configs
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @return List&lt;DesignScenarioConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignScenarioConfig> designScenarioParamRead(Integer designid, Integer scenarioid, Integer paramid) throws ApiException {
        ApiResponse<List<DesignScenarioConfig>> localVarResp = designScenarioParamReadWithHttpInfo(designid, scenarioid, paramid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of scenario configs
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @return ApiResponse&lt;List&lt;DesignScenarioConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignScenarioConfig>> designScenarioParamReadWithHttpInfo(Integer designid, Integer scenarioid, Integer paramid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioParamReadValidateBeforeCall(designid, scenarioid, paramid, null);
        Type localVarReturnType = new TypeToken<List<DesignScenarioConfig>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of scenario configs
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param paramid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioParamReadAsync(Integer designid, Integer scenarioid, Integer paramid, final ApiCallback<List<DesignScenarioConfig>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioParamReadValidateBeforeCall(designid, scenarioid, paramid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignScenarioConfig>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioPowerList
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioPowerListCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/power/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioPowerListValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioPowerList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioPowerList(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioPowerListCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get power of design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designScenarioPowerList(Integer designid, Integer scenarioid) throws ApiException {
        designScenarioPowerListWithHttpInfo(designid, scenarioid);
    }

    /**
     * 
     * Get power of design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designScenarioPowerListWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioPowerListValidateBeforeCall(designid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get power of design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioPowerListAsync(Integer designid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioPowerListValidateBeforeCall(designid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioPowerdistributionList
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioPowerdistributionListCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/powerdistribution/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioPowerdistributionListValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioPowerdistributionList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioPowerdistributionList(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioPowerdistributionListCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get power distribution of a design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designScenarioPowerdistributionList(Integer designid, Integer scenarioid) throws ApiException {
        designScenarioPowerdistributionListWithHttpInfo(designid, scenarioid);
    }

    /**
     * 
     * Get power distribution of a design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designScenarioPowerdistributionListWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioPowerdistributionListValidateBeforeCall(designid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get power distribution of a design scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioPowerdistributionListAsync(Integer designid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioPowerdistributionListValidateBeforeCall(designid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioReadCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioReadValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioReadCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return DesignScenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenario designScenarioRead(Integer designid, Integer scenarioid) throws ApiException {
        ApiResponse<DesignScenario> localVarResp = designScenarioReadWithHttpInfo(designid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;DesignScenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenario> designScenarioReadWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioReadValidateBeforeCall(designid, scenarioid, null);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioReadAsync(Integer designid, Integer scenarioid, final ApiCallback<DesignScenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioReadValidateBeforeCall(designid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioSupplyConfigDelete
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyConfigDeleteCall(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioSupplyConfigDeleteValidateBeforeCall(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designScenarioSupplyConfigDelete(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioSupplyConfigDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioSupplyConfigDeleteCall(designid, scenarioid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return DesignScenarioSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioSupply designScenarioSupplyConfigDelete(Integer designid, Integer scenarioid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioSupply> localVarResp = designScenarioSupplyConfigDeleteWithHttpInfo(designid, scenarioid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioSupply> designScenarioSupplyConfigDeleteWithHttpInfo(Integer designid, Integer scenarioid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioSupplyConfigDeleteValidateBeforeCall(designid, scenarioid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyConfigDeleteAsync(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback<DesignScenarioSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioSupplyConfigDeleteValidateBeforeCall(designid, scenarioid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioSupplyConfigRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyConfigReadCall(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioSupplyConfigReadValidateBeforeCall(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designScenarioSupplyConfigRead(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioSupplyConfigRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioSupplyConfigReadCall(designid, scenarioid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of scenario supplies
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return DesignScenarioSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioSupply designScenarioSupplyConfigRead(Integer designid, Integer scenarioid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioSupply> localVarResp = designScenarioSupplyConfigReadWithHttpInfo(designid, scenarioid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of scenario supplies
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioSupply> designScenarioSupplyConfigReadWithHttpInfo(Integer designid, Integer scenarioid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioSupplyConfigReadValidateBeforeCall(designid, scenarioid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of scenario supplies
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyConfigReadAsync(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback<DesignScenarioSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioSupplyConfigReadValidateBeforeCall(designid, scenarioid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioSupplyConfigUpdate
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyConfigUpdateCall(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "configid" + "\\}", localVarApiClient.escapeString(configid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioSupplyConfigUpdateValidateBeforeCall(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designScenarioSupplyConfigUpdate(Async)");
        }
        
        // verify the required parameter 'configid' is set
        if (configid == null) {
            throw new ApiException("Missing the required parameter 'configid' when calling designScenarioSupplyConfigUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioSupplyConfigUpdateCall(designid, scenarioid, supplyid, configid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return DesignScenarioSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioSupply designScenarioSupplyConfigUpdate(Integer designid, Integer scenarioid, Integer supplyid, Integer configid) throws ApiException {
        ApiResponse<DesignScenarioSupply> localVarResp = designScenarioSupplyConfigUpdateWithHttpInfo(designid, scenarioid, supplyid, configid);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @return ApiResponse&lt;DesignScenarioSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioSupply> designScenarioSupplyConfigUpdateWithHttpInfo(Integer designid, Integer scenarioid, Integer supplyid, Integer configid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioSupplyConfigUpdateValidateBeforeCall(designid, scenarioid, supplyid, configid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param configid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyConfigUpdateAsync(Integer designid, Integer scenarioid, Integer supplyid, Integer configid, final ApiCallback<DesignScenarioSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioSupplyConfigUpdateValidateBeforeCall(designid, scenarioid, supplyid, configid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioSupplyCreate
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyCreateCall(Integer designid, Integer scenarioid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioSupplyCreateValidateBeforeCall(Integer designid, Integer scenarioid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioSupplyCreate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioSupplyCreate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designScenarioSupplyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioSupplyCreateCall(designid, scenarioid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @return DesignScenarioSupply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenarioSupply designScenarioSupplyCreate(Integer designid, Integer scenarioid, Integer supplyid) throws ApiException {
        ApiResponse<DesignScenarioSupply> localVarResp = designScenarioSupplyCreateWithHttpInfo(designid, scenarioid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;DesignScenarioSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenarioSupply> designScenarioSupplyCreateWithHttpInfo(Integer designid, Integer scenarioid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioSupplyCreateValidateBeforeCall(designid, scenarioid, supplyid, null);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a scenario config
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyCreateAsync(Integer designid, Integer scenarioid, Integer supplyid, final ApiCallback<DesignScenarioSupply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioSupplyCreateValidateBeforeCall(designid, scenarioid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<DesignScenarioSupply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioSupplyRead
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyReadCall(Integer designid, Integer scenarioid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioSupplyReadValidateBeforeCall(Integer designid, Integer scenarioid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioSupplyRead(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designScenarioSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioSupplyReadCall(designid, scenarioid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of scenario supplies
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @return List&lt;DesignScenarioSupply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignScenarioSupply> designScenarioSupplyRead(Integer designid, Integer scenarioid, Integer supplyid) throws ApiException {
        ApiResponse<List<DesignScenarioSupply>> localVarResp = designScenarioSupplyReadWithHttpInfo(designid, scenarioid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of scenario supplies
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;List&lt;DesignScenarioSupply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignScenarioSupply>> designScenarioSupplyReadWithHttpInfo(Integer designid, Integer scenarioid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioSupplyReadValidateBeforeCall(designid, scenarioid, supplyid, null);
        Type localVarReturnType = new TypeToken<List<DesignScenarioSupply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of scenario supplies
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioSupplyReadAsync(Integer designid, Integer scenarioid, Integer supplyid, final ApiCallback<List<DesignScenarioSupply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioSupplyReadValidateBeforeCall(designid, scenarioid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignScenarioSupply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioTrendList
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioTrendListCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/trend/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioTrendListValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioTrendList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioTrendList(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioTrendListCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scenario power trend
     * @param designid  (required)
     * @param scenarioid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designScenarioTrendList(Integer designid, Integer scenarioid) throws ApiException {
        designScenarioTrendListWithHttpInfo(designid, scenarioid);
    }

    /**
     * 
     * Get a scenario power trend
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designScenarioTrendListWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioTrendListValidateBeforeCall(designid, scenarioid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get a scenario power trend
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioTrendListAsync(Integer designid, Integer scenarioid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioTrendListValidateBeforeCall(designid, scenarioid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioUpdate
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioUpdateCall(Integer designid, Integer scenarioid, DesignScenario data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioUpdateValidateBeforeCall(Integer designid, Integer scenarioid, DesignScenario data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioUpdate(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designScenarioUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioUpdateCall(designid, scenarioid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return DesignScenario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignScenario designScenarioUpdate(Integer designid, Integer scenarioid, DesignScenario data) throws ApiException {
        ApiResponse<DesignScenario> localVarResp = designScenarioUpdateWithHttpInfo(designid, scenarioid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignScenario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignScenario> designScenarioUpdateWithHttpInfo(Integer designid, Integer scenarioid, DesignScenario data) throws ApiException {
        okhttp3.Call localVarCall = designScenarioUpdateValidateBeforeCall(designid, scenarioid, data, null);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a scenario
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioUpdateAsync(Integer designid, Integer scenarioid, DesignScenario data, final ApiCallback<DesignScenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioUpdateValidateBeforeCall(designid, scenarioid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignScenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designScenarioUpdateList
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioUpdateListCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/scenario/{scenarioid}/update/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "scenarioid" + "\\}", localVarApiClient.escapeString(scenarioid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designScenarioUpdateListValidateBeforeCall(Integer designid, Integer scenarioid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designScenarioUpdateList(Async)");
        }
        
        // verify the required parameter 'scenarioid' is set
        if (scenarioid == null) {
            throw new ApiException("Missing the required parameter 'scenarioid' when calling designScenarioUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = designScenarioUpdateListCall(designid, scenarioid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return List&lt;BigDecimal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<BigDecimal> designScenarioUpdateList(Integer designid, Integer scenarioid) throws ApiException {
        ApiResponse<List<BigDecimal>> localVarResp = designScenarioUpdateListWithHttpInfo(designid, scenarioid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param designid  (required)
     * @param scenarioid  (required)
     * @return ApiResponse&lt;List&lt;BigDecimal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BigDecimal>> designScenarioUpdateListWithHttpInfo(Integer designid, Integer scenarioid) throws ApiException {
        okhttp3.Call localVarCall = designScenarioUpdateListValidateBeforeCall(designid, scenarioid, null);
        Type localVarReturnType = new TypeToken<List<BigDecimal>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param designid  (required)
     * @param scenarioid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designScenarioUpdateListAsync(Integer designid, Integer scenarioid, final ApiCallback<List<BigDecimal>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designScenarioUpdateListValidateBeforeCall(designid, scenarioid, _callback);
        Type localVarReturnType = new TypeToken<List<BigDecimal>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSensorClone
     * @param designid  (required)
     * @param sensorid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorCloneCall(Integer designid, Integer sensorid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/sensor/{sensorid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "sensorid" + "\\}", localVarApiClient.escapeString(sensorid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSensorCloneValidateBeforeCall(Integer designid, Integer sensorid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSensorClone(Async)");
        }
        
        // verify the required parameter 'sensorid' is set
        if (sensorid == null) {
            throw new ApiException("Missing the required parameter 'sensorid' when calling designSensorClone(Async)");
        }
        

        okhttp3.Call localVarCall = designSensorCloneCall(designid, sensorid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clode a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @return DesignSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSensor designSensorClone(Integer designid, Integer sensorid) throws ApiException {
        ApiResponse<DesignSensor> localVarResp = designSensorCloneWithHttpInfo(designid, sensorid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clode a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @return ApiResponse&lt;DesignSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSensor> designSensorCloneWithHttpInfo(Integer designid, Integer sensorid) throws ApiException {
        okhttp3.Call localVarCall = designSensorCloneValidateBeforeCall(designid, sensorid, null);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clode a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorCloneAsync(Integer designid, Integer sensorid, final ApiCallback<DesignSensor> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSensorCloneValidateBeforeCall(designid, sensorid, _callback);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSensorCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorCreateCall(Integer designid, DesignSensor data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/sensor/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSensorCreateValidateBeforeCall(Integer designid, DesignSensor data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSensorCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designSensorCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designSensorCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new sensor
     * @param designid  (required)
     * @param data  (required)
     * @return DesignSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSensor designSensorCreate(Integer designid, DesignSensor data) throws ApiException {
        ApiResponse<DesignSensor> localVarResp = designSensorCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new sensor
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSensor> designSensorCreateWithHttpInfo(Integer designid, DesignSensor data) throws ApiException {
        okhttp3.Call localVarCall = designSensorCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new sensor
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorCreateAsync(Integer designid, DesignSensor data, final ApiCallback<DesignSensor> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSensorCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSensorDelete
     * @param designid  (required)
     * @param sensorid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorDeleteCall(Integer designid, Integer sensorid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/sensor/{sensorid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "sensorid" + "\\}", localVarApiClient.escapeString(sensorid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSensorDeleteValidateBeforeCall(Integer designid, Integer sensorid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSensorDelete(Async)");
        }
        
        // verify the required parameter 'sensorid' is set
        if (sensorid == null) {
            throw new ApiException("Missing the required parameter 'sensorid' when calling designSensorDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designSensorDeleteCall(designid, sensorid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designSensorDelete(Integer designid, Integer sensorid) throws ApiException {
        designSensorDeleteWithHttpInfo(designid, sensorid);
    }

    /**
     * 
     * Delete a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designSensorDeleteWithHttpInfo(Integer designid, Integer sensorid) throws ApiException {
        okhttp3.Call localVarCall = designSensorDeleteValidateBeforeCall(designid, sensorid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorDeleteAsync(Integer designid, Integer sensorid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSensorDeleteValidateBeforeCall(designid, sensorid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSensorList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/sensor/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSensorListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSensorList(Async)");
        }
        

        okhttp3.Call localVarCall = designSensorListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of sensors
     * @param designid  (required)
     * @return List&lt;DesignSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignSensor> designSensorList(Integer designid) throws ApiException {
        ApiResponse<List<DesignSensor>> localVarResp = designSensorListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of sensors
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignSensor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignSensor>> designSensorListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designSensorListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignSensor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of sensors
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorListAsync(Integer designid, final ApiCallback<List<DesignSensor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSensorListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignSensor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSensorRead
     * @param designid  (required)
     * @param sensorid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorReadCall(Integer designid, Integer sensorid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/sensor/{sensorid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "sensorid" + "\\}", localVarApiClient.escapeString(sensorid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSensorReadValidateBeforeCall(Integer designid, Integer sensorid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSensorRead(Async)");
        }
        
        // verify the required parameter 'sensorid' is set
        if (sensorid == null) {
            throw new ApiException("Missing the required parameter 'sensorid' when calling designSensorRead(Async)");
        }
        

        okhttp3.Call localVarCall = designSensorReadCall(designid, sensorid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @return DesignSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSensor designSensorRead(Integer designid, Integer sensorid) throws ApiException {
        ApiResponse<DesignSensor> localVarResp = designSensorReadWithHttpInfo(designid, sensorid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @return ApiResponse&lt;DesignSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSensor> designSensorReadWithHttpInfo(Integer designid, Integer sensorid) throws ApiException {
        okhttp3.Call localVarCall = designSensorReadValidateBeforeCall(designid, sensorid, null);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorReadAsync(Integer designid, Integer sensorid, final ApiCallback<DesignSensor> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSensorReadValidateBeforeCall(designid, sensorid, _callback);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSensorUpdate
     * @param designid  (required)
     * @param sensorid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorUpdateCall(Integer designid, Integer sensorid, DesignSensor data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/sensor/{sensorid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "sensorid" + "\\}", localVarApiClient.escapeString(sensorid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSensorUpdateValidateBeforeCall(Integer designid, Integer sensorid, DesignSensor data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSensorUpdate(Async)");
        }
        
        // verify the required parameter 'sensorid' is set
        if (sensorid == null) {
            throw new ApiException("Missing the required parameter 'sensorid' when calling designSensorUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designSensorUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designSensorUpdateCall(designid, sensorid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @param data  (required)
     * @return DesignSensor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignSensor designSensorUpdate(Integer designid, Integer sensorid, DesignSensor data) throws ApiException {
        ApiResponse<DesignSensor> localVarResp = designSensorUpdateWithHttpInfo(designid, sensorid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignSensor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignSensor> designSensorUpdateWithHttpInfo(Integer designid, Integer sensorid, DesignSensor data) throws ApiException {
        okhttp3.Call localVarCall = designSensorUpdateValidateBeforeCall(designid, sensorid, data, null);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a sensor
     * @param designid  (required)
     * @param sensorid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSensorUpdateAsync(Integer designid, Integer sensorid, DesignSensor data, final ApiCallback<DesignSensor> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSensorUpdateValidateBeforeCall(designid, sensorid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignSensor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designStatetableCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableCreateCall(Integer designid, DesignStateTable data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/statetable/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designStatetableCreateValidateBeforeCall(Integer designid, DesignStateTable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designStatetableCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designStatetableCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designStatetableCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new ff
     * @param designid  (required)
     * @param data  (required)
     * @return DesignStateTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignStateTable designStatetableCreate(Integer designid, DesignStateTable data) throws ApiException {
        ApiResponse<DesignStateTable> localVarResp = designStatetableCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new ff
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignStateTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignStateTable> designStatetableCreateWithHttpInfo(Integer designid, DesignStateTable data) throws ApiException {
        okhttp3.Call localVarCall = designStatetableCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignStateTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new ff
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableCreateAsync(Integer designid, DesignStateTable data, final ApiCallback<DesignStateTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = designStatetableCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignStateTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designStatetableDelete
     * @param designid  (required)
     * @param statetableid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableDeleteCall(Integer designid, Integer statetableid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/statetable/{statetableid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "statetableid" + "\\}", localVarApiClient.escapeString(statetableid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designStatetableDeleteValidateBeforeCall(Integer designid, Integer statetableid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designStatetableDelete(Async)");
        }
        
        // verify the required parameter 'statetableid' is set
        if (statetableid == null) {
            throw new ApiException("Missing the required parameter 'statetableid' when calling designStatetableDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designStatetableDeleteCall(designid, statetableid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a ff
     * @param designid  (required)
     * @param statetableid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designStatetableDelete(Integer designid, Integer statetableid) throws ApiException {
        designStatetableDeleteWithHttpInfo(designid, statetableid);
    }

    /**
     * 
     * Delete a ff
     * @param designid  (required)
     * @param statetableid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designStatetableDeleteWithHttpInfo(Integer designid, Integer statetableid) throws ApiException {
        okhttp3.Call localVarCall = designStatetableDeleteValidateBeforeCall(designid, statetableid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a ff
     * @param designid  (required)
     * @param statetableid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableDeleteAsync(Integer designid, Integer statetableid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designStatetableDeleteValidateBeforeCall(designid, statetableid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designStatetableList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/statetable/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designStatetableListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designStatetableList(Async)");
        }
        

        okhttp3.Call localVarCall = designStatetableListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of statetables
     * @param designid  (required)
     * @return List&lt;DesignStateTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignStateTable> designStatetableList(Integer designid) throws ApiException {
        ApiResponse<List<DesignStateTable>> localVarResp = designStatetableListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of statetables
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignStateTable&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignStateTable>> designStatetableListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designStatetableListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignStateTable>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of statetables
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableListAsync(Integer designid, final ApiCallback<List<DesignStateTable>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designStatetableListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignStateTable>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designStatetableRead
     * @param designid  (required)
     * @param statetableid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableReadCall(Integer designid, Integer statetableid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/statetable/{statetableid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "statetableid" + "\\}", localVarApiClient.escapeString(statetableid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designStatetableReadValidateBeforeCall(Integer designid, Integer statetableid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designStatetableRead(Async)");
        }
        
        // verify the required parameter 'statetableid' is set
        if (statetableid == null) {
            throw new ApiException("Missing the required parameter 'statetableid' when calling designStatetableRead(Async)");
        }
        

        okhttp3.Call localVarCall = designStatetableReadCall(designid, statetableid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a statetable
     * @param designid  (required)
     * @param statetableid  (required)
     * @return DesignStateTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignStateTable designStatetableRead(Integer designid, Integer statetableid) throws ApiException {
        ApiResponse<DesignStateTable> localVarResp = designStatetableReadWithHttpInfo(designid, statetableid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a statetable
     * @param designid  (required)
     * @param statetableid  (required)
     * @return ApiResponse&lt;DesignStateTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignStateTable> designStatetableReadWithHttpInfo(Integer designid, Integer statetableid) throws ApiException {
        okhttp3.Call localVarCall = designStatetableReadValidateBeforeCall(designid, statetableid, null);
        Type localVarReturnType = new TypeToken<DesignStateTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a statetable
     * @param designid  (required)
     * @param statetableid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableReadAsync(Integer designid, Integer statetableid, final ApiCallback<DesignStateTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = designStatetableReadValidateBeforeCall(designid, statetableid, _callback);
        Type localVarReturnType = new TypeToken<DesignStateTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designStatetableUpdate
     * @param designid  (required)
     * @param statetableid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableUpdateCall(Integer designid, Integer statetableid, DesignStateTable data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/statetable/{statetableid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "statetableid" + "\\}", localVarApiClient.escapeString(statetableid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designStatetableUpdateValidateBeforeCall(Integer designid, Integer statetableid, DesignStateTable data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designStatetableUpdate(Async)");
        }
        
        // verify the required parameter 'statetableid' is set
        if (statetableid == null) {
            throw new ApiException("Missing the required parameter 'statetableid' when calling designStatetableUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designStatetableUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designStatetableUpdateCall(designid, statetableid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a ff
     * @param designid  (required)
     * @param statetableid  (required)
     * @param data  (required)
     * @return DesignStateTable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignStateTable designStatetableUpdate(Integer designid, Integer statetableid, DesignStateTable data) throws ApiException {
        ApiResponse<DesignStateTable> localVarResp = designStatetableUpdateWithHttpInfo(designid, statetableid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a ff
     * @param designid  (required)
     * @param statetableid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignStateTable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignStateTable> designStatetableUpdateWithHttpInfo(Integer designid, Integer statetableid, DesignStateTable data) throws ApiException {
        okhttp3.Call localVarCall = designStatetableUpdateValidateBeforeCall(designid, statetableid, data, null);
        Type localVarReturnType = new TypeToken<DesignStateTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a ff
     * @param designid  (required)
     * @param statetableid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designStatetableUpdateAsync(Integer designid, Integer statetableid, DesignStateTable data, final ApiCallback<DesignStateTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = designStatetableUpdateValidateBeforeCall(designid, statetableid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignStateTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyClone
     * @param designid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyCloneCall(Integer designid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/{supplyid}/clone/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyCloneValidateBeforeCall(Integer designid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyClone(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplyClone(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyCloneCall(designid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clode a mode param
     * @param designid  (required)
     * @param supplyid  (required)
     * @return Supply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Supply designSupplyClone(Integer designid, Integer supplyid) throws ApiException {
        ApiResponse<Supply> localVarResp = designSupplyCloneWithHttpInfo(designid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clode a mode param
     * @param designid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;Supply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Supply> designSupplyCloneWithHttpInfo(Integer designid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = designSupplyCloneValidateBeforeCall(designid, supplyid, null);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clode a mode param
     * @param designid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyCloneAsync(Integer designid, Integer supplyid, final ApiCallback<Supply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyCloneValidateBeforeCall(designid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyCreateCall(Integer designid, Supply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyCreateValidateBeforeCall(Integer designid, Supply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designSupplyCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a supply
     * @param designid  (required)
     * @param data  (required)
     * @return Supply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Supply designSupplyCreate(Integer designid, Supply data) throws ApiException {
        ApiResponse<Supply> localVarResp = designSupplyCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a supply
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Supply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Supply> designSupplyCreateWithHttpInfo(Integer designid, Supply data) throws ApiException {
        okhttp3.Call localVarCall = designSupplyCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a supply
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyCreateAsync(Integer designid, Supply data, final ApiCallback<Supply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyDelete
     * @param designid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyDeleteCall(Integer designid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyDeleteValidateBeforeCall(Integer designid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyDelete(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplyDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyDeleteCall(designid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designSupplyDelete(Integer designid, Integer supplyid) throws ApiException {
        designSupplyDeleteWithHttpInfo(designid, supplyid);
    }

    /**
     * 
     * Delete a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designSupplyDeleteWithHttpInfo(Integer designid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = designSupplyDeleteValidateBeforeCall(designid, supplyid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyDeleteAsync(Integer designid, Integer supplyid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyDeleteValidateBeforeCall(designid, supplyid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyList
     * @param designid  (required)
     * @param name Design name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyListCall(Integer designid, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyListValidateBeforeCall(Integer designid, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyList(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyListCall(designid, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a list of supplies
     * @param designid  (required)
     * @param name Design name (optional)
     * @return List&lt;Supply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Supply> designSupplyList(Integer designid, String name) throws ApiException {
        ApiResponse<List<Supply>> localVarResp = designSupplyListWithHttpInfo(designid, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of supplies
     * @param designid  (required)
     * @param name Design name (optional)
     * @return ApiResponse&lt;List&lt;Supply&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Supply>> designSupplyListWithHttpInfo(Integer designid, String name) throws ApiException {
        okhttp3.Call localVarCall = designSupplyListValidateBeforeCall(designid, name, null);
        Type localVarReturnType = new TypeToken<List<Supply>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of supplies
     * @param designid  (required)
     * @param name Design name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyListAsync(Integer designid, String name, final ApiCallback<List<Supply>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyListValidateBeforeCall(designid, name, _callback);
        Type localVarReturnType = new TypeToken<List<Supply>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyModestateList
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyModestateListCall(Integer designid, Integer supplyid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/{supplyid}/modestate/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyModestateListValidateBeforeCall(Integer designid, Integer supplyid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyModestateList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplyModestateList(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designSupplyModestateList(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyModestateListCall(designid, supplyid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @return SupplyModeState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyModeState designSupplyModestateList(Integer designid, Integer supplyid, Integer modeid) throws ApiException {
        ApiResponse<SupplyModeState> localVarResp = designSupplyModestateListWithHttpInfo(designid, supplyid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;SupplyModeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyModeState> designSupplyModestateListWithHttpInfo(Integer designid, Integer supplyid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designSupplyModestateListValidateBeforeCall(designid, supplyid, modeid, null);
        Type localVarReturnType = new TypeToken<SupplyModeState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyModestateListAsync(Integer designid, Integer supplyid, Integer modeid, final ApiCallback<SupplyModeState> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyModestateListValidateBeforeCall(designid, supplyid, modeid, _callback);
        Type localVarReturnType = new TypeToken<SupplyModeState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyModestateUpdate
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyModestateUpdateCall(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/{supplyid}/modestate/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyModestateUpdateValidateBeforeCall(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyModestateUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplyModestateUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designSupplyModestateUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designSupplyModestateUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyModestateUpdateCall(designid, supplyid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return List&lt;SupplyModeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyModeState> designSupplyModestateUpdate(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data) throws ApiException {
        ApiResponse<List<SupplyModeState>> localVarResp = designSupplyModestateUpdateWithHttpInfo(designid, supplyid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;SupplyModeState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyModeState>> designSupplyModestateUpdateWithHttpInfo(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data) throws ApiException {
        okhttp3.Call localVarCall = designSupplyModestateUpdateValidateBeforeCall(designid, supplyid, modeid, data, null);
        Type localVarReturnType = new TypeToken<List<SupplyModeState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyModestateUpdateAsync(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback<List<SupplyModeState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyModestateUpdateValidateBeforeCall(designid, supplyid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyModeState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyRead
     * @param designid  (required)
     * @param supplyid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyReadCall(Integer designid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyReadValidateBeforeCall(Integer designid, Integer supplyid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyRead(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplyRead(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyReadCall(designid, supplyid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @return Supply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Supply designSupplyRead(Integer designid, Integer supplyid) throws ApiException {
        ApiResponse<Supply> localVarResp = designSupplyReadWithHttpInfo(designid, supplyid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @return ApiResponse&lt;Supply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Supply> designSupplyReadWithHttpInfo(Integer designid, Integer supplyid) throws ApiException {
        okhttp3.Call localVarCall = designSupplyReadValidateBeforeCall(designid, supplyid, null);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyReadAsync(Integer designid, Integer supplyid, final ApiCallback<Supply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyReadValidateBeforeCall(designid, supplyid, _callback);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplyUpdate
     * @param designid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyUpdateCall(Integer designid, Integer supplyid, Supply data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/supply/{supplyid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplyUpdateValidateBeforeCall(Integer designid, Integer supplyid, Supply data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designSupplyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplyUpdateCall(designid, supplyid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return Supply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Supply designSupplyUpdate(Integer designid, Integer supplyid, Supply data) throws ApiException {
        ApiResponse<Supply> localVarResp = designSupplyUpdateWithHttpInfo(designid, supplyid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Supply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Supply> designSupplyUpdateWithHttpInfo(Integer designid, Integer supplyid, Supply data) throws ApiException {
        okhttp3.Call localVarCall = designSupplyUpdateValidateBeforeCall(designid, supplyid, data, null);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a supply
     * @param designid  (required)
     * @param supplyid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplyUpdateAsync(Integer designid, Integer supplyid, Supply data, final ApiCallback<Supply> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplyUpdateValidateBeforeCall(designid, supplyid, data, _callback);
        Type localVarReturnType = new TypeToken<Supply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplymodestateList
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplymodestateListCall(Integer designid, Integer supplyid, Integer modeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/supplymodestate/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplymodestateListValidateBeforeCall(Integer designid, Integer supplyid, Integer modeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplymodestateList(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplymodestateList(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designSupplymodestateList(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplymodestateListCall(designid, supplyid, modeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @return SupplyModeState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SupplyModeState designSupplymodestateList(Integer designid, Integer supplyid, Integer modeid) throws ApiException {
        ApiResponse<SupplyModeState> localVarResp = designSupplymodestateListWithHttpInfo(designid, supplyid, modeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @return ApiResponse&lt;SupplyModeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupplyModeState> designSupplymodestateListWithHttpInfo(Integer designid, Integer supplyid, Integer modeid) throws ApiException {
        okhttp3.Call localVarCall = designSupplymodestateListValidateBeforeCall(designid, supplyid, modeid, null);
        Type localVarReturnType = new TypeToken<SupplyModeState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of supply states per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplymodestateListAsync(Integer designid, Integer supplyid, Integer modeid, final ApiCallback<SupplyModeState> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplymodestateListValidateBeforeCall(designid, supplyid, modeid, _callback);
        Type localVarReturnType = new TypeToken<SupplyModeState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designSupplymodestateUpdate
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplymodestateUpdateCall(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/supplymodestate/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "supplyid" + "\\}", localVarApiClient.escapeString(supplyid.toString()))
            .replaceAll("\\{" + "modeid" + "\\}", localVarApiClient.escapeString(modeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designSupplymodestateUpdateValidateBeforeCall(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designSupplymodestateUpdate(Async)");
        }
        
        // verify the required parameter 'supplyid' is set
        if (supplyid == null) {
            throw new ApiException("Missing the required parameter 'supplyid' when calling designSupplymodestateUpdate(Async)");
        }
        
        // verify the required parameter 'modeid' is set
        if (modeid == null) {
            throw new ApiException("Missing the required parameter 'modeid' when calling designSupplymodestateUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designSupplymodestateUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designSupplymodestateUpdateCall(designid, supplyid, modeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return List&lt;SupplyModeState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public List<SupplyModeState> designSupplymodestateUpdate(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data) throws ApiException {
        ApiResponse<List<SupplyModeState>> localVarResp = designSupplymodestateUpdateWithHttpInfo(designid, supplyid, modeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;List&lt;SupplyModeState&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SupplyModeState>> designSupplymodestateUpdateWithHttpInfo(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data) throws ApiException {
        okhttp3.Call localVarCall = designSupplymodestateUpdateValidateBeforeCall(designid, supplyid, modeid, data, null);
        Type localVarReturnType = new TypeToken<List<SupplyModeState>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a supply state per mode
     * @param designid  (required)
     * @param supplyid  (required)
     * @param modeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designSupplymodestateUpdateAsync(Integer designid, Integer supplyid, Integer modeid, SupplyModeState data, final ApiCallback<List<SupplyModeState>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designSupplymodestateUpdateValidateBeforeCall(designid, supplyid, modeid, data, _callback);
        Type localVarReturnType = new TypeToken<List<SupplyModeState>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designTrendCreate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendCreateCall(Integer designid, DesignTrend data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/trend/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designTrendCreateValidateBeforeCall(Integer designid, DesignTrend data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designTrendCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designTrendCreate(Async)");
        }
        

        okhttp3.Call localVarCall = designTrendCreateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a trend
     * @param designid  (required)
     * @param data  (required)
     * @return DesignTrend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignTrend designTrendCreate(Integer designid, DesignTrend data) throws ApiException {
        ApiResponse<DesignTrend> localVarResp = designTrendCreateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a trend
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignTrend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignTrend> designTrendCreateWithHttpInfo(Integer designid, DesignTrend data) throws ApiException {
        okhttp3.Call localVarCall = designTrendCreateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<DesignTrend>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a trend
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendCreateAsync(Integer designid, DesignTrend data, final ApiCallback<DesignTrend> _callback) throws ApiException {

        okhttp3.Call localVarCall = designTrendCreateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignTrend>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designTrendDelete
     * @param designid  (required)
     * @param trendid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendDeleteCall(Integer designid, Integer trendid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/trend/{trendid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "trendid" + "\\}", localVarApiClient.escapeString(trendid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designTrendDeleteValidateBeforeCall(Integer designid, Integer trendid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designTrendDelete(Async)");
        }
        
        // verify the required parameter 'trendid' is set
        if (trendid == null) {
            throw new ApiException("Missing the required parameter 'trendid' when calling designTrendDelete(Async)");
        }
        

        okhttp3.Call localVarCall = designTrendDeleteCall(designid, trendid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void designTrendDelete(Integer designid, Integer trendid) throws ApiException {
        designTrendDeleteWithHttpInfo(designid, trendid);
    }

    /**
     * 
     * Delete a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designTrendDeleteWithHttpInfo(Integer designid, Integer trendid) throws ApiException {
        okhttp3.Call localVarCall = designTrendDeleteValidateBeforeCall(designid, trendid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendDeleteAsync(Integer designid, Integer trendid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designTrendDeleteValidateBeforeCall(designid, trendid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designTrendList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/trend/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designTrendListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designTrendList(Async)");
        }
        

        okhttp3.Call localVarCall = designTrendListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of saved trends
     * @param designid  (required)
     * @return List&lt;DesignTrend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignTrend> designTrendList(Integer designid) throws ApiException {
        ApiResponse<List<DesignTrend>> localVarResp = designTrendListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of saved trends
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignTrend&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignTrend>> designTrendListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designTrendListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignTrend>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of saved trends
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendListAsync(Integer designid, final ApiCallback<List<DesignTrend>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designTrendListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignTrend>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designTrendRead
     * @param designid  (required)
     * @param trendid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendReadCall(Integer designid, Integer trendid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/trend/{trendid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "trendid" + "\\}", localVarApiClient.escapeString(trendid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designTrendReadValidateBeforeCall(Integer designid, Integer trendid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designTrendRead(Async)");
        }
        
        // verify the required parameter 'trendid' is set
        if (trendid == null) {
            throw new ApiException("Missing the required parameter 'trendid' when calling designTrendRead(Async)");
        }
        

        okhttp3.Call localVarCall = designTrendReadCall(designid, trendid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @return DesignTrend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignTrend designTrendRead(Integer designid, Integer trendid) throws ApiException {
        ApiResponse<DesignTrend> localVarResp = designTrendReadWithHttpInfo(designid, trendid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @return ApiResponse&lt;DesignTrend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignTrend> designTrendReadWithHttpInfo(Integer designid, Integer trendid) throws ApiException {
        okhttp3.Call localVarCall = designTrendReadValidateBeforeCall(designid, trendid, null);
        Type localVarReturnType = new TypeToken<DesignTrend>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendReadAsync(Integer designid, Integer trendid, final ApiCallback<DesignTrend> _callback) throws ApiException {

        okhttp3.Call localVarCall = designTrendReadValidateBeforeCall(designid, trendid, _callback);
        Type localVarReturnType = new TypeToken<DesignTrend>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designTrendUpdate
     * @param designid  (required)
     * @param trendid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inupt data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendUpdateCall(Integer designid, Integer trendid, DesignTrend data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/trend/{trendid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "trendid" + "\\}", localVarApiClient.escapeString(trendid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designTrendUpdateValidateBeforeCall(Integer designid, Integer trendid, DesignTrend data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designTrendUpdate(Async)");
        }
        
        // verify the required parameter 'trendid' is set
        if (trendid == null) {
            throw new ApiException("Missing the required parameter 'trendid' when calling designTrendUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designTrendUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designTrendUpdateCall(designid, trendid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @param data  (required)
     * @return DesignTrend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inupt data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DesignTrend designTrendUpdate(Integer designid, Integer trendid, DesignTrend data) throws ApiException {
        ApiResponse<DesignTrend> localVarResp = designTrendUpdateWithHttpInfo(designid, trendid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DesignTrend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inupt data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DesignTrend> designTrendUpdateWithHttpInfo(Integer designid, Integer trendid, DesignTrend data) throws ApiException {
        okhttp3.Call localVarCall = designTrendUpdateValidateBeforeCall(designid, trendid, data, null);
        Type localVarReturnType = new TypeToken<DesignTrend>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a trend
     * @param designid  (required)
     * @param trendid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inupt data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designTrendUpdateAsync(Integer designid, Integer trendid, DesignTrend data, final ApiCallback<DesignTrend> _callback) throws ApiException {

        okhttp3.Call localVarCall = designTrendUpdateValidateBeforeCall(designid, trendid, data, _callback);
        Type localVarReturnType = new TypeToken<DesignTrend>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designUpdate
     * @param designid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designUpdateCall(Integer designid, Design data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/design/{designid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designUpdateValidateBeforeCall(Integer designid, Design data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling designUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = designUpdateCall(designid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update design
     * @param designid  (required)
     * @param data  (required)
     * @return Design
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Design designUpdate(Integer designid, Design data) throws ApiException {
        ApiResponse<Design> localVarResp = designUpdateWithHttpInfo(designid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update design
     * @param designid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Design&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Design> designUpdateWithHttpInfo(Integer designid, Design data) throws ApiException {
        okhttp3.Call localVarCall = designUpdateValidateBeforeCall(designid, data, null);
        Type localVarReturnType = new TypeToken<Design>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update design
     * @param designid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designUpdateAsync(Integer designid, Design data, final ApiCallback<Design> _callback) throws ApiException {

        okhttp3.Call localVarCall = designUpdateValidateBeforeCall(designid, data, _callback);
        Type localVarReturnType = new TypeToken<Design>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designUpdateList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designUpdateListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/update/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designUpdateListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = designUpdateListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of {current, last update} times
     * @param designid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData designUpdateList(Integer designid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = designUpdateListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of {current, last update} times
     * @param designid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> designUpdateListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designUpdateListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of {current, last update} times
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designUpdateListAsync(Integer designid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = designUpdateListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVerilogInstancesList
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogInstancesListCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/verilog/{moduleid}/instances/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "moduleid" + "\\}", localVarApiClient.escapeString(moduleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVerilogInstancesListValidateBeforeCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVerilogInstancesList(Async)");
        }
        
        // verify the required parameter 'moduleid' is set
        if (moduleid == null) {
            throw new ApiException("Missing the required parameter 'moduleid' when calling designVerilogInstancesList(Async)");
        }
        

        okhttp3.Call localVarCall = designVerilogInstancesListCall(designid, moduleid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designVerilogInstancesList(String designid, String moduleid) throws ApiException {
        designVerilogInstancesListWithHttpInfo(designid, moduleid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designVerilogInstancesListWithHttpInfo(String designid, String moduleid) throws ApiException {
        okhttp3.Call localVarCall = designVerilogInstancesListValidateBeforeCall(designid, moduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogInstancesListAsync(String designid, String moduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVerilogInstancesListValidateBeforeCall(designid, moduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVerilogList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogListCall(String designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/verilog/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVerilogListValidateBeforeCall(String designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVerilogList(Async)");
        }
        

        okhttp3.Call localVarCall = designVerilogListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designVerilogList(String designid) throws ApiException {
        designVerilogListWithHttpInfo(designid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designVerilogListWithHttpInfo(String designid) throws ApiException {
        okhttp3.Call localVarCall = designVerilogListValidateBeforeCall(designid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogListAsync(String designid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVerilogListValidateBeforeCall(designid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVerilogModuleStateList
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogModuleStateListCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/verilog/module/{moduleid}/state/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "moduleid" + "\\}", localVarApiClient.escapeString(moduleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVerilogModuleStateListValidateBeforeCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVerilogModuleStateList(Async)");
        }
        
        // verify the required parameter 'moduleid' is set
        if (moduleid == null) {
            throw new ApiException("Missing the required parameter 'moduleid' when calling designVerilogModuleStateList(Async)");
        }
        

        okhttp3.Call localVarCall = designVerilogModuleStateListCall(designid, moduleid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designVerilogModuleStateList(String designid, String moduleid) throws ApiException {
        designVerilogModuleStateListWithHttpInfo(designid, moduleid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designVerilogModuleStateListWithHttpInfo(String designid, String moduleid) throws ApiException {
        okhttp3.Call localVarCall = designVerilogModuleStateListValidateBeforeCall(designid, moduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogModuleStateListAsync(String designid, String moduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVerilogModuleStateListValidateBeforeCall(designid, moduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVerilogModulesList
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogModulesListCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/verilog/{moduleid}/modules/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "moduleid" + "\\}", localVarApiClient.escapeString(moduleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVerilogModulesListValidateBeforeCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVerilogModulesList(Async)");
        }
        
        // verify the required parameter 'moduleid' is set
        if (moduleid == null) {
            throw new ApiException("Missing the required parameter 'moduleid' when calling designVerilogModulesList(Async)");
        }
        

        okhttp3.Call localVarCall = designVerilogModulesListCall(designid, moduleid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designVerilogModulesList(String designid, String moduleid) throws ApiException {
        designVerilogModulesListWithHttpInfo(designid, moduleid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designVerilogModulesListWithHttpInfo(String designid, String moduleid) throws ApiException {
        okhttp3.Call localVarCall = designVerilogModulesListValidateBeforeCall(designid, moduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogModulesListAsync(String designid, String moduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVerilogModulesListValidateBeforeCall(designid, moduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVerilogWireStateList
     * @param designid  (required)
     * @param wireid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogWireStateListCall(String designid, String wireid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/verilog/wire/{wireid}/state/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "wireid" + "\\}", localVarApiClient.escapeString(wireid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVerilogWireStateListValidateBeforeCall(String designid, String wireid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVerilogWireStateList(Async)");
        }
        
        // verify the required parameter 'wireid' is set
        if (wireid == null) {
            throw new ApiException("Missing the required parameter 'wireid' when calling designVerilogWireStateList(Async)");
        }
        

        okhttp3.Call localVarCall = designVerilogWireStateListCall(designid, wireid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param wireid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designVerilogWireStateList(String designid, String wireid) throws ApiException {
        designVerilogWireStateListWithHttpInfo(designid, wireid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param wireid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designVerilogWireStateListWithHttpInfo(String designid, String wireid) throws ApiException {
        okhttp3.Call localVarCall = designVerilogWireStateListValidateBeforeCall(designid, wireid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param wireid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogWireStateListAsync(String designid, String wireid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVerilogWireStateListValidateBeforeCall(designid, wireid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVerilogWiresList
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogWiresListCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/verilog/{moduleid}/wires/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "moduleid" + "\\}", localVarApiClient.escapeString(moduleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVerilogWiresListValidateBeforeCall(String designid, String moduleid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVerilogWiresList(Async)");
        }
        
        // verify the required parameter 'moduleid' is set
        if (moduleid == null) {
            throw new ApiException("Missing the required parameter 'moduleid' when calling designVerilogWiresList(Async)");
        }
        

        okhttp3.Call localVarCall = designVerilogWiresListCall(designid, moduleid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void designVerilogWiresList(String designid, String moduleid) throws ApiException {
        designVerilogWiresListWithHttpInfo(designid, moduleid);
    }

    /**
     * 
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> designVerilogWiresListWithHttpInfo(String designid, String moduleid) throws ApiException {
        okhttp3.Call localVarCall = designVerilogWiresListValidateBeforeCall(designid, moduleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param designid  (required)
     * @param moduleid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVerilogWiresListAsync(String designid, String moduleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVerilogWiresListValidateBeforeCall(designid, moduleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVersionList
     * @param designid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVersionListCall(Integer designid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/version/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVersionListValidateBeforeCall(Integer designid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = designVersionListCall(designid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get List of design versions
     * @param designid  (required)
     * @return List&lt;DesignVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignVersion> designVersionList(Integer designid) throws ApiException {
        ApiResponse<List<DesignVersion>> localVarResp = designVersionListWithHttpInfo(designid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get List of design versions
     * @param designid  (required)
     * @return ApiResponse&lt;List&lt;DesignVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignVersion>> designVersionListWithHttpInfo(Integer designid) throws ApiException {
        okhttp3.Call localVarCall = designVersionListValidateBeforeCall(designid, null);
        Type localVarReturnType = new TypeToken<List<DesignVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get List of design versions
     * @param designid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVersionListAsync(Integer designid, final ApiCallback<List<DesignVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVersionListValidateBeforeCall(designid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for designVersionRead
     * @param designid  (required)
     * @param versionid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVersionReadCall(Integer designid, Integer versionid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/design/{designid}/version/{versionid}/"
            .replaceAll("\\{" + "designid" + "\\}", localVarApiClient.escapeString(designid.toString()))
            .replaceAll("\\{" + "versionid" + "\\}", localVarApiClient.escapeString(versionid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call designVersionReadValidateBeforeCall(Integer designid, Integer versionid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'designid' is set
        if (designid == null) {
            throw new ApiException("Missing the required parameter 'designid' when calling designVersionRead(Async)");
        }
        
        // verify the required parameter 'versionid' is set
        if (versionid == null) {
            throw new ApiException("Missing the required parameter 'versionid' when calling designVersionRead(Async)");
        }
        

        okhttp3.Call localVarCall = designVersionReadCall(designid, versionid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a design version
     * @param designid  (required)
     * @param versionid  (required)
     * @return List&lt;DesignVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DesignVersion> designVersionRead(Integer designid, Integer versionid) throws ApiException {
        ApiResponse<List<DesignVersion>> localVarResp = designVersionReadWithHttpInfo(designid, versionid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a design version
     * @param designid  (required)
     * @param versionid  (required)
     * @return ApiResponse&lt;List&lt;DesignVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DesignVersion>> designVersionReadWithHttpInfo(Integer designid, Integer versionid) throws ApiException {
        okhttp3.Call localVarCall = designVersionReadValidateBeforeCall(designid, versionid, null);
        Type localVarReturnType = new TypeToken<List<DesignVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a design version
     * @param designid  (required)
     * @param versionid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call designVersionReadAsync(Integer designid, Integer versionid, final ApiCallback<List<DesignVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = designVersionReadValidateBeforeCall(designid, versionid, _callback);
        Type localVarReturnType = new TypeToken<List<DesignVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
