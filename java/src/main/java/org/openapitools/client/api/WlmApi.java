/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WLMModel;
import org.openapitools.client.model.WLMVersion;
import org.openapitools.client.model.WireLoad;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WlmApi {
    private ApiClient localVarApiClient;

    public WlmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WlmApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for wlmCommitCreate
     * @param wlmid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmCommitCreateCall(Integer wlmid, WLMVersion data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/commit/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmCommitCreateValidateBeforeCall(Integer wlmid, WLMVersion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling wlmCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = wlmCommitCreateCall(wlmid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param wlmid  (required)
     * @param data  (required)
     * @return WLMVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WLMVersion wlmCommitCreate(Integer wlmid, WLMVersion data) throws ApiException {
        ApiResponse<WLMVersion> localVarResp = wlmCommitCreateWithHttpInfo(wlmid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param wlmid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;WLMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WLMVersion> wlmCommitCreateWithHttpInfo(Integer wlmid, WLMVersion data) throws ApiException {
        okhttp3.Call localVarCall = wlmCommitCreateValidateBeforeCall(wlmid, data, null);
        Type localVarReturnType = new TypeToken<WLMVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param wlmid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmCommitCreateAsync(Integer wlmid, WLMVersion data, final ApiCallback<WLMVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmCommitCreateValidateBeforeCall(wlmid, data, _callback);
        Type localVarReturnType = new TypeToken<WLMVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wlmCreate
     * @param wlmid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmCreateCall(Integer wlmid, WireLoad data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmCreateValidateBeforeCall(Integer wlmid, WireLoad data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling wlmCreate(Async)");
        }
        

        okhttp3.Call localVarCall = wlmCreateCall(wlmid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create wire load data
     * @param wlmid  (required)
     * @param data  (required)
     * @return WireLoad
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WireLoad wlmCreate(Integer wlmid, WireLoad data) throws ApiException {
        ApiResponse<WireLoad> localVarResp = wlmCreateWithHttpInfo(wlmid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create wire load data
     * @param wlmid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;WireLoad&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireLoad> wlmCreateWithHttpInfo(Integer wlmid, WireLoad data) throws ApiException {
        okhttp3.Call localVarCall = wlmCreateValidateBeforeCall(wlmid, data, null);
        Type localVarReturnType = new TypeToken<WireLoad>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create wire load data
     * @param wlmid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmCreateAsync(Integer wlmid, WireLoad data, final ApiCallback<WireLoad> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmCreateValidateBeforeCall(wlmid, data, _callback);
        Type localVarReturnType = new TypeToken<WireLoad>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wlmDataCreate
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmDataCreateCall(Integer wlmid, Integer dataid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/data/{dataid}/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmDataCreateValidateBeforeCall(Integer wlmid, Integer dataid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmDataCreate(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling wlmDataCreate(Async)");
        }
        

        okhttp3.Call localVarCall = wlmDataCreateCall(wlmid, dataid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void wlmDataCreate(Integer wlmid, Integer dataid) throws ApiException {
        wlmDataCreateWithHttpInfo(wlmid, dataid);
    }

    /**
     * 
     * Delete wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> wlmDataCreateWithHttpInfo(Integer wlmid, Integer dataid) throws ApiException {
        okhttp3.Call localVarCall = wlmDataCreateValidateBeforeCall(wlmid, dataid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmDataCreateAsync(Integer wlmid, Integer dataid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmDataCreateValidateBeforeCall(wlmid, dataid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for wlmDataRead
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmDataReadCall(Integer wlmid, Integer dataid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/data/{dataid}/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmDataReadValidateBeforeCall(Integer wlmid, Integer dataid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmDataRead(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling wlmDataRead(Async)");
        }
        

        okhttp3.Call localVarCall = wlmDataReadCall(wlmid, dataid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @return WireLoad
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WireLoad wlmDataRead(Integer wlmid, Integer dataid) throws ApiException {
        ApiResponse<WireLoad> localVarResp = wlmDataReadWithHttpInfo(wlmid, dataid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @return ApiResponse&lt;WireLoad&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireLoad> wlmDataReadWithHttpInfo(Integer wlmid, Integer dataid) throws ApiException {
        okhttp3.Call localVarCall = wlmDataReadValidateBeforeCall(wlmid, dataid, null);
        Type localVarReturnType = new TypeToken<WireLoad>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmDataReadAsync(Integer wlmid, Integer dataid, final ApiCallback<WireLoad> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmDataReadValidateBeforeCall(wlmid, dataid, _callback);
        Type localVarReturnType = new TypeToken<WireLoad>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wlmDataUpdate
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmDataUpdateCall(Integer wlmid, Integer dataid, WireLoad data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/data/{dataid}/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmDataUpdateValidateBeforeCall(Integer wlmid, Integer dataid, WireLoad data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmDataUpdate(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling wlmDataUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling wlmDataUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = wlmDataUpdateCall(wlmid, dataid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return WireLoad
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WireLoad wlmDataUpdate(Integer wlmid, Integer dataid, WireLoad data) throws ApiException {
        ApiResponse<WireLoad> localVarResp = wlmDataUpdateWithHttpInfo(wlmid, dataid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;WireLoad&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WireLoad> wlmDataUpdateWithHttpInfo(Integer wlmid, Integer dataid, WireLoad data) throws ApiException {
        okhttp3.Call localVarCall = wlmDataUpdateValidateBeforeCall(wlmid, dataid, data, null);
        Type localVarReturnType = new TypeToken<WireLoad>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update wire load data
     * @param wlmid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmDataUpdateAsync(Integer wlmid, Integer dataid, WireLoad data, final ApiCallback<WireLoad> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmDataUpdateValidateBeforeCall(wlmid, dataid, data, _callback);
        Type localVarReturnType = new TypeToken<WireLoad>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wlmRead
     * @param wlmid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmReadCall(Integer wlmid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmReadValidateBeforeCall(Integer wlmid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmRead(Async)");
        }
        

        okhttp3.Call localVarCall = wlmReadCall(wlmid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of wire load data
     * @param wlmid  (required)
     * @return WLMModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public WLMModel wlmRead(Integer wlmid) throws ApiException {
        ApiResponse<WLMModel> localVarResp = wlmReadWithHttpInfo(wlmid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of wire load data
     * @param wlmid  (required)
     * @return ApiResponse&lt;WLMModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WLMModel> wlmReadWithHttpInfo(Integer wlmid) throws ApiException {
        okhttp3.Call localVarCall = wlmReadValidateBeforeCall(wlmid, null);
        Type localVarReturnType = new TypeToken<WLMModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of wire load data
     * @param wlmid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmReadAsync(Integer wlmid, final ApiCallback<WLMModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmReadValidateBeforeCall(wlmid, _callback);
        Type localVarReturnType = new TypeToken<WLMModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for wlmVersionList
     * @param wlmid  (required)
     * @param pcbid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmVersionListCall(String wlmid, Integer pcbid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wlm/{wlmid}/version/"
            .replaceAll("\\{" + "wlmid" + "\\}", localVarApiClient.escapeString(wlmid.toString()))
            .replaceAll("\\{" + "pcbid" + "\\}", localVarApiClient.escapeString(pcbid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call wlmVersionListValidateBeforeCall(String wlmid, Integer pcbid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'wlmid' is set
        if (wlmid == null) {
            throw new ApiException("Missing the required parameter 'wlmid' when calling wlmVersionList(Async)");
        }
        
        // verify the required parameter 'pcbid' is set
        if (pcbid == null) {
            throw new ApiException("Missing the required parameter 'pcbid' when calling wlmVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = wlmVersionListCall(wlmid, pcbid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get WLM versions
     * @param wlmid  (required)
     * @param pcbid  (required)
     * @return List&lt;WLMVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<WLMVersion> wlmVersionList(String wlmid, Integer pcbid) throws ApiException {
        ApiResponse<List<WLMVersion>> localVarResp = wlmVersionListWithHttpInfo(wlmid, pcbid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get WLM versions
     * @param wlmid  (required)
     * @param pcbid  (required)
     * @return ApiResponse&lt;List&lt;WLMVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WLMVersion>> wlmVersionListWithHttpInfo(String wlmid, Integer pcbid) throws ApiException {
        okhttp3.Call localVarCall = wlmVersionListValidateBeforeCall(wlmid, pcbid, null);
        Type localVarReturnType = new TypeToken<List<WLMVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get WLM versions
     * @param wlmid  (required)
     * @param pcbid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call wlmVersionListAsync(String wlmid, Integer pcbid, final ApiCallback<List<WLMVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = wlmVersionListValidateBeforeCall(wlmid, pcbid, _callback);
        Type localVarReturnType = new TypeToken<List<WLMVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
