/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ComputedDeviceData;
import org.openapitools.client.model.Defect0;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.DeviceData;
import org.openapitools.client.model.DeviceDataBulk;
import org.openapitools.client.model.Layer;
import org.openapitools.client.model.LayerStack;
import org.openapitools.client.model.ModelCorner;
import org.openapitools.client.model.PowerSource;
import org.openapitools.client.model.RCCorner;
import org.openapitools.client.model.Technology;
import org.openapitools.client.model.TechnologyMaster;
import org.openapitools.client.model.TechnologyVersion;
import org.openapitools.client.model.UpdateData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TechnologyApi {
    private ApiClient localVarApiClient;

    public TechnologyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TechnologyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiTechnologyDeviceDataDeleteAll
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTechnologyDeviceDataDeleteAllCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTechnologyDeviceDataDeleteAllValidateBeforeCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling apiTechnologyDeviceDataDeleteAll(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling apiTechnologyDeviceDataDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiTechnologyDeviceDataDeleteAllCall(techid, deviceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiTechnologyDeviceDataDeleteAll(Integer techid, Integer deviceid) throws ApiException {
        apiTechnologyDeviceDataDeleteAllWithHttpInfo(techid, deviceid);
    }

    /**
     * 
     * Delete device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTechnologyDeviceDataDeleteAllWithHttpInfo(Integer techid, Integer deviceid) throws ApiException {
        okhttp3.Call localVarCall = apiTechnologyDeviceDataDeleteAllValidateBeforeCall(techid, deviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTechnologyDeviceDataDeleteAllAsync(Integer techid, Integer deviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTechnologyDeviceDataDeleteAllValidateBeforeCall(techid, deviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiTechnologyDeviceDeleteAll
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTechnologyDeviceDeleteAllCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiTechnologyDeviceDeleteAllValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling apiTechnologyDeviceDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiTechnologyDeviceDeleteAllCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete all devices
     * @param techid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiTechnologyDeviceDeleteAll(Integer techid) throws ApiException {
        apiTechnologyDeviceDeleteAllWithHttpInfo(techid);
    }

    /**
     * 
     * Delete all devices
     * @param techid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiTechnologyDeviceDeleteAllWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = apiTechnologyDeviceDeleteAllValidateBeforeCall(techid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete all devices
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiTechnologyDeviceDeleteAllAsync(Integer techid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiTechnologyDeviceDeleteAllValidateBeforeCall(techid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyCommitCreate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyCommitCreateCall(Integer techid, TechnologyVersion data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/commit/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyCommitCreateValidateBeforeCall(Integer techid, TechnologyVersion data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyCommitCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyCommitCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyCommitCreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Commit a version
     * @param techid  (required)
     * @param data  (required)
     * @return TechnologyVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public TechnologyVersion technologyCommitCreate(Integer techid, TechnologyVersion data) throws ApiException {
        ApiResponse<TechnologyVersion> localVarResp = technologyCommitCreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Commit a version
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;TechnologyVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TechnologyVersion> technologyCommitCreateWithHttpInfo(Integer techid, TechnologyVersion data) throws ApiException {
        okhttp3.Call localVarCall = technologyCommitCreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<TechnologyVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commit a version
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, erro message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyCommitCreateAsync(Integer techid, TechnologyVersion data, final ApiCallback<TechnologyVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyCommitCreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<TechnologyVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyD0Create
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0CreateCall(Integer techid, Defect0 data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/d0/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyD0CreateValidateBeforeCall(Integer techid, Defect0 data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyD0Create(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyD0Create(Async)");
        }
        

        okhttp3.Call localVarCall = technologyD0CreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a d0 data
     * @param techid  (required)
     * @param data  (required)
     * @return Defect0
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Defect0 technologyD0Create(Integer techid, Defect0 data) throws ApiException {
        ApiResponse<Defect0> localVarResp = technologyD0CreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a d0 data
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Defect0&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Defect0> technologyD0CreateWithHttpInfo(Integer techid, Defect0 data) throws ApiException {
        okhttp3.Call localVarCall = technologyD0CreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<Defect0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a d0 data
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0CreateAsync(Integer techid, Defect0 data, final ApiCallback<Defect0> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyD0CreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<Defect0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyD0Delete
     * @param techid  (required)
     * @param d0id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0DeleteCall(Integer techid, Integer d0id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/d0/{d0id}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "d0id" + "\\}", localVarApiClient.escapeString(d0id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyD0DeleteValidateBeforeCall(Integer techid, Integer d0id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyD0Delete(Async)");
        }
        
        // verify the required parameter 'd0id' is set
        if (d0id == null) {
            throw new ApiException("Missing the required parameter 'd0id' when calling technologyD0Delete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyD0DeleteCall(techid, d0id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyD0Delete(Integer techid, Integer d0id) throws ApiException {
        technologyD0DeleteWithHttpInfo(techid, d0id);
    }

    /**
     * 
     * Delete a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyD0DeleteWithHttpInfo(Integer techid, Integer d0id) throws ApiException {
        okhttp3.Call localVarCall = technologyD0DeleteValidateBeforeCall(techid, d0id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0DeleteAsync(Integer techid, Integer d0id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyD0DeleteValidateBeforeCall(techid, d0id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyD0List
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0ListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/d0/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyD0ListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyD0List(Async)");
        }
        

        okhttp3.Call localVarCall = technologyD0ListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of d0 data
     * @param techid  (required)
     * @return List&lt;Defect0&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Defect0> technologyD0List(Integer techid) throws ApiException {
        ApiResponse<List<Defect0>> localVarResp = technologyD0ListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of d0 data
     * @param techid  (required)
     * @return ApiResponse&lt;List&lt;Defect0&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Defect0>> technologyD0ListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyD0ListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<List<Defect0>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of d0 data
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0ListAsync(Integer techid, final ApiCallback<List<Defect0>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyD0ListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<List<Defect0>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyD0Read
     * @param techid  (required)
     * @param d0id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0ReadCall(Integer techid, Integer d0id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/d0/{d0id}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "d0id" + "\\}", localVarApiClient.escapeString(d0id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyD0ReadValidateBeforeCall(Integer techid, Integer d0id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyD0Read(Async)");
        }
        
        // verify the required parameter 'd0id' is set
        if (d0id == null) {
            throw new ApiException("Missing the required parameter 'd0id' when calling technologyD0Read(Async)");
        }
        

        okhttp3.Call localVarCall = technologyD0ReadCall(techid, d0id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @return Defect0
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Defect0 technologyD0Read(Integer techid, Integer d0id) throws ApiException {
        ApiResponse<Defect0> localVarResp = technologyD0ReadWithHttpInfo(techid, d0id);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @return ApiResponse&lt;Defect0&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Defect0> technologyD0ReadWithHttpInfo(Integer techid, Integer d0id) throws ApiException {
        okhttp3.Call localVarCall = technologyD0ReadValidateBeforeCall(techid, d0id, null);
        Type localVarReturnType = new TypeToken<Defect0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0ReadAsync(Integer techid, Integer d0id, final ApiCallback<Defect0> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyD0ReadValidateBeforeCall(techid, d0id, _callback);
        Type localVarReturnType = new TypeToken<Defect0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyD0Update
     * @param techid  (required)
     * @param d0id  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0UpdateCall(Integer techid, Integer d0id, Defect0 data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/d0/{d0id}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "d0id" + "\\}", localVarApiClient.escapeString(d0id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyD0UpdateValidateBeforeCall(Integer techid, Integer d0id, Defect0 data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyD0Update(Async)");
        }
        
        // verify the required parameter 'd0id' is set
        if (d0id == null) {
            throw new ApiException("Missing the required parameter 'd0id' when calling technologyD0Update(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyD0Update(Async)");
        }
        

        okhttp3.Call localVarCall = technologyD0UpdateCall(techid, d0id, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @param data  (required)
     * @return Defect0
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Defect0 technologyD0Update(Integer techid, Integer d0id, Defect0 data) throws ApiException {
        ApiResponse<Defect0> localVarResp = technologyD0UpdateWithHttpInfo(techid, d0id, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Defect0&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Defect0> technologyD0UpdateWithHttpInfo(Integer techid, Integer d0id, Defect0 data) throws ApiException {
        okhttp3.Call localVarCall = technologyD0UpdateValidateBeforeCall(techid, d0id, data, null);
        Type localVarReturnType = new TypeToken<Defect0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a d0 data
     * @param techid  (required)
     * @param d0id  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyD0UpdateAsync(Integer techid, Integer d0id, Defect0 data, final ApiCallback<Defect0> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyD0UpdateValidateBeforeCall(techid, d0id, data, _callback);
        Type localVarReturnType = new TypeToken<Defect0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceCreate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceCreateCall(Integer techid, Device data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceCreateValidateBeforeCall(Integer techid, Device data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyDeviceCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceCreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a device
     * @param techid  (required)
     * @param data  (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Device technologyDeviceCreate(Integer techid, Device data) throws ApiException {
        ApiResponse<Device> localVarResp = technologyDeviceCreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a device
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> technologyDeviceCreateWithHttpInfo(Integer techid, Device data) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceCreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a device
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceCreateAsync(Integer techid, Device data, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceCreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataBulkCreate
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataBulkCreateCall(Integer techid, Integer deviceid, List<DeviceDataBulk> data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/bulk/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataBulkCreateValidateBeforeCall(Integer techid, Integer deviceid, List<DeviceDataBulk> data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataBulkCreate(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataBulkCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyDeviceDataBulkCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataBulkCreateCall(techid, deviceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyDeviceDataBulkCreate(Integer techid, Integer deviceid, List<DeviceDataBulk> data) throws ApiException {
        technologyDeviceDataBulkCreateWithHttpInfo(techid, deviceid, data);
    }

    /**
     * 
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyDeviceDataBulkCreateWithHttpInfo(Integer techid, Integer deviceid, List<DeviceDataBulk> data) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataBulkCreateValidateBeforeCall(techid, deviceid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataBulkCreateAsync(Integer techid, Integer deviceid, List<DeviceDataBulk> data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataBulkCreateValidateBeforeCall(techid, deviceid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataComputeList
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (required)
     * @param vds Drain-Source voltage (required)
     * @param vgs Gate-Source voltage (required)
     * @param vbs Body-Source voltage (required)
     * @param t Temperature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataComputeListCall(Integer techid, Integer deviceid, String p, BigDecimal vds, BigDecimal vgs, BigDecimal vbs, Integer t, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/compute/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (p != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p", p));
        }

        if (vds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vds", vds));
        }

        if (vgs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vgs", vgs));
        }

        if (vbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Vbs", vbs));
        }

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataComputeListValidateBeforeCall(Integer techid, Integer deviceid, String p, BigDecimal vds, BigDecimal vgs, BigDecimal vbs, Integer t, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataComputeList(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataComputeList(Async)");
        }
        
        // verify the required parameter 'p' is set
        if (p == null) {
            throw new ApiException("Missing the required parameter 'p' when calling technologyDeviceDataComputeList(Async)");
        }
        
        // verify the required parameter 'vds' is set
        if (vds == null) {
            throw new ApiException("Missing the required parameter 'vds' when calling technologyDeviceDataComputeList(Async)");
        }
        
        // verify the required parameter 'vgs' is set
        if (vgs == null) {
            throw new ApiException("Missing the required parameter 'vgs' when calling technologyDeviceDataComputeList(Async)");
        }
        
        // verify the required parameter 'vbs' is set
        if (vbs == null) {
            throw new ApiException("Missing the required parameter 'vbs' when calling technologyDeviceDataComputeList(Async)");
        }
        
        // verify the required parameter 't' is set
        if (t == null) {
            throw new ApiException("Missing the required parameter 't' when calling technologyDeviceDataComputeList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataComputeListCall(techid, deviceid, p, vds, vgs, vbs, t, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (required)
     * @param vds Drain-Source voltage (required)
     * @param vgs Gate-Source voltage (required)
     * @param vbs Body-Source voltage (required)
     * @param t Temperature (required)
     * @return ComputedDeviceData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ComputedDeviceData technologyDeviceDataComputeList(Integer techid, Integer deviceid, String p, BigDecimal vds, BigDecimal vgs, BigDecimal vbs, Integer t) throws ApiException {
        ApiResponse<ComputedDeviceData> localVarResp = technologyDeviceDataComputeListWithHttpInfo(techid, deviceid, p, vds, vgs, vbs, t);
        return localVarResp.getData();
    }

    /**
     * 
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (required)
     * @param vds Drain-Source voltage (required)
     * @param vgs Gate-Source voltage (required)
     * @param vbs Body-Source voltage (required)
     * @param t Temperature (required)
     * @return ApiResponse&lt;ComputedDeviceData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputedDeviceData> technologyDeviceDataComputeListWithHttpInfo(Integer techid, Integer deviceid, String p, BigDecimal vds, BigDecimal vgs, BigDecimal vbs, Integer t) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataComputeListValidateBeforeCall(techid, deviceid, p, vds, vgs, vbs, t, null);
        Type localVarReturnType = new TypeToken<ComputedDeviceData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (required)
     * @param vds Drain-Source voltage (required)
     * @param vgs Gate-Source voltage (required)
     * @param vbs Body-Source voltage (required)
     * @param t Temperature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataComputeListAsync(Integer techid, Integer deviceid, String p, BigDecimal vds, BigDecimal vgs, BigDecimal vbs, Integer t, final ApiCallback<ComputedDeviceData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataComputeListValidateBeforeCall(techid, deviceid, p, vds, vgs, vbs, t, _callback);
        Type localVarReturnType = new TypeToken<ComputedDeviceData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataCreate
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataCreateCall(Integer techid, Integer deviceid, DeviceData data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataCreateValidateBeforeCall(Integer techid, Integer deviceid, DeviceData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataCreate(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyDeviceDataCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataCreateCall(techid, deviceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return DeviceData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceData technologyDeviceDataCreate(Integer techid, Integer deviceid, DeviceData data) throws ApiException {
        ApiResponse<DeviceData> localVarResp = technologyDeviceDataCreateWithHttpInfo(techid, deviceid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceData> technologyDeviceDataCreateWithHttpInfo(Integer techid, Integer deviceid, DeviceData data) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataCreateValidateBeforeCall(techid, deviceid, data, null);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataCreateAsync(Integer techid, Integer deviceid, DeviceData data, final ApiCallback<DeviceData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataCreateValidateBeforeCall(techid, deviceid, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataDelete
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataDeleteCall(Integer techid, Integer deviceid, Integer dataid, DeviceData data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/{dataid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataDeleteValidateBeforeCall(Integer techid, Integer deviceid, Integer dataid, DeviceData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataDelete(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataDelete(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling technologyDeviceDataDelete(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyDeviceDataDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataDeleteCall(techid, deviceid, dataid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return DeviceData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceData technologyDeviceDataDelete(Integer techid, Integer deviceid, Integer dataid, DeviceData data) throws ApiException {
        ApiResponse<DeviceData> localVarResp = technologyDeviceDataDeleteWithHttpInfo(techid, deviceid, dataid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceData> technologyDeviceDataDeleteWithHttpInfo(Integer techid, Integer deviceid, Integer dataid, DeviceData data) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataDeleteValidateBeforeCall(techid, deviceid, dataid, data, null);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataDeleteAsync(Integer techid, Integer deviceid, Integer dataid, DeviceData data, final ApiCallback<DeviceData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataDeleteValidateBeforeCall(techid, deviceid, dataid, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataList
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (optional)
     * @param t Temperature (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataListCall(Integer techid, Integer deviceid, String p, Integer t, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (p != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p", p));
        }

        if (t != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("t", t));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataListValidateBeforeCall(Integer techid, Integer deviceid, String p, Integer t, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataList(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataListCall(techid, deviceid, p, t, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (optional)
     * @param t Temperature (optional)
     * @return List&lt;DeviceData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<DeviceData> technologyDeviceDataList(Integer techid, Integer deviceid, String p, Integer t) throws ApiException {
        ApiResponse<List<DeviceData>> localVarResp = technologyDeviceDataListWithHttpInfo(techid, deviceid, p, t);
        return localVarResp.getData();
    }

    /**
     * 
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (optional)
     * @param t Temperature (optional)
     * @return ApiResponse&lt;List&lt;DeviceData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeviceData>> technologyDeviceDataListWithHttpInfo(Integer techid, Integer deviceid, String p, Integer t) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataListValidateBeforeCall(techid, deviceid, p, t, null);
        Type localVarReturnType = new TypeToken<List<DeviceData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param p Process name (optional)
     * @param t Temperature (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataListAsync(Integer techid, Integer deviceid, String p, Integer t, final ApiCallback<List<DeviceData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataListValidateBeforeCall(techid, deviceid, p, t, _callback);
        Type localVarReturnType = new TypeToken<List<DeviceData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataRead
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataReadCall(Integer techid, Integer deviceid, Integer dataid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/{dataid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataReadValidateBeforeCall(Integer techid, Integer deviceid, Integer dataid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataRead(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataRead(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling technologyDeviceDataRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataReadCall(techid, deviceid, dataid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @return DeviceData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceData technologyDeviceDataRead(Integer techid, Integer deviceid, Integer dataid) throws ApiException {
        ApiResponse<DeviceData> localVarResp = technologyDeviceDataReadWithHttpInfo(techid, deviceid, dataid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @return ApiResponse&lt;DeviceData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceData> technologyDeviceDataReadWithHttpInfo(Integer techid, Integer deviceid, Integer dataid) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataReadValidateBeforeCall(techid, deviceid, dataid, null);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataReadAsync(Integer techid, Integer deviceid, Integer dataid, final ApiCallback<DeviceData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataReadValidateBeforeCall(techid, deviceid, dataid, _callback);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataTrainCreate
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data training started </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataTrainCreateCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/train/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataTrainCreateValidateBeforeCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataTrainCreate(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataTrainCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataTrainCreateCall(techid, deviceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data training started </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyDeviceDataTrainCreate(Integer techid, Integer deviceid) throws ApiException {
        technologyDeviceDataTrainCreateWithHttpInfo(techid, deviceid);
    }

    /**
     * 
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data training started </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyDeviceDataTrainCreateWithHttpInfo(Integer techid, Integer deviceid) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataTrainCreateValidateBeforeCall(techid, deviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data training started </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataTrainCreateAsync(Integer techid, Integer deviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataTrainCreateValidateBeforeCall(techid, deviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDataUpdate
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataUpdateCall(Integer techid, Integer deviceid, Integer dataid, DeviceData data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/data/{dataid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()))
            .replaceAll("\\{" + "dataid" + "\\}", localVarApiClient.escapeString(dataid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDataUpdateValidateBeforeCall(Integer techid, Integer deviceid, Integer dataid, DeviceData data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDataUpdate(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDataUpdate(Async)");
        }
        
        // verify the required parameter 'dataid' is set
        if (dataid == null) {
            throw new ApiException("Missing the required parameter 'dataid' when calling technologyDeviceDataUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyDeviceDataUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDataUpdateCall(techid, deviceid, dataid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return DeviceData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceData technologyDeviceDataUpdate(Integer techid, Integer deviceid, Integer dataid, DeviceData data) throws ApiException {
        ApiResponse<DeviceData> localVarResp = technologyDeviceDataUpdateWithHttpInfo(techid, deviceid, dataid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;DeviceData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceData> technologyDeviceDataUpdateWithHttpInfo(Integer techid, Integer deviceid, Integer dataid, DeviceData data) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDataUpdateValidateBeforeCall(techid, deviceid, dataid, data, null);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update device data
     * @param techid  (required)
     * @param deviceid  (required)
     * @param dataid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDataUpdateAsync(Integer techid, Integer deviceid, Integer dataid, DeviceData data, final ApiCallback<DeviceData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDataUpdateValidateBeforeCall(techid, deviceid, dataid, data, _callback);
        Type localVarReturnType = new TypeToken<DeviceData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceDelete
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDeleteCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceDeleteValidateBeforeCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceDelete(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceDeleteCall(techid, deviceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyDeviceDelete(Integer techid, Integer deviceid) throws ApiException {
        technologyDeviceDeleteWithHttpInfo(techid, deviceid);
    }

    /**
     * 
     * Delete a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyDeviceDeleteWithHttpInfo(Integer techid, Integer deviceid) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceDeleteValidateBeforeCall(techid, deviceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceDeleteAsync(Integer techid, Integer deviceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceDeleteValidateBeforeCall(techid, deviceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceList
     * @param techid  (required)
     * @param name Device name (optional)
     * @param l Device length (optional)
     * @param w Device width (optional)
     * @param nfin Device nfin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceListCall(Integer techid, String name, Integer l, Integer w, Integer nfin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (l != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("l", l));
        }

        if (w != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("w", w));
        }

        if (nfin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nfin", nfin));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceListValidateBeforeCall(Integer techid, String name, Integer l, Integer w, Integer nfin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceListCall(techid, name, l, w, nfin, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of devices
     * @param techid  (required)
     * @param name Device name (optional)
     * @param l Device length (optional)
     * @param w Device width (optional)
     * @param nfin Device nfin (optional)
     * @return List&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Device> technologyDeviceList(Integer techid, String name, Integer l, Integer w, Integer nfin) throws ApiException {
        ApiResponse<List<Device>> localVarResp = technologyDeviceListWithHttpInfo(techid, name, l, w, nfin);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of devices
     * @param techid  (required)
     * @param name Device name (optional)
     * @param l Device length (optional)
     * @param w Device width (optional)
     * @param nfin Device nfin (optional)
     * @return ApiResponse&lt;List&lt;Device&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Device>> technologyDeviceListWithHttpInfo(Integer techid, String name, Integer l, Integer w, Integer nfin) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceListValidateBeforeCall(techid, name, l, w, nfin, null);
        Type localVarReturnType = new TypeToken<List<Device>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of devices
     * @param techid  (required)
     * @param name Device name (optional)
     * @param l Device length (optional)
     * @param w Device width (optional)
     * @param nfin Device nfin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceListAsync(Integer techid, String name, Integer l, Integer w, Integer nfin, final ApiCallback<List<Device>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceListValidateBeforeCall(techid, name, l, w, nfin, _callback);
        Type localVarReturnType = new TypeToken<List<Device>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceRead
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceReadCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceReadValidateBeforeCall(Integer techid, Integer deviceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceRead(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceReadCall(techid, deviceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Device technologyDeviceRead(Integer techid, Integer deviceid) throws ApiException {
        ApiResponse<Device> localVarResp = technologyDeviceReadWithHttpInfo(techid, deviceid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> technologyDeviceReadWithHttpInfo(Integer techid, Integer deviceid) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceReadValidateBeforeCall(techid, deviceid, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceReadAsync(Integer techid, Integer deviceid, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceReadValidateBeforeCall(techid, deviceid, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyDeviceUpdate
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceUpdateCall(Integer techid, Integer deviceid, Device data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/device/{deviceid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "deviceid" + "\\}", localVarApiClient.escapeString(deviceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyDeviceUpdateValidateBeforeCall(Integer techid, Integer deviceid, Device data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyDeviceUpdate(Async)");
        }
        
        // verify the required parameter 'deviceid' is set
        if (deviceid == null) {
            throw new ApiException("Missing the required parameter 'deviceid' when calling technologyDeviceUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyDeviceUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyDeviceUpdateCall(techid, deviceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return Device
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Device technologyDeviceUpdate(Integer techid, Integer deviceid, Device data) throws ApiException {
        ApiResponse<Device> localVarResp = technologyDeviceUpdateWithHttpInfo(techid, deviceid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Device> technologyDeviceUpdateWithHttpInfo(Integer techid, Integer deviceid, Device data) throws ApiException {
        okhttp3.Call localVarCall = technologyDeviceUpdateValidateBeforeCall(techid, deviceid, data, null);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a device
     * @param techid  (required)
     * @param deviceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyDeviceUpdateAsync(Integer techid, Integer deviceid, Device data, final ApiCallback<Device> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyDeviceUpdateValidateBeforeCall(techid, deviceid, data, _callback);
        Type localVarReturnType = new TypeToken<Device>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackClone
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackCloneCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/clone/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackCloneValidateBeforeCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackClone(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackClone(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackCloneCall(techid, stackid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Copy a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @return LayerStack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LayerStack technologyLayerstackClone(Integer techid, Integer stackid) throws ApiException {
        ApiResponse<LayerStack> localVarResp = technologyLayerstackCloneWithHttpInfo(techid, stackid);
        return localVarResp.getData();
    }

    /**
     * 
     * Copy a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @return ApiResponse&lt;LayerStack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LayerStack> technologyLayerstackCloneWithHttpInfo(Integer techid, Integer stackid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackCloneValidateBeforeCall(techid, stackid, null);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copy a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackCloneAsync(Integer techid, Integer stackid, final ApiCallback<LayerStack> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackCloneValidateBeforeCall(techid, stackid, _callback);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackCreate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackCreateCall(Integer techid, LayerStack data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackCreateValidateBeforeCall(Integer techid, LayerStack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyLayerstackCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackCreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return LayerStack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LayerStack technologyLayerstackCreate(Integer techid, LayerStack data) throws ApiException {
        ApiResponse<LayerStack> localVarResp = technologyLayerstackCreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;LayerStack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LayerStack> technologyLayerstackCreateWithHttpInfo(Integer techid, LayerStack data) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackCreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackCreateAsync(Integer techid, LayerStack data, final ApiCallback<LayerStack> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackCreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackDelete
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackDeleteCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackDeleteValidateBeforeCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackDelete(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackDeleteCall(techid, stackid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyLayerstackDelete(Integer techid, Integer stackid) throws ApiException {
        technologyLayerstackDeleteWithHttpInfo(techid, stackid);
    }

    /**
     * 
     * Delete a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyLayerstackDeleteWithHttpInfo(Integer techid, Integer stackid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackDeleteValidateBeforeCall(techid, stackid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackDeleteAsync(Integer techid, Integer stackid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackDeleteValidateBeforeCall(techid, stackid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackLayerClone
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerCloneCall(Integer techid, Integer stackid, Integer layerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/layer/{layerid}/clone/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()))
            .replaceAll("\\{" + "layerid" + "\\}", localVarApiClient.escapeString(layerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackLayerCloneValidateBeforeCall(Integer techid, Integer stackid, Integer layerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackLayerClone(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackLayerClone(Async)");
        }
        
        // verify the required parameter 'layerid' is set
        if (layerid == null) {
            throw new ApiException("Missing the required parameter 'layerid' when calling technologyLayerstackLayerClone(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackLayerCloneCall(techid, stackid, layerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Copy a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @return Layer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Layer technologyLayerstackLayerClone(Integer techid, Integer stackid, Integer layerid) throws ApiException {
        ApiResponse<Layer> localVarResp = technologyLayerstackLayerCloneWithHttpInfo(techid, stackid, layerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Copy a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @return ApiResponse&lt;Layer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Layer> technologyLayerstackLayerCloneWithHttpInfo(Integer techid, Integer stackid, Integer layerid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackLayerCloneValidateBeforeCall(techid, stackid, layerid, null);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copy a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerCloneAsync(Integer techid, Integer stackid, Integer layerid, final ApiCallback<Layer> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackLayerCloneValidateBeforeCall(techid, stackid, layerid, _callback);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackLayerCreate
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerCreateCall(Integer techid, Integer stackid, Layer data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/layer/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackLayerCreateValidateBeforeCall(Integer techid, Integer stackid, Layer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackLayerCreate(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackLayerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyLayerstackLayerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackLayerCreateCall(techid, stackid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @return Layer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Layer technologyLayerstackLayerCreate(Integer techid, Integer stackid, Layer data) throws ApiException {
        ApiResponse<Layer> localVarResp = technologyLayerstackLayerCreateWithHttpInfo(techid, stackid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Layer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Layer> technologyLayerstackLayerCreateWithHttpInfo(Integer techid, Integer stackid, Layer data) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackLayerCreateValidateBeforeCall(techid, stackid, data, null);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerCreateAsync(Integer techid, Integer stackid, Layer data, final ApiCallback<Layer> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackLayerCreateValidateBeforeCall(techid, stackid, data, _callback);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackLayerDelete
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerDeleteCall(Integer techid, Integer stackid, Integer layerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/layer/{layerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()))
            .replaceAll("\\{" + "layerid" + "\\}", localVarApiClient.escapeString(layerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackLayerDeleteValidateBeforeCall(Integer techid, Integer stackid, Integer layerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackLayerDelete(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackLayerDelete(Async)");
        }
        
        // verify the required parameter 'layerid' is set
        if (layerid == null) {
            throw new ApiException("Missing the required parameter 'layerid' when calling technologyLayerstackLayerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackLayerDeleteCall(techid, stackid, layerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyLayerstackLayerDelete(Integer techid, Integer stackid, Integer layerid) throws ApiException {
        technologyLayerstackLayerDeleteWithHttpInfo(techid, stackid, layerid);
    }

    /**
     * 
     * Delete a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyLayerstackLayerDeleteWithHttpInfo(Integer techid, Integer stackid, Integer layerid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackLayerDeleteValidateBeforeCall(techid, stackid, layerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerDeleteAsync(Integer techid, Integer stackid, Integer layerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackLayerDeleteValidateBeforeCall(techid, stackid, layerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackLayerList
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerListCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/layer/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackLayerListValidateBeforeCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackLayerList(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackLayerList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackLayerListCall(techid, stackid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of layers
     * @param techid  (required)
     * @param stackid  (required)
     * @return List&lt;Layer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<Layer> technologyLayerstackLayerList(Integer techid, Integer stackid) throws ApiException {
        ApiResponse<List<Layer>> localVarResp = technologyLayerstackLayerListWithHttpInfo(techid, stackid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of layers
     * @param techid  (required)
     * @param stackid  (required)
     * @return ApiResponse&lt;List&lt;Layer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Layer>> technologyLayerstackLayerListWithHttpInfo(Integer techid, Integer stackid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackLayerListValidateBeforeCall(techid, stackid, null);
        Type localVarReturnType = new TypeToken<List<Layer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of layers
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerListAsync(Integer techid, Integer stackid, final ApiCallback<List<Layer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackLayerListValidateBeforeCall(techid, stackid, _callback);
        Type localVarReturnType = new TypeToken<List<Layer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackLayerRead
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerReadCall(Integer techid, Integer stackid, Integer layerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/layer/{layerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()))
            .replaceAll("\\{" + "layerid" + "\\}", localVarApiClient.escapeString(layerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackLayerReadValidateBeforeCall(Integer techid, Integer stackid, Integer layerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackLayerRead(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackLayerRead(Async)");
        }
        
        // verify the required parameter 'layerid' is set
        if (layerid == null) {
            throw new ApiException("Missing the required parameter 'layerid' when calling technologyLayerstackLayerRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackLayerReadCall(techid, stackid, layerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @return Layer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Layer technologyLayerstackLayerRead(Integer techid, Integer stackid, Integer layerid) throws ApiException {
        ApiResponse<Layer> localVarResp = technologyLayerstackLayerReadWithHttpInfo(techid, stackid, layerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @return ApiResponse&lt;Layer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Layer> technologyLayerstackLayerReadWithHttpInfo(Integer techid, Integer stackid, Integer layerid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackLayerReadValidateBeforeCall(techid, stackid, layerid, null);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerReadAsync(Integer techid, Integer stackid, Integer layerid, final ApiCallback<Layer> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackLayerReadValidateBeforeCall(techid, stackid, layerid, _callback);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackLayerUpdate
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerUpdateCall(Integer techid, Integer stackid, Integer layerid, Layer data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/layer/{layerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()))
            .replaceAll("\\{" + "layerid" + "\\}", localVarApiClient.escapeString(layerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackLayerUpdateValidateBeforeCall(Integer techid, Integer stackid, Integer layerid, Layer data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackLayerUpdate(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackLayerUpdate(Async)");
        }
        
        // verify the required parameter 'layerid' is set
        if (layerid == null) {
            throw new ApiException("Missing the required parameter 'layerid' when calling technologyLayerstackLayerUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyLayerstackLayerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackLayerUpdateCall(techid, stackid, layerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param data  (required)
     * @return Layer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Layer technologyLayerstackLayerUpdate(Integer techid, Integer stackid, Integer layerid, Layer data) throws ApiException {
        ApiResponse<Layer> localVarResp = technologyLayerstackLayerUpdateWithHttpInfo(techid, stackid, layerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Layer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Layer> technologyLayerstackLayerUpdateWithHttpInfo(Integer techid, Integer stackid, Integer layerid, Layer data) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackLayerUpdateValidateBeforeCall(techid, stackid, layerid, data, null);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a layer
     * @param techid  (required)
     * @param stackid  (required)
     * @param layerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackLayerUpdateAsync(Integer techid, Integer stackid, Integer layerid, Layer data, final ApiCallback<Layer> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackLayerUpdateValidateBeforeCall(techid, stackid, layerid, data, _callback);
        Type localVarReturnType = new TypeToken<Layer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of layer stacks
     * @param techid  (required)
     * @return List&lt;LayerStack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<LayerStack> technologyLayerstackList(Integer techid) throws ApiException {
        ApiResponse<List<LayerStack>> localVarResp = technologyLayerstackListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of layer stacks
     * @param techid  (required)
     * @return ApiResponse&lt;List&lt;LayerStack&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LayerStack>> technologyLayerstackListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<List<LayerStack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of layer stacks
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackListAsync(Integer techid, final ApiCallback<List<LayerStack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<List<LayerStack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackRead
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackReadCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackReadValidateBeforeCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackRead(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackReadCall(techid, stackid, _callback);
        return localVarCall;

    }

    /**
     * 
     * get a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @return LayerStack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LayerStack technologyLayerstackRead(Integer techid, Integer stackid) throws ApiException {
        ApiResponse<LayerStack> localVarResp = technologyLayerstackReadWithHttpInfo(techid, stackid);
        return localVarResp.getData();
    }

    /**
     * 
     * get a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @return ApiResponse&lt;LayerStack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LayerStack> technologyLayerstackReadWithHttpInfo(Integer techid, Integer stackid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackReadValidateBeforeCall(techid, stackid, null);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackReadAsync(Integer techid, Integer stackid, final ApiCallback<LayerStack> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackReadValidateBeforeCall(techid, stackid, _callback);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackUpdate
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackUpdateCall(Integer techid, Integer stackid, LayerStack data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackUpdateValidateBeforeCall(Integer techid, Integer stackid, LayerStack data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackUpdate(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyLayerstackUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackUpdateCall(techid, stackid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @return LayerStack
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public LayerStack technologyLayerstackUpdate(Integer techid, Integer stackid, LayerStack data) throws ApiException {
        ApiResponse<LayerStack> localVarResp = technologyLayerstackUpdateWithHttpInfo(techid, stackid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;LayerStack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LayerStack> technologyLayerstackUpdateWithHttpInfo(Integer techid, Integer stackid, LayerStack data) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackUpdateValidateBeforeCall(techid, stackid, data, null);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a layer stack
     * @param techid  (required)
     * @param stackid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackUpdateAsync(Integer techid, Integer stackid, LayerStack data, final ApiCallback<LayerStack> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackUpdateValidateBeforeCall(techid, stackid, data, _callback);
        Type localVarReturnType = new TypeToken<LayerStack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLayerstackUpdateList
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackUpdateListCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/layerstack/{stackid}/update/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "stackid" + "\\}", localVarApiClient.escapeString(stackid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLayerstackUpdateListValidateBeforeCall(Integer techid, Integer stackid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyLayerstackUpdateList(Async)");
        }
        
        // verify the required parameter 'stackid' is set
        if (stackid == null) {
            throw new ApiException("Missing the required parameter 'stackid' when calling technologyLayerstackUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLayerstackUpdateListCall(techid, stackid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param techid  (required)
     * @param stackid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData technologyLayerstackUpdateList(Integer techid, Integer stackid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = technologyLayerstackUpdateListWithHttpInfo(techid, stackid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param techid  (required)
     * @param stackid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> technologyLayerstackUpdateListWithHttpInfo(Integer techid, Integer stackid) throws ApiException {
        okhttp3.Call localVarCall = technologyLayerstackUpdateListValidateBeforeCall(techid, stackid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param techid  (required)
     * @param stackid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLayerstackUpdateListAsync(Integer techid, Integer stackid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLayerstackUpdateListValidateBeforeCall(techid, stackid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryClone
     * @param techmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryCloneCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/library/{techmasterid}/clone/"
            .replaceAll("\\{" + "techmasterid" + "\\}", localVarApiClient.escapeString(techmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryCloneValidateBeforeCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techmasterid' is set
        if (techmasterid == null) {
            throw new ApiException("Missing the required parameter 'techmasterid' when calling technologyLibraryClone(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLibraryCloneCall(techmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Creates a copy of technology
     * @param techmasterid  (required)
     * @return TechnologyMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public TechnologyMaster technologyLibraryClone(Integer techmasterid) throws ApiException {
        ApiResponse<TechnologyMaster> localVarResp = technologyLibraryCloneWithHttpInfo(techmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a copy of technology
     * @param techmasterid  (required)
     * @return ApiResponse&lt;TechnologyMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TechnologyMaster> technologyLibraryCloneWithHttpInfo(Integer techmasterid) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryCloneValidateBeforeCall(techmasterid, null);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a copy of technology
     * @param techmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryCloneAsync(Integer techmasterid, final ApiCallback<TechnologyMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryCloneValidateBeforeCall(techmasterid, _callback);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryCreate
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryCreateCall(TechnologyMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryCreateValidateBeforeCall(TechnologyMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyLibraryCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLibraryCreateCall(data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create new technology
     * @param data  (required)
     * @return TechnologyMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public TechnologyMaster technologyLibraryCreate(TechnologyMaster data) throws ApiException {
        ApiResponse<TechnologyMaster> localVarResp = technologyLibraryCreateWithHttpInfo(data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new technology
     * @param data  (required)
     * @return ApiResponse&lt;TechnologyMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TechnologyMaster> technologyLibraryCreateWithHttpInfo(TechnologyMaster data) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryCreateValidateBeforeCall(data, null);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new technology
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryCreateAsync(TechnologyMaster data, final ApiCallback<TechnologyMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryCreateValidateBeforeCall(data, _callback);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryDelete
     * @param techmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryDeleteCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/library/{techmasterid}/"
            .replaceAll("\\{" + "techmasterid" + "\\}", localVarApiClient.escapeString(techmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryDeleteValidateBeforeCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techmasterid' is set
        if (techmasterid == null) {
            throw new ApiException("Missing the required parameter 'techmasterid' when calling technologyLibraryDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLibraryDeleteCall(techmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a technology
     * @param techmasterid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public void technologyLibraryDelete(Integer techmasterid) throws ApiException {
        technologyLibraryDeleteWithHttpInfo(techmasterid);
    }

    /**
     * 
     * Delete a technology
     * @param techmasterid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyLibraryDeleteWithHttpInfo(Integer techmasterid) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryDeleteValidateBeforeCall(techmasterid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a technology
     * @param techmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryDeleteAsync(Integer techmasterid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryDeleteValidateBeforeCall(techmasterid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryList
     * @param name Project name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryListCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/library/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryListValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = technologyLibraryListCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of technologies
     * @param name Project name (optional)
     * @return List&lt;TechnologyMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<TechnologyMaster> technologyLibraryList(String name) throws ApiException {
        ApiResponse<List<TechnologyMaster>> localVarResp = technologyLibraryListWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of technologies
     * @param name Project name (optional)
     * @return ApiResponse&lt;List&lt;TechnologyMaster&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TechnologyMaster>> technologyLibraryListWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryListValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<List<TechnologyMaster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of technologies
     * @param name Project name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryListAsync(String name, final ApiCallback<List<TechnologyMaster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryListValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<List<TechnologyMaster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryRead
     * @param techmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryReadCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/library/{techmasterid}/"
            .replaceAll("\\{" + "techmasterid" + "\\}", localVarApiClient.escapeString(techmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryReadValidateBeforeCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techmasterid' is set
        if (techmasterid == null) {
            throw new ApiException("Missing the required parameter 'techmasterid' when calling technologyLibraryRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLibraryReadCall(techmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a technology
     * @param techmasterid  (required)
     * @return TechnologyMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public TechnologyMaster technologyLibraryRead(Integer techmasterid) throws ApiException {
        ApiResponse<TechnologyMaster> localVarResp = technologyLibraryReadWithHttpInfo(techmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a technology
     * @param techmasterid  (required)
     * @return ApiResponse&lt;TechnologyMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TechnologyMaster> technologyLibraryReadWithHttpInfo(Integer techmasterid) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryReadValidateBeforeCall(techmasterid, null);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a technology
     * @param techmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryReadAsync(Integer techmasterid, final ApiCallback<TechnologyMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryReadValidateBeforeCall(techmasterid, _callback);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryUpdate
     * @param techmasterid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryUpdateCall(Integer techmasterid, TechnologyMaster data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/library/{techmasterid}/"
            .replaceAll("\\{" + "techmasterid" + "\\}", localVarApiClient.escapeString(techmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryUpdateValidateBeforeCall(Integer techmasterid, TechnologyMaster data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techmasterid' is set
        if (techmasterid == null) {
            throw new ApiException("Missing the required parameter 'techmasterid' when calling technologyLibraryUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyLibraryUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLibraryUpdateCall(techmasterid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a technology
     * @param techmasterid  (required)
     * @param data  (required)
     * @return TechnologyMaster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public TechnologyMaster technologyLibraryUpdate(Integer techmasterid, TechnologyMaster data) throws ApiException {
        ApiResponse<TechnologyMaster> localVarResp = technologyLibraryUpdateWithHttpInfo(techmasterid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a technology
     * @param techmasterid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;TechnologyMaster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TechnologyMaster> technologyLibraryUpdateWithHttpInfo(Integer techmasterid, TechnologyMaster data) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryUpdateValidateBeforeCall(techmasterid, data, null);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a technology
     * @param techmasterid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryUpdateAsync(Integer techmasterid, TechnologyMaster data, final ApiCallback<TechnologyMaster> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryUpdateValidateBeforeCall(techmasterid, data, _callback);
        Type localVarReturnType = new TypeToken<TechnologyMaster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryUpdateList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryUpdateListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/library/update/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryUpdateListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = technologyLibraryUpdateListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData technologyLibraryUpdateList() throws ApiException {
        ApiResponse<UpdateData> localVarResp = technologyLibraryUpdateListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> technologyLibraryUpdateListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryUpdateListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryUpdateListAsync(final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryUpdateListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyLibraryVersionList
     * @param techmasterid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryVersionListCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/library/{techmasterid}/version/"
            .replaceAll("\\{" + "techmasterid" + "\\}", localVarApiClient.escapeString(techmasterid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyLibraryVersionListValidateBeforeCall(Integer techmasterid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techmasterid' is set
        if (techmasterid == null) {
            throw new ApiException("Missing the required parameter 'techmasterid' when calling technologyLibraryVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyLibraryVersionListCall(techmasterid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get technology versions
     * @param techmasterid  (required)
     * @return List&lt;TechnologyVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<TechnologyVersion> technologyLibraryVersionList(Integer techmasterid) throws ApiException {
        ApiResponse<List<TechnologyVersion>> localVarResp = technologyLibraryVersionListWithHttpInfo(techmasterid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get technology versions
     * @param techmasterid  (required)
     * @return ApiResponse&lt;List&lt;TechnologyVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TechnologyVersion>> technologyLibraryVersionListWithHttpInfo(Integer techmasterid) throws ApiException {
        okhttp3.Call localVarCall = technologyLibraryVersionListValidateBeforeCall(techmasterid, null);
        Type localVarReturnType = new TypeToken<List<TechnologyVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get technology versions
     * @param techmasterid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyLibraryVersionListAsync(Integer techmasterid, final ApiCallback<List<TechnologyVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyLibraryVersionListValidateBeforeCall(techmasterid, _callback);
        Type localVarReturnType = new TypeToken<List<TechnologyVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyModelCornerCreate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerCreateCall(Integer techid, ModelCorner data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/model_corner/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyModelCornerCreateValidateBeforeCall(Integer techid, ModelCorner data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyModelCornerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyModelCornerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyModelCornerCreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return ModelCorner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ModelCorner technologyModelCornerCreate(Integer techid, ModelCorner data) throws ApiException {
        ApiResponse<ModelCorner> localVarResp = technologyModelCornerCreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModelCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelCorner> technologyModelCornerCreateWithHttpInfo(Integer techid, ModelCorner data) throws ApiException {
        okhttp3.Call localVarCall = technologyModelCornerCreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<ModelCorner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerCreateAsync(Integer techid, ModelCorner data, final ApiCallback<ModelCorner> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyModelCornerCreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<ModelCorner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyModelCornerDelete
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerDeleteCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/model_corner/{cornerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "cornerid" + "\\}", localVarApiClient.escapeString(cornerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyModelCornerDeleteValidateBeforeCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyModelCornerDelete(Async)");
        }
        
        // verify the required parameter 'cornerid' is set
        if (cornerid == null) {
            throw new ApiException("Missing the required parameter 'cornerid' when calling technologyModelCornerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyModelCornerDeleteCall(techid, cornerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyModelCornerDelete(Integer techid, Integer cornerid) throws ApiException {
        technologyModelCornerDeleteWithHttpInfo(techid, cornerid);
    }

    /**
     * 
     * Delete a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyModelCornerDeleteWithHttpInfo(Integer techid, Integer cornerid) throws ApiException {
        okhttp3.Call localVarCall = technologyModelCornerDeleteValidateBeforeCall(techid, cornerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerDeleteAsync(Integer techid, Integer cornerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyModelCornerDeleteValidateBeforeCall(techid, cornerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyModelCornerList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/model_corner/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyModelCornerListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyModelCornerList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyModelCornerListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of model corner
     * @param techid  (required)
     * @return List&lt;ModelCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelCorner> technologyModelCornerList(Integer techid) throws ApiException {
        ApiResponse<List<ModelCorner>> localVarResp = technologyModelCornerListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of model corner
     * @param techid  (required)
     * @return ApiResponse&lt;List&lt;ModelCorner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelCorner>> technologyModelCornerListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyModelCornerListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<List<ModelCorner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of model corner
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerListAsync(Integer techid, final ApiCallback<List<ModelCorner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyModelCornerListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<List<ModelCorner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyModelCornerRead
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerReadCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/model_corner/{cornerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "cornerid" + "\\}", localVarApiClient.escapeString(cornerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyModelCornerReadValidateBeforeCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyModelCornerRead(Async)");
        }
        
        // verify the required parameter 'cornerid' is set
        if (cornerid == null) {
            throw new ApiException("Missing the required parameter 'cornerid' when calling technologyModelCornerRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyModelCornerReadCall(techid, cornerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @return ModelCorner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ModelCorner technologyModelCornerRead(Integer techid, Integer cornerid) throws ApiException {
        ApiResponse<ModelCorner> localVarResp = technologyModelCornerReadWithHttpInfo(techid, cornerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @return ApiResponse&lt;ModelCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelCorner> technologyModelCornerReadWithHttpInfo(Integer techid, Integer cornerid) throws ApiException {
        okhttp3.Call localVarCall = technologyModelCornerReadValidateBeforeCall(techid, cornerid, null);
        Type localVarReturnType = new TypeToken<ModelCorner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerReadAsync(Integer techid, Integer cornerid, final ApiCallback<ModelCorner> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyModelCornerReadValidateBeforeCall(techid, cornerid, _callback);
        Type localVarReturnType = new TypeToken<ModelCorner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyModelCornerUpdate
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerUpdateCall(Integer techid, Integer cornerid, ModelCorner data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/model_corner/{cornerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "cornerid" + "\\}", localVarApiClient.escapeString(cornerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyModelCornerUpdateValidateBeforeCall(Integer techid, Integer cornerid, ModelCorner data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyModelCornerUpdate(Async)");
        }
        
        // verify the required parameter 'cornerid' is set
        if (cornerid == null) {
            throw new ApiException("Missing the required parameter 'cornerid' when calling technologyModelCornerUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyModelCornerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyModelCornerUpdateCall(techid, cornerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @return ModelCorner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ModelCorner technologyModelCornerUpdate(Integer techid, Integer cornerid, ModelCorner data) throws ApiException {
        ApiResponse<ModelCorner> localVarResp = technologyModelCornerUpdateWithHttpInfo(techid, cornerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModelCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelCorner> technologyModelCornerUpdateWithHttpInfo(Integer techid, Integer cornerid, ModelCorner data) throws ApiException {
        okhttp3.Call localVarCall = technologyModelCornerUpdateValidateBeforeCall(techid, cornerid, data, null);
        Type localVarReturnType = new TypeToken<ModelCorner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyModelCornerUpdateAsync(Integer techid, Integer cornerid, ModelCorner data, final ApiCallback<ModelCorner> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyModelCornerUpdateValidateBeforeCall(techid, cornerid, data, _callback);
        Type localVarReturnType = new TypeToken<ModelCorner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyPermissionsList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyPermissionsListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/permissions/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyPermissionsListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyPermissionsListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param techid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void technologyPermissionsList(Integer techid) throws ApiException {
        technologyPermissionsListWithHttpInfo(techid);
    }

    /**
     * 
     * Get list of permissions
     * @param techid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyPermissionsListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyPermissionsListValidateBeforeCall(techid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyPermissionsListAsync(Integer techid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyPermissionsListValidateBeforeCall(techid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyPermissionsUpdate
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyPermissionsUpdateCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/permissions/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyPermissionsUpdateValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyPermissionsUpdateCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param techid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void technologyPermissionsUpdate(Integer techid) throws ApiException {
        technologyPermissionsUpdateWithHttpInfo(techid);
    }

    /**
     * 
     * Get list of permissions
     * @param techid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyPermissionsUpdateWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyPermissionsUpdateValidateBeforeCall(techid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyPermissionsUpdateAsync(Integer techid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyPermissionsUpdateValidateBeforeCall(techid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRcCornerCreate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerCreateCall(Integer techid, RCCorner data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/rc_corner/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyRcCornerCreateValidateBeforeCall(Integer techid, RCCorner data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRcCornerCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyRcCornerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyRcCornerCreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return RCCorner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RCCorner technologyRcCornerCreate(Integer techid, RCCorner data) throws ApiException {
        ApiResponse<RCCorner> localVarResp = technologyRcCornerCreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;RCCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RCCorner> technologyRcCornerCreateWithHttpInfo(Integer techid, RCCorner data) throws ApiException {
        okhttp3.Call localVarCall = technologyRcCornerCreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<RCCorner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerCreateAsync(Integer techid, RCCorner data, final ApiCallback<RCCorner> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyRcCornerCreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<RCCorner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRcCornerDelete
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerDeleteCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/rc_corner/{cornerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "cornerid" + "\\}", localVarApiClient.escapeString(cornerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyRcCornerDeleteValidateBeforeCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRcCornerDelete(Async)");
        }
        
        // verify the required parameter 'cornerid' is set
        if (cornerid == null) {
            throw new ApiException("Missing the required parameter 'cornerid' when calling technologyRcCornerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologyRcCornerDeleteCall(techid, cornerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologyRcCornerDelete(Integer techid, Integer cornerid) throws ApiException {
        technologyRcCornerDeleteWithHttpInfo(techid, cornerid);
    }

    /**
     * 
     * Delete a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologyRcCornerDeleteWithHttpInfo(Integer techid, Integer cornerid) throws ApiException {
        okhttp3.Call localVarCall = technologyRcCornerDeleteValidateBeforeCall(techid, cornerid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerDeleteAsync(Integer techid, Integer cornerid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyRcCornerDeleteValidateBeforeCall(techid, cornerid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRcCornerList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/rc_corner/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyRcCornerListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRcCornerList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyRcCornerListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of RC corner
     * @param techid  (required)
     * @return List&lt;RCCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<RCCorner> technologyRcCornerList(Integer techid) throws ApiException {
        ApiResponse<List<RCCorner>> localVarResp = technologyRcCornerListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of RC corner
     * @param techid  (required)
     * @return ApiResponse&lt;List&lt;RCCorner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RCCorner>> technologyRcCornerListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyRcCornerListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<List<RCCorner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of RC corner
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerListAsync(Integer techid, final ApiCallback<List<RCCorner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyRcCornerListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<List<RCCorner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRcCornerRead
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerReadCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/rc_corner/{cornerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "cornerid" + "\\}", localVarApiClient.escapeString(cornerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyRcCornerReadValidateBeforeCall(Integer techid, Integer cornerid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRcCornerRead(Async)");
        }
        
        // verify the required parameter 'cornerid' is set
        if (cornerid == null) {
            throw new ApiException("Missing the required parameter 'cornerid' when calling technologyRcCornerRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyRcCornerReadCall(techid, cornerid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a RC corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @return RCCorner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RCCorner technologyRcCornerRead(Integer techid, Integer cornerid) throws ApiException {
        ApiResponse<RCCorner> localVarResp = technologyRcCornerReadWithHttpInfo(techid, cornerid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a RC corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @return ApiResponse&lt;RCCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RCCorner> technologyRcCornerReadWithHttpInfo(Integer techid, Integer cornerid) throws ApiException {
        okhttp3.Call localVarCall = technologyRcCornerReadValidateBeforeCall(techid, cornerid, null);
        Type localVarReturnType = new TypeToken<RCCorner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a RC corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerReadAsync(Integer techid, Integer cornerid, final ApiCallback<RCCorner> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyRcCornerReadValidateBeforeCall(techid, cornerid, _callback);
        Type localVarReturnType = new TypeToken<RCCorner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRcCornerUpdate
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerUpdateCall(Integer techid, Integer cornerid, RCCorner data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/rc_corner/{cornerid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "cornerid" + "\\}", localVarApiClient.escapeString(cornerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyRcCornerUpdateValidateBeforeCall(Integer techid, Integer cornerid, RCCorner data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRcCornerUpdate(Async)");
        }
        
        // verify the required parameter 'cornerid' is set
        if (cornerid == null) {
            throw new ApiException("Missing the required parameter 'cornerid' when calling technologyRcCornerUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyRcCornerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyRcCornerUpdateCall(techid, cornerid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @return RCCorner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public RCCorner technologyRcCornerUpdate(Integer techid, Integer cornerid, RCCorner data) throws ApiException {
        ApiResponse<RCCorner> localVarResp = technologyRcCornerUpdateWithHttpInfo(techid, cornerid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;RCCorner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RCCorner> technologyRcCornerUpdateWithHttpInfo(Integer techid, Integer cornerid, RCCorner data) throws ApiException {
        okhttp3.Call localVarCall = technologyRcCornerUpdateValidateBeforeCall(techid, cornerid, data, null);
        Type localVarReturnType = new TypeToken<RCCorner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a model corner
     * @param techid  (required)
     * @param cornerid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRcCornerUpdateAsync(Integer techid, Integer cornerid, RCCorner data, final ApiCallback<RCCorner> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyRcCornerUpdateValidateBeforeCall(techid, cornerid, data, _callback);
        Type localVarReturnType = new TypeToken<RCCorner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRead
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyReadCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyReadValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyReadCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a technology
     * @param techid  (required)
     * @return Technology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public Technology technologyRead(Integer techid) throws ApiException {
        ApiResponse<Technology> localVarResp = technologyReadWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a technology
     * @param techid  (required)
     * @return ApiResponse&lt;Technology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Technology> technologyReadWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyReadValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<Technology>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a technology
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyReadAsync(Integer techid, final ApiCallback<Technology> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyReadValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<Technology>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyRestoreCreate
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRestoreCreateCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/restore/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyRestoreCreateValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyRestoreCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyRestoreCreateCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Restore a technology version as current version
     * @param techid  (required)
     * @return Technology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Technology technologyRestoreCreate(Integer techid) throws ApiException {
        ApiResponse<Technology> localVarResp = technologyRestoreCreateWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Restore a technology version as current version
     * @param techid  (required)
     * @return ApiResponse&lt;Technology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Technology> technologyRestoreCreateWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyRestoreCreateValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<Technology>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Restore a technology version as current version
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with inut data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyRestoreCreateAsync(Integer techid, final ApiCallback<Technology> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyRestoreCreateValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<Technology>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologySourceCreate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceCreateCall(Integer techid, PowerSource data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/source/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologySourceCreateValidateBeforeCall(Integer techid, PowerSource data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologySourceCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologySourceCreate(Async)");
        }
        

        okhttp3.Call localVarCall = technologySourceCreateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return PowerSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PowerSource technologySourceCreate(Integer techid, PowerSource data) throws ApiException {
        ApiResponse<PowerSource> localVarResp = technologySourceCreateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerSource> technologySourceCreateWithHttpInfo(Integer techid, PowerSource data) throws ApiException {
        okhttp3.Call localVarCall = technologySourceCreateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<PowerSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a layer stack
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Inssue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceCreateAsync(Integer techid, PowerSource data, final ApiCallback<PowerSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologySourceCreateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<PowerSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologySourceDelete
     * @param techid  (required)
     * @param sourceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceDeleteCall(Integer techid, Integer sourceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/source/{sourceid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "sourceid" + "\\}", localVarApiClient.escapeString(sourceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologySourceDeleteValidateBeforeCall(Integer techid, Integer sourceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologySourceDelete(Async)");
        }
        
        // verify the required parameter 'sourceid' is set
        if (sourceid == null) {
            throw new ApiException("Missing the required parameter 'sourceid' when calling technologySourceDelete(Async)");
        }
        

        okhttp3.Call localVarCall = technologySourceDeleteCall(techid, sourceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void technologySourceDelete(Integer techid, Integer sourceid) throws ApiException {
        technologySourceDeleteWithHttpInfo(techid, sourceid);
    }

    /**
     * 
     * Delete a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> technologySourceDeleteWithHttpInfo(Integer techid, Integer sourceid) throws ApiException {
        okhttp3.Call localVarCall = technologySourceDeleteValidateBeforeCall(techid, sourceid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceDeleteAsync(Integer techid, Integer sourceid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologySourceDeleteValidateBeforeCall(techid, sourceid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologySourceList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/source/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologySourceListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologySourceList(Async)");
        }
        

        okhttp3.Call localVarCall = technologySourceListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of layer stacks
     * @param techid  (required)
     * @return List&lt;PowerSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<PowerSource> technologySourceList(Integer techid) throws ApiException {
        ApiResponse<List<PowerSource>> localVarResp = technologySourceListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of layer stacks
     * @param techid  (required)
     * @return ApiResponse&lt;List&lt;PowerSource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PowerSource>> technologySourceListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologySourceListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<List<PowerSource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of layer stacks
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceListAsync(Integer techid, final ApiCallback<List<PowerSource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologySourceListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<List<PowerSource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologySourceRead
     * @param techid  (required)
     * @param sourceid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceReadCall(Integer techid, Integer sourceid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/source/{sourceid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "sourceid" + "\\}", localVarApiClient.escapeString(sourceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologySourceReadValidateBeforeCall(Integer techid, Integer sourceid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologySourceRead(Async)");
        }
        
        // verify the required parameter 'sourceid' is set
        if (sourceid == null) {
            throw new ApiException("Missing the required parameter 'sourceid' when calling technologySourceRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologySourceReadCall(techid, sourceid, _callback);
        return localVarCall;

    }

    /**
     * 
     * get a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @return PowerSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PowerSource technologySourceRead(Integer techid, Integer sourceid) throws ApiException {
        ApiResponse<PowerSource> localVarResp = technologySourceReadWithHttpInfo(techid, sourceid);
        return localVarResp.getData();
    }

    /**
     * 
     * get a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @return ApiResponse&lt;PowerSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerSource> technologySourceReadWithHttpInfo(Integer techid, Integer sourceid) throws ApiException {
        okhttp3.Call localVarCall = technologySourceReadValidateBeforeCall(techid, sourceid, null);
        Type localVarReturnType = new TypeToken<PowerSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceReadAsync(Integer techid, Integer sourceid, final ApiCallback<PowerSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologySourceReadValidateBeforeCall(techid, sourceid, _callback);
        Type localVarReturnType = new TypeToken<PowerSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologySourceUpdate
     * @param techid  (required)
     * @param sourceid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceUpdateCall(Integer techid, Integer sourceid, PowerSource data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/source/{sourceid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "sourceid" + "\\}", localVarApiClient.escapeString(sourceid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologySourceUpdateValidateBeforeCall(Integer techid, Integer sourceid, PowerSource data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologySourceUpdate(Async)");
        }
        
        // verify the required parameter 'sourceid' is set
        if (sourceid == null) {
            throw new ApiException("Missing the required parameter 'sourceid' when calling technologySourceUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologySourceUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologySourceUpdateCall(techid, sourceid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @param data  (required)
     * @return PowerSource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PowerSource technologySourceUpdate(Integer techid, Integer sourceid, PowerSource data) throws ApiException {
        ApiResponse<PowerSource> localVarResp = technologySourceUpdateWithHttpInfo(techid, sourceid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;PowerSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PowerSource> technologySourceUpdateWithHttpInfo(Integer techid, Integer sourceid, PowerSource data) throws ApiException {
        okhttp3.Call localVarCall = technologySourceUpdateValidateBeforeCall(techid, sourceid, data, null);
        Type localVarReturnType = new TypeToken<PowerSource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a layer stack
     * @param techid  (required)
     * @param sourceid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Issue with input data, error message returned </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologySourceUpdateAsync(Integer techid, Integer sourceid, PowerSource data, final ApiCallback<PowerSource> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologySourceUpdateValidateBeforeCall(techid, sourceid, data, _callback);
        Type localVarReturnType = new TypeToken<PowerSource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyUpdate
     * @param techid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyUpdateCall(Integer techid, Technology data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/technology/{techid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyUpdateValidateBeforeCall(Integer techid, Technology data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling technologyUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = technologyUpdateCall(techid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a technology
     * @param techid  (required)
     * @param data  (required)
     * @return Technology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public Technology technologyUpdate(Integer techid, Technology data) throws ApiException {
        ApiResponse<Technology> localVarResp = technologyUpdateWithHttpInfo(techid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a technology
     * @param techid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Technology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Technology> technologyUpdateWithHttpInfo(Integer techid, Technology data) throws ApiException {
        okhttp3.Call localVarCall = technologyUpdateValidateBeforeCall(techid, data, null);
        Type localVarReturnType = new TypeToken<Technology>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a technology
     * @param techid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error with input data </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyUpdateAsync(Integer techid, Technology data, final ApiCallback<Technology> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyUpdateValidateBeforeCall(techid, data, _callback);
        Type localVarReturnType = new TypeToken<Technology>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyUpdateList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyUpdateListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/update/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyUpdateListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyUpdateList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyUpdateListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param techid  (required)
     * @return UpdateData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateData technologyUpdateList(Integer techid) throws ApiException {
        ApiResponse<UpdateData> localVarResp = technologyUpdateListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an array of [current, last update] times
     * @param techid  (required)
     * @return ApiResponse&lt;UpdateData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateData> technologyUpdateListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyUpdateListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an array of [current, last update] times
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyUpdateListAsync(Integer techid, final ApiCallback<UpdateData> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyUpdateListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<UpdateData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyVersionList
     * @param techid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyVersionListCall(Integer techid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/version/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyVersionListValidateBeforeCall(Integer techid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyVersionList(Async)");
        }
        

        okhttp3.Call localVarCall = technologyVersionListCall(techid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get technology versions
     * @param techid  (required)
     * @return List&lt;TechnologyVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<TechnologyVersion> technologyVersionList(Integer techid) throws ApiException {
        ApiResponse<List<TechnologyVersion>> localVarResp = technologyVersionListWithHttpInfo(techid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get technology versions
     * @param techid  (required)
     * @return ApiResponse&lt;List&lt;TechnologyVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TechnologyVersion>> technologyVersionListWithHttpInfo(Integer techid) throws ApiException {
        okhttp3.Call localVarCall = technologyVersionListValidateBeforeCall(techid, null);
        Type localVarReturnType = new TypeToken<List<TechnologyVersion>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get technology versions
     * @param techid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyVersionListAsync(Integer techid, final ApiCallback<List<TechnologyVersion>> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyVersionListValidateBeforeCall(techid, _callback);
        Type localVarReturnType = new TypeToken<List<TechnologyVersion>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologyVersionRead
     * @param techid  (required)
     * @param versionid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyVersionReadCall(Integer techid, Integer versionid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/technology/{techid}/version/{versionid}/"
            .replaceAll("\\{" + "techid" + "\\}", localVarApiClient.escapeString(techid.toString()))
            .replaceAll("\\{" + "versionid" + "\\}", localVarApiClient.escapeString(versionid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologyVersionReadValidateBeforeCall(Integer techid, Integer versionid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'techid' is set
        if (techid == null) {
            throw new ApiException("Missing the required parameter 'techid' when calling technologyVersionRead(Async)");
        }
        
        // verify the required parameter 'versionid' is set
        if (versionid == null) {
            throw new ApiException("Missing the required parameter 'versionid' when calling technologyVersionRead(Async)");
        }
        

        okhttp3.Call localVarCall = technologyVersionReadCall(techid, versionid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get technology versions
     * @param techid  (required)
     * @param versionid  (required)
     * @return TechnologyVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public TechnologyVersion technologyVersionRead(Integer techid, Integer versionid) throws ApiException {
        ApiResponse<TechnologyVersion> localVarResp = technologyVersionReadWithHttpInfo(techid, versionid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get technology versions
     * @param techid  (required)
     * @param versionid  (required)
     * @return ApiResponse&lt;TechnologyVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TechnologyVersion> technologyVersionReadWithHttpInfo(Integer techid, Integer versionid) throws ApiException {
        okhttp3.Call localVarCall = technologyVersionReadValidateBeforeCall(techid, versionid, null);
        Type localVarReturnType = new TypeToken<TechnologyVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get technology versions
     * @param techid  (required)
     * @param versionid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologyVersionReadAsync(Integer techid, Integer versionid, final ApiCallback<TechnologyVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologyVersionReadValidateBeforeCall(techid, versionid, _callback);
        Type localVarReturnType = new TypeToken<TechnologyVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
