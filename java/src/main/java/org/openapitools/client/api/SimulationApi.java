/*
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MeasuredDataJSON;
import org.openapitools.client.model.PagedMeasuredData;
import org.openapitools.client.model.PagedSimScope;
import org.openapitools.client.model.PagedSimVar;
import org.openapitools.client.model.SimMeasurement;
import org.openapitools.client.model.SimScope;
import org.openapitools.client.model.SimVar;
import org.openapitools.client.model.Simulation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SimulationApi {
    private ApiClient localVarApiClient;

    public SimulationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SimulationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiSimulationScopeDeleteAll
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSimulationScopeDeleteAllCall(Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSimulationScopeDeleteAllValidateBeforeCall(Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling apiSimulationScopeDeleteAll(Async)");
        }
        

        okhttp3.Call localVarCall = apiSimulationScopeDeleteAllCall(simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete all scope
     * @param simid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiSimulationScopeDeleteAll(Integer simid) throws ApiException {
        apiSimulationScopeDeleteAllWithHttpInfo(simid);
    }

    /**
     * 
     * Delete all scope
     * @param simid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiSimulationScopeDeleteAllWithHttpInfo(Integer simid) throws ApiException {
        okhttp3.Call localVarCall = apiSimulationScopeDeleteAllValidateBeforeCall(simid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete all scope
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSimulationScopeDeleteAllAsync(Integer simid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSimulationScopeDeleteAllValidateBeforeCall(simid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationAccessCreate
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationAccessCreateCall(Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/access/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationAccessCreateValidateBeforeCall(Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationAccessCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationAccessCreateCall(simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update design access
     * @param simid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void simulationAccessCreate(Integer simid) throws ApiException {
        simulationAccessCreateWithHttpInfo(simid);
    }

    /**
     * 
     * Update design access
     * @param simid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulationAccessCreateWithHttpInfo(Integer simid) throws ApiException {
        okhttp3.Call localVarCall = simulationAccessCreateValidateBeforeCall(simid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update design access
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationAccessCreateAsync(Integer simid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationAccessCreateValidateBeforeCall(simid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementCloneCreate
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementCloneCreateCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/clone/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementCloneCreateValidateBeforeCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementCloneCreate(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementCloneCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementCloneCreateCall(simid, measureid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Clone a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @return SimMeasurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimMeasurement simulationMeasurementCloneCreate(Integer simid, Integer measureid) throws ApiException {
        ApiResponse<SimMeasurement> localVarResp = simulationMeasurementCloneCreateWithHttpInfo(simid, measureid);
        return localVarResp.getData();
    }

    /**
     * 
     * Clone a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @return ApiResponse&lt;SimMeasurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimMeasurement> simulationMeasurementCloneCreateWithHttpInfo(Integer simid, Integer measureid) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementCloneCreateValidateBeforeCall(simid, measureid, null);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clone a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementCloneCreateAsync(Integer simid, Integer measureid, final ApiCallback<SimMeasurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementCloneCreateValidateBeforeCall(simid, measureid, _callback);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementCreate
     * @param simid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementCreateCall(Integer simid, SimMeasurement data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementCreateValidateBeforeCall(Integer simid, SimMeasurement data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationMeasurementCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementCreateCall(simid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new simulation
     * @param simid  (required)
     * @param data  (required)
     * @return SimMeasurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimMeasurement simulationMeasurementCreate(Integer simid, SimMeasurement data) throws ApiException {
        ApiResponse<SimMeasurement> localVarResp = simulationMeasurementCreateWithHttpInfo(simid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new simulation
     * @param simid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimMeasurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimMeasurement> simulationMeasurementCreateWithHttpInfo(Integer simid, SimMeasurement data) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementCreateValidateBeforeCall(simid, data, null);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new simulation
     * @param simid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementCreateAsync(Integer simid, SimMeasurement data, final ApiCallback<SimMeasurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementCreateValidateBeforeCall(simid, data, _callback);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementDataCreate
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDataCreateCall(Integer simid, Integer measureid, List<MeasuredDataJSON> data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/data/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementDataCreateValidateBeforeCall(Integer simid, Integer measureid, List<MeasuredDataJSON> data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementDataCreate(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementDataCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationMeasurementDataCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementDataCreateCall(simid, measureid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Append data
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void simulationMeasurementDataCreate(Integer simid, Integer measureid, List<MeasuredDataJSON> data) throws ApiException {
        simulationMeasurementDataCreateWithHttpInfo(simid, measureid, data);
    }

    /**
     * 
     * Append data
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulationMeasurementDataCreateWithHttpInfo(Integer simid, Integer measureid, List<MeasuredDataJSON> data) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementDataCreateValidateBeforeCall(simid, measureid, data, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Append data
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDataCreateAsync(Integer simid, Integer measureid, List<MeasuredDataJSON> data, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementDataCreateValidateBeforeCall(simid, measureid, data, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementDataDelete
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDataDeleteCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/data/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementDataDeleteValidateBeforeCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementDataDelete(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementDataDelete(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementDataDeleteCall(simid, measureid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete all data
     * @param simid  (required)
     * @param measureid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void simulationMeasurementDataDelete(Integer simid, Integer measureid) throws ApiException {
        simulationMeasurementDataDeleteWithHttpInfo(simid, measureid);
    }

    /**
     * 
     * Delete all data
     * @param simid  (required)
     * @param measureid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulationMeasurementDataDeleteWithHttpInfo(Integer simid, Integer measureid) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementDataDeleteValidateBeforeCall(simid, measureid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete all data
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDataDeleteAsync(Integer simid, Integer measureid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementDataDeleteValidateBeforeCall(simid, measureid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementDataList
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDataListCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/data/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementDataListValidateBeforeCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementDataList(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementDataList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementDataListCall(simid, measureid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get data for a measure
     * @param simid  (required)
     * @param measureid  (required)
     * @return PagedMeasuredData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PagedMeasuredData simulationMeasurementDataList(Integer simid, Integer measureid) throws ApiException {
        ApiResponse<PagedMeasuredData> localVarResp = simulationMeasurementDataListWithHttpInfo(simid, measureid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get data for a measure
     * @param simid  (required)
     * @param measureid  (required)
     * @return ApiResponse&lt;PagedMeasuredData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedMeasuredData> simulationMeasurementDataListWithHttpInfo(Integer simid, Integer measureid) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementDataListValidateBeforeCall(simid, measureid, null);
        Type localVarReturnType = new TypeToken<PagedMeasuredData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get data for a measure
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDataListAsync(Integer simid, Integer measureid, final ApiCallback<PagedMeasuredData> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementDataListValidateBeforeCall(simid, measureid, _callback);
        Type localVarReturnType = new TypeToken<PagedMeasuredData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementDelete
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDeleteCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementDeleteValidateBeforeCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementDelete(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementDelete(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementDeleteCall(simid, measureid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void simulationMeasurementDelete(Integer simid, Integer measureid) throws ApiException {
        simulationMeasurementDeleteWithHttpInfo(simid, measureid);
    }

    /**
     * 
     * Delete a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulationMeasurementDeleteWithHttpInfo(Integer simid, Integer measureid) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementDeleteValidateBeforeCall(simid, measureid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementDeleteAsync(Integer simid, Integer measureid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementDeleteValidateBeforeCall(simid, measureid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementList
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementListCall(Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementListValidateBeforeCall(Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementListCall(simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of simulations
     * @param simid  (required)
     * @return List&lt;SimMeasurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SimMeasurement> simulationMeasurementList(Integer simid) throws ApiException {
        ApiResponse<List<SimMeasurement>> localVarResp = simulationMeasurementListWithHttpInfo(simid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of simulations
     * @param simid  (required)
     * @return ApiResponse&lt;List&lt;SimMeasurement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimMeasurement>> simulationMeasurementListWithHttpInfo(Integer simid) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementListValidateBeforeCall(simid, null);
        Type localVarReturnType = new TypeToken<List<SimMeasurement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of simulations
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementListAsync(Integer simid, final ApiCallback<List<SimMeasurement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementListValidateBeforeCall(simid, _callback);
        Type localVarReturnType = new TypeToken<List<SimMeasurement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementRead
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementReadCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementReadValidateBeforeCall(Integer simid, Integer measureid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementRead(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementRead(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementReadCall(simid, measureid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @return SimMeasurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimMeasurement simulationMeasurementRead(Integer simid, Integer measureid) throws ApiException {
        ApiResponse<SimMeasurement> localVarResp = simulationMeasurementReadWithHttpInfo(simid, measureid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @return ApiResponse&lt;SimMeasurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimMeasurement> simulationMeasurementReadWithHttpInfo(Integer simid, Integer measureid) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementReadValidateBeforeCall(simid, measureid, null);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementReadAsync(Integer simid, Integer measureid, final ApiCallback<SimMeasurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementReadValidateBeforeCall(simid, measureid, _callback);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationMeasurementUpdate
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementUpdateCall(Integer simid, Integer measureid, SimMeasurement data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/measurement/{measureid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "measureid" + "\\}", localVarApiClient.escapeString(measureid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationMeasurementUpdateValidateBeforeCall(Integer simid, Integer measureid, SimMeasurement data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationMeasurementUpdate(Async)");
        }
        
        // verify the required parameter 'measureid' is set
        if (measureid == null) {
            throw new ApiException("Missing the required parameter 'measureid' when calling simulationMeasurementUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationMeasurementUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationMeasurementUpdateCall(simid, measureid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @return SimMeasurement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimMeasurement simulationMeasurementUpdate(Integer simid, Integer measureid, SimMeasurement data) throws ApiException {
        ApiResponse<SimMeasurement> localVarResp = simulationMeasurementUpdateWithHttpInfo(simid, measureid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimMeasurement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimMeasurement> simulationMeasurementUpdateWithHttpInfo(Integer simid, Integer measureid, SimMeasurement data) throws ApiException {
        okhttp3.Call localVarCall = simulationMeasurementUpdateValidateBeforeCall(simid, measureid, data, null);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a measurement
     * @param simid  (required)
     * @param measureid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationMeasurementUpdateAsync(Integer simid, Integer measureid, SimMeasurement data, final ApiCallback<SimMeasurement> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationMeasurementUpdateValidateBeforeCall(simid, measureid, data, _callback);
        Type localVarReturnType = new TypeToken<SimMeasurement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationPermissionsList
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationPermissionsListCall(Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/permissions/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationPermissionsListValidateBeforeCall(Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationPermissionsList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationPermissionsListCall(simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param simid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void simulationPermissionsList(Integer simid) throws ApiException {
        simulationPermissionsListWithHttpInfo(simid);
    }

    /**
     * 
     * Get list of permissions
     * @param simid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulationPermissionsListWithHttpInfo(Integer simid) throws ApiException {
        okhttp3.Call localVarCall = simulationPermissionsListValidateBeforeCall(simid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationPermissionsListAsync(Integer simid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationPermissionsListValidateBeforeCall(simid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationPermissionsUpdate
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationPermissionsUpdateCall(Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/permissions/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationPermissionsUpdateValidateBeforeCall(Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationPermissionsUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationPermissionsUpdateCall(simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get list of permissions
     * @param simid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void simulationPermissionsUpdate(Integer simid) throws ApiException {
        simulationPermissionsUpdateWithHttpInfo(simid);
    }

    /**
     * 
     * Get list of permissions
     * @param simid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> simulationPermissionsUpdateWithHttpInfo(Integer simid) throws ApiException {
        okhttp3.Call localVarCall = simulationPermissionsUpdateValidateBeforeCall(simid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get list of permissions
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationPermissionsUpdateAsync(Integer simid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationPermissionsUpdateValidateBeforeCall(simid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationRead
     * @param simid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationReadCall(Integer simid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationReadValidateBeforeCall(Integer simid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationRead(Async)");
        }
        

        okhttp3.Call localVarCall = simulationReadCall(simid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a simulation
     * @param simid  (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Simulation simulationRead(Integer simid) throws ApiException {
        ApiResponse<Simulation> localVarResp = simulationReadWithHttpInfo(simid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a simulation
     * @param simid  (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> simulationReadWithHttpInfo(Integer simid) throws ApiException {
        okhttp3.Call localVarCall = simulationReadValidateBeforeCall(simid, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a simulation
     * @param simid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationReadAsync(Integer simid, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationReadValidateBeforeCall(simid, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeCreate
     * @param simid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeCreateCall(Integer simid, SimScope data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeCreateValidateBeforeCall(Integer simid, SimScope data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationScopeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeCreateCall(simid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a scope
     * @param simid  (required)
     * @param data  (required)
     * @return SimScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimScope simulationScopeCreate(Integer simid, SimScope data) throws ApiException {
        ApiResponse<SimScope> localVarResp = simulationScopeCreateWithHttpInfo(simid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a scope
     * @param simid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimScope> simulationScopeCreateWithHttpInfo(Integer simid, SimScope data) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeCreateValidateBeforeCall(simid, data, null);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a scope
     * @param simid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeCreateAsync(Integer simid, SimScope data, final ApiCallback<SimScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeCreateValidateBeforeCall(simid, data, _callback);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeDelete
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeDeleteCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/{scopeid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "scopeid" + "\\}", localVarApiClient.escapeString(scopeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeDeleteValidateBeforeCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeDelete(Async)");
        }
        
        // verify the required parameter 'scopeid' is set
        if (scopeid == null) {
            throw new ApiException("Missing the required parameter 'scopeid' when calling simulationScopeDelete(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeDeleteCall(simid, scopeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @return SimScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimScope simulationScopeDelete(Integer simid, Integer scopeid) throws ApiException {
        ApiResponse<SimScope> localVarResp = simulationScopeDeleteWithHttpInfo(simid, scopeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @return ApiResponse&lt;SimScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimScope> simulationScopeDeleteWithHttpInfo(Integer simid, Integer scopeid) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeDeleteValidateBeforeCall(simid, scopeid, null);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeDeleteAsync(Integer simid, Integer scopeid, final ApiCallback<SimScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeDeleteValidateBeforeCall(simid, scopeid, _callback);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeList
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeListCall(Integer simid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeListValidateBeforeCall(Integer simid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeListCall(simid, page, number, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scopes
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return PagedSimScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PagedSimScope simulationScopeList(Integer simid, Integer page, Integer number) throws ApiException {
        ApiResponse<PagedSimScope> localVarResp = simulationScopeListWithHttpInfo(simid, page, number);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scopes
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return ApiResponse&lt;PagedSimScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedSimScope> simulationScopeListWithHttpInfo(Integer simid, Integer page, Integer number) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeListValidateBeforeCall(simid, page, number, null);
        Type localVarReturnType = new TypeToken<PagedSimScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scopes
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeListAsync(Integer simid, Integer page, Integer number, final ApiCallback<PagedSimScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeListValidateBeforeCall(simid, page, number, _callback);
        Type localVarReturnType = new TypeToken<PagedSimScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeRead
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeReadCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/{scopeid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "scopeid" + "\\}", localVarApiClient.escapeString(scopeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeReadValidateBeforeCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeRead(Async)");
        }
        
        // verify the required parameter 'scopeid' is set
        if (scopeid == null) {
            throw new ApiException("Missing the required parameter 'scopeid' when calling simulationScopeRead(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeReadCall(simid, scopeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @return SimScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimScope simulationScopeRead(Integer simid, Integer scopeid) throws ApiException {
        ApiResponse<SimScope> localVarResp = simulationScopeReadWithHttpInfo(simid, scopeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @return ApiResponse&lt;SimScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimScope> simulationScopeReadWithHttpInfo(Integer simid, Integer scopeid) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeReadValidateBeforeCall(simid, scopeid, null);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeReadAsync(Integer simid, Integer scopeid, final ApiCallback<SimScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeReadValidateBeforeCall(simid, scopeid, _callback);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeScopeCreate
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeScopeCreateCall(Integer simid, Integer scopeid, SimScope data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/{scopeid}/scope/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "scopeid" + "\\}", localVarApiClient.escapeString(scopeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeScopeCreateValidateBeforeCall(Integer simid, Integer scopeid, SimScope data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeScopeCreate(Async)");
        }
        
        // verify the required parameter 'scopeid' is set
        if (scopeid == null) {
            throw new ApiException("Missing the required parameter 'scopeid' when calling simulationScopeScopeCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationScopeScopeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeScopeCreateCall(simid, scopeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @return SimScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimScope simulationScopeScopeCreate(Integer simid, Integer scopeid, SimScope data) throws ApiException {
        ApiResponse<SimScope> localVarResp = simulationScopeScopeCreateWithHttpInfo(simid, scopeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimScope> simulationScopeScopeCreateWithHttpInfo(Integer simid, Integer scopeid, SimScope data) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeScopeCreateValidateBeforeCall(simid, scopeid, data, null);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a scope
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeScopeCreateAsync(Integer simid, Integer scopeid, SimScope data, final ApiCallback<SimScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeScopeCreateValidateBeforeCall(simid, scopeid, data, _callback);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeScopeList
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeScopeListCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/{scopeid}/scope/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "scopeid" + "\\}", localVarApiClient.escapeString(scopeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeScopeListValidateBeforeCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeScopeList(Async)");
        }
        
        // verify the required parameter 'scopeid' is set
        if (scopeid == null) {
            throw new ApiException("Missing the required parameter 'scopeid' when calling simulationScopeScopeList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeScopeListCall(simid, scopeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get scopes
     * @param simid  (required)
     * @param scopeid  (required)
     * @return SimScope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimScope simulationScopeScopeList(Integer simid, Integer scopeid) throws ApiException {
        ApiResponse<SimScope> localVarResp = simulationScopeScopeListWithHttpInfo(simid, scopeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scopes
     * @param simid  (required)
     * @param scopeid  (required)
     * @return ApiResponse&lt;SimScope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimScope> simulationScopeScopeListWithHttpInfo(Integer simid, Integer scopeid) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeScopeListValidateBeforeCall(simid, scopeid, null);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scopes
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeScopeListAsync(Integer simid, Integer scopeid, final ApiCallback<SimScope> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeScopeListValidateBeforeCall(simid, scopeid, _callback);
        Type localVarReturnType = new TypeToken<SimScope>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeVarCreate
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeVarCreateCall(Integer simid, Integer scopeid, SimVar data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/{scopeid}/var/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "scopeid" + "\\}", localVarApiClient.escapeString(scopeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeVarCreateValidateBeforeCall(Integer simid, Integer scopeid, SimVar data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeVarCreate(Async)");
        }
        
        // verify the required parameter 'scopeid' is set
        if (scopeid == null) {
            throw new ApiException("Missing the required parameter 'scopeid' when calling simulationScopeVarCreate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationScopeVarCreate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeVarCreateCall(simid, scopeid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a var
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @return SimVar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public SimVar simulationScopeVarCreate(Integer simid, Integer scopeid, SimVar data) throws ApiException {
        ApiResponse<SimVar> localVarResp = simulationScopeVarCreateWithHttpInfo(simid, scopeid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a var
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimVar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimVar> simulationScopeVarCreateWithHttpInfo(Integer simid, Integer scopeid, SimVar data) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeVarCreateValidateBeforeCall(simid, scopeid, data, null);
        Type localVarReturnType = new TypeToken<SimVar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a var
     * @param simid  (required)
     * @param scopeid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeVarCreateAsync(Integer simid, Integer scopeid, SimVar data, final ApiCallback<SimVar> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeVarCreateValidateBeforeCall(simid, scopeid, data, _callback);
        Type localVarReturnType = new TypeToken<SimVar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationScopeVarList
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeVarListCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/scope/{scopeid}/var/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()))
            .replaceAll("\\{" + "scopeid" + "\\}", localVarApiClient.escapeString(scopeid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationScopeVarListValidateBeforeCall(Integer simid, Integer scopeid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationScopeVarList(Async)");
        }
        
        // verify the required parameter 'scopeid' is set
        if (scopeid == null) {
            throw new ApiException("Missing the required parameter 'scopeid' when calling simulationScopeVarList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationScopeVarListCall(simid, scopeid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get vars
     * @param simid  (required)
     * @param scopeid  (required)
     * @return List&lt;SimVar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SimVar> simulationScopeVarList(Integer simid, Integer scopeid) throws ApiException {
        ApiResponse<List<SimVar>> localVarResp = simulationScopeVarListWithHttpInfo(simid, scopeid);
        return localVarResp.getData();
    }

    /**
     * 
     * Get vars
     * @param simid  (required)
     * @param scopeid  (required)
     * @return ApiResponse&lt;List&lt;SimVar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SimVar>> simulationScopeVarListWithHttpInfo(Integer simid, Integer scopeid) throws ApiException {
        okhttp3.Call localVarCall = simulationScopeVarListValidateBeforeCall(simid, scopeid, null);
        Type localVarReturnType = new TypeToken<List<SimVar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get vars
     * @param simid  (required)
     * @param scopeid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationScopeVarListAsync(Integer simid, Integer scopeid, final ApiCallback<List<SimVar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationScopeVarListValidateBeforeCall(simid, scopeid, _callback);
        Type localVarReturnType = new TypeToken<List<SimVar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationUpdate
     * @param simid  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationUpdateCall(Integer simid, Simulation data, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationUpdateValidateBeforeCall(Integer simid, Simulation data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling simulationUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = simulationUpdateCall(simid, data, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a simulation
     * @param simid  (required)
     * @param data  (required)
     * @return Simulation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Simulation simulationUpdate(Integer simid, Simulation data) throws ApiException {
        ApiResponse<Simulation> localVarResp = simulationUpdateWithHttpInfo(simid, data);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a simulation
     * @param simid  (required)
     * @param data  (required)
     * @return ApiResponse&lt;Simulation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Simulation> simulationUpdateWithHttpInfo(Integer simid, Simulation data) throws ApiException {
        okhttp3.Call localVarCall = simulationUpdateValidateBeforeCall(simid, data, null);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a simulation
     * @param simid  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationUpdateAsync(Integer simid, Simulation data, final ApiCallback<Simulation> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationUpdateValidateBeforeCall(simid, data, _callback);
        Type localVarReturnType = new TypeToken<Simulation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for simulationVarList
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationVarListCall(Integer simid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/simulation/{simid}/var/"
            .replaceAll("\\{" + "simid" + "\\}", localVarApiClient.escapeString(simid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simulationVarListValidateBeforeCall(Integer simid, Integer page, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'simid' is set
        if (simid == null) {
            throw new ApiException("Missing the required parameter 'simid' when calling simulationVarList(Async)");
        }
        

        okhttp3.Call localVarCall = simulationVarListCall(simid, page, number, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get vars
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return PagedSimVar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public PagedSimVar simulationVarList(Integer simid, Integer page, Integer number) throws ApiException {
        ApiResponse<PagedSimVar> localVarResp = simulationVarListWithHttpInfo(simid, page, number);
        return localVarResp.getData();
    }

    /**
     * 
     * Get vars
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @return ApiResponse&lt;PagedSimVar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedSimVar> simulationVarListWithHttpInfo(Integer simid, Integer page, Integer number) throws ApiException {
        okhttp3.Call localVarCall = simulationVarListValidateBeforeCall(simid, page, number, null);
        Type localVarReturnType = new TypeToken<PagedSimVar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get vars
     * @param simid  (required)
     * @param page  (optional)
     * @param number  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call simulationVarListAsync(Integer simid, Integer page, Integer number, final ApiCallback<PagedSimVar> _callback) throws ApiException {

        okhttp3.Call localVarCall = simulationVarListValidateBeforeCall(simid, page, number, _callback);
        Type localVarReturnType = new TypeToken<PagedSimVar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
