/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.HeatsinkApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('HeatsinkApi', function() {
    describe('haetsinkLibraryClone', function() {
      it('should call haetsinkLibraryClone successfully', function(done) {
        //uncomment below and update the code to test haetsinkLibraryClone
        //instance.haetsinkLibraryClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkCommitCreate', function() {
      it('should call heatsinkCommitCreate successfully', function(done) {
        //uncomment below and update the code to test heatsinkCommitCreate
        //instance.heatsinkCommitCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryCreate', function() {
      it('should call heatsinkLibraryCreate successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryCreate
        //instance.heatsinkLibraryCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryDelete', function() {
      it('should call heatsinkLibraryDelete successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryDelete
        //instance.heatsinkLibraryDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryList', function() {
      it('should call heatsinkLibraryList successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryList
        //instance.heatsinkLibraryList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryRead', function() {
      it('should call heatsinkLibraryRead successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryRead
        //instance.heatsinkLibraryRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryUpdate', function() {
      it('should call heatsinkLibraryUpdate successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryUpdate
        //instance.heatsinkLibraryUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryUpdateList', function() {
      it('should call heatsinkLibraryUpdateList successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryUpdateList
        //instance.heatsinkLibraryUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkLibraryVersionList', function() {
      it('should call heatsinkLibraryVersionList successfully', function(done) {
        //uncomment below and update the code to test heatsinkLibraryVersionList
        //instance.heatsinkLibraryVersionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkPermissionsList', function() {
      it('should call heatsinkPermissionsList successfully', function(done) {
        //uncomment below and update the code to test heatsinkPermissionsList
        //instance.heatsinkPermissionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkPermissionsUpdate', function() {
      it('should call heatsinkPermissionsUpdate successfully', function(done) {
        //uncomment below and update the code to test heatsinkPermissionsUpdate
        //instance.heatsinkPermissionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkRead', function() {
      it('should call heatsinkRead successfully', function(done) {
        //uncomment below and update the code to test heatsinkRead
        //instance.heatsinkRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkRestoreCreate', function() {
      it('should call heatsinkRestoreCreate successfully', function(done) {
        //uncomment below and update the code to test heatsinkRestoreCreate
        //instance.heatsinkRestoreCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkUpdate', function() {
      it('should call heatsinkUpdate successfully', function(done) {
        //uncomment below and update the code to test heatsinkUpdate
        //instance.heatsinkUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkUpdateList', function() {
      it('should call heatsinkUpdateList successfully', function(done) {
        //uncomment below and update the code to test heatsinkUpdateList
        //instance.heatsinkUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('heatsinkVersionList', function() {
      it('should call heatsinkVersionList successfully', function(done) {
        //uncomment below and update the code to test heatsinkVersionList
        //instance.heatsinkVersionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
