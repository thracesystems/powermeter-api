/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.SimulationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SimulationApi', function() {
    describe('apiSimulationScopeDeleteAll', function() {
      it('should call apiSimulationScopeDeleteAll successfully', function(done) {
        //uncomment below and update the code to test apiSimulationScopeDeleteAll
        //instance.apiSimulationScopeDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationAccessCreate', function() {
      it('should call simulationAccessCreate successfully', function(done) {
        //uncomment below and update the code to test simulationAccessCreate
        //instance.simulationAccessCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementCloneCreate', function() {
      it('should call simulationMeasurementCloneCreate successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementCloneCreate
        //instance.simulationMeasurementCloneCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementCreate', function() {
      it('should call simulationMeasurementCreate successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementCreate
        //instance.simulationMeasurementCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementDataCreate', function() {
      it('should call simulationMeasurementDataCreate successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementDataCreate
        //instance.simulationMeasurementDataCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementDataDelete', function() {
      it('should call simulationMeasurementDataDelete successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementDataDelete
        //instance.simulationMeasurementDataDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementDataList', function() {
      it('should call simulationMeasurementDataList successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementDataList
        //instance.simulationMeasurementDataList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementDelete', function() {
      it('should call simulationMeasurementDelete successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementDelete
        //instance.simulationMeasurementDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementList', function() {
      it('should call simulationMeasurementList successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementList
        //instance.simulationMeasurementList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementRead', function() {
      it('should call simulationMeasurementRead successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementRead
        //instance.simulationMeasurementRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationMeasurementUpdate', function() {
      it('should call simulationMeasurementUpdate successfully', function(done) {
        //uncomment below and update the code to test simulationMeasurementUpdate
        //instance.simulationMeasurementUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationPermissionsList', function() {
      it('should call simulationPermissionsList successfully', function(done) {
        //uncomment below and update the code to test simulationPermissionsList
        //instance.simulationPermissionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationPermissionsUpdate', function() {
      it('should call simulationPermissionsUpdate successfully', function(done) {
        //uncomment below and update the code to test simulationPermissionsUpdate
        //instance.simulationPermissionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationRead', function() {
      it('should call simulationRead successfully', function(done) {
        //uncomment below and update the code to test simulationRead
        //instance.simulationRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeCreate', function() {
      it('should call simulationScopeCreate successfully', function(done) {
        //uncomment below and update the code to test simulationScopeCreate
        //instance.simulationScopeCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeDelete', function() {
      it('should call simulationScopeDelete successfully', function(done) {
        //uncomment below and update the code to test simulationScopeDelete
        //instance.simulationScopeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeList', function() {
      it('should call simulationScopeList successfully', function(done) {
        //uncomment below and update the code to test simulationScopeList
        //instance.simulationScopeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeRead', function() {
      it('should call simulationScopeRead successfully', function(done) {
        //uncomment below and update the code to test simulationScopeRead
        //instance.simulationScopeRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeScopeCreate', function() {
      it('should call simulationScopeScopeCreate successfully', function(done) {
        //uncomment below and update the code to test simulationScopeScopeCreate
        //instance.simulationScopeScopeCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeScopeList', function() {
      it('should call simulationScopeScopeList successfully', function(done) {
        //uncomment below and update the code to test simulationScopeScopeList
        //instance.simulationScopeScopeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeVarCreate', function() {
      it('should call simulationScopeVarCreate successfully', function(done) {
        //uncomment below and update the code to test simulationScopeVarCreate
        //instance.simulationScopeVarCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationScopeVarList', function() {
      it('should call simulationScopeVarList successfully', function(done) {
        //uncomment below and update the code to test simulationScopeVarList
        //instance.simulationScopeVarList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationUpdate', function() {
      it('should call simulationUpdate successfully', function(done) {
        //uncomment below and update the code to test simulationUpdate
        //instance.simulationUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('simulationVarList', function() {
      it('should call simulationVarList successfully', function(done) {
        //uncomment below and update the code to test simulationVarList
        //instance.simulationVarList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
