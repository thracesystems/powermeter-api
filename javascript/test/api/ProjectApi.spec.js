/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.ProjectApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectApi', function() {
    describe('projectAccessCreate', function() {
      it('should call projectAccessCreate successfully', function(done) {
        //uncomment below and update the code to test projectAccessCreate
        //instance.projectAccessCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectClone', function() {
      it('should call projectClone successfully', function(done) {
        //uncomment below and update the code to test projectClone
        //instance.projectClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectContribDeviceComputeList', function() {
      it('should call projectContribDeviceComputeList successfully', function(done) {
        //uncomment below and update the code to test projectContribDeviceComputeList
        //instance.projectContribDeviceComputeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectContribDeviceCreate', function() {
      it('should call projectContribDeviceCreate successfully', function(done) {
        //uncomment below and update the code to test projectContribDeviceCreate
        //instance.projectContribDeviceCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectContribDeviceDelete', function() {
      it('should call projectContribDeviceDelete successfully', function(done) {
        //uncomment below and update the code to test projectContribDeviceDelete
        //instance.projectContribDeviceDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectContribDeviceList', function() {
      it('should call projectContribDeviceList successfully', function(done) {
        //uncomment below and update the code to test projectContribDeviceList
        //instance.projectContribDeviceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectContribDeviceRead', function() {
      it('should call projectContribDeviceRead successfully', function(done) {
        //uncomment below and update the code to test projectContribDeviceRead
        //instance.projectContribDeviceRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectContribDeviceUpdate', function() {
      it('should call projectContribDeviceUpdate successfully', function(done) {
        //uncomment below and update the code to test projectContribDeviceUpdate
        //instance.projectContribDeviceUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectCreate', function() {
      it('should call projectCreate successfully', function(done) {
        //uncomment below and update the code to test projectCreate
        //instance.projectCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDelete', function() {
      it('should call projectDelete successfully', function(done) {
        //uncomment below and update the code to test projectDelete
        //instance.projectDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignAccessCreate', function() {
      it('should call projectDesignAccessCreate successfully', function(done) {
        //uncomment below and update the code to test projectDesignAccessCreate
        //instance.projectDesignAccessCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignClone', function() {
      it('should call projectDesignClone successfully', function(done) {
        //uncomment below and update the code to test projectDesignClone
        //instance.projectDesignClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignCreate', function() {
      it('should call projectDesignCreate successfully', function(done) {
        //uncomment below and update the code to test projectDesignCreate
        //instance.projectDesignCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignDelete', function() {
      it('should call projectDesignDelete successfully', function(done) {
        //uncomment below and update the code to test projectDesignDelete
        //instance.projectDesignDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignInstantiableList', function() {
      it('should call projectDesignInstantiableList successfully', function(done) {
        //uncomment below and update the code to test projectDesignInstantiableList
        //instance.projectDesignInstantiableList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignList', function() {
      it('should call projectDesignList successfully', function(done) {
        //uncomment below and update the code to test projectDesignList
        //instance.projectDesignList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignRead', function() {
      it('should call projectDesignRead successfully', function(done) {
        //uncomment below and update the code to test projectDesignRead
        //instance.projectDesignRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignUpdate', function() {
      it('should call projectDesignUpdate successfully', function(done) {
        //uncomment below and update the code to test projectDesignUpdate
        //instance.projectDesignUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectDesignVersionsList', function() {
      it('should call projectDesignVersionsList successfully', function(done) {
        //uncomment below and update the code to test projectDesignVersionsList
        //instance.projectDesignVersionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectList', function() {
      it('should call projectList successfully', function(done) {
        //uncomment below and update the code to test projectList
        //instance.projectList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectPermissionsList', function() {
      it('should call projectPermissionsList successfully', function(done) {
        //uncomment below and update the code to test projectPermissionsList
        //instance.projectPermissionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectPermissionsUpdate', function() {
      it('should call projectPermissionsUpdate successfully', function(done) {
        //uncomment below and update the code to test projectPermissionsUpdate
        //instance.projectPermissionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectRead', function() {
      it('should call projectRead successfully', function(done) {
        //uncomment below and update the code to test projectRead
        //instance.projectRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectReferenceCreate', function() {
      it('should call projectReferenceCreate successfully', function(done) {
        //uncomment below and update the code to test projectReferenceCreate
        //instance.projectReferenceCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectReferenceDelete', function() {
      it('should call projectReferenceDelete successfully', function(done) {
        //uncomment below and update the code to test projectReferenceDelete
        //instance.projectReferenceDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectReferenceList', function() {
      it('should call projectReferenceList successfully', function(done) {
        //uncomment below and update the code to test projectReferenceList
        //instance.projectReferenceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectReferenceRead', function() {
      it('should call projectReferenceRead successfully', function(done) {
        //uncomment below and update the code to test projectReferenceRead
        //instance.projectReferenceRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectReferenceableList', function() {
      it('should call projectReferenceableList successfully', function(done) {
        //uncomment below and update the code to test projectReferenceableList
        //instance.projectReferenceableList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioAccessCreate', function() {
      it('should call projectScenarioAccessCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioAccessCreate
        //instance.projectScenarioAccessCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioCommitCreate', function() {
      it('should call projectScenarioCommitCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioCommitCreate
        //instance.projectScenarioCommitCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDelete', function() {
      it('should call projectScenarioDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDelete
        //instance.projectScenarioDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignCreate', function() {
      it('should call projectScenarioDesignCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignCreate
        //instance.projectScenarioDesignCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignDelete', function() {
      it('should call projectScenarioDesignDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignDelete
        //instance.projectScenarioDesignDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignList', function() {
      it('should call projectScenarioDesignList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignList
        //instance.projectScenarioDesignList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamConfigCreate', function() {
      it('should call projectScenarioDesignParamConfigCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamConfigCreate
        //instance.projectScenarioDesignParamConfigCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamConfigDelete', function() {
      it('should call projectScenarioDesignParamConfigDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamConfigDelete
        //instance.projectScenarioDesignParamConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamConfigList', function() {
      it('should call projectScenarioDesignParamConfigList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamConfigList
        //instance.projectScenarioDesignParamConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamConfigRead', function() {
      it('should call projectScenarioDesignParamConfigRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamConfigRead
        //instance.projectScenarioDesignParamConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamConfigUpdate', function() {
      it('should call projectScenarioDesignParamConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamConfigUpdate
        //instance.projectScenarioDesignParamConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamCreate', function() {
      it('should call projectScenarioDesignParamCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamCreate
        //instance.projectScenarioDesignParamCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamList', function() {
      it('should call projectScenarioDesignParamList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamList
        //instance.projectScenarioDesignParamList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamRead', function() {
      it('should call projectScenarioDesignParamRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamRead
        //instance.projectScenarioDesignParamRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignParamUpdate', function() {
      it('should call projectScenarioDesignParamUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignParamUpdate
        //instance.projectScenarioDesignParamUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignPowerList', function() {
      it('should call projectScenarioDesignPowerList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignPowerList
        //instance.projectScenarioDesignPowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignPowerdistributionList', function() {
      it('should call projectScenarioDesignPowerdistributionList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignPowerdistributionList
        //instance.projectScenarioDesignPowerdistributionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignRead', function() {
      it('should call projectScenarioDesignRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignRead
        //instance.projectScenarioDesignRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyConfigCreate', function() {
      it('should call projectScenarioDesignSupplyConfigCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyConfigCreate
        //instance.projectScenarioDesignSupplyConfigCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyConfigDelete', function() {
      it('should call projectScenarioDesignSupplyConfigDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyConfigDelete
        //instance.projectScenarioDesignSupplyConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyConfigList', function() {
      it('should call projectScenarioDesignSupplyConfigList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyConfigList
        //instance.projectScenarioDesignSupplyConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyConfigRead', function() {
      it('should call projectScenarioDesignSupplyConfigRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyConfigRead
        //instance.projectScenarioDesignSupplyConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyConfigUpdate', function() {
      it('should call projectScenarioDesignSupplyConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyConfigUpdate
        //instance.projectScenarioDesignSupplyConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyCreate', function() {
      it('should call projectScenarioDesignSupplyCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyCreate
        //instance.projectScenarioDesignSupplyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignSupplyRead', function() {
      it('should call projectScenarioDesignSupplyRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignSupplyRead
        //instance.projectScenarioDesignSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignThermalList', function() {
      it('should call projectScenarioDesignThermalList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignThermalList
        //instance.projectScenarioDesignThermalList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUpdate', function() {
      it('should call projectScenarioDesignUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUpdate
        //instance.projectScenarioDesignUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationConfigCreate', function() {
      it('should call projectScenarioDesignUtilizationConfigCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationConfigCreate
        //instance.projectScenarioDesignUtilizationConfigCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationConfigDelete', function() {
      it('should call projectScenarioDesignUtilizationConfigDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationConfigDelete
        //instance.projectScenarioDesignUtilizationConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationConfigList', function() {
      it('should call projectScenarioDesignUtilizationConfigList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationConfigList
        //instance.projectScenarioDesignUtilizationConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationConfigRead', function() {
      it('should call projectScenarioDesignUtilizationConfigRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationConfigRead
        //instance.projectScenarioDesignUtilizationConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationConfigUpdate', function() {
      it('should call projectScenarioDesignUtilizationConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationConfigUpdate
        //instance.projectScenarioDesignUtilizationConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationCreate', function() {
      it('should call projectScenarioDesignUtilizationCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationCreate
        //instance.projectScenarioDesignUtilizationCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationList', function() {
      it('should call projectScenarioDesignUtilizationList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationList
        //instance.projectScenarioDesignUtilizationList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationRead', function() {
      it('should call projectScenarioDesignUtilizationRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationRead
        //instance.projectScenarioDesignUtilizationRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioDesignUtilizationUpdate', function() {
      it('should call projectScenarioDesignUtilizationUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioDesignUtilizationUpdate
        //instance.projectScenarioDesignUtilizationUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyDesignSupplyRead', function() {
      it('should call projectScenarioHierarchyDesignSupplyRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyDesignSupplyRead
        //instance.projectScenarioHierarchyDesignSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyDesignSupplyUpdate', function() {
      it('should call projectScenarioHierarchyDesignSupplyUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyDesignSupplyUpdate
        //instance.projectScenarioHierarchyDesignSupplyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyList', function() {
      it('should call projectScenarioHierarchyList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyList
        //instance.projectScenarioHierarchyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyPackageSupplyRead', function() {
      it('should call projectScenarioHierarchyPackageSupplyRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyPackageSupplyRead
        //instance.projectScenarioHierarchyPackageSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyPackageSupplyUpdate', function() {
      it('should call projectScenarioHierarchyPackageSupplyUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyPackageSupplyUpdate
        //instance.projectScenarioHierarchyPackageSupplyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyVrSupplyRead', function() {
      it('should call projectScenarioHierarchyVrSupplyRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyVrSupplyRead
        //instance.projectScenarioHierarchyVrSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioHierarchyVrSupplyUpdate', function() {
      it('should call projectScenarioHierarchyVrSupplyUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioHierarchyVrSupplyUpdate
        //instance.projectScenarioHierarchyVrSupplyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryClone', function() {
      it('should call projectScenarioLibraryClone successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryClone
        //instance.projectScenarioLibraryClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryCreate', function() {
      it('should call projectScenarioLibraryCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryCreate
        //instance.projectScenarioLibraryCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryDelete', function() {
      it('should call projectScenarioLibraryDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryDelete
        //instance.projectScenarioLibraryDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryList', function() {
      it('should call projectScenarioLibraryList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryList
        //instance.projectScenarioLibraryList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryRead', function() {
      it('should call projectScenarioLibraryRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryRead
        //instance.projectScenarioLibraryRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryUpdate', function() {
      it('should call projectScenarioLibraryUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryUpdate
        //instance.projectScenarioLibraryUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioLibraryVersionList', function() {
      it('should call projectScenarioLibraryVersionList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioLibraryVersionList
        //instance.projectScenarioLibraryVersionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageCreate', function() {
      it('should call projectScenarioPackageCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageCreate
        //instance.projectScenarioPackageCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageDelete', function() {
      it('should call projectScenarioPackageDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageDelete
        //instance.projectScenarioPackageDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageList', function() {
      it('should call projectScenarioPackageList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageList
        //instance.projectScenarioPackageList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackagePowerList', function() {
      it('should call projectScenarioPackagePowerList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackagePowerList
        //instance.projectScenarioPackagePowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageRead', function() {
      it('should call projectScenarioPackageRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageRead
        //instance.projectScenarioPackageRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageSupplyConfigCreate', function() {
      it('should call projectScenarioPackageSupplyConfigCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageSupplyConfigCreate
        //instance.projectScenarioPackageSupplyConfigCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageSupplyConfigDelete', function() {
      it('should call projectScenarioPackageSupplyConfigDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageSupplyConfigDelete
        //instance.projectScenarioPackageSupplyConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageSupplyConfigList', function() {
      it('should call projectScenarioPackageSupplyConfigList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageSupplyConfigList
        //instance.projectScenarioPackageSupplyConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageSupplyConfigRead', function() {
      it('should call projectScenarioPackageSupplyConfigRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageSupplyConfigRead
        //instance.projectScenarioPackageSupplyConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageSupplyConfigUpdate', function() {
      it('should call projectScenarioPackageSupplyConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageSupplyConfigUpdate
        //instance.projectScenarioPackageSupplyConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPackageUpdate', function() {
      it('should call projectScenarioPackageUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPackageUpdate
        //instance.projectScenarioPackageUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbCreate', function() {
      it('should call projectScenarioPcbCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbCreate
        //instance.projectScenarioPcbCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbDelete', function() {
      it('should call projectScenarioPcbDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbDelete
        //instance.projectScenarioPcbDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbList', function() {
      it('should call projectScenarioPcbList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbList
        //instance.projectScenarioPcbList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbPowerList', function() {
      it('should call projectScenarioPcbPowerList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbPowerList
        //instance.projectScenarioPcbPowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbRead', function() {
      it('should call projectScenarioPcbRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbRead
        //instance.projectScenarioPcbRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbSupplyConfigCreate', function() {
      it('should call projectScenarioPcbSupplyConfigCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbSupplyConfigCreate
        //instance.projectScenarioPcbSupplyConfigCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbSupplyConfigDelete', function() {
      it('should call projectScenarioPcbSupplyConfigDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbSupplyConfigDelete
        //instance.projectScenarioPcbSupplyConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbSupplyConfigList', function() {
      it('should call projectScenarioPcbSupplyConfigList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbSupplyConfigList
        //instance.projectScenarioPcbSupplyConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbSupplyConfigRead', function() {
      it('should call projectScenarioPcbSupplyConfigRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbSupplyConfigRead
        //instance.projectScenarioPcbSupplyConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbSupplyConfigUpdate', function() {
      it('should call projectScenarioPcbSupplyConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbSupplyConfigUpdate
        //instance.projectScenarioPcbSupplyConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPcbUpdate', function() {
      it('should call projectScenarioPcbUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPcbUpdate
        //instance.projectScenarioPcbUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPowerList', function() {
      it('should call projectScenarioPowerList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPowerList
        //instance.projectScenarioPowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioPowerdistributionDownloadRead', function() {
      it('should call projectScenarioPowerdistributionDownloadRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioPowerdistributionDownloadRead
        //instance.projectScenarioPowerdistributionDownloadRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioRead', function() {
      it('should call projectScenarioRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioRead
        //instance.projectScenarioRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioTrendList', function() {
      it('should call projectScenarioTrendList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioTrendList
        //instance.projectScenarioTrendList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioUpdate', function() {
      it('should call projectScenarioUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioUpdate
        //instance.projectScenarioUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioUpdateList', function() {
      it('should call projectScenarioUpdateList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioUpdateList
        //instance.projectScenarioUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVersionList', function() {
      it('should call projectScenarioVersionList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVersionList
        //instance.projectScenarioVersionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrCreate', function() {
      it('should call projectScenarioVrCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrCreate
        //instance.projectScenarioVrCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrDelete', function() {
      it('should call projectScenarioVrDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrDelete
        //instance.projectScenarioVrDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrList', function() {
      it('should call projectScenarioVrList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrList
        //instance.projectScenarioVrList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrPowerList', function() {
      it('should call projectScenarioVrPowerList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrPowerList
        //instance.projectScenarioVrPowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrRead', function() {
      it('should call projectScenarioVrRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrRead
        //instance.projectScenarioVrRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrSupplyConfigCreate', function() {
      it('should call projectScenarioVrSupplyConfigCreate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrSupplyConfigCreate
        //instance.projectScenarioVrSupplyConfigCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrSupplyConfigDelete', function() {
      it('should call projectScenarioVrSupplyConfigDelete successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrSupplyConfigDelete
        //instance.projectScenarioVrSupplyConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrSupplyConfigList', function() {
      it('should call projectScenarioVrSupplyConfigList successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrSupplyConfigList
        //instance.projectScenarioVrSupplyConfigList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrSupplyConfigRead', function() {
      it('should call projectScenarioVrSupplyConfigRead successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrSupplyConfigRead
        //instance.projectScenarioVrSupplyConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrSupplyConfigUpdate', function() {
      it('should call projectScenarioVrSupplyConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrSupplyConfigUpdate
        //instance.projectScenarioVrSupplyConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectScenarioVrUpdate', function() {
      it('should call projectScenarioVrUpdate successfully', function(done) {
        //uncomment below and update the code to test projectScenarioVrUpdate
        //instance.projectScenarioVrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationCloneCreate', function() {
      it('should call projectSimulationCloneCreate successfully', function(done) {
        //uncomment below and update the code to test projectSimulationCloneCreate
        //instance.projectSimulationCloneCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationCreate', function() {
      it('should call projectSimulationCreate successfully', function(done) {
        //uncomment below and update the code to test projectSimulationCreate
        //instance.projectSimulationCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationDelete', function() {
      it('should call projectSimulationDelete successfully', function(done) {
        //uncomment below and update the code to test projectSimulationDelete
        //instance.projectSimulationDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationList', function() {
      it('should call projectSimulationList successfully', function(done) {
        //uncomment below and update the code to test projectSimulationList
        //instance.projectSimulationList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationRead', function() {
      it('should call projectSimulationRead successfully', function(done) {
        //uncomment below and update the code to test projectSimulationRead
        //instance.projectSimulationRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationUpdate', function() {
      it('should call projectSimulationUpdate successfully', function(done) {
        //uncomment below and update the code to test projectSimulationUpdate
        //instance.projectSimulationUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSimulationUpdateList', function() {
      it('should call projectSimulationUpdateList successfully', function(done) {
        //uncomment below and update the code to test projectSimulationUpdateList
        //instance.projectSimulationUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUpdate', function() {
      it('should call projectUpdate successfully', function(done) {
        //uncomment below and update the code to test projectUpdate
        //instance.projectUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectUpdateTimes', function() {
      it('should call projectUpdateTimes successfully', function(done) {
        //uncomment below and update the code to test projectUpdateTimes
        //instance.projectUpdateTimes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectVerilogCreate', function() {
      it('should call projectVerilogCreate successfully', function(done) {
        //uncomment below and update the code to test projectVerilogCreate
        //instance.projectVerilogCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWireLoadCreate', function() {
      it('should call projectWireLoadCreate successfully', function(done) {
        //uncomment below and update the code to test projectWireLoadCreate
        //instance.projectWireLoadCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWireLoadDelete', function() {
      it('should call projectWireLoadDelete successfully', function(done) {
        //uncomment below and update the code to test projectWireLoadDelete
        //instance.projectWireLoadDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWireLoadList', function() {
      it('should call projectWireLoadList successfully', function(done) {
        //uncomment below and update the code to test projectWireLoadList
        //instance.projectWireLoadList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWireLoadRead', function() {
      it('should call projectWireLoadRead successfully', function(done) {
        //uncomment below and update the code to test projectWireLoadRead
        //instance.projectWireLoadRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectWireLoadUpdate', function() {
      it('should call projectWireLoadUpdate successfully', function(done) {
        //uncomment below and update the code to test projectWireLoadUpdate
        //instance.projectWireLoadUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsUpdateTimes', function() {
      it('should call projectsUpdateTimes successfully', function(done) {
        //uncomment below and update the code to test projectsUpdateTimes
        //instance.projectsUpdateTimes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
