/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.DesignApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DesignApi', function() {
    describe('apiDesignHierarchyDeleteAll', function() {
      it('should call apiDesignHierarchyDeleteAll successfully', function(done) {
        //uncomment below and update the code to test apiDesignHierarchyDeleteAll
        //instance.apiDesignHierarchyDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiDesignInstanceDeleteAll', function() {
      it('should call apiDesignInstanceDeleteAll successfully', function(done) {
        //uncomment below and update the code to test apiDesignInstanceDeleteAll
        //instance.apiDesignInstanceDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiDesignModeDeleteAll', function() {
      it('should call apiDesignModeDeleteAll successfully', function(done) {
        //uncomment below and update the code to test apiDesignModeDeleteAll
        //instance.apiDesignModeDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiDesignParameterDeleteAll', function() {
      it('should call apiDesignParameterDeleteAll successfully', function(done) {
        //uncomment below and update the code to test apiDesignParameterDeleteAll
        //instance.apiDesignParameterDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiDesignSupplyDeleteAll', function() {
      it('should call apiDesignSupplyDeleteAll successfully', function(done) {
        //uncomment below and update the code to test apiDesignSupplyDeleteAll
        //instance.apiDesignSupplyDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designCommitCreate', function() {
      it('should call designCommitCreate successfully', function(done) {
        //uncomment below and update the code to test designCommitCreate
        //instance.designCommitCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designComputepowerCreate', function() {
      it('should call designComputepowerCreate successfully', function(done) {
        //uncomment below and update the code to test designComputepowerCreate
        //instance.designComputepowerCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designComputepowerarcCreate', function() {
      it('should call designComputepowerarcCreate successfully', function(done) {
        //uncomment below and update the code to test designComputepowerarcCreate
        //instance.designComputepowerarcCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerCompute1List', function() {
      it('should call designContribpowerCompute1List successfully', function(done) {
        //uncomment below and update the code to test designContribpowerCompute1List
        //instance.designContribpowerCompute1List(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerComputeList', function() {
      it('should call designContribpowerComputeList successfully', function(done) {
        //uncomment below and update the code to test designContribpowerComputeList
        //instance.designContribpowerComputeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerCreate', function() {
      it('should call designContribpowerCreate successfully', function(done) {
        //uncomment below and update the code to test designContribpowerCreate
        //instance.designContribpowerCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerDelete', function() {
      it('should call designContribpowerDelete successfully', function(done) {
        //uncomment below and update the code to test designContribpowerDelete
        //instance.designContribpowerDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerList', function() {
      it('should call designContribpowerList successfully', function(done) {
        //uncomment below and update the code to test designContribpowerList
        //instance.designContribpowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerRead', function() {
      it('should call designContribpowerRead successfully', function(done) {
        //uncomment below and update the code to test designContribpowerRead
        //instance.designContribpowerRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designContribpowerUpdate', function() {
      it('should call designContribpowerUpdate successfully', function(done) {
        //uncomment below and update the code to test designContribpowerUpdate
        //instance.designContribpowerUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardAccessCreate', function() {
      it('should call designDashboardAccessCreate successfully', function(done) {
        //uncomment below and update the code to test designDashboardAccessCreate
        //instance.designDashboardAccessCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardCloneCreate', function() {
      it('should call designDashboardCloneCreate successfully', function(done) {
        //uncomment below and update the code to test designDashboardCloneCreate
        //instance.designDashboardCloneCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardColumnCreate', function() {
      it('should call designDashboardColumnCreate successfully', function(done) {
        //uncomment below and update the code to test designDashboardColumnCreate
        //instance.designDashboardColumnCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardColumnDelete', function() {
      it('should call designDashboardColumnDelete successfully', function(done) {
        //uncomment below and update the code to test designDashboardColumnDelete
        //instance.designDashboardColumnDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardColumnList', function() {
      it('should call designDashboardColumnList successfully', function(done) {
        //uncomment below and update the code to test designDashboardColumnList
        //instance.designDashboardColumnList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardColumnRead', function() {
      it('should call designDashboardColumnRead successfully', function(done) {
        //uncomment below and update the code to test designDashboardColumnRead
        //instance.designDashboardColumnRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardColumnUpdate', function() {
      it('should call designDashboardColumnUpdate successfully', function(done) {
        //uncomment below and update the code to test designDashboardColumnUpdate
        //instance.designDashboardColumnUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardCreate', function() {
      it('should call designDashboardCreate successfully', function(done) {
        //uncomment below and update the code to test designDashboardCreate
        //instance.designDashboardCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardDataList', function() {
      it('should call designDashboardDataList successfully', function(done) {
        //uncomment below and update the code to test designDashboardDataList
        //instance.designDashboardDataList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardDelete', function() {
      it('should call designDashboardDelete successfully', function(done) {
        //uncomment below and update the code to test designDashboardDelete
        //instance.designDashboardDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardList', function() {
      it('should call designDashboardList successfully', function(done) {
        //uncomment below and update the code to test designDashboardList
        //instance.designDashboardList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardRead', function() {
      it('should call designDashboardRead successfully', function(done) {
        //uncomment below and update the code to test designDashboardRead
        //instance.designDashboardRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardRowCreate', function() {
      it('should call designDashboardRowCreate successfully', function(done) {
        //uncomment below and update the code to test designDashboardRowCreate
        //instance.designDashboardRowCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardRowDelete', function() {
      it('should call designDashboardRowDelete successfully', function(done) {
        //uncomment below and update the code to test designDashboardRowDelete
        //instance.designDashboardRowDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardRowList', function() {
      it('should call designDashboardRowList successfully', function(done) {
        //uncomment below and update the code to test designDashboardRowList
        //instance.designDashboardRowList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardRowRead', function() {
      it('should call designDashboardRowRead successfully', function(done) {
        //uncomment below and update the code to test designDashboardRowRead
        //instance.designDashboardRowRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardRowUpdate', function() {
      it('should call designDashboardRowUpdate successfully', function(done) {
        //uncomment below and update the code to test designDashboardRowUpdate
        //instance.designDashboardRowUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardUpdate', function() {
      it('should call designDashboardUpdate successfully', function(done) {
        //uncomment below and update the code to test designDashboardUpdate
        //instance.designDashboardUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDashboardUpdateList', function() {
      it('should call designDashboardUpdateList successfully', function(done) {
        //uncomment below and update the code to test designDashboardUpdateList
        //instance.designDashboardUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDataCreate', function() {
      it('should call designDataCreate successfully', function(done) {
        //uncomment below and update the code to test designDataCreate
        //instance.designDataCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDataDelete', function() {
      it('should call designDataDelete successfully', function(done) {
        //uncomment below and update the code to test designDataDelete
        //instance.designDataDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDataList', function() {
      it('should call designDataList successfully', function(done) {
        //uncomment below and update the code to test designDataList
        //instance.designDataList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDataRead', function() {
      it('should call designDataRead successfully', function(done) {
        //uncomment below and update the code to test designDataRead
        //instance.designDataRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designDataUpdate', function() {
      it('should call designDataUpdate successfully', function(done) {
        //uncomment below and update the code to test designDataUpdate
        //instance.designDataUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designEnergyCreate', function() {
      it('should call designEnergyCreate successfully', function(done) {
        //uncomment below and update the code to test designEnergyCreate
        //instance.designEnergyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designEnergyList', function() {
      it('should call designEnergyList successfully', function(done) {
        //uncomment below and update the code to test designEnergyList
        //instance.designEnergyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFfCreate', function() {
      it('should call designFfCreate successfully', function(done) {
        //uncomment below and update the code to test designFfCreate
        //instance.designFfCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFfDelete', function() {
      it('should call designFfDelete successfully', function(done) {
        //uncomment below and update the code to test designFfDelete
        //instance.designFfDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFfList', function() {
      it('should call designFfList successfully', function(done) {
        //uncomment below and update the code to test designFfList
        //instance.designFfList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFfRead', function() {
      it('should call designFfRead successfully', function(done) {
        //uncomment below and update the code to test designFfRead
        //instance.designFfRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designFfUpdate', function() {
      it('should call designFfUpdate successfully', function(done) {
        //uncomment below and update the code to test designFfUpdate
        //instance.designFfUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designHierarchyGroupCreate', function() {
      it('should call designHierarchyGroupCreate successfully', function(done) {
        //uncomment below and update the code to test designHierarchyGroupCreate
        //instance.designHierarchyGroupCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designHierarchyGroupDelete', function() {
      it('should call designHierarchyGroupDelete successfully', function(done) {
        //uncomment below and update the code to test designHierarchyGroupDelete
        //instance.designHierarchyGroupDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designHierarchyGroupUpdate', function() {
      it('should call designHierarchyGroupUpdate successfully', function(done) {
        //uncomment below and update the code to test designHierarchyGroupUpdate
        //instance.designHierarchyGroupUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designHierarchyList', function() {
      it('should call designHierarchyList successfully', function(done) {
        //uncomment below and update the code to test designHierarchyList
        //instance.designHierarchyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designHierarchyUpdate', function() {
      it('should call designHierarchyUpdate successfully', function(done) {
        //uncomment below and update the code to test designHierarchyUpdate
        //instance.designHierarchyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceBulkCreate', function() {
      it('should call designInstanceBulkCreate successfully', function(done) {
        //uncomment below and update the code to test designInstanceBulkCreate
        //instance.designInstanceBulkCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceClone', function() {
      it('should call designInstanceClone successfully', function(done) {
        //uncomment below and update the code to test designInstanceClone
        //instance.designInstanceClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceCreate', function() {
      it('should call designInstanceCreate successfully', function(done) {
        //uncomment below and update the code to test designInstanceCreate
        //instance.designInstanceCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceDelete', function() {
      it('should call designInstanceDelete successfully', function(done) {
        //uncomment below and update the code to test designInstanceDelete
        //instance.designInstanceDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceList', function() {
      it('should call designInstanceList successfully', function(done) {
        //uncomment below and update the code to test designInstanceList
        //instance.designInstanceList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceRead', function() {
      it('should call designInstanceRead successfully', function(done) {
        //uncomment below and update the code to test designInstanceRead
        //instance.designInstanceRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceSupplyCreate', function() {
      it('should call designInstanceSupplyCreate successfully', function(done) {
        //uncomment below and update the code to test designInstanceSupplyCreate
        //instance.designInstanceSupplyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceSupplyList', function() {
      it('should call designInstanceSupplyList successfully', function(done) {
        //uncomment below and update the code to test designInstanceSupplyList
        //instance.designInstanceSupplyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceSupplyRead', function() {
      it('should call designInstanceSupplyRead successfully', function(done) {
        //uncomment below and update the code to test designInstanceSupplyRead
        //instance.designInstanceSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceSupplyUpdate', function() {
      it('should call designInstanceSupplyUpdate successfully', function(done) {
        //uncomment below and update the code to test designInstanceSupplyUpdate
        //instance.designInstanceSupplyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceUpdate', function() {
      it('should call designInstanceUpdate successfully', function(done) {
        //uncomment below and update the code to test designInstanceUpdate
        //instance.designInstanceUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstanceUpdatemasterCreate', function() {
      it('should call designInstanceUpdatemasterCreate successfully', function(done) {
        //uncomment below and update the code to test designInstanceUpdatemasterCreate
        //instance.designInstanceUpdatemasterCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designInstantiableList', function() {
      it('should call designInstantiableList successfully', function(done) {
        //uncomment below and update the code to test designInstantiableList
        //instance.designInstantiableList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLatchCreate', function() {
      it('should call designLatchCreate successfully', function(done) {
        //uncomment below and update the code to test designLatchCreate
        //instance.designLatchCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLatchDelete', function() {
      it('should call designLatchDelete successfully', function(done) {
        //uncomment below and update the code to test designLatchDelete
        //instance.designLatchDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLatchList', function() {
      it('should call designLatchList successfully', function(done) {
        //uncomment below and update the code to test designLatchList
        //instance.designLatchList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLatchRead', function() {
      it('should call designLatchRead successfully', function(done) {
        //uncomment below and update the code to test designLatchRead
        //instance.designLatchRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLatchUpdate', function() {
      it('should call designLatchUpdate successfully', function(done) {
        //uncomment below and update the code to test designLatchUpdate
        //instance.designLatchUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLeakagepowerCreate', function() {
      it('should call designLeakagepowerCreate successfully', function(done) {
        //uncomment below and update the code to test designLeakagepowerCreate
        //instance.designLeakagepowerCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLeakagepowerDelete', function() {
      it('should call designLeakagepowerDelete successfully', function(done) {
        //uncomment below and update the code to test designLeakagepowerDelete
        //instance.designLeakagepowerDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLeakagepowerList', function() {
      it('should call designLeakagepowerList successfully', function(done) {
        //uncomment below and update the code to test designLeakagepowerList
        //instance.designLeakagepowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLeakagepowerRead', function() {
      it('should call designLeakagepowerRead successfully', function(done) {
        //uncomment below and update the code to test designLeakagepowerRead
        //instance.designLeakagepowerRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designLeakagepowerUpdate', function() {
      it('should call designLeakagepowerUpdate successfully', function(done) {
        //uncomment below and update the code to test designLeakagepowerUpdate
        //instance.designLeakagepowerUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeClone', function() {
      it('should call designModeClone successfully', function(done) {
        //uncomment below and update the code to test designModeClone
        //instance.designModeClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeCreate', function() {
      it('should call designModeCreate successfully', function(done) {
        //uncomment below and update the code to test designModeCreate
        //instance.designModeCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeDelete', function() {
      it('should call designModeDelete successfully', function(done) {
        //uncomment below and update the code to test designModeDelete
        //instance.designModeDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeList', function() {
      it('should call designModeList successfully', function(done) {
        //uncomment below and update the code to test designModeList
        //instance.designModeList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModePowerList', function() {
      it('should call designModePowerList successfully', function(done) {
        //uncomment below and update the code to test designModePowerList
        //instance.designModePowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModePowerdistributionList', function() {
      it('should call designModePowerdistributionList successfully', function(done) {
        //uncomment below and update the code to test designModePowerdistributionList
        //instance.designModePowerdistributionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeRead', function() {
      it('should call designModeRead successfully', function(done) {
        //uncomment below and update the code to test designModeRead
        //instance.designModeRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeSupplyComputepowerCreate', function() {
      it('should call designModeSupplyComputepowerCreate successfully', function(done) {
        //uncomment below and update the code to test designModeSupplyComputepowerCreate
        //instance.designModeSupplyComputepowerCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeSupplyComputepowertableCreate', function() {
      it('should call designModeSupplyComputepowertableCreate successfully', function(done) {
        //uncomment below and update the code to test designModeSupplyComputepowertableCreate
        //instance.designModeSupplyComputepowertableCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeSupplystateList', function() {
      it('should call designModeSupplystateList successfully', function(done) {
        //uncomment below and update the code to test designModeSupplystateList
        //instance.designModeSupplystateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeSupplystateUpdate', function() {
      it('should call designModeSupplystateUpdate successfully', function(done) {
        //uncomment below and update the code to test designModeSupplystateUpdate
        //instance.designModeSupplystateUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designModeUpdate', function() {
      it('should call designModeUpdate successfully', function(done) {
        //uncomment below and update the code to test designModeUpdate
        //instance.designModeUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designParameterClone', function() {
      it('should call designParameterClone successfully', function(done) {
        //uncomment below and update the code to test designParameterClone
        //instance.designParameterClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designParameterCreate', function() {
      it('should call designParameterCreate successfully', function(done) {
        //uncomment below and update the code to test designParameterCreate
        //instance.designParameterCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designParameterDelete', function() {
      it('should call designParameterDelete successfully', function(done) {
        //uncomment below and update the code to test designParameterDelete
        //instance.designParameterDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designParameterList', function() {
      it('should call designParameterList successfully', function(done) {
        //uncomment below and update the code to test designParameterList
        //instance.designParameterList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designParameterRead', function() {
      it('should call designParameterRead successfully', function(done) {
        //uncomment below and update the code to test designParameterRead
        //instance.designParameterRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designParameterUpdate', function() {
      it('should call designParameterUpdate successfully', function(done) {
        //uncomment below and update the code to test designParameterUpdate
        //instance.designParameterUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPermissionsList', function() {
      it('should call designPermissionsList successfully', function(done) {
        //uncomment below and update the code to test designPermissionsList
        //instance.designPermissionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPermissionsUpdate', function() {
      it('should call designPermissionsUpdate successfully', function(done) {
        //uncomment below and update the code to test designPermissionsUpdate
        //instance.designPermissionsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinCapsCreate', function() {
      it('should call designPinCapsCreate successfully', function(done) {
        //uncomment below and update the code to test designPinCapsCreate
        //instance.designPinCapsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinCapsDelete', function() {
      it('should call designPinCapsDelete successfully', function(done) {
        //uncomment below and update the code to test designPinCapsDelete
        //instance.designPinCapsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinCapsList', function() {
      it('should call designPinCapsList successfully', function(done) {
        //uncomment below and update the code to test designPinCapsList
        //instance.designPinCapsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinCapsRead', function() {
      it('should call designPinCapsRead successfully', function(done) {
        //uncomment below and update the code to test designPinCapsRead
        //instance.designPinCapsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinCapsUpdate', function() {
      it('should call designPinCapsUpdate successfully', function(done) {
        //uncomment below and update the code to test designPinCapsUpdate
        //instance.designPinCapsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinCreate', function() {
      it('should call designPinCreate successfully', function(done) {
        //uncomment below and update the code to test designPinCreate
        //instance.designPinCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinDelete', function() {
      it('should call designPinDelete successfully', function(done) {
        //uncomment below and update the code to test designPinDelete
        //instance.designPinDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinEnergyCreate', function() {
      it('should call designPinEnergyCreate successfully', function(done) {
        //uncomment below and update the code to test designPinEnergyCreate
        //instance.designPinEnergyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinEnergyDelete', function() {
      it('should call designPinEnergyDelete successfully', function(done) {
        //uncomment below and update the code to test designPinEnergyDelete
        //instance.designPinEnergyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinEnergyList', function() {
      it('should call designPinEnergyList successfully', function(done) {
        //uncomment below and update the code to test designPinEnergyList
        //instance.designPinEnergyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinEnergyRead', function() {
      it('should call designPinEnergyRead successfully', function(done) {
        //uncomment below and update the code to test designPinEnergyRead
        //instance.designPinEnergyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinEnergyUpdate', function() {
      it('should call designPinEnergyUpdate successfully', function(done) {
        //uncomment below and update the code to test designPinEnergyUpdate
        //instance.designPinEnergyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinList', function() {
      it('should call designPinList successfully', function(done) {
        //uncomment below and update the code to test designPinList
        //instance.designPinList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinRead', function() {
      it('should call designPinRead successfully', function(done) {
        //uncomment below and update the code to test designPinRead
        //instance.designPinRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPinUpdate', function() {
      it('should call designPinUpdate successfully', function(done) {
        //uncomment below and update the code to test designPinUpdate
        //instance.designPinUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPowerCreate', function() {
      it('should call designPowerCreate successfully', function(done) {
        //uncomment below and update the code to test designPowerCreate
        //instance.designPowerCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPowerDelete', function() {
      it('should call designPowerDelete successfully', function(done) {
        //uncomment below and update the code to test designPowerDelete
        //instance.designPowerDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPowerList', function() {
      it('should call designPowerList successfully', function(done) {
        //uncomment below and update the code to test designPowerList
        //instance.designPowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPowerRead', function() {
      it('should call designPowerRead successfully', function(done) {
        //uncomment below and update the code to test designPowerRead
        //instance.designPowerRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designPowerUpdate', function() {
      it('should call designPowerUpdate successfully', function(done) {
        //uncomment below and update the code to test designPowerUpdate
        //instance.designPowerUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designRead', function() {
      it('should call designRead successfully', function(done) {
        //uncomment below and update the code to test designRead
        //instance.designRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designRestoreCreate', function() {
      it('should call designRestoreCreate successfully', function(done) {
        //uncomment below and update the code to test designRestoreCreate
        //instance.designRestoreCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioClone', function() {
      it('should call designScenarioClone successfully', function(done) {
        //uncomment below and update the code to test designScenarioClone
        //instance.designScenarioClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioCreate', function() {
      it('should call designScenarioCreate successfully', function(done) {
        //uncomment below and update the code to test designScenarioCreate
        //instance.designScenarioCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioDelete', function() {
      it('should call designScenarioDelete successfully', function(done) {
        //uncomment below and update the code to test designScenarioDelete
        //instance.designScenarioDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioList', function() {
      it('should call designScenarioList successfully', function(done) {
        //uncomment below and update the code to test designScenarioList
        //instance.designScenarioList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioModeConfigDelete', function() {
      it('should call designScenarioModeConfigDelete successfully', function(done) {
        //uncomment below and update the code to test designScenarioModeConfigDelete
        //instance.designScenarioModeConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioModeConfigRead', function() {
      it('should call designScenarioModeConfigRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioModeConfigRead
        //instance.designScenarioModeConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioModeConfigUpdate', function() {
      it('should call designScenarioModeConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test designScenarioModeConfigUpdate
        //instance.designScenarioModeConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioModeCreate', function() {
      it('should call designScenarioModeCreate successfully', function(done) {
        //uncomment below and update the code to test designScenarioModeCreate
        //instance.designScenarioModeCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioModeRead', function() {
      it('should call designScenarioModeRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioModeRead
        //instance.designScenarioModeRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioParamConfigDelete', function() {
      it('should call designScenarioParamConfigDelete successfully', function(done) {
        //uncomment below and update the code to test designScenarioParamConfigDelete
        //instance.designScenarioParamConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioParamConfigRead', function() {
      it('should call designScenarioParamConfigRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioParamConfigRead
        //instance.designScenarioParamConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioParamConfigUpdate', function() {
      it('should call designScenarioParamConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test designScenarioParamConfigUpdate
        //instance.designScenarioParamConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioParamCreate', function() {
      it('should call designScenarioParamCreate successfully', function(done) {
        //uncomment below and update the code to test designScenarioParamCreate
        //instance.designScenarioParamCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioParamRead', function() {
      it('should call designScenarioParamRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioParamRead
        //instance.designScenarioParamRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioPowerList', function() {
      it('should call designScenarioPowerList successfully', function(done) {
        //uncomment below and update the code to test designScenarioPowerList
        //instance.designScenarioPowerList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioPowerdistributionList', function() {
      it('should call designScenarioPowerdistributionList successfully', function(done) {
        //uncomment below and update the code to test designScenarioPowerdistributionList
        //instance.designScenarioPowerdistributionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioRead', function() {
      it('should call designScenarioRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioRead
        //instance.designScenarioRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioSupplyConfigDelete', function() {
      it('should call designScenarioSupplyConfigDelete successfully', function(done) {
        //uncomment below and update the code to test designScenarioSupplyConfigDelete
        //instance.designScenarioSupplyConfigDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioSupplyConfigRead', function() {
      it('should call designScenarioSupplyConfigRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioSupplyConfigRead
        //instance.designScenarioSupplyConfigRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioSupplyConfigUpdate', function() {
      it('should call designScenarioSupplyConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test designScenarioSupplyConfigUpdate
        //instance.designScenarioSupplyConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioSupplyCreate', function() {
      it('should call designScenarioSupplyCreate successfully', function(done) {
        //uncomment below and update the code to test designScenarioSupplyCreate
        //instance.designScenarioSupplyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioSupplyRead', function() {
      it('should call designScenarioSupplyRead successfully', function(done) {
        //uncomment below and update the code to test designScenarioSupplyRead
        //instance.designScenarioSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioTrendList', function() {
      it('should call designScenarioTrendList successfully', function(done) {
        //uncomment below and update the code to test designScenarioTrendList
        //instance.designScenarioTrendList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioUpdate', function() {
      it('should call designScenarioUpdate successfully', function(done) {
        //uncomment below and update the code to test designScenarioUpdate
        //instance.designScenarioUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designScenarioUpdateList', function() {
      it('should call designScenarioUpdateList successfully', function(done) {
        //uncomment below and update the code to test designScenarioUpdateList
        //instance.designScenarioUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSensorClone', function() {
      it('should call designSensorClone successfully', function(done) {
        //uncomment below and update the code to test designSensorClone
        //instance.designSensorClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSensorCreate', function() {
      it('should call designSensorCreate successfully', function(done) {
        //uncomment below and update the code to test designSensorCreate
        //instance.designSensorCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSensorDelete', function() {
      it('should call designSensorDelete successfully', function(done) {
        //uncomment below and update the code to test designSensorDelete
        //instance.designSensorDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSensorList', function() {
      it('should call designSensorList successfully', function(done) {
        //uncomment below and update the code to test designSensorList
        //instance.designSensorList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSensorRead', function() {
      it('should call designSensorRead successfully', function(done) {
        //uncomment below and update the code to test designSensorRead
        //instance.designSensorRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSensorUpdate', function() {
      it('should call designSensorUpdate successfully', function(done) {
        //uncomment below and update the code to test designSensorUpdate
        //instance.designSensorUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designStatetableCreate', function() {
      it('should call designStatetableCreate successfully', function(done) {
        //uncomment below and update the code to test designStatetableCreate
        //instance.designStatetableCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designStatetableDelete', function() {
      it('should call designStatetableDelete successfully', function(done) {
        //uncomment below and update the code to test designStatetableDelete
        //instance.designStatetableDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designStatetableList', function() {
      it('should call designStatetableList successfully', function(done) {
        //uncomment below and update the code to test designStatetableList
        //instance.designStatetableList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designStatetableRead', function() {
      it('should call designStatetableRead successfully', function(done) {
        //uncomment below and update the code to test designStatetableRead
        //instance.designStatetableRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designStatetableUpdate', function() {
      it('should call designStatetableUpdate successfully', function(done) {
        //uncomment below and update the code to test designStatetableUpdate
        //instance.designStatetableUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyClone', function() {
      it('should call designSupplyClone successfully', function(done) {
        //uncomment below and update the code to test designSupplyClone
        //instance.designSupplyClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyCreate', function() {
      it('should call designSupplyCreate successfully', function(done) {
        //uncomment below and update the code to test designSupplyCreate
        //instance.designSupplyCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyDelete', function() {
      it('should call designSupplyDelete successfully', function(done) {
        //uncomment below and update the code to test designSupplyDelete
        //instance.designSupplyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyList', function() {
      it('should call designSupplyList successfully', function(done) {
        //uncomment below and update the code to test designSupplyList
        //instance.designSupplyList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyModestateList', function() {
      it('should call designSupplyModestateList successfully', function(done) {
        //uncomment below and update the code to test designSupplyModestateList
        //instance.designSupplyModestateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyModestateUpdate', function() {
      it('should call designSupplyModestateUpdate successfully', function(done) {
        //uncomment below and update the code to test designSupplyModestateUpdate
        //instance.designSupplyModestateUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyRead', function() {
      it('should call designSupplyRead successfully', function(done) {
        //uncomment below and update the code to test designSupplyRead
        //instance.designSupplyRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplyUpdate', function() {
      it('should call designSupplyUpdate successfully', function(done) {
        //uncomment below and update the code to test designSupplyUpdate
        //instance.designSupplyUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplymodestateList', function() {
      it('should call designSupplymodestateList successfully', function(done) {
        //uncomment below and update the code to test designSupplymodestateList
        //instance.designSupplymodestateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designSupplymodestateUpdate', function() {
      it('should call designSupplymodestateUpdate successfully', function(done) {
        //uncomment below and update the code to test designSupplymodestateUpdate
        //instance.designSupplymodestateUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designTrendCreate', function() {
      it('should call designTrendCreate successfully', function(done) {
        //uncomment below and update the code to test designTrendCreate
        //instance.designTrendCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designTrendDelete', function() {
      it('should call designTrendDelete successfully', function(done) {
        //uncomment below and update the code to test designTrendDelete
        //instance.designTrendDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designTrendList', function() {
      it('should call designTrendList successfully', function(done) {
        //uncomment below and update the code to test designTrendList
        //instance.designTrendList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designTrendRead', function() {
      it('should call designTrendRead successfully', function(done) {
        //uncomment below and update the code to test designTrendRead
        //instance.designTrendRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designTrendUpdate', function() {
      it('should call designTrendUpdate successfully', function(done) {
        //uncomment below and update the code to test designTrendUpdate
        //instance.designTrendUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designUpdate', function() {
      it('should call designUpdate successfully', function(done) {
        //uncomment below and update the code to test designUpdate
        //instance.designUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designUpdateList', function() {
      it('should call designUpdateList successfully', function(done) {
        //uncomment below and update the code to test designUpdateList
        //instance.designUpdateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVerilogInstancesList', function() {
      it('should call designVerilogInstancesList successfully', function(done) {
        //uncomment below and update the code to test designVerilogInstancesList
        //instance.designVerilogInstancesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVerilogList', function() {
      it('should call designVerilogList successfully', function(done) {
        //uncomment below and update the code to test designVerilogList
        //instance.designVerilogList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVerilogModuleStateList', function() {
      it('should call designVerilogModuleStateList successfully', function(done) {
        //uncomment below and update the code to test designVerilogModuleStateList
        //instance.designVerilogModuleStateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVerilogModulesList', function() {
      it('should call designVerilogModulesList successfully', function(done) {
        //uncomment below and update the code to test designVerilogModulesList
        //instance.designVerilogModulesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVerilogWireStateList', function() {
      it('should call designVerilogWireStateList successfully', function(done) {
        //uncomment below and update the code to test designVerilogWireStateList
        //instance.designVerilogWireStateList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVerilogWiresList', function() {
      it('should call designVerilogWiresList successfully', function(done) {
        //uncomment below and update the code to test designVerilogWiresList
        //instance.designVerilogWiresList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVersionList', function() {
      it('should call designVersionList successfully', function(done) {
        //uncomment below and update the code to test designVersionList
        //instance.designVersionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('designVersionRead', function() {
      it('should call designVersionRead successfully', function(done) {
        //uncomment below and update the code to test designVersionRead
        //instance.designVersionRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
