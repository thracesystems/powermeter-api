/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.Technology();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Technology', function() {
    it('should create an instance of Technology', function() {
      // uncomment below and update the code to test Technology
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be.a(PowermeterApi.Technology);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property node (base name: "node")', function() {
      // uncomment below and update the code to test the property node
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property editable (base name: "editable")', function() {
      // uncomment below and update the code to test the property editable
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property currentVersion (base name: "current_version")', function() {
      // uncomment below and update the code to test the property currentVersion
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property waferDiameter (base name: "wafer_diameter")', function() {
      // uncomment below and update the code to test the property waferDiameter
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property scribeLine (base name: "scribe_line")', function() {
      // uncomment below and update the code to test the property scribeLine
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property edgeLoss (base name: "edge_loss")', function() {
      // uncomment below and update the code to test the property edgeLoss
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property projectCount (base name: "project_count")', function() {
      // uncomment below and update the code to test the property projectCount
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property hasShrink (base name: "has_shrink")', function() {
      // uncomment below and update the code to test the property hasShrink
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property shrinkFactor (base name: "shrink_factor")', function() {
      // uncomment below and update the code to test the property shrinkFactor
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property thickness (base name: "thickness")', function() {
      // uncomment below and update the code to test the property thickness
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property siConductivity (base name: "si_conductivity")', function() {
      // uncomment below and update the code to test the property siConductivity
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

    it('should have the property siHeatCapacity (base name: "si_heat_capacity")', function() {
      // uncomment below and update the code to test the property siHeatCapacity
      //var instane = new PowermeterApi.Technology();
      //expect(instance).to.be();
    });

  });

}));
