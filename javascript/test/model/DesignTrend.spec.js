/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.DesignTrend();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DesignTrend', function() {
    it('should create an instance of DesignTrend', function() {
      // uncomment below and update the code to test DesignTrend
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be.a(PowermeterApi.DesignTrend);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property excludedDataIds (base name: "excludedDataIds")', function() {
      // uncomment below and update the code to test the property excludedDataIds
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property fields (base name: "fields")', function() {
      // uncomment below and update the code to test the property fields
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property filter (base name: "filter")', function() {
      // uncomment below and update the code to test the property filter
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property subtitle (base name: "subtitle")', function() {
      // uncomment below and update the code to test the property subtitle
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property xaxistype (base name: "xaxistype")', function() {
      // uncomment below and update the code to test the property xaxistype
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property xaxisfield (base name: "xaxisfield")', function() {
      // uncomment below and update the code to test the property xaxisfield
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property xaxislabel (base name: "xaxislabel")', function() {
      // uncomment below and update the code to test the property xaxislabel
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property minx (base name: "minx")', function() {
      // uncomment below and update the code to test the property minx
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property maxx (base name: "maxx")', function() {
      // uncomment below and update the code to test the property maxx
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property yaxisfield (base name: "yaxisfield")', function() {
      // uncomment below and update the code to test the property yaxisfield
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property yaxislabel (base name: "yaxislabel")', function() {
      // uncomment below and update the code to test the property yaxislabel
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property miny (base name: "miny")', function() {
      // uncomment below and update the code to test the property miny
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property maxy (base name: "maxy")', function() {
      // uncomment below and update the code to test the property maxy
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

    it('should have the property linetype (base name: "linetype")', function() {
      // uncomment below and update the code to test the property linetype
      //var instane = new PowermeterApi.DesignTrend();
      //expect(instance).to.be();
    });

  });

}));
