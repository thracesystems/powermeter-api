/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowermeterApi);
  }
}(this, function(expect, PowermeterApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowermeterApi.ModelPackage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelPackage', function() {
    it('should create an instance of ModelPackage', function() {
      // uncomment below and update the code to test ModelPackage
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be.a(PowermeterApi.ModelPackage);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property descr (base name: "descr")', function() {
      // uncomment below and update the code to test the property descr
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property editable (base name: "editable")', function() {
      // uncomment below and update the code to test the property editable
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property currentVersion (base name: "current_version")', function() {
      // uncomment below and update the code to test the property currentVersion
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property dieWidthMin (base name: "die_width_min")', function() {
      // uncomment below and update the code to test the property dieWidthMin
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property dieWidthMax (base name: "die_width_max")', function() {
      // uncomment below and update the code to test the property dieWidthMax
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property dieHeightMin (base name: "die_height_min")', function() {
      // uncomment below and update the code to test the property dieHeightMin
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property dieHeightMax (base name: "die_height_max")', function() {
      // uncomment below and update the code to test the property dieHeightMax
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property heatspreaderSamesize (base name: "heatspreader_samesize")', function() {
      // uncomment below and update the code to test the property heatspreaderSamesize
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property heatspreaderWidth (base name: "heatspreader_width")', function() {
      // uncomment below and update the code to test the property heatspreaderWidth
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property heatspreaderHeight (base name: "heatspreader_height")', function() {
      // uncomment below and update the code to test the property heatspreaderHeight
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property heatspreaderThickness (base name: "heatspreader_thickness")', function() {
      // uncomment below and update the code to test the property heatspreaderThickness
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property heatspreaderConductivity (base name: "heatspreader_conductivity")', function() {
      // uncomment below and update the code to test the property heatspreaderConductivity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property heatspreaderHeatcapacity (base name: "heatspreader_heatcapacity")', function() {
      // uncomment below and update the code to test the property heatspreaderHeatcapacity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property timThickness (base name: "tim_thickness")', function() {
      // uncomment below and update the code to test the property timThickness
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property timConductivity (base name: "tim_conductivity")', function() {
      // uncomment below and update the code to test the property timConductivity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property timHeatcapacity (base name: "tim_heatcapacity")', function() {
      // uncomment below and update the code to test the property timHeatcapacity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property underfillThickness (base name: "underfill_thickness")', function() {
      // uncomment below and update the code to test the property underfillThickness
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property c4Width (base name: "c4_width")', function() {
      // uncomment below and update the code to test the property c4Width
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property c4Number (base name: "c4_number")', function() {
      // uncomment below and update the code to test the property c4Number
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property c4Conductivity (base name: "c4_conductivity")', function() {
      // uncomment below and update the code to test the property c4Conductivity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property c4Heatcapacity (base name: "c4_heatcapacity")', function() {
      // uncomment below and update the code to test the property c4Heatcapacity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property substrateSamesize (base name: "substrate_samesize")', function() {
      // uncomment below and update the code to test the property substrateSamesize
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property substrateWidth (base name: "substrate_width")', function() {
      // uncomment below and update the code to test the property substrateWidth
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property substrateHeight (base name: "substrate_height")', function() {
      // uncomment below and update the code to test the property substrateHeight
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property substrateThickness (base name: "substrate_thickness")', function() {
      // uncomment below and update the code to test the property substrateThickness
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property substrateConductivity (base name: "substrate_conductivity")', function() {
      // uncomment below and update the code to test the property substrateConductivity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property substrateHeatcapacity (base name: "substrate_heatcapacity")', function() {
      // uncomment below and update the code to test the property substrateHeatcapacity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property solderballSamesize (base name: "solderball_samesize")', function() {
      // uncomment below and update the code to test the property solderballSamesize
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property solderballWidth (base name: "solderball_width")', function() {
      // uncomment below and update the code to test the property solderballWidth
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property solderballHeight (base name: "solderball_height")', function() {
      // uncomment below and update the code to test the property solderballHeight
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property solderballThickness (base name: "solderball_thickness")', function() {
      // uncomment below and update the code to test the property solderballThickness
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property solderballConductivity (base name: "solderball_conductivity")', function() {
      // uncomment below and update the code to test the property solderballConductivity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

    it('should have the property solderballHeatcapacity (base name: "solderball_heatcapacity")', function() {
      // uncomment below and update the code to test the property solderballHeatcapacity
      //var instane = new PowermeterApi.ModelPackage();
      //expect(instance).to.be();
    });

  });

}));
