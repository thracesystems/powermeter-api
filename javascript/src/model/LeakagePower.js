/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LeakagePower model module.
 * @module model/LeakagePower
 * @version 2021.4.1
 */
class LeakagePower {
    /**
     * Constructs a new <code>LeakagePower</code>.
     * @alias module:model/LeakagePower
     * @param supply {Number} 
     * @param process {String} 
     * @param rc {String} 
     * @param voltage {Number} 
     * @param temperature {Number} 
     */
    constructor(supply, process, rc, voltage, temperature) { 
        
        LeakagePower.initialize(this, supply, process, rc, voltage, temperature);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, supply, process, rc, voltage, temperature) { 
        obj['supply'] = supply;
        obj['process'] = process;
        obj['rc'] = rc;
        obj['voltage'] = voltage;
        obj['temperature'] = temperature;
    }

    /**
     * Constructs a <code>LeakagePower</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LeakagePower} obj Optional instance to populate.
     * @return {module:model/LeakagePower} The populated <code>LeakagePower</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LeakagePower();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('supply')) {
                obj['supply'] = ApiClient.convertToType(data['supply'], 'Number');
            }
            if (data.hasOwnProperty('supply_name')) {
                obj['supply_name'] = ApiClient.convertToType(data['supply_name'], 'String');
            }
            if (data.hasOwnProperty('process')) {
                obj['process'] = ApiClient.convertToType(data['process'], 'String');
            }
            if (data.hasOwnProperty('rc')) {
                obj['rc'] = ApiClient.convertToType(data['rc'], 'String');
            }
            if (data.hasOwnProperty('voltage')) {
                obj['voltage'] = ApiClient.convertToType(data['voltage'], 'Number');
            }
            if (data.hasOwnProperty('temperature')) {
                obj['temperature'] = ApiClient.convertToType(data['temperature'], 'Number');
            }
            if (data.hasOwnProperty('when')) {
                obj['when'] = ApiClient.convertToType(data['when'], 'String');
            }
            if (data.hasOwnProperty('power')) {
                obj['power'] = ApiClient.convertToType(data['power'], 'Number');
            }
            if (data.hasOwnProperty('modes')) {
                obj['modes'] = ApiClient.convertToType(data['modes'], ['Number']);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
LeakagePower.prototype['id'] = undefined;

/**
 * @member {Number} supply
 */
LeakagePower.prototype['supply'] = undefined;

/**
 * @member {String} supply_name
 */
LeakagePower.prototype['supply_name'] = undefined;

/**
 * @member {String} process
 */
LeakagePower.prototype['process'] = undefined;

/**
 * @member {String} rc
 */
LeakagePower.prototype['rc'] = undefined;

/**
 * @member {Number} voltage
 */
LeakagePower.prototype['voltage'] = undefined;

/**
 * @member {Number} temperature
 */
LeakagePower.prototype['temperature'] = undefined;

/**
 * @member {String} when
 */
LeakagePower.prototype['when'] = undefined;

/**
 * @member {Number} power
 */
LeakagePower.prototype['power'] = undefined;

/**
 * @member {Array.<Number>} modes
 */
LeakagePower.prototype['modes'] = undefined;






export default LeakagePower;

