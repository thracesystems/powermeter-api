/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimMeasurement model module.
 * @module model/SimMeasurement
 * @version 2021.4.1
 */
class SimMeasurement {
    /**
     * Constructs a new <code>SimMeasurement</code>.
     * @alias module:model/SimMeasurement
     * @param type {String} 
     * @param name {String} 
     */
    constructor(type, name) { 
        
        SimMeasurement.initialize(this, type, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, name) { 
        obj['type'] = type;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>SimMeasurement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimMeasurement} obj Optional instance to populate.
     * @return {module:model/SimMeasurement} The populated <code>SimMeasurement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimMeasurement();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('clock_name')) {
                obj['clock_name'] = ApiClient.convertToType(data['clock_name'], 'String');
            }
            if (data.hasOwnProperty('rising')) {
                obj['rising'] = ApiClient.convertToType(data['rising'], 'Boolean');
            }
            if (data.hasOwnProperty('expression')) {
                obj['expression'] = ApiClient.convertToType(data['expression'], 'String');
            }
            if (data.hasOwnProperty('bit_size')) {
                obj['bit_size'] = ApiClient.convertToType(data['bit_size'], 'Number');
            }
            if (data.hasOwnProperty('activity_type')) {
                obj['activity_type'] = ApiClient.convertToType(data['activity_type'], ['String']);
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
SimMeasurement.prototype['id'] = undefined;

/**
 * @member {String} type
 */
SimMeasurement.prototype['type'] = undefined;

/**
 * @member {String} name
 */
SimMeasurement.prototype['name'] = undefined;

/**
 * @member {String} clock_name
 */
SimMeasurement.prototype['clock_name'] = undefined;

/**
 * @member {Boolean} rising
 */
SimMeasurement.prototype['rising'] = undefined;

/**
 * @member {String} expression
 */
SimMeasurement.prototype['expression'] = undefined;

/**
 * @member {Number} bit_size
 */
SimMeasurement.prototype['bit_size'] = undefined;

/**
 * @member {Array.<String>} activity_type
 */
SimMeasurement.prototype['activity_type'] = undefined;

/**
 * @member {String} variable
 */
SimMeasurement.prototype['variable'] = undefined;






export default SimMeasurement;

