/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContribPowerDevice model module.
 * @module model/ContribPowerDevice
 * @version 2021.4.1
 */
class ContribPowerDevice {
    /**
     * Constructs a new <code>ContribPowerDevice</code>.
     * @alias module:model/ContribPowerDevice
     * @param device {Number} 
     * @param count {Number} 
     */
    constructor(device, count) { 
        
        ContribPowerDevice.initialize(this, device, count);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, count) { 
        obj['device'] = device;
        obj['count'] = count;
    }

    /**
     * Constructs a <code>ContribPowerDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContribPowerDevice} obj Optional instance to populate.
     * @return {module:model/ContribPowerDevice} The populated <code>ContribPowerDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContribPowerDevice();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('d_pin')) {
                obj['d_pin'] = ApiClient.convertToType(data['d_pin'], 'String');
            }
            if (data.hasOwnProperty('g_pin')) {
                obj['g_pin'] = ApiClient.convertToType(data['g_pin'], 'String');
            }
            if (data.hasOwnProperty('s_pin')) {
                obj['s_pin'] = ApiClient.convertToType(data['s_pin'], 'String');
            }
            if (data.hasOwnProperty('b_pin')) {
                obj['b_pin'] = ApiClient.convertToType(data['b_pin'], 'String');
            }
            if (data.hasOwnProperty('device_name')) {
                obj['device_name'] = ApiClient.convertToType(data['device_name'], 'String');
            }
            if (data.hasOwnProperty('device_width')) {
                obj['device_width'] = ApiClient.convertToType(data['device_width'], 'Number');
            }
            if (data.hasOwnProperty('device_length')) {
                obj['device_length'] = ApiClient.convertToType(data['device_length'], 'Number');
            }
            if (data.hasOwnProperty('device_nfin')) {
                obj['device_nfin'] = ApiClient.convertToType(data['device_nfin'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {String} type
 */
ContribPowerDevice.prototype['type'] = undefined;

/**
 * @member {Number} device
 */
ContribPowerDevice.prototype['device'] = undefined;

/**
 * @member {Number} count
 */
ContribPowerDevice.prototype['count'] = undefined;

/**
 * @member {String} d_pin
 */
ContribPowerDevice.prototype['d_pin'] = undefined;

/**
 * @member {String} g_pin
 */
ContribPowerDevice.prototype['g_pin'] = undefined;

/**
 * @member {String} s_pin
 */
ContribPowerDevice.prototype['s_pin'] = undefined;

/**
 * @member {String} b_pin
 */
ContribPowerDevice.prototype['b_pin'] = undefined;

/**
 * @member {String} device_name
 */
ContribPowerDevice.prototype['device_name'] = undefined;

/**
 * @member {Number} device_width
 */
ContribPowerDevice.prototype['device_width'] = undefined;

/**
 * @member {Number} device_length
 */
ContribPowerDevice.prototype['device_length'] = undefined;

/**
 * @member {Number} device_nfin
 */
ContribPowerDevice.prototype['device_nfin'] = undefined;






export default ContribPowerDevice;

