/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Supply model module.
 * @module model/Supply
 * @version 2021.4.1
 */
class Supply {
    /**
     * Constructs a new <code>Supply</code>.
     * @alias module:model/Supply
     * @param name {String} 
     */
    constructor(name) { 
        
        Supply.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Supply</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Supply} obj Optional instance to populate.
     * @return {module:model/Supply} The populated <code>Supply</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Supply();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('voltage')) {
                obj['voltage'] = ApiClient.convertToType(data['voltage'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('is_power')) {
                obj['is_power'] = ApiClient.convertToType(data['is_power'], 'Boolean');
            }
            if (data.hasOwnProperty('is_ground')) {
                obj['is_ground'] = ApiClient.convertToType(data['is_ground'], 'Boolean');
            }
            if (data.hasOwnProperty('switchable')) {
                obj['switchable'] = ApiClient.convertToType(data['switchable'], 'Boolean');
            }
            if (data.hasOwnProperty('master_supply')) {
                obj['master_supply'] = ApiClient.convertToType(data['master_supply'], 'Number');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('instance_count')) {
                obj['instance_count'] = ApiClient.convertToType(data['instance_count'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Supply.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Supply.prototype['name'] = undefined;

/**
 * @member {Number} voltage
 */
Supply.prototype['voltage'] = undefined;

/**
 * @member {module:model/Supply.TypeEnum} type
 */
Supply.prototype['type'] = undefined;

/**
 * @member {Boolean} is_power
 */
Supply.prototype['is_power'] = undefined;

/**
 * @member {Boolean} is_ground
 */
Supply.prototype['is_ground'] = undefined;

/**
 * @member {Boolean} switchable
 */
Supply.prototype['switchable'] = undefined;

/**
 * @member {Number} master_supply
 */
Supply.prototype['master_supply'] = undefined;

/**
 * @member {String} color
 */
Supply.prototype['color'] = undefined;

/**
 * @member {Number} instance_count
 */
Supply.prototype['instance_count'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Supply['TypeEnum'] = {

    /**
     * value: "primary_power"
     * @const
     */
    "primary_power": "primary_power",

    /**
     * value: "primary_ground"
     * @const
     */
    "primary_ground": "primary_ground",

    /**
     * value: "backup_power"
     * @const
     */
    "backup_power": "backup_power",

    /**
     * value: "backup_ground"
     * @const
     */
    "backup_ground": "backup_ground",

    /**
     * value: "internal_power"
     * @const
     */
    "internal_power": "internal_power",

    /**
     * value: "internal_ground"
     * @const
     */
    "internal_ground": "internal_ground",

    /**
     * value: "pwell"
     * @const
     */
    "pwell": "pwell",

    /**
     * value: "nwell"
     * @const
     */
    "nwell": "nwell",

    /**
     * value: "deepnwell"
     * @const
     */
    "deepnwell": "deepnwell",

    /**
     * value: "deeppwell"
     * @const
     */
    "deeppwell": "deeppwell"
};



export default Supply;

