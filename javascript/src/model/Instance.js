/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceMode from './InstanceMode';
import InstanceSupply from './InstanceSupply';

/**
 * The Instance model module.
 * @module model/Instance
 * @version 2021.4.1
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * @alias module:model/Instance
     * @param name {String} 
     * @param master {Number} 
     * @param modes {Array.<module:model/InstanceMode>} 
     */
    constructor(name, master, modes) { 
        
        Instance.initialize(this, name, master, modes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, master, modes) { 
        obj['name'] = name;
        obj['master'] = master;
        obj['modes'] = modes;
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('origin_x')) {
                obj['origin_x'] = ApiClient.convertToType(data['origin_x'], 'Number');
            }
            if (data.hasOwnProperty('origin_y')) {
                obj['origin_y'] = ApiClient.convertToType(data['origin_y'], 'Number');
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('computed_color')) {
                obj['computed_color'] = ApiClient.convertToType(data['computed_color'], 'String');
            }
            if (data.hasOwnProperty('master')) {
                obj['master'] = ApiClient.convertToType(data['master'], 'Number');
            }
            if (data.hasOwnProperty('master_name')) {
                obj['master_name'] = ApiClient.convertToType(data['master_name'], 'String');
            }
            if (data.hasOwnProperty('master_master')) {
                obj['master_master'] = ApiClient.convertToType(data['master_master'], 'Number');
            }
            if (data.hasOwnProperty('master_latest_commit')) {
                obj['master_latest_commit'] = ApiClient.convertToType(data['master_latest_commit'], 'Number');
            }
            if (data.hasOwnProperty('rename_on_conflict')) {
                obj['rename_on_conflict'] = ApiClient.convertToType(data['rename_on_conflict'], 'Boolean');
            }
            if (data.hasOwnProperty('modes')) {
                obj['modes'] = ApiClient.convertToType(data['modes'], [InstanceMode]);
            }
            if (data.hasOwnProperty('outline')) {
                obj['outline'] = ApiClient.convertToType(data['outline'], 'String');
            }
            if (data.hasOwnProperty('area')) {
                obj['area'] = ApiClient.convertToType(data['area'], 'Number');
            }
            if (data.hasOwnProperty('supplies')) {
                obj['supplies'] = ApiClient.convertToType(data['supplies'], [InstanceSupply]);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Instance.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * @member {String} count
 */
Instance.prototype['count'] = undefined;

/**
 * @member {Number} origin_x
 */
Instance.prototype['origin_x'] = undefined;

/**
 * @member {Number} origin_y
 */
Instance.prototype['origin_y'] = undefined;

/**
 * @member {module:model/Instance.OrientationEnum} orientation
 */
Instance.prototype['orientation'] = undefined;

/**
 * @member {String} color
 */
Instance.prototype['color'] = undefined;

/**
 * @member {String} computed_color
 */
Instance.prototype['computed_color'] = undefined;

/**
 * @member {Number} master
 */
Instance.prototype['master'] = undefined;

/**
 * @member {String} master_name
 */
Instance.prototype['master_name'] = undefined;

/**
 * @member {Number} master_master
 */
Instance.prototype['master_master'] = undefined;

/**
 * @member {Number} master_latest_commit
 */
Instance.prototype['master_latest_commit'] = undefined;

/**
 * @member {Boolean} rename_on_conflict
 */
Instance.prototype['rename_on_conflict'] = undefined;

/**
 * @member {Array.<module:model/InstanceMode>} modes
 */
Instance.prototype['modes'] = undefined;

/**
 * @member {String} outline
 */
Instance.prototype['outline'] = undefined;

/**
 * @member {Number} area
 */
Instance.prototype['area'] = undefined;

/**
 * @member {Array.<module:model/InstanceSupply>} supplies
 */
Instance.prototype['supplies'] = undefined;





/**
 * Allowed values for the <code>orientation</code> property.
 * @enum {String}
 * @readonly
 */
Instance['OrientationEnum'] = {

    /**
     * value: "N"
     * @const
     */
    "N": "N",

    /**
     * value: "E"
     * @const
     */
    "E": "E",

    /**
     * value: "W"
     * @const
     */
    "W": "W",

    /**
     * value: "S"
     * @const
     */
    "S": "S",

    /**
     * value: "FN"
     * @const
     */
    "FN": "FN",

    /**
     * value: "FS"
     * @const
     */
    "FS": "FS",

    /**
     * value: "FE"
     * @const
     */
    "FE": "FE",

    /**
     * value: "FW"
     * @const
     */
    "FW": "FW"
};



export default Instance;

