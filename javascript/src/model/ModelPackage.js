/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PackageVersion from './PackageVersion';

/**
 * The ModelPackage model module.
 * @module model/ModelPackage
 * @version 2021.4.1
 */
class ModelPackage {
    /**
     * Constructs a new <code>ModelPackage</code>.
     * @alias module:model/ModelPackage
     */
    constructor() { 
        
        ModelPackage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelPackage} obj Optional instance to populate.
     * @return {module:model/ModelPackage} The populated <code>ModelPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelPackage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('descr')) {
                obj['descr'] = ApiClient.convertToType(data['descr'], 'String');
            }
            if (data.hasOwnProperty('editable')) {
                obj['editable'] = ApiClient.convertToType(data['editable'], 'Boolean');
            }
            if (data.hasOwnProperty('current_version')) {
                obj['current_version'] = ApiClient.convertToType(data['current_version'], 'Number');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = PackageVersion.constructFromObject(data['version']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('die_width_min')) {
                obj['die_width_min'] = ApiClient.convertToType(data['die_width_min'], 'Number');
            }
            if (data.hasOwnProperty('die_width_max')) {
                obj['die_width_max'] = ApiClient.convertToType(data['die_width_max'], 'Number');
            }
            if (data.hasOwnProperty('die_height_min')) {
                obj['die_height_min'] = ApiClient.convertToType(data['die_height_min'], 'Number');
            }
            if (data.hasOwnProperty('die_height_max')) {
                obj['die_height_max'] = ApiClient.convertToType(data['die_height_max'], 'Number');
            }
            if (data.hasOwnProperty('heatspreader_samesize')) {
                obj['heatspreader_samesize'] = ApiClient.convertToType(data['heatspreader_samesize'], 'Boolean');
            }
            if (data.hasOwnProperty('heatspreader_width')) {
                obj['heatspreader_width'] = ApiClient.convertToType(data['heatspreader_width'], 'Number');
            }
            if (data.hasOwnProperty('heatspreader_height')) {
                obj['heatspreader_height'] = ApiClient.convertToType(data['heatspreader_height'], 'Number');
            }
            if (data.hasOwnProperty('heatspreader_thickness')) {
                obj['heatspreader_thickness'] = ApiClient.convertToType(data['heatspreader_thickness'], 'Number');
            }
            if (data.hasOwnProperty('heatspreader_conductivity')) {
                obj['heatspreader_conductivity'] = ApiClient.convertToType(data['heatspreader_conductivity'], 'Number');
            }
            if (data.hasOwnProperty('heatspreader_heatcapacity')) {
                obj['heatspreader_heatcapacity'] = ApiClient.convertToType(data['heatspreader_heatcapacity'], 'Number');
            }
            if (data.hasOwnProperty('tim_thickness')) {
                obj['tim_thickness'] = ApiClient.convertToType(data['tim_thickness'], 'Number');
            }
            if (data.hasOwnProperty('tim_conductivity')) {
                obj['tim_conductivity'] = ApiClient.convertToType(data['tim_conductivity'], 'Number');
            }
            if (data.hasOwnProperty('tim_heatcapacity')) {
                obj['tim_heatcapacity'] = ApiClient.convertToType(data['tim_heatcapacity'], 'Number');
            }
            if (data.hasOwnProperty('underfill_thickness')) {
                obj['underfill_thickness'] = ApiClient.convertToType(data['underfill_thickness'], 'Number');
            }
            if (data.hasOwnProperty('c4_width')) {
                obj['c4_width'] = ApiClient.convertToType(data['c4_width'], 'Number');
            }
            if (data.hasOwnProperty('c4_number')) {
                obj['c4_number'] = ApiClient.convertToType(data['c4_number'], 'Number');
            }
            if (data.hasOwnProperty('c4_conductivity')) {
                obj['c4_conductivity'] = ApiClient.convertToType(data['c4_conductivity'], 'Number');
            }
            if (data.hasOwnProperty('c4_heatcapacity')) {
                obj['c4_heatcapacity'] = ApiClient.convertToType(data['c4_heatcapacity'], 'Number');
            }
            if (data.hasOwnProperty('substrate_samesize')) {
                obj['substrate_samesize'] = ApiClient.convertToType(data['substrate_samesize'], 'Boolean');
            }
            if (data.hasOwnProperty('substrate_width')) {
                obj['substrate_width'] = ApiClient.convertToType(data['substrate_width'], 'Number');
            }
            if (data.hasOwnProperty('substrate_height')) {
                obj['substrate_height'] = ApiClient.convertToType(data['substrate_height'], 'Number');
            }
            if (data.hasOwnProperty('substrate_thickness')) {
                obj['substrate_thickness'] = ApiClient.convertToType(data['substrate_thickness'], 'Number');
            }
            if (data.hasOwnProperty('substrate_conductivity')) {
                obj['substrate_conductivity'] = ApiClient.convertToType(data['substrate_conductivity'], 'Number');
            }
            if (data.hasOwnProperty('substrate_heatcapacity')) {
                obj['substrate_heatcapacity'] = ApiClient.convertToType(data['substrate_heatcapacity'], 'Number');
            }
            if (data.hasOwnProperty('solderball_samesize')) {
                obj['solderball_samesize'] = ApiClient.convertToType(data['solderball_samesize'], 'Boolean');
            }
            if (data.hasOwnProperty('solderball_width')) {
                obj['solderball_width'] = ApiClient.convertToType(data['solderball_width'], 'Number');
            }
            if (data.hasOwnProperty('solderball_height')) {
                obj['solderball_height'] = ApiClient.convertToType(data['solderball_height'], 'Number');
            }
            if (data.hasOwnProperty('solderball_thickness')) {
                obj['solderball_thickness'] = ApiClient.convertToType(data['solderball_thickness'], 'Number');
            }
            if (data.hasOwnProperty('solderball_conductivity')) {
                obj['solderball_conductivity'] = ApiClient.convertToType(data['solderball_conductivity'], 'Number');
            }
            if (data.hasOwnProperty('solderball_heatcapacity')) {
                obj['solderball_heatcapacity'] = ApiClient.convertToType(data['solderball_heatcapacity'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
ModelPackage.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ModelPackage.prototype['name'] = undefined;

/**
 * @member {String} descr
 */
ModelPackage.prototype['descr'] = undefined;

/**
 * @member {Boolean} editable
 */
ModelPackage.prototype['editable'] = undefined;

/**
 * @member {Number} current_version
 */
ModelPackage.prototype['current_version'] = undefined;

/**
 * @member {module:model/PackageVersion} version
 */
ModelPackage.prototype['version'] = undefined;

/**
 * @member {Number} width
 */
ModelPackage.prototype['width'] = undefined;

/**
 * @member {Number} height
 */
ModelPackage.prototype['height'] = undefined;

/**
 * @member {Number} die_width_min
 */
ModelPackage.prototype['die_width_min'] = undefined;

/**
 * @member {Number} die_width_max
 */
ModelPackage.prototype['die_width_max'] = undefined;

/**
 * @member {Number} die_height_min
 */
ModelPackage.prototype['die_height_min'] = undefined;

/**
 * @member {Number} die_height_max
 */
ModelPackage.prototype['die_height_max'] = undefined;

/**
 * @member {Boolean} heatspreader_samesize
 */
ModelPackage.prototype['heatspreader_samesize'] = undefined;

/**
 * @member {Number} heatspreader_width
 */
ModelPackage.prototype['heatspreader_width'] = undefined;

/**
 * @member {Number} heatspreader_height
 */
ModelPackage.prototype['heatspreader_height'] = undefined;

/**
 * @member {Number} heatspreader_thickness
 */
ModelPackage.prototype['heatspreader_thickness'] = undefined;

/**
 * @member {Number} heatspreader_conductivity
 */
ModelPackage.prototype['heatspreader_conductivity'] = undefined;

/**
 * @member {Number} heatspreader_heatcapacity
 */
ModelPackage.prototype['heatspreader_heatcapacity'] = undefined;

/**
 * @member {Number} tim_thickness
 */
ModelPackage.prototype['tim_thickness'] = undefined;

/**
 * @member {Number} tim_conductivity
 */
ModelPackage.prototype['tim_conductivity'] = undefined;

/**
 * @member {Number} tim_heatcapacity
 */
ModelPackage.prototype['tim_heatcapacity'] = undefined;

/**
 * @member {Number} underfill_thickness
 */
ModelPackage.prototype['underfill_thickness'] = undefined;

/**
 * @member {Number} c4_width
 */
ModelPackage.prototype['c4_width'] = undefined;

/**
 * @member {Number} c4_number
 */
ModelPackage.prototype['c4_number'] = undefined;

/**
 * @member {Number} c4_conductivity
 */
ModelPackage.prototype['c4_conductivity'] = undefined;

/**
 * @member {Number} c4_heatcapacity
 */
ModelPackage.prototype['c4_heatcapacity'] = undefined;

/**
 * @member {Boolean} substrate_samesize
 */
ModelPackage.prototype['substrate_samesize'] = undefined;

/**
 * @member {Number} substrate_width
 */
ModelPackage.prototype['substrate_width'] = undefined;

/**
 * @member {Number} substrate_height
 */
ModelPackage.prototype['substrate_height'] = undefined;

/**
 * @member {Number} substrate_thickness
 */
ModelPackage.prototype['substrate_thickness'] = undefined;

/**
 * @member {Number} substrate_conductivity
 */
ModelPackage.prototype['substrate_conductivity'] = undefined;

/**
 * @member {Number} substrate_heatcapacity
 */
ModelPackage.prototype['substrate_heatcapacity'] = undefined;

/**
 * @member {Boolean} solderball_samesize
 */
ModelPackage.prototype['solderball_samesize'] = undefined;

/**
 * @member {Number} solderball_width
 */
ModelPackage.prototype['solderball_width'] = undefined;

/**
 * @member {Number} solderball_height
 */
ModelPackage.prototype['solderball_height'] = undefined;

/**
 * @member {Number} solderball_thickness
 */
ModelPackage.prototype['solderball_thickness'] = undefined;

/**
 * @member {Number} solderball_conductivity
 */
ModelPackage.prototype['solderball_conductivity'] = undefined;

/**
 * @member {Number} solderball_heatcapacity
 */
ModelPackage.prototype['solderball_heatcapacity'] = undefined;






export default ModelPackage;

