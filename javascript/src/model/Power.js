/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Power model module.
 * @module model/Power
 * @version 2021.4.1
 */
class Power {
    /**
     * Constructs a new <code>Power</code>.
     * @alias module:model/Power
     * @param mode {Number} 
     * @param supply {Number} 
     * @param source {Number} 
     * @param confidence {Number} 
     * @param powerType {module:model/Power.PowerTypeEnum} 
     */
    constructor(mode, supply, source, confidence, powerType) { 
        
        Power.initialize(this, mode, supply, source, confidence, powerType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mode, supply, source, confidence, powerType) { 
        obj['mode'] = mode;
        obj['supply'] = supply;
        obj['source'] = source;
        obj['confidence'] = confidence;
        obj['power_type'] = powerType;
    }

    /**
     * Constructs a <code>Power</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Power} obj Optional instance to populate.
     * @return {module:model/Power} The populated <code>Power</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Power();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'Number');
            }
            if (data.hasOwnProperty('mode_name')) {
                obj['mode_name'] = ApiClient.convertToType(data['mode_name'], 'String');
            }
            if (data.hasOwnProperty('supply')) {
                obj['supply'] = ApiClient.convertToType(data['supply'], 'Number');
            }
            if (data.hasOwnProperty('supply_name')) {
                obj['supply_name'] = ApiClient.convertToType(data['supply_name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'Number');
            }
            if (data.hasOwnProperty('source_name')) {
                obj['source_name'] = ApiClient.convertToType(data['source_name'], 'String');
            }
            if (data.hasOwnProperty('tech_scaling')) {
                obj['tech_scaling'] = ApiClient.convertToType(data['tech_scaling'], 'Boolean');
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('power_type')) {
                obj['power_type'] = ApiClient.convertToType(data['power_type'], 'String');
            }
            if (data.hasOwnProperty('equation')) {
                obj['equation'] = ApiClient.convertToType(data['equation'], Object);
            }
            if (data.hasOwnProperty('table_columns')) {
                obj['table_columns'] = ApiClient.convertToType(data['table_columns'], Object);
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], Object);
            }
            if (data.hasOwnProperty('waveform')) {
                obj['waveform'] = ApiClient.convertToType(data['waveform'], Object);
            }
            if (data.hasOwnProperty('waveform_type')) {
                obj['waveform_type'] = ApiClient.convertToType(data['waveform_type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Power.prototype['id'] = undefined;

/**
 * @member {Number} mode
 */
Power.prototype['mode'] = undefined;

/**
 * @member {String} mode_name
 */
Power.prototype['mode_name'] = undefined;

/**
 * @member {Number} supply
 */
Power.prototype['supply'] = undefined;

/**
 * @member {String} supply_name
 */
Power.prototype['supply_name'] = undefined;

/**
 * @member {Number} source
 */
Power.prototype['source'] = undefined;

/**
 * @member {String} source_name
 */
Power.prototype['source_name'] = undefined;

/**
 * @member {Boolean} tech_scaling
 */
Power.prototype['tech_scaling'] = undefined;

/**
 * @member {Number} confidence
 */
Power.prototype['confidence'] = undefined;

/**
 * @member {module:model/Power.PowerTypeEnum} power_type
 */
Power.prototype['power_type'] = undefined;

/**
 * @member {Object} equation
 */
Power.prototype['equation'] = undefined;

/**
 * @member {Object} table_columns
 */
Power.prototype['table_columns'] = undefined;

/**
 * @member {Object} table
 */
Power.prototype['table'] = undefined;

/**
 * @member {Object} waveform
 */
Power.prototype['waveform'] = undefined;

/**
 * @member {String} waveform_type
 */
Power.prototype['waveform_type'] = undefined;





/**
 * Allowed values for the <code>power_type</code> property.
 * @enum {String}
 * @readonly
 */
Power['PowerTypeEnum'] = {

    /**
     * value: "equation"
     * @const
     */
    "equation": "equation",

    /**
     * value: "table"
     * @const
     */
    "table": "table",

    /**
     * value: "waveform"
     * @const
     */
    "waveform": "waveform"
};



export default Power;

