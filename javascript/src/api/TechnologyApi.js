/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComputedDeviceData from '../model/ComputedDeviceData';
import Defect0 from '../model/Defect0';
import Device from '../model/Device';
import DeviceData from '../model/DeviceData';
import DeviceDataBulk from '../model/DeviceDataBulk';
import Layer from '../model/Layer';
import LayerStack from '../model/LayerStack';
import ModelCorner from '../model/ModelCorner';
import PowerSource from '../model/PowerSource';
import RCCorner from '../model/RCCorner';
import Technology from '../model/Technology';
import TechnologyMaster from '../model/TechnologyMaster';
import TechnologyVersion from '../model/TechnologyVersion';
import UpdateData from '../model/UpdateData';

/**
* Technology service.
* @module api/TechnologyApi
* @version 2021.4.1
*/
export default class TechnologyApi {

    /**
    * Constructs a new TechnologyApi. 
    * @alias module:api/TechnologyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTechnologyDeviceDataDeleteAll operation.
     * @callback module:api/TechnologyApi~apiTechnologyDeviceDataDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {module:api/TechnologyApi~apiTechnologyDeviceDataDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTechnologyDeviceDataDeleteAll(techid, deviceid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling apiTechnologyDeviceDataDeleteAll");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling apiTechnologyDeviceDataDeleteAll");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTechnologyDeviceDeleteAll operation.
     * @callback module:api/TechnologyApi~apiTechnologyDeviceDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all devices
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~apiTechnologyDeviceDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTechnologyDeviceDeleteAll(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling apiTechnologyDeviceDeleteAll");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/device/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyCommitCreate operation.
     * @callback module:api/TechnologyApi~technologyCommitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnologyVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit a version
     * @param {Number} techid 
     * @param {module:model/TechnologyVersion} data 
     * @param {module:api/TechnologyApi~technologyCommitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnologyVersion}
     */
    technologyCommitCreate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyCommitCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyCommitCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TechnologyVersion;
      return this.apiClient.callApi(
        '/technology/{techid}/commit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyD0Create operation.
     * @callback module:api/TechnologyApi~technologyD0CreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Defect0} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a d0 data
     * @param {Number} techid 
     * @param {module:model/Defect0} data 
     * @param {module:api/TechnologyApi~technologyD0CreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Defect0}
     */
    technologyD0Create(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyD0Create");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyD0Create");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Defect0;
      return this.apiClient.callApi(
        '/technology/{techid}/d0/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyD0Delete operation.
     * @callback module:api/TechnologyApi~technologyD0DeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a d0 data
     * @param {Number} techid 
     * @param {Number} d0id 
     * @param {module:api/TechnologyApi~technologyD0DeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyD0Delete(techid, d0id, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyD0Delete");
      }
      // verify the required parameter 'd0id' is set
      if (d0id === undefined || d0id === null) {
        throw new Error("Missing the required parameter 'd0id' when calling technologyD0Delete");
      }

      let pathParams = {
        'techid': techid,
        'd0id': d0id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/d0/{d0id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyD0List operation.
     * @callback module:api/TechnologyApi~technologyD0ListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Defect0>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of d0 data
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyD0ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Defect0>}
     */
    technologyD0List(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyD0List");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Defect0];
      return this.apiClient.callApi(
        '/technology/{techid}/d0/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyD0Read operation.
     * @callback module:api/TechnologyApi~technologyD0ReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Defect0} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a d0 data
     * @param {Number} techid 
     * @param {Number} d0id 
     * @param {module:api/TechnologyApi~technologyD0ReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Defect0}
     */
    technologyD0Read(techid, d0id, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyD0Read");
      }
      // verify the required parameter 'd0id' is set
      if (d0id === undefined || d0id === null) {
        throw new Error("Missing the required parameter 'd0id' when calling technologyD0Read");
      }

      let pathParams = {
        'techid': techid,
        'd0id': d0id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Defect0;
      return this.apiClient.callApi(
        '/technology/{techid}/d0/{d0id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyD0Update operation.
     * @callback module:api/TechnologyApi~technologyD0UpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Defect0} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a d0 data
     * @param {Number} techid 
     * @param {Number} d0id 
     * @param {module:model/Defect0} data 
     * @param {module:api/TechnologyApi~technologyD0UpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Defect0}
     */
    technologyD0Update(techid, d0id, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyD0Update");
      }
      // verify the required parameter 'd0id' is set
      if (d0id === undefined || d0id === null) {
        throw new Error("Missing the required parameter 'd0id' when calling technologyD0Update");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyD0Update");
      }

      let pathParams = {
        'techid': techid,
        'd0id': d0id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Defect0;
      return this.apiClient.callApi(
        '/technology/{techid}/d0/{d0id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceCreate operation.
     * @callback module:api/TechnologyApi~technologyDeviceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a device
     * @param {Number} techid 
     * @param {module:model/Device} data 
     * @param {module:api/TechnologyApi~technologyDeviceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    technologyDeviceCreate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyDeviceCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/technology/{techid}/device/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataBulkCreate operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataBulkCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {Array.<module:model/DeviceDataBulk>} data 
     * @param {module:api/TechnologyApi~technologyDeviceDataBulkCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyDeviceDataBulkCreate(techid, deviceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataBulkCreate");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataBulkCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyDeviceDataBulkCreate");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/bulk/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataComputeList operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataComputeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputedDeviceData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {String} p Process name
     * @param {Number} vds Drain-Source voltage
     * @param {Number} vgs Gate-Source voltage
     * @param {Number} vbs Body-Source voltage
     * @param {Number} t Temperature
     * @param {module:api/TechnologyApi~technologyDeviceDataComputeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputedDeviceData}
     */
    technologyDeviceDataComputeList(techid, deviceid, p, vds, vgs, vbs, t, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataComputeList");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataComputeList");
      }
      // verify the required parameter 'p' is set
      if (p === undefined || p === null) {
        throw new Error("Missing the required parameter 'p' when calling technologyDeviceDataComputeList");
      }
      // verify the required parameter 'vds' is set
      if (vds === undefined || vds === null) {
        throw new Error("Missing the required parameter 'vds' when calling technologyDeviceDataComputeList");
      }
      // verify the required parameter 'vgs' is set
      if (vgs === undefined || vgs === null) {
        throw new Error("Missing the required parameter 'vgs' when calling technologyDeviceDataComputeList");
      }
      // verify the required parameter 'vbs' is set
      if (vbs === undefined || vbs === null) {
        throw new Error("Missing the required parameter 'vbs' when calling technologyDeviceDataComputeList");
      }
      // verify the required parameter 't' is set
      if (t === undefined || t === null) {
        throw new Error("Missing the required parameter 't' when calling technologyDeviceDataComputeList");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
        'p': p,
        'Vds': vds,
        'Vgs': vgs,
        'Vbs': vbs,
        't': t
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputedDeviceData;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/compute/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataCreate operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {module:model/DeviceData} data 
     * @param {module:api/TechnologyApi~technologyDeviceDataCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceData}
     */
    technologyDeviceDataCreate(techid, deviceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataCreate");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyDeviceDataCreate");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceData;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataDelete operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {Number} dataid 
     * @param {module:model/DeviceData} data 
     * @param {module:api/TechnologyApi~technologyDeviceDataDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceData}
     */
    technologyDeviceDataDelete(techid, deviceid, dataid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataDelete");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataDelete");
      }
      // verify the required parameter 'dataid' is set
      if (dataid === undefined || dataid === null) {
        throw new Error("Missing the required parameter 'dataid' when calling technologyDeviceDataDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyDeviceDataDelete");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid,
        'dataid': dataid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceData;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/{dataid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataList operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.p Process name
     * @param {Number} opts.t Temperature
     * @param {module:api/TechnologyApi~technologyDeviceDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceData>}
     */
    technologyDeviceDataList(techid, deviceid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataList");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataList");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
        'p': opts['p'],
        't': opts['t']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceData];
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataRead operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {Number} dataid 
     * @param {module:api/TechnologyApi~technologyDeviceDataReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceData}
     */
    technologyDeviceDataRead(techid, deviceid, dataid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataRead");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataRead");
      }
      // verify the required parameter 'dataid' is set
      if (dataid === undefined || dataid === null) {
        throw new Error("Missing the required parameter 'dataid' when calling technologyDeviceDataRead");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid,
        'dataid': dataid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeviceData;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/{dataid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataTrainCreate operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataTrainCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {module:api/TechnologyApi~technologyDeviceDataTrainCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyDeviceDataTrainCreate(techid, deviceid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataTrainCreate");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataTrainCreate");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/train/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDataUpdate operation.
     * @callback module:api/TechnologyApi~technologyDeviceDataUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update device data
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {Number} dataid 
     * @param {module:model/DeviceData} data 
     * @param {module:api/TechnologyApi~technologyDeviceDataUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceData}
     */
    technologyDeviceDataUpdate(techid, deviceid, dataid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDataUpdate");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDataUpdate");
      }
      // verify the required parameter 'dataid' is set
      if (dataid === undefined || dataid === null) {
        throw new Error("Missing the required parameter 'dataid' when calling technologyDeviceDataUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyDeviceDataUpdate");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid,
        'dataid': dataid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceData;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/data/{dataid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceDelete operation.
     * @callback module:api/TechnologyApi~technologyDeviceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a device
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {module:api/TechnologyApi~technologyDeviceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyDeviceDelete(techid, deviceid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceDelete");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceDelete");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceList operation.
     * @callback module:api/TechnologyApi~technologyDeviceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of devices
     * @param {Number} techid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Device name
     * @param {Number} opts.l Device length
     * @param {Number} opts.w Device width
     * @param {Number} opts.nfin Device nfin
     * @param {module:api/TechnologyApi~technologyDeviceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    technologyDeviceList(techid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
        'name': opts['name'],
        'l': opts['l'],
        'w': opts['w'],
        'nfin': opts['nfin']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Device];
      return this.apiClient.callApi(
        '/technology/{techid}/device/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceRead operation.
     * @callback module:api/TechnologyApi~technologyDeviceReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a device
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {module:api/TechnologyApi~technologyDeviceReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    technologyDeviceRead(techid, deviceid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceRead");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceRead");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyDeviceUpdate operation.
     * @callback module:api/TechnologyApi~technologyDeviceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a device
     * @param {Number} techid 
     * @param {Number} deviceid 
     * @param {module:model/Device} data 
     * @param {module:api/TechnologyApi~technologyDeviceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    technologyDeviceUpdate(techid, deviceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyDeviceUpdate");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling technologyDeviceUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyDeviceUpdate");
      }

      let pathParams = {
        'techid': techid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/technology/{techid}/device/{deviceid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackClone operation.
     * @callback module:api/TechnologyApi~technologyLayerstackCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LayerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a layer stack
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:api/TechnologyApi~technologyLayerstackCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LayerStack}
     */
    technologyLayerstackClone(techid, stackid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackClone");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackClone");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LayerStack;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackCreate operation.
     * @callback module:api/TechnologyApi~technologyLayerstackCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LayerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer stack
     * @param {Number} techid 
     * @param {module:model/LayerStack} data 
     * @param {module:api/TechnologyApi~technologyLayerstackCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LayerStack}
     */
    technologyLayerstackCreate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyLayerstackCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LayerStack;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackDelete operation.
     * @callback module:api/TechnologyApi~technologyLayerstackDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer stack
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:api/TechnologyApi~technologyLayerstackDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyLayerstackDelete(techid, stackid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackDelete");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackDelete");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackLayerClone operation.
     * @callback module:api/TechnologyApi~technologyLayerstackLayerCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a layer
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {Number} layerid 
     * @param {module:api/TechnologyApi~technologyLayerstackLayerCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    technologyLayerstackLayerClone(techid, stackid, layerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackLayerClone");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackLayerClone");
      }
      // verify the required parameter 'layerid' is set
      if (layerid === undefined || layerid === null) {
        throw new Error("Missing the required parameter 'layerid' when calling technologyLayerstackLayerClone");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid,
        'layerid': layerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackLayerCreate operation.
     * @callback module:api/TechnologyApi~technologyLayerstackLayerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:model/Layer} data 
     * @param {module:api/TechnologyApi~technologyLayerstackLayerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    technologyLayerstackLayerCreate(techid, stackid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackLayerCreate");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackLayerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyLayerstackLayerCreate");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/layer/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackLayerDelete operation.
     * @callback module:api/TechnologyApi~technologyLayerstackLayerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {Number} layerid 
     * @param {module:api/TechnologyApi~technologyLayerstackLayerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyLayerstackLayerDelete(techid, stackid, layerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackLayerDelete");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackLayerDelete");
      }
      // verify the required parameter 'layerid' is set
      if (layerid === undefined || layerid === null) {
        throw new Error("Missing the required parameter 'layerid' when calling technologyLayerstackLayerDelete");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid,
        'layerid': layerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackLayerList operation.
     * @callback module:api/TechnologyApi~technologyLayerstackLayerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Layer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of layers
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:api/TechnologyApi~technologyLayerstackLayerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Layer>}
     */
    technologyLayerstackLayerList(techid, stackid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackLayerList");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackLayerList");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Layer];
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/layer/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackLayerRead operation.
     * @callback module:api/TechnologyApi~technologyLayerstackLayerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a layer
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {Number} layerid 
     * @param {module:api/TechnologyApi~technologyLayerstackLayerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    technologyLayerstackLayerRead(techid, stackid, layerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackLayerRead");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackLayerRead");
      }
      // verify the required parameter 'layerid' is set
      if (layerid === undefined || layerid === null) {
        throw new Error("Missing the required parameter 'layerid' when calling technologyLayerstackLayerRead");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid,
        'layerid': layerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackLayerUpdate operation.
     * @callback module:api/TechnologyApi~technologyLayerstackLayerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Layer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {Number} layerid 
     * @param {module:model/Layer} data 
     * @param {module:api/TechnologyApi~technologyLayerstackLayerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Layer}
     */
    technologyLayerstackLayerUpdate(techid, stackid, layerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackLayerUpdate");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackLayerUpdate");
      }
      // verify the required parameter 'layerid' is set
      if (layerid === undefined || layerid === null) {
        throw new Error("Missing the required parameter 'layerid' when calling technologyLayerstackLayerUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyLayerstackLayerUpdate");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid,
        'layerid': layerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Layer;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/layer/{layerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackList operation.
     * @callback module:api/TechnologyApi~technologyLayerstackListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LayerStack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of layer stacks
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyLayerstackListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LayerStack>}
     */
    technologyLayerstackList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [LayerStack];
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackRead operation.
     * @callback module:api/TechnologyApi~technologyLayerstackReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LayerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a layer stack
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:api/TechnologyApi~technologyLayerstackReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LayerStack}
     */
    technologyLayerstackRead(techid, stackid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackRead");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackRead");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LayerStack;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackUpdate operation.
     * @callback module:api/TechnologyApi~technologyLayerstackUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LayerStack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer stack
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:model/LayerStack} data 
     * @param {module:api/TechnologyApi~technologyLayerstackUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LayerStack}
     */
    technologyLayerstackUpdate(techid, stackid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackUpdate");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyLayerstackUpdate");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LayerStack;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLayerstackUpdateList operation.
     * @callback module:api/TechnologyApi~technologyLayerstackUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} techid 
     * @param {Number} stackid 
     * @param {module:api/TechnologyApi~technologyLayerstackUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    technologyLayerstackUpdateList(techid, stackid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyLayerstackUpdateList");
      }
      // verify the required parameter 'stackid' is set
      if (stackid === undefined || stackid === null) {
        throw new Error("Missing the required parameter 'stackid' when calling technologyLayerstackUpdateList");
      }

      let pathParams = {
        'techid': techid,
        'stackid': stackid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/technology/{techid}/layerstack/{stackid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryClone operation.
     * @callback module:api/TechnologyApi~technologyLibraryCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnologyMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a copy of technology
     * @param {Number} techmasterid 
     * @param {module:api/TechnologyApi~technologyLibraryCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnologyMaster}
     */
    technologyLibraryClone(techmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'techmasterid' is set
      if (techmasterid === undefined || techmasterid === null) {
        throw new Error("Missing the required parameter 'techmasterid' when calling technologyLibraryClone");
      }

      let pathParams = {
        'techmasterid': techmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnologyMaster;
      return this.apiClient.callApi(
        '/technology/library/{techmasterid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryCreate operation.
     * @callback module:api/TechnologyApi~technologyLibraryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnologyMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new technology
     * @param {module:model/TechnologyMaster} data 
     * @param {module:api/TechnologyApi~technologyLibraryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnologyMaster}
     */
    technologyLibraryCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyLibraryCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TechnologyMaster;
      return this.apiClient.callApi(
        '/technology/library/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryDelete operation.
     * @callback module:api/TechnologyApi~technologyLibraryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a technology
     * @param {Number} techmasterid 
     * @param {module:api/TechnologyApi~technologyLibraryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyLibraryDelete(techmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'techmasterid' is set
      if (techmasterid === undefined || techmasterid === null) {
        throw new Error("Missing the required parameter 'techmasterid' when calling technologyLibraryDelete");
      }

      let pathParams = {
        'techmasterid': techmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/library/{techmasterid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryList operation.
     * @callback module:api/TechnologyApi~technologyLibraryListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TechnologyMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of technologies
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Project name
     * @param {module:api/TechnologyApi~technologyLibraryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TechnologyMaster>}
     */
    technologyLibraryList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TechnologyMaster];
      return this.apiClient.callApi(
        '/technology/library/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryRead operation.
     * @callback module:api/TechnologyApi~technologyLibraryReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnologyMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a technology
     * @param {Number} techmasterid 
     * @param {module:api/TechnologyApi~technologyLibraryReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnologyMaster}
     */
    technologyLibraryRead(techmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'techmasterid' is set
      if (techmasterid === undefined || techmasterid === null) {
        throw new Error("Missing the required parameter 'techmasterid' when calling technologyLibraryRead");
      }

      let pathParams = {
        'techmasterid': techmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnologyMaster;
      return this.apiClient.callApi(
        '/technology/library/{techmasterid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryUpdate operation.
     * @callback module:api/TechnologyApi~technologyLibraryUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnologyMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a technology
     * @param {Number} techmasterid 
     * @param {module:model/TechnologyMaster} data 
     * @param {module:api/TechnologyApi~technologyLibraryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnologyMaster}
     */
    technologyLibraryUpdate(techmasterid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techmasterid' is set
      if (techmasterid === undefined || techmasterid === null) {
        throw new Error("Missing the required parameter 'techmasterid' when calling technologyLibraryUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyLibraryUpdate");
      }

      let pathParams = {
        'techmasterid': techmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TechnologyMaster;
      return this.apiClient.callApi(
        '/technology/library/{techmasterid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryUpdateList operation.
     * @callback module:api/TechnologyApi~technologyLibraryUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {module:api/TechnologyApi~technologyLibraryUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    technologyLibraryUpdateList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/technology/library/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyLibraryVersionList operation.
     * @callback module:api/TechnologyApi~technologyLibraryVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TechnologyVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get technology versions
     * @param {Number} techmasterid 
     * @param {module:api/TechnologyApi~technologyLibraryVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TechnologyVersion>}
     */
    technologyLibraryVersionList(techmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'techmasterid' is set
      if (techmasterid === undefined || techmasterid === null) {
        throw new Error("Missing the required parameter 'techmasterid' when calling technologyLibraryVersionList");
      }

      let pathParams = {
        'techmasterid': techmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TechnologyVersion];
      return this.apiClient.callApi(
        '/technology/library/{techmasterid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyModelCornerCreate operation.
     * @callback module:api/TechnologyApi~technologyModelCornerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCorner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer stack
     * @param {Number} techid 
     * @param {module:model/ModelCorner} data 
     * @param {module:api/TechnologyApi~technologyModelCornerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCorner}
     */
    technologyModelCornerCreate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyModelCornerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyModelCornerCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelCorner;
      return this.apiClient.callApi(
        '/technology/{techid}/model_corner/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyModelCornerDelete operation.
     * @callback module:api/TechnologyApi~technologyModelCornerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model corner
     * @param {Number} techid 
     * @param {Number} cornerid 
     * @param {module:api/TechnologyApi~technologyModelCornerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyModelCornerDelete(techid, cornerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyModelCornerDelete");
      }
      // verify the required parameter 'cornerid' is set
      if (cornerid === undefined || cornerid === null) {
        throw new Error("Missing the required parameter 'cornerid' when calling technologyModelCornerDelete");
      }

      let pathParams = {
        'techid': techid,
        'cornerid': cornerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/model_corner/{cornerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyModelCornerList operation.
     * @callback module:api/TechnologyApi~technologyModelCornerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelCorner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of model corner
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyModelCornerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelCorner>}
     */
    technologyModelCornerList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyModelCornerList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelCorner];
      return this.apiClient.callApi(
        '/technology/{techid}/model_corner/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyModelCornerRead operation.
     * @callback module:api/TechnologyApi~technologyModelCornerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCorner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a model corner
     * @param {Number} techid 
     * @param {Number} cornerid 
     * @param {module:api/TechnologyApi~technologyModelCornerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCorner}
     */
    technologyModelCornerRead(techid, cornerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyModelCornerRead");
      }
      // verify the required parameter 'cornerid' is set
      if (cornerid === undefined || cornerid === null) {
        throw new Error("Missing the required parameter 'cornerid' when calling technologyModelCornerRead");
      }

      let pathParams = {
        'techid': techid,
        'cornerid': cornerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelCorner;
      return this.apiClient.callApi(
        '/technology/{techid}/model_corner/{cornerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyModelCornerUpdate operation.
     * @callback module:api/TechnologyApi~technologyModelCornerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCorner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model corner
     * @param {Number} techid 
     * @param {Number} cornerid 
     * @param {module:model/ModelCorner} data 
     * @param {module:api/TechnologyApi~technologyModelCornerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCorner}
     */
    technologyModelCornerUpdate(techid, cornerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyModelCornerUpdate");
      }
      // verify the required parameter 'cornerid' is set
      if (cornerid === undefined || cornerid === null) {
        throw new Error("Missing the required parameter 'cornerid' when calling technologyModelCornerUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyModelCornerUpdate");
      }

      let pathParams = {
        'techid': techid,
        'cornerid': cornerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelCorner;
      return this.apiClient.callApi(
        '/technology/{techid}/model_corner/{cornerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyPermissionsList operation.
     * @callback module:api/TechnologyApi~technologyPermissionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyPermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyPermissionsList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyPermissionsList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyPermissionsUpdate operation.
     * @callback module:api/TechnologyApi~technologyPermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyPermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyPermissionsUpdate(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyPermissionsUpdate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/permissions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRcCornerCreate operation.
     * @callback module:api/TechnologyApi~technologyRcCornerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RCCorner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer stack
     * @param {Number} techid 
     * @param {module:model/RCCorner} data 
     * @param {module:api/TechnologyApi~technologyRcCornerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RCCorner}
     */
    technologyRcCornerCreate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRcCornerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyRcCornerCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RCCorner;
      return this.apiClient.callApi(
        '/technology/{techid}/rc_corner/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRcCornerDelete operation.
     * @callback module:api/TechnologyApi~technologyRcCornerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model corner
     * @param {Number} techid 
     * @param {Number} cornerid 
     * @param {module:api/TechnologyApi~technologyRcCornerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologyRcCornerDelete(techid, cornerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRcCornerDelete");
      }
      // verify the required parameter 'cornerid' is set
      if (cornerid === undefined || cornerid === null) {
        throw new Error("Missing the required parameter 'cornerid' when calling technologyRcCornerDelete");
      }

      let pathParams = {
        'techid': techid,
        'cornerid': cornerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/rc_corner/{cornerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRcCornerList operation.
     * @callback module:api/TechnologyApi~technologyRcCornerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RCCorner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of RC corner
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyRcCornerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RCCorner>}
     */
    technologyRcCornerList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRcCornerList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RCCorner];
      return this.apiClient.callApi(
        '/technology/{techid}/rc_corner/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRcCornerRead operation.
     * @callback module:api/TechnologyApi~technologyRcCornerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RCCorner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a RC corner
     * @param {Number} techid 
     * @param {Number} cornerid 
     * @param {module:api/TechnologyApi~technologyRcCornerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RCCorner}
     */
    technologyRcCornerRead(techid, cornerid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRcCornerRead");
      }
      // verify the required parameter 'cornerid' is set
      if (cornerid === undefined || cornerid === null) {
        throw new Error("Missing the required parameter 'cornerid' when calling technologyRcCornerRead");
      }

      let pathParams = {
        'techid': techid,
        'cornerid': cornerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RCCorner;
      return this.apiClient.callApi(
        '/technology/{techid}/rc_corner/{cornerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRcCornerUpdate operation.
     * @callback module:api/TechnologyApi~technologyRcCornerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RCCorner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model corner
     * @param {Number} techid 
     * @param {Number} cornerid 
     * @param {module:model/RCCorner} data 
     * @param {module:api/TechnologyApi~technologyRcCornerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RCCorner}
     */
    technologyRcCornerUpdate(techid, cornerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRcCornerUpdate");
      }
      // verify the required parameter 'cornerid' is set
      if (cornerid === undefined || cornerid === null) {
        throw new Error("Missing the required parameter 'cornerid' when calling technologyRcCornerUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyRcCornerUpdate");
      }

      let pathParams = {
        'techid': techid,
        'cornerid': cornerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RCCorner;
      return this.apiClient.callApi(
        '/technology/{techid}/rc_corner/{cornerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRead operation.
     * @callback module:api/TechnologyApi~technologyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Technology} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a technology
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Technology}
     */
    technologyRead(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRead");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Technology;
      return this.apiClient.callApi(
        '/technology/{techid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyRestoreCreate operation.
     * @callback module:api/TechnologyApi~technologyRestoreCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Technology} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore a technology version as current version
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyRestoreCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Technology}
     */
    technologyRestoreCreate(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyRestoreCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Technology;
      return this.apiClient.callApi(
        '/technology/{techid}/restore/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologySourceCreate operation.
     * @callback module:api/TechnologyApi~technologySourceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a layer stack
     * @param {Number} techid 
     * @param {module:model/PowerSource} data 
     * @param {module:api/TechnologyApi~technologySourceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerSource}
     */
    technologySourceCreate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologySourceCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologySourceCreate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerSource;
      return this.apiClient.callApi(
        '/technology/{techid}/source/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologySourceDelete operation.
     * @callback module:api/TechnologyApi~technologySourceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a layer stack
     * @param {Number} techid 
     * @param {Number} sourceid 
     * @param {module:api/TechnologyApi~technologySourceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    technologySourceDelete(techid, sourceid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologySourceDelete");
      }
      // verify the required parameter 'sourceid' is set
      if (sourceid === undefined || sourceid === null) {
        throw new Error("Missing the required parameter 'sourceid' when calling technologySourceDelete");
      }

      let pathParams = {
        'techid': techid,
        'sourceid': sourceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/technology/{techid}/source/{sourceid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologySourceList operation.
     * @callback module:api/TechnologyApi~technologySourceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PowerSource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of layer stacks
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologySourceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PowerSource>}
     */
    technologySourceList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologySourceList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PowerSource];
      return this.apiClient.callApi(
        '/technology/{techid}/source/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologySourceRead operation.
     * @callback module:api/TechnologyApi~technologySourceReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a layer stack
     * @param {Number} techid 
     * @param {Number} sourceid 
     * @param {module:api/TechnologyApi~technologySourceReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerSource}
     */
    technologySourceRead(techid, sourceid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologySourceRead");
      }
      // verify the required parameter 'sourceid' is set
      if (sourceid === undefined || sourceid === null) {
        throw new Error("Missing the required parameter 'sourceid' when calling technologySourceRead");
      }

      let pathParams = {
        'techid': techid,
        'sourceid': sourceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PowerSource;
      return this.apiClient.callApi(
        '/technology/{techid}/source/{sourceid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologySourceUpdate operation.
     * @callback module:api/TechnologyApi~technologySourceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PowerSource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a layer stack
     * @param {Number} techid 
     * @param {Number} sourceid 
     * @param {module:model/PowerSource} data 
     * @param {module:api/TechnologyApi~technologySourceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PowerSource}
     */
    technologySourceUpdate(techid, sourceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologySourceUpdate");
      }
      // verify the required parameter 'sourceid' is set
      if (sourceid === undefined || sourceid === null) {
        throw new Error("Missing the required parameter 'sourceid' when calling technologySourceUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologySourceUpdate");
      }

      let pathParams = {
        'techid': techid,
        'sourceid': sourceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PowerSource;
      return this.apiClient.callApi(
        '/technology/{techid}/source/{sourceid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyUpdate operation.
     * @callback module:api/TechnologyApi~technologyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Technology} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a technology
     * @param {Number} techid 
     * @param {module:model/Technology} data 
     * @param {module:api/TechnologyApi~technologyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Technology}
     */
    technologyUpdate(techid, data, callback) {
      let postBody = data;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling technologyUpdate");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Technology;
      return this.apiClient.callApi(
        '/technology/{techid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyUpdateList operation.
     * @callback module:api/TechnologyApi~technologyUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    technologyUpdateList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyUpdateList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/technology/{techid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyVersionList operation.
     * @callback module:api/TechnologyApi~technologyVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TechnologyVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get technology versions
     * @param {Number} techid 
     * @param {module:api/TechnologyApi~technologyVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TechnologyVersion>}
     */
    technologyVersionList(techid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyVersionList");
      }

      let pathParams = {
        'techid': techid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TechnologyVersion];
      return this.apiClient.callApi(
        '/technology/{techid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the technologyVersionRead operation.
     * @callback module:api/TechnologyApi~technologyVersionReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TechnologyVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get technology versions
     * @param {Number} techid 
     * @param {Number} versionid 
     * @param {module:api/TechnologyApi~technologyVersionReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TechnologyVersion}
     */
    technologyVersionRead(techid, versionid, callback) {
      let postBody = null;
      // verify the required parameter 'techid' is set
      if (techid === undefined || techid === null) {
        throw new Error("Missing the required parameter 'techid' when calling technologyVersionRead");
      }
      // verify the required parameter 'versionid' is set
      if (versionid === undefined || versionid === null) {
        throw new Error("Missing the required parameter 'versionid' when calling technologyVersionRead");
      }

      let pathParams = {
        'techid': techid,
        'versionid': versionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TechnologyVersion;
      return this.apiClient.callApi(
        '/technology/{techid}/version/{versionid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
