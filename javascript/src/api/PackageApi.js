/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelPackage from '../model/ModelPackage';
import PackageMaster from '../model/PackageMaster';
import PackageSupply from '../model/PackageSupply';
import PackageVersion from '../model/PackageVersion';
import UpdateData from '../model/UpdateData';

/**
* Package service.
* @module api/PackageApi
* @version 2021.4.1
*/
export default class PackageApi {

    /**
    * Constructs a new PackageApi. 
    * @alias module:api/PackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the packageCommitCreate operation.
     * @callback module:api/PackageApi~packageCommitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit a version
     * @param {Number} packageid 
     * @param {module:model/PackageVersion} data 
     * @param {module:api/PackageApi~packageCommitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageVersion}
     */
    packageCommitCreate(packageid, data, callback) {
      let postBody = data;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageCommitCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling packageCommitCreate");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageVersion;
      return this.apiClient.callApi(
        '/package/{packageid}/commit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryClone operation.
     * @callback module:api/PackageApi~packageLibraryCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a package
     * @param {Number} packagemasterid 
     * @param {module:api/PackageApi~packageLibraryCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageMaster}
     */
    packageLibraryClone(packagemasterid, callback) {
      let postBody = null;
      // verify the required parameter 'packagemasterid' is set
      if (packagemasterid === undefined || packagemasterid === null) {
        throw new Error("Missing the required parameter 'packagemasterid' when calling packageLibraryClone");
      }

      let pathParams = {
        'packagemasterid': packagemasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageMaster;
      return this.apiClient.callApi(
        '/package/library/{packagemasterid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryCreate operation.
     * @callback module:api/PackageApi~packageLibraryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a package
     * @param {module:model/PackageMaster} data 
     * @param {module:api/PackageApi~packageLibraryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageMaster}
     */
    packageLibraryCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling packageLibraryCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageMaster;
      return this.apiClient.callApi(
        '/package/library/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryDelete operation.
     * @callback module:api/PackageApi~packageLibraryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a package
     * @param {Number} packagemasterid 
     * @param {module:api/PackageApi~packageLibraryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageLibraryDelete(packagemasterid, callback) {
      let postBody = null;
      // verify the required parameter 'packagemasterid' is set
      if (packagemasterid === undefined || packagemasterid === null) {
        throw new Error("Missing the required parameter 'packagemasterid' when calling packageLibraryDelete");
      }

      let pathParams = {
        'packagemasterid': packagemasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/package/library/{packagemasterid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryList operation.
     * @callback module:api/PackageApi~packageLibraryListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of packages
     * @param {module:api/PackageApi~packageLibraryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageMaster>}
     */
    packageLibraryList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PackageMaster];
      return this.apiClient.callApi(
        '/package/library/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryRead operation.
     * @callback module:api/PackageApi~packageLibraryReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a package
     * @param {Number} packagemasterid 
     * @param {module:api/PackageApi~packageLibraryReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageMaster}
     */
    packageLibraryRead(packagemasterid, callback) {
      let postBody = null;
      // verify the required parameter 'packagemasterid' is set
      if (packagemasterid === undefined || packagemasterid === null) {
        throw new Error("Missing the required parameter 'packagemasterid' when calling packageLibraryRead");
      }

      let pathParams = {
        'packagemasterid': packagemasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageMaster;
      return this.apiClient.callApi(
        '/package/library/{packagemasterid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryUpdate operation.
     * @callback module:api/PackageApi~packageLibraryUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a package
     * @param {Number} packagemasterid 
     * @param {module:model/PackageMaster} data 
     * @param {module:api/PackageApi~packageLibraryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageMaster}
     */
    packageLibraryUpdate(packagemasterid, data, callback) {
      let postBody = data;
      // verify the required parameter 'packagemasterid' is set
      if (packagemasterid === undefined || packagemasterid === null) {
        throw new Error("Missing the required parameter 'packagemasterid' when calling packageLibraryUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling packageLibraryUpdate");
      }

      let pathParams = {
        'packagemasterid': packagemasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageMaster;
      return this.apiClient.callApi(
        '/package/library/{packagemasterid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryUpdateList operation.
     * @callback module:api/PackageApi~packageLibraryUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {module:api/PackageApi~packageLibraryUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    packageLibraryUpdateList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/package/library/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageLibraryVersionList operation.
     * @callback module:api/PackageApi~packageLibraryVersionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a package
     * @param {Number} packagemasterid 
     * @param {module:api/PackageApi~packageLibraryVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageVersion}
     */
    packageLibraryVersionList(packagemasterid, callback) {
      let postBody = null;
      // verify the required parameter 'packagemasterid' is set
      if (packagemasterid === undefined || packagemasterid === null) {
        throw new Error("Missing the required parameter 'packagemasterid' when calling packageLibraryVersionList");
      }

      let pathParams = {
        'packagemasterid': packagemasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageVersion;
      return this.apiClient.callApi(
        '/package/library/{packagemasterid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packagePermissionsList operation.
     * @callback module:api/PackageApi~packagePermissionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packagePermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packagePermissionsList(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packagePermissionsList");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/package/{packageid}/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packagePermissionsUpdate operation.
     * @callback module:api/PackageApi~packagePermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packagePermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packagePermissionsUpdate(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packagePermissionsUpdate");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/package/{packageid}/permissions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageRead operation.
     * @callback module:api/PackageApi~packageReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a package
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packageReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelPackage}
     */
    packageRead(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageRead");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelPackage;
      return this.apiClient.callApi(
        '/package/{packageid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageRestoreCreate operation.
     * @callback module:api/PackageApi~packageRestoreCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore a package version as current version
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packageRestoreCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelPackage}
     */
    packageRestoreCreate(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageRestoreCreate");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelPackage;
      return this.apiClient.callApi(
        '/package/{packageid}/restore/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSupplyClone operation.
     * @callback module:api/PackageApi~packageSupplyCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy a package supply
     * @param {Number} packageid 
     * @param {Number} supplyid 
     * @param {module:api/PackageApi~packageSupplyCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageSupply}
     */
    packageSupplyClone(packageid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageSupplyClone");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling packageSupplyClone");
      }

      let pathParams = {
        'packageid': packageid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageSupply;
      return this.apiClient.callApi(
        '/package/{packageid}/supply/{supplyid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSupplyCreate operation.
     * @callback module:api/PackageApi~packageSupplyCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a package supply
     * @param {Number} packageid 
     * @param {module:model/PackageSupply} data 
     * @param {module:api/PackageApi~packageSupplyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageSupply}
     */
    packageSupplyCreate(packageid, data, callback) {
      let postBody = data;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageSupplyCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling packageSupplyCreate");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageSupply;
      return this.apiClient.callApi(
        '/package/{packageid}/supply/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSupplyDelete operation.
     * @callback module:api/PackageApi~packageSupplyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a package supply
     * @param {Number} packageid 
     * @param {Number} supplyid 
     * @param {module:api/PackageApi~packageSupplyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    packageSupplyDelete(packageid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageSupplyDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling packageSupplyDelete");
      }

      let pathParams = {
        'packageid': packageid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/package/{packageid}/supply/{supplyid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSupplyList operation.
     * @callback module:api/PackageApi~packageSupplyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageSupply>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of package supplies
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packageSupplyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageSupply>}
     */
    packageSupplyList(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageSupplyList");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PackageSupply];
      return this.apiClient.callApi(
        '/package/{packageid}/supply/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSupplyRead operation.
     * @callback module:api/PackageApi~packageSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a package supply
     * @param {Number} packageid 
     * @param {Number} supplyid 
     * @param {module:api/PackageApi~packageSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageSupply}
     */
    packageSupplyRead(packageid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageSupplyRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling packageSupplyRead");
      }

      let pathParams = {
        'packageid': packageid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageSupply;
      return this.apiClient.callApi(
        '/package/{packageid}/supply/{supplyid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageSupplyUpdate operation.
     * @callback module:api/PackageApi~packageSupplyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a package supply
     * @param {Number} packageid 
     * @param {Number} supplyid 
     * @param {module:model/PackageSupply} data 
     * @param {module:api/PackageApi~packageSupplyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageSupply}
     */
    packageSupplyUpdate(packageid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageSupplyUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling packageSupplyUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling packageSupplyUpdate");
      }

      let pathParams = {
        'packageid': packageid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageSupply;
      return this.apiClient.callApi(
        '/package/{packageid}/supply/{supplyid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageUpdate operation.
     * @callback module:api/PackageApi~packageUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a package
     * @param {Number} packageid 
     * @param {module:model/ModelPackage} data 
     * @param {module:api/PackageApi~packageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelPackage}
     */
    packageUpdate(packageid, data, callback) {
      let postBody = data;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling packageUpdate");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelPackage;
      return this.apiClient.callApi(
        '/package/{packageid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageUpdateList operation.
     * @callback module:api/PackageApi~packageUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packageUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    packageUpdateList(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageUpdateList");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/package/{packageid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the packageVersionList operation.
     * @callback module:api/PackageApi~packageVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a package
     * @param {Number} packageid 
     * @param {module:api/PackageApi~packageVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageVersion>}
     */
    packageVersionList(packageid, callback) {
      let postBody = null;
      // verify the required parameter 'packageid' is set
      if (packageid === undefined || packageid === null) {
        throw new Error("Missing the required parameter 'packageid' when calling packageVersionList");
      }

      let pathParams = {
        'packageid': packageid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PackageVersion];
      return this.apiClient.callApi(
        '/package/{packageid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
