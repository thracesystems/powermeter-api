/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComputePower1 from '../model/ComputePower1';
import ComputePower2 from '../model/ComputePower2';
import ComputedContributorPower from '../model/ComputedContributorPower';
import ComputedContributorPower1 from '../model/ComputedContributorPower1';
import ComputedPower from '../model/ComputedPower';
import ComputedPowerArc from '../model/ComputedPowerArc';
import ContribPower from '../model/ContribPower';
import Dashboard from '../model/Dashboard';
import DashboardColumn from '../model/DashboardColumn';
import DashboardRow from '../model/DashboardRow';
import Design from '../model/Design';
import DesignData from '../model/DesignData';
import DesignFF from '../model/DesignFF';
import DesignLatch from '../model/DesignLatch';
import DesignMaster from '../model/DesignMaster';
import DesignPin from '../model/DesignPin';
import DesignPinEnergy from '../model/DesignPinEnergy';
import DesignScenario from '../model/DesignScenario';
import DesignScenarioConfig from '../model/DesignScenarioConfig';
import DesignScenarioModeUtil from '../model/DesignScenarioModeUtil';
import DesignScenarioSupply from '../model/DesignScenarioSupply';
import DesignSensor from '../model/DesignSensor';
import DesignStateTable from '../model/DesignStateTable';
import DesignTrend from '../model/DesignTrend';
import DesignVersion from '../model/DesignVersion';
import Hier from '../model/Hier';
import Instance from '../model/Instance';
import InstanceSupply from '../model/InstanceSupply';
import LeakagePower from '../model/LeakagePower';
import Mode from '../model/Mode';
import PagedDesignPinEnergy from '../model/PagedDesignPinEnergy';
import PagedInstance from '../model/PagedInstance';
import PagedLeakagePower from '../model/PagedLeakagePower';
import Param from '../model/Param';
import PinCap from '../model/PinCap';
import PinEnergy from '../model/PinEnergy';
import PinState from '../model/PinState';
import PinStateArc from '../model/PinStateArc';
import Power from '../model/Power';
import Supply from '../model/Supply';
import SupplyModeState from '../model/SupplyModeState';
import UpdateData from '../model/UpdateData';

/**
* Design service.
* @module api/DesignApi
* @version 2021.4.1
*/
export default class DesignApi {

    /**
    * Constructs a new DesignApi. 
    * @alias module:api/DesignApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDesignHierarchyDeleteAll operation.
     * @callback module:api/DesignApi~apiDesignHierarchyDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete hierarchy groups
     * @param {Number} designid 
     * @param {module:api/DesignApi~apiDesignHierarchyDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDesignHierarchyDeleteAll(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling apiDesignHierarchyDeleteAll");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/hierarchy/group/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDesignInstanceDeleteAll operation.
     * @callback module:api/DesignApi~apiDesignInstanceDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all instances
     * @param {Number} designid 
     * @param {module:api/DesignApi~apiDesignInstanceDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDesignInstanceDeleteAll(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling apiDesignInstanceDeleteAll");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/instance/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDesignModeDeleteAll operation.
     * @callback module:api/DesignApi~apiDesignModeDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete design modes
     * @param {Number} designid 
     * @param {module:api/DesignApi~apiDesignModeDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDesignModeDeleteAll(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling apiDesignModeDeleteAll");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/mode/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDesignParameterDeleteAll operation.
     * @callback module:api/DesignApi~apiDesignParameterDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete params
     * @param {Number} designid 
     * @param {module:api/DesignApi~apiDesignParameterDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDesignParameterDeleteAll(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling apiDesignParameterDeleteAll");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/parameter/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDesignSupplyDeleteAll operation.
     * @callback module:api/DesignApi~apiDesignSupplyDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete supplies
     * @param {Number} designid 
     * @param {module:api/DesignApi~apiDesignSupplyDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDesignSupplyDeleteAll(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling apiDesignSupplyDeleteAll");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/supply/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designCommitCreate operation.
     * @callback module:api/DesignApi~designCommitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit a version
     * @param {Number} designid 
     * @param {module:model/DesignVersion} data 
     * @param {module:api/DesignApi~designCommitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignVersion}
     */
    designCommitCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designCommitCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designCommitCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignVersion;
      return this.apiClient.callApi(
        '/design/{designid}/commit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designComputepowerCreate operation.
     * @callback module:api/DesignApi~designComputepowerCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ComputedPower>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} designid 
     * @param {String} process 
     * @param {String} rc 
     * @param {Number} voltage 
     * @param {Number} temperature 
     * @param {Array.<module:model/PinState>} data 
     * @param {module:api/DesignApi~designComputepowerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ComputedPower>}
     */
    designComputepowerCreate(designid, process, rc, voltage, temperature, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designComputepowerCreate");
      }
      // verify the required parameter 'process' is set
      if (process === undefined || process === null) {
        throw new Error("Missing the required parameter 'process' when calling designComputepowerCreate");
      }
      // verify the required parameter 'rc' is set
      if (rc === undefined || rc === null) {
        throw new Error("Missing the required parameter 'rc' when calling designComputepowerCreate");
      }
      // verify the required parameter 'voltage' is set
      if (voltage === undefined || voltage === null) {
        throw new Error("Missing the required parameter 'voltage' when calling designComputepowerCreate");
      }
      // verify the required parameter 'temperature' is set
      if (temperature === undefined || temperature === null) {
        throw new Error("Missing the required parameter 'temperature' when calling designComputepowerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designComputepowerCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'process': process,
        'rc': rc,
        'voltage': voltage,
        'temperature': temperature
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ComputedPower];
      return this.apiClient.callApi(
        '/design/{designid}/computepower/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designComputepowerarcCreate operation.
     * @callback module:api/DesignApi~designComputepowerarcCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputedPowerArc} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} designid 
     * @param {String} process 
     * @param {String} rc 
     * @param {Number} voltage 
     * @param {Number} temperature 
     * @param {Array.<module:model/PinStateArc>} data 
     * @param {module:api/DesignApi~designComputepowerarcCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputedPowerArc}
     */
    designComputepowerarcCreate(designid, process, rc, voltage, temperature, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designComputepowerarcCreate");
      }
      // verify the required parameter 'process' is set
      if (process === undefined || process === null) {
        throw new Error("Missing the required parameter 'process' when calling designComputepowerarcCreate");
      }
      // verify the required parameter 'rc' is set
      if (rc === undefined || rc === null) {
        throw new Error("Missing the required parameter 'rc' when calling designComputepowerarcCreate");
      }
      // verify the required parameter 'voltage' is set
      if (voltage === undefined || voltage === null) {
        throw new Error("Missing the required parameter 'voltage' when calling designComputepowerarcCreate");
      }
      // verify the required parameter 'temperature' is set
      if (temperature === undefined || temperature === null) {
        throw new Error("Missing the required parameter 'temperature' when calling designComputepowerarcCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designComputepowerarcCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'process': process,
        'rc': rc,
        'voltage': voltage,
        'temperature': temperature
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ComputedPowerArc;
      return this.apiClient.callApi(
        '/design/{designid}/computepowerarc/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerCompute1List operation.
     * @callback module:api/DesignApi~designContribpowerCompute1ListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputedContributorPower1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device data
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {String} p Process name
     * @param {Number} v Voltage
     * @param {Number} t Temperature
     * @param {module:api/DesignApi~designContribpowerCompute1ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputedContributorPower1}
     */
    designContribpowerCompute1List(designid, powerid, p, v, t, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerCompute1List");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designContribpowerCompute1List");
      }
      // verify the required parameter 'p' is set
      if (p === undefined || p === null) {
        throw new Error("Missing the required parameter 'p' when calling designContribpowerCompute1List");
      }
      // verify the required parameter 'v' is set
      if (v === undefined || v === null) {
        throw new Error("Missing the required parameter 'v' when calling designContribpowerCompute1List");
      }
      // verify the required parameter 't' is set
      if (t === undefined || t === null) {
        throw new Error("Missing the required parameter 't' when calling designContribpowerCompute1List");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
        'p': p,
        'v': v,
        't': t
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputedContributorPower1;
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/{powerid}/compute1/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerComputeList operation.
     * @callback module:api/DesignApi~designContribpowerComputeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputedContributorPower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get device data
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {String} p Process name
     * @param {Number} v Voltage
     * @param {Number} t Temperature
     * @param {module:api/DesignApi~designContribpowerComputeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputedContributorPower}
     */
    designContribpowerComputeList(designid, powerid, p, v, t, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerComputeList");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designContribpowerComputeList");
      }
      // verify the required parameter 'p' is set
      if (p === undefined || p === null) {
        throw new Error("Missing the required parameter 'p' when calling designContribpowerComputeList");
      }
      // verify the required parameter 'v' is set
      if (v === undefined || v === null) {
        throw new Error("Missing the required parameter 'v' when calling designContribpowerComputeList");
      }
      // verify the required parameter 't' is set
      if (t === undefined || t === null) {
        throw new Error("Missing the required parameter 't' when calling designContribpowerComputeList");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
        'p': p,
        'v': v,
        't': t
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputedContributorPower;
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/{powerid}/compute/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerCreate operation.
     * @callback module:api/DesignApi~designContribpowerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContribPower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new contributor power
     * @param {Number} designid 
     * @param {module:model/ContribPower} data 
     * @param {module:api/DesignApi~designContribpowerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContribPower}
     */
    designContribpowerCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designContribpowerCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContribPower;
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerDelete operation.
     * @callback module:api/DesignApi~designContribpowerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contributor power
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designContribpowerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designContribpowerDelete(designid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerDelete");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designContribpowerDelete");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/{powerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerList operation.
     * @callback module:api/DesignApi~designContribpowerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContribPower>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of contributor powers
     * @param {Number} designid 
     * @param {module:api/DesignApi~designContribpowerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContribPower>}
     */
    designContribpowerList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContribPower];
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerRead operation.
     * @callback module:api/DesignApi~designContribpowerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContribPower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a contributor power
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designContribpowerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContribPower}
     */
    designContribpowerRead(designid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerRead");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designContribpowerRead");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContribPower;
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/{powerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designContribpowerUpdate operation.
     * @callback module:api/DesignApi~designContribpowerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContribPower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contributor power
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:model/ContribPower} data 
     * @param {module:api/DesignApi~designContribpowerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContribPower}
     */
    designContribpowerUpdate(designid, powerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designContribpowerUpdate");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designContribpowerUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designContribpowerUpdate");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContribPower;
      return this.apiClient.callApi(
        '/design/{designid}/contribpower/{powerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardAccessCreate operation.
     * @callback module:api/DesignApi~designDashboardAccessCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update design dashboard access
     * @param {String} dashboardid 
     * @param {String} designid 
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:api/DesignApi~designDashboardAccessCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designDashboardAccessCreate(dashboardid, designid, projectid, masterdesignid, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardAccessCreate");
      }
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardAccessCreate");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling designDashboardAccessCreate");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling designDashboardAccessCreate");
      }

      let pathParams = {
        'dashboardid': dashboardid,
        'designid': designid,
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/access/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardCloneCreate operation.
     * @callback module:api/DesignApi~designDashboardCloneCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a dashboard
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardCloneCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    designDashboardCloneCreate(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardCloneCreate");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardCloneCreate");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardColumnCreate operation.
     * @callback module:api/DesignApi~designDashboardColumnCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboard column
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:model/DashboardColumn} data 
     * @param {module:api/DesignApi~designDashboardColumnCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardColumn}
     */
    designDashboardColumnCreate(designid, dashboardid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardColumnCreate");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardColumnCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardColumnCreate");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardColumn;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/column/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardColumnDelete operation.
     * @callback module:api/DesignApi~designDashboardColumnDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboard column
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {Number} columnid 
     * @param {module:model/DashboardColumn} data 
     * @param {module:api/DesignApi~designDashboardColumnDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardColumn}
     */
    designDashboardColumnDelete(designid, dashboardid, columnid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardColumnDelete");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardColumnDelete");
      }
      // verify the required parameter 'columnid' is set
      if (columnid === undefined || columnid === null) {
        throw new Error("Missing the required parameter 'columnid' when calling designDashboardColumnDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardColumnDelete");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid,
        'columnid': columnid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardColumn;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/column/{columnid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardColumnList operation.
     * @callback module:api/DesignApi~designDashboardColumnListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardColumn>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard columns
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardColumnListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardColumn>}
     */
    designDashboardColumnList(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardColumnList");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardColumnList");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DashboardColumn];
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/column/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardColumnRead operation.
     * @callback module:api/DesignApi~designDashboardColumnReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard column
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {Number} columnid 
     * @param {module:api/DesignApi~designDashboardColumnReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardColumn}
     */
    designDashboardColumnRead(designid, dashboardid, columnid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardColumnRead");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardColumnRead");
      }
      // verify the required parameter 'columnid' is set
      if (columnid === undefined || columnid === null) {
        throw new Error("Missing the required parameter 'columnid' when calling designDashboardColumnRead");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid,
        'columnid': columnid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardColumn;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/column/{columnid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardColumnUpdate operation.
     * @callback module:api/DesignApi~designDashboardColumnUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardColumn} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dashboard column
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {Number} columnid 
     * @param {module:model/DashboardColumn} data 
     * @param {module:api/DesignApi~designDashboardColumnUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardColumn}
     */
    designDashboardColumnUpdate(designid, dashboardid, columnid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardColumnUpdate");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardColumnUpdate");
      }
      // verify the required parameter 'columnid' is set
      if (columnid === undefined || columnid === null) {
        throw new Error("Missing the required parameter 'columnid' when calling designDashboardColumnUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardColumnUpdate");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid,
        'columnid': columnid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardColumn;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/column/{columnid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardCreate operation.
     * @callback module:api/DesignApi~designDashboardCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboards
     * @param {Number} designid 
     * @param {module:model/Dashboard} data 
     * @param {module:api/DesignApi~designDashboardCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    designDashboardCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardDataList operation.
     * @callback module:api/DesignApi~designDashboardDataListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    designDashboardDataList(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardDataList");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardDataList");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/data/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardDelete operation.
     * @callback module:api/DesignApi~designDashboardDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboards
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designDashboardDelete(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardDelete");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardDelete");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardList operation.
     * @callback module:api/DesignApi~designDashboardListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dashboard>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of dashboards
     * @param {Number} designid 
     * @param {module:api/DesignApi~designDashboardListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dashboard>}
     */
    designDashboardList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Dashboard];
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardRead operation.
     * @callback module:api/DesignApi~designDashboardReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    designDashboardRead(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardRead");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardRead");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardRowCreate operation.
     * @callback module:api/DesignApi~designDashboardRowCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a dashboard row
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:model/DashboardRow} data 
     * @param {module:api/DesignApi~designDashboardRowCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardRow}
     */
    designDashboardRowCreate(designid, dashboardid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardRowCreate");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardRowCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardRowCreate");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardRow;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/row/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardRowDelete operation.
     * @callback module:api/DesignApi~designDashboardRowDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a dashboard column
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {Number} rowid 
     * @param {module:model/DashboardRow} data 
     * @param {module:api/DesignApi~designDashboardRowDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardRow}
     */
    designDashboardRowDelete(designid, dashboardid, rowid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardRowDelete");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardRowDelete");
      }
      // verify the required parameter 'rowid' is set
      if (rowid === undefined || rowid === null) {
        throw new Error("Missing the required parameter 'rowid' when calling designDashboardRowDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardRowDelete");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid,
        'rowid': rowid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardRow;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/row/{rowid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardRowList operation.
     * @callback module:api/DesignApi~designDashboardRowListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardRow>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard rows
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardRowListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardRow>}
     */
    designDashboardRowList(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardRowList");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardRowList");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DashboardRow];
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/row/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardRowRead operation.
     * @callback module:api/DesignApi~designDashboardRowReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a dashboard row
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {Number} rowid 
     * @param {module:api/DesignApi~designDashboardRowReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardRow}
     */
    designDashboardRowRead(designid, dashboardid, rowid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardRowRead");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardRowRead");
      }
      // verify the required parameter 'rowid' is set
      if (rowid === undefined || rowid === null) {
        throw new Error("Missing the required parameter 'rowid' when calling designDashboardRowRead");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid,
        'rowid': rowid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DashboardRow;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/row/{rowid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardRowUpdate operation.
     * @callback module:api/DesignApi~designDashboardRowUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardRow} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dashboard row
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {Number} rowid 
     * @param {module:model/DashboardRow} data 
     * @param {module:api/DesignApi~designDashboardRowUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardRow}
     */
    designDashboardRowUpdate(designid, dashboardid, rowid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardRowUpdate");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardRowUpdate");
      }
      // verify the required parameter 'rowid' is set
      if (rowid === undefined || rowid === null) {
        throw new Error("Missing the required parameter 'rowid' when calling designDashboardRowUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardRowUpdate");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid,
        'rowid': rowid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardRow;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/row/{rowid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardUpdate operation.
     * @callback module:api/DesignApi~designDashboardUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a dashboards
     * @param {Number} designid 
     * @param {Number} dashboardid 
     * @param {module:model/Dashboard} data 
     * @param {module:api/DesignApi~designDashboardUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    designDashboardUpdate(designid, dashboardid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardUpdate");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDashboardUpdate");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Dashboard;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDashboardUpdateList operation.
     * @callback module:api/DesignApi~designDashboardUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {String} designid 
     * @param {Number} dashboardid 
     * @param {module:api/DesignApi~designDashboardUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    designDashboardUpdateList(designid, dashboardid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDashboardUpdateList");
      }
      // verify the required parameter 'dashboardid' is set
      if (dashboardid === undefined || dashboardid === null) {
        throw new Error("Missing the required parameter 'dashboardid' when calling designDashboardUpdateList");
      }

      let pathParams = {
        'designid': designid,
        'dashboardid': dashboardid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/design/{designid}/dashboard/{dashboardid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDataCreate operation.
     * @callback module:api/DesignApi~designDataCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload design data
     * @param {String} uuid 
     * @param {String} data 
     * @param {module:api/DesignApi~designDataCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designDataCreate(uuid, data, callback) {
      let postBody = data;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling designDataCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDataCreate");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/data/{uuid}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDataDelete operation.
     * @callback module:api/DesignApi~designDataDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete design data
     * @param {Number} designid 
     * @param {Number} dataid 
     * @param {module:api/DesignApi~designDataDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designDataDelete(designid, dataid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDataDelete");
      }
      // verify the required parameter 'dataid' is set
      if (dataid === undefined || dataid === null) {
        throw new Error("Missing the required parameter 'dataid' when calling designDataDelete");
      }

      let pathParams = {
        'designid': designid,
        'dataid': dataid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/data/{dataid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDataList operation.
     * @callback module:api/DesignApi~designDataListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get design data
     * @param {Number} designid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields 
     * @param {String} opts.filter 
     * @param {module:api/DesignApi~designDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignData>}
     */
    designDataList(designid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDataList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'fields': opts['fields'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignData];
      return this.apiClient.callApi(
        '/design/{designid}/data/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDataRead operation.
     * @callback module:api/DesignApi~designDataReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get design data
     * @param {Number} designid 
     * @param {Number} dataid 
     * @param {module:api/DesignApi~designDataReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignData}
     */
    designDataRead(designid, dataid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDataRead");
      }
      // verify the required parameter 'dataid' is set
      if (dataid === undefined || dataid === null) {
        throw new Error("Missing the required parameter 'dataid' when calling designDataRead");
      }

      let pathParams = {
        'designid': designid,
        'dataid': dataid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignData;
      return this.apiClient.callApi(
        '/design/{designid}/data/{dataid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designDataUpdate operation.
     * @callback module:api/DesignApi~designDataUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update design data
     * @param {Number} designid 
     * @param {Number} dataid 
     * @param {module:model/DesignData} data 
     * @param {module:api/DesignApi~designDataUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignData}
     */
    designDataUpdate(designid, dataid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designDataUpdate");
      }
      // verify the required parameter 'dataid' is set
      if (dataid === undefined || dataid === null) {
        throw new Error("Missing the required parameter 'dataid' when calling designDataUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designDataUpdate");
      }

      let pathParams = {
        'designid': designid,
        'dataid': dataid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignData;
      return this.apiClient.callApi(
        '/design/{designid}/data/{dataid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designEnergyCreate operation.
     * @callback module:api/DesignApi~designEnergyCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignPinEnergy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add pin powers
     * @param {Number} designid 
     * @param {module:model/DesignPinEnergy} data 
     * @param {module:api/DesignApi~designEnergyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignPinEnergy>}
     */
    designEnergyCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designEnergyCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designEnergyCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DesignPinEnergy];
      return this.apiClient.callApi(
        '/design/{designid}/energy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designEnergyList operation.
     * @callback module:api/DesignApi~designEnergyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedDesignPinEnergy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all pin powers
     * @param {Number} designid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts._number 
     * @param {String} opts.process Model corner name
     * @param {String} opts.rc RC corner name
     * @param {Number} opts.voltage Voltage
     * @param {Number} opts.temperature Temperature
     * @param {module:api/DesignApi~designEnergyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedDesignPinEnergy}
     */
    designEnergyList(designid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designEnergyList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'page': opts['page'],
        'number': opts['_number'],
        'process': opts['process'],
        'rc': opts['rc'],
        'voltage': opts['voltage'],
        'temperature': opts['temperature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedDesignPinEnergy;
      return this.apiClient.callApi(
        '/design/{designid}/energy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designFfCreate operation.
     * @callback module:api/DesignApi~designFfCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignFF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new ff
     * @param {Number} designid 
     * @param {module:model/DesignFF} data 
     * @param {module:api/DesignApi~designFfCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignFF}
     */
    designFfCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designFfCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designFfCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignFF;
      return this.apiClient.callApi(
        '/design/{designid}/ff/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designFfDelete operation.
     * @callback module:api/DesignApi~designFfDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a ff
     * @param {Number} designid 
     * @param {Number} ffid 
     * @param {module:api/DesignApi~designFfDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designFfDelete(designid, ffid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designFfDelete");
      }
      // verify the required parameter 'ffid' is set
      if (ffid === undefined || ffid === null) {
        throw new Error("Missing the required parameter 'ffid' when calling designFfDelete");
      }

      let pathParams = {
        'designid': designid,
        'ffid': ffid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/ff/{ffid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designFfList operation.
     * @callback module:api/DesignApi~designFfListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignFF>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of ffs
     * @param {Number} designid 
     * @param {module:api/DesignApi~designFfListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignFF>}
     */
    designFfList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designFfList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignFF];
      return this.apiClient.callApi(
        '/design/{designid}/ff/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designFfRead operation.
     * @callback module:api/DesignApi~designFfReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignFF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a ff
     * @param {Number} designid 
     * @param {Number} ffid 
     * @param {module:api/DesignApi~designFfReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignFF}
     */
    designFfRead(designid, ffid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designFfRead");
      }
      // verify the required parameter 'ffid' is set
      if (ffid === undefined || ffid === null) {
        throw new Error("Missing the required parameter 'ffid' when calling designFfRead");
      }

      let pathParams = {
        'designid': designid,
        'ffid': ffid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignFF;
      return this.apiClient.callApi(
        '/design/{designid}/ff/{ffid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designFfUpdate operation.
     * @callback module:api/DesignApi~designFfUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignFF} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a ff
     * @param {Number} designid 
     * @param {Number} ffid 
     * @param {module:model/DesignFF} data 
     * @param {module:api/DesignApi~designFfUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignFF}
     */
    designFfUpdate(designid, ffid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designFfUpdate");
      }
      // verify the required parameter 'ffid' is set
      if (ffid === undefined || ffid === null) {
        throw new Error("Missing the required parameter 'ffid' when calling designFfUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designFfUpdate");
      }

      let pathParams = {
        'designid': designid,
        'ffid': ffid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignFF;
      return this.apiClient.callApi(
        '/design/{designid}/ff/{ffid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designHierarchyGroupCreate operation.
     * @callback module:api/DesignApi~designHierarchyGroupCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new hierarchy group
     * @param {Number} designid 
     * @param {module:model/Hier} data 
     * @param {module:api/DesignApi~designHierarchyGroupCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hier}
     */
    designHierarchyGroupCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designHierarchyGroupCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designHierarchyGroupCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Hier;
      return this.apiClient.callApi(
        '/design/{designid}/hierarchy/group/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designHierarchyGroupDelete operation.
     * @callback module:api/DesignApi~designHierarchyGroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hierarchy group
     * @param {Number} designid 
     * @param {Number} groupid 
     * @param {module:api/DesignApi~designHierarchyGroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designHierarchyGroupDelete(designid, groupid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designHierarchyGroupDelete");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling designHierarchyGroupDelete");
      }

      let pathParams = {
        'designid': designid,
        'groupid': groupid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/hierarchy/group/{groupid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designHierarchyGroupUpdate operation.
     * @callback module:api/DesignApi~designHierarchyGroupUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update hierarchy group
     * @param {Number} designid 
     * @param {Number} groupid 
     * @param {module:model/Hier} data 
     * @param {module:api/DesignApi~designHierarchyGroupUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hier}
     */
    designHierarchyGroupUpdate(designid, groupid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designHierarchyGroupUpdate");
      }
      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling designHierarchyGroupUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designHierarchyGroupUpdate");
      }

      let pathParams = {
        'designid': designid,
        'groupid': groupid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Hier;
      return this.apiClient.callApi(
        '/design/{designid}/hierarchy/group/{groupid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designHierarchyList operation.
     * @callback module:api/DesignApi~designHierarchyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get hierarchy
     * @param {Number} designid 
     * @param {module:api/DesignApi~designHierarchyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hier>}
     */
    designHierarchyList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designHierarchyList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Hier];
      return this.apiClient.callApi(
        '/design/{designid}/hierarchy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designHierarchyUpdate operation.
     * @callback module:api/DesignApi~designHierarchyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update hierarchy
     * @param {Number} designid 
     * @param {module:model/Hier} data 
     * @param {module:api/DesignApi~designHierarchyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hier>}
     */
    designHierarchyUpdate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designHierarchyUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designHierarchyUpdate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Hier];
      return this.apiClient.callApi(
        '/design/{designid}/hierarchy/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceBulkCreate operation.
     * @callback module:api/DesignApi~designInstanceBulkCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance
     * @param {Number} designid 
     * @param {Array.<module:model/Instance>} data 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._return  (default to false)
     * @param {module:api/DesignApi~designInstanceBulkCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    designInstanceBulkCreate(designid, data, opts, callback) {
      opts = opts || {};
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceBulkCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designInstanceBulkCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'return': opts['_return']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/design/{designid}/instance/bulk/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceClone operation.
     * @callback module:api/DesignApi~designInstanceCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone an instance
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {module:api/DesignApi~designInstanceCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    designInstanceClone(designid, instanceid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceClone");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceClone");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceCreate operation.
     * @callback module:api/DesignApi~designInstanceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new instance
     * @param {Number} designid 
     * @param {module:model/Instance} data 
     * @param {module:api/DesignApi~designInstanceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    designInstanceCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designInstanceCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/design/{designid}/instance/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceDelete operation.
     * @callback module:api/DesignApi~designInstanceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete instance
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {module:api/DesignApi~designInstanceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designInstanceDelete(designid, instanceid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceDelete");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceDelete");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceList operation.
     * @callback module:api/DesignApi~designInstanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of instances
     * @param {Number} designid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts._number 
     * @param {module:api/DesignApi~designInstanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedInstance}
     */
    designInstanceList(designid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'page': opts['page'],
        'number': opts['_number']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedInstance;
      return this.apiClient.callApi(
        '/design/{designid}/instance/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceRead operation.
     * @callback module:api/DesignApi~designInstanceReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a design
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {module:api/DesignApi~designInstanceReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    designInstanceRead(designid, instanceid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceRead");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceRead");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceSupplyCreate operation.
     * @callback module:api/DesignApi~designInstanceSupplyCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InstanceSupply>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instance supplies
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {module:model/InstanceSupply} data 
     * @param {module:api/DesignApi~designInstanceSupplyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InstanceSupply>}
     */
    designInstanceSupplyCreate(designid, instanceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceSupplyCreate");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceSupplyCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designInstanceSupplyCreate");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InstanceSupply];
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/supply/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceSupplyList operation.
     * @callback module:api/DesignApi~designInstanceSupplyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InstanceSupply>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get instance supplies
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {module:api/DesignApi~designInstanceSupplyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InstanceSupply>}
     */
    designInstanceSupplyList(designid, instanceid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceSupplyList");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceSupplyList");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InstanceSupply];
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/supply/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceSupplyRead operation.
     * @callback module:api/DesignApi~designInstanceSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an instance supply
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {Number} supplyid 
     * @param {module:api/DesignApi~designInstanceSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceSupply}
     */
    designInstanceSupplyRead(designid, instanceid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceSupplyRead");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceSupplyRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designInstanceSupplyRead");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstanceSupply;
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/supply/{supplyid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceSupplyUpdate operation.
     * @callback module:api/DesignApi~designInstanceSupplyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstanceSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an instance supply
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {Number} supplyid 
     * @param {module:model/InstanceSupply} data 
     * @param {module:api/DesignApi~designInstanceSupplyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstanceSupply}
     */
    designInstanceSupplyUpdate(designid, instanceid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceSupplyUpdate");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceSupplyUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designInstanceSupplyUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designInstanceSupplyUpdate");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstanceSupply;
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/supply/{supplyid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceUpdate operation.
     * @callback module:api/DesignApi~designInstanceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Instance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instance
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {module:model/Instance} data 
     * @param {module:api/DesignApi~designInstanceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Instance}
     */
    designInstanceUpdate(designid, instanceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceUpdate");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designInstanceUpdate");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Instance;
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstanceUpdatemasterCreate operation.
     * @callback module:api/DesignApi~designInstanceUpdatemasterCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Instance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instance master
     * @param {Number} designid 
     * @param {Number} instanceid 
     * @param {Number} masterid 
     * @param {module:api/DesignApi~designInstanceUpdatemasterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Instance>}
     */
    designInstanceUpdatemasterCreate(designid, instanceid, masterid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstanceUpdatemasterCreate");
      }
      // verify the required parameter 'instanceid' is set
      if (instanceid === undefined || instanceid === null) {
        throw new Error("Missing the required parameter 'instanceid' when calling designInstanceUpdatemasterCreate");
      }
      // verify the required parameter 'masterid' is set
      if (masterid === undefined || masterid === null) {
        throw new Error("Missing the required parameter 'masterid' when calling designInstanceUpdatemasterCreate");
      }

      let pathParams = {
        'designid': designid,
        'instanceid': instanceid,
        'masterid': masterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Instance];
      return this.apiClient.callApi(
        '/design/{designid}/instance/{instanceid}/updatemaster/{masterid}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designInstantiableList operation.
     * @callback module:api/DesignApi~designInstantiableListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of designs that can be instantiated in the given design
     * @param {Number} designid 
     * @param {module:api/DesignApi~designInstantiableListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignMaster>}
     */
    designInstantiableList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designInstantiableList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignMaster];
      return this.apiClient.callApi(
        '/design/{designid}/instantiable/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLatchCreate operation.
     * @callback module:api/DesignApi~designLatchCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignLatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new latch
     * @param {Number} designid 
     * @param {module:model/DesignLatch} data 
     * @param {module:api/DesignApi~designLatchCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignLatch}
     */
    designLatchCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLatchCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designLatchCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignLatch;
      return this.apiClient.callApi(
        '/design/{designid}/latch/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLatchDelete operation.
     * @callback module:api/DesignApi~designLatchDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a latch
     * @param {Number} designid 
     * @param {Number} latchid 
     * @param {module:api/DesignApi~designLatchDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designLatchDelete(designid, latchid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLatchDelete");
      }
      // verify the required parameter 'latchid' is set
      if (latchid === undefined || latchid === null) {
        throw new Error("Missing the required parameter 'latchid' when calling designLatchDelete");
      }

      let pathParams = {
        'designid': designid,
        'latchid': latchid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/latch/{latchid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLatchList operation.
     * @callback module:api/DesignApi~designLatchListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignLatch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of latches
     * @param {Number} designid 
     * @param {module:api/DesignApi~designLatchListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignLatch>}
     */
    designLatchList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLatchList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignLatch];
      return this.apiClient.callApi(
        '/design/{designid}/latch/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLatchRead operation.
     * @callback module:api/DesignApi~designLatchReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignLatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a latch
     * @param {Number} designid 
     * @param {Number} latchid 
     * @param {module:api/DesignApi~designLatchReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignLatch}
     */
    designLatchRead(designid, latchid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLatchRead");
      }
      // verify the required parameter 'latchid' is set
      if (latchid === undefined || latchid === null) {
        throw new Error("Missing the required parameter 'latchid' when calling designLatchRead");
      }

      let pathParams = {
        'designid': designid,
        'latchid': latchid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignLatch;
      return this.apiClient.callApi(
        '/design/{designid}/latch/{latchid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLatchUpdate operation.
     * @callback module:api/DesignApi~designLatchUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignLatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a latch
     * @param {Number} designid 
     * @param {Number} latchid 
     * @param {module:model/DesignLatch} data 
     * @param {module:api/DesignApi~designLatchUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignLatch}
     */
    designLatchUpdate(designid, latchid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLatchUpdate");
      }
      // verify the required parameter 'latchid' is set
      if (latchid === undefined || latchid === null) {
        throw new Error("Missing the required parameter 'latchid' when calling designLatchUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designLatchUpdate");
      }

      let pathParams = {
        'designid': designid,
        'latchid': latchid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignLatch;
      return this.apiClient.callApi(
        '/design/{designid}/latch/{latchid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLeakagepowerCreate operation.
     * @callback module:api/DesignApi~designLeakagepowerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeakagePower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new leakage power
     * @param {Number} designid 
     * @param {module:model/LeakagePower} data 
     * @param {module:api/DesignApi~designLeakagepowerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeakagePower}
     */
    designLeakagepowerCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLeakagepowerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designLeakagepowerCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeakagePower;
      return this.apiClient.callApi(
        '/design/{designid}/leakagepower/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLeakagepowerDelete operation.
     * @callback module:api/DesignApi~designLeakagepowerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a parameter
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designLeakagepowerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designLeakagepowerDelete(designid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLeakagepowerDelete");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designLeakagepowerDelete");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/leakagepower/{powerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLeakagepowerList operation.
     * @callback module:api/DesignApi~designLeakagepowerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedLeakagePower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of leakage powers
     * @param {Number} designid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts._number 
     * @param {String} opts.process Model corner name
     * @param {String} opts.rc RC corner name
     * @param {Number} opts.voltage Voltage
     * @param {Number} opts.temperature Temperature
     * @param {module:api/DesignApi~designLeakagepowerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedLeakagePower}
     */
    designLeakagepowerList(designid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLeakagepowerList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'page': opts['page'],
        'number': opts['_number'],
        'process': opts['process'],
        'rc': opts['rc'],
        'voltage': opts['voltage'],
        'temperature': opts['temperature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedLeakagePower;
      return this.apiClient.callApi(
        '/design/{designid}/leakagepower/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLeakagepowerRead operation.
     * @callback module:api/DesignApi~designLeakagepowerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeakagePower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a parameter
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designLeakagepowerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeakagePower}
     */
    designLeakagepowerRead(designid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLeakagepowerRead");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designLeakagepowerRead");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeakagePower;
      return this.apiClient.callApi(
        '/design/{designid}/leakagepower/{powerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designLeakagepowerUpdate operation.
     * @callback module:api/DesignApi~designLeakagepowerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeakagePower} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a parameter
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:model/LeakagePower} data 
     * @param {module:api/DesignApi~designLeakagepowerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeakagePower}
     */
    designLeakagepowerUpdate(designid, powerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designLeakagepowerUpdate");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designLeakagepowerUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designLeakagepowerUpdate");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeakagePower;
      return this.apiClient.callApi(
        '/design/{designid}/leakagepower/{powerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeClone operation.
     * @callback module:api/DesignApi~designModeCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a design mode
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designModeCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mode}
     */
    designModeClone(designid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeClone");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeClone");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Mode;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeCreate operation.
     * @callback module:api/DesignApi~designModeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new mode
     * @param {Number} designid 
     * @param {module:model/Mode} data 
     * @param {module:api/DesignApi~designModeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mode}
     */
    designModeCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designModeCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Mode;
      return this.apiClient.callApi(
        '/design/{designid}/mode/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeDelete operation.
     * @callback module:api/DesignApi~designModeDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a design mode
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designModeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designModeDelete(designid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeDelete");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeDelete");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeList operation.
     * @callback module:api/DesignApi~designModeListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Mode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of design modes
     * @param {Number} designid 
     * @param {module:api/DesignApi~designModeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Mode>}
     */
    designModeList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Mode];
      return this.apiClient.callApi(
        '/design/{designid}/mode/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModePowerList operation.
     * @callback module:api/DesignApi~designModePowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designModePowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designModePowerList(designid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModePowerList");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModePowerList");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModePowerdistributionList operation.
     * @callback module:api/DesignApi~designModePowerdistributionListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designModePowerdistributionListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designModePowerdistributionList(designid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModePowerdistributionList");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModePowerdistributionList");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/powerdistribution/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeRead operation.
     * @callback module:api/DesignApi~designModeReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a design mode
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designModeReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mode}
     */
    designModeRead(designid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeRead");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeRead");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Mode;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeSupplyComputepowerCreate operation.
     * @callback module:api/DesignApi~designModeSupplyComputepowerCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {Number} supplyid 
     * @param {module:model/ComputePower1} data 
     * @param {module:api/DesignApi~designModeSupplyComputepowerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designModeSupplyComputepowerCreate(designid, modeid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeSupplyComputepowerCreate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeSupplyComputepowerCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designModeSupplyComputepowerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designModeSupplyComputepowerCreate");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/supply/{supplyid}/computepower/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeSupplyComputepowertableCreate operation.
     * @callback module:api/DesignApi~designModeSupplyComputepowertableCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {Number} supplyid 
     * @param {module:model/ComputePower2} data 
     * @param {module:api/DesignApi~designModeSupplyComputepowertableCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designModeSupplyComputepowertableCreate(designid, modeid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeSupplyComputepowertableCreate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeSupplyComputepowertableCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designModeSupplyComputepowertableCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designModeSupplyComputepowertableCreate");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/supply/{supplyid}/computepowertable/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeSupplystateList operation.
     * @callback module:api/DesignApi~designModeSupplystateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyModeState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supply states per mode
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designModeSupplystateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyModeState}
     */
    designModeSupplystateList(designid, supplyid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeSupplystateList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designModeSupplystateList");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeSupplystateList");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyModeState;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/supplystate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeSupplystateUpdate operation.
     * @callback module:api/DesignApi~designModeSupplystateUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyModeState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a supply state per mode
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {Number} modeid 
     * @param {module:model/SupplyModeState} data 
     * @param {module:api/DesignApi~designModeSupplystateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyModeState>}
     */
    designModeSupplystateUpdate(designid, supplyid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeSupplystateUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designModeSupplystateUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeSupplystateUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designModeSupplystateUpdate");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SupplyModeState];
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/supplystate/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designModeUpdate operation.
     * @callback module:api/DesignApi~designModeUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a design mode
     * @param {Number} designid 
     * @param {Number} modeid 
     * @param {module:model/Mode} data 
     * @param {module:api/DesignApi~designModeUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mode}
     */
    designModeUpdate(designid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designModeUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designModeUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designModeUpdate");
      }

      let pathParams = {
        'designid': designid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Mode;
      return this.apiClient.callApi(
        '/design/{designid}/mode/{modeid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designParameterClone operation.
     * @callback module:api/DesignApi~designParameterCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Param} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clode a mode param
     * @param {Number} designid 
     * @param {Number} paramid 
     * @param {module:api/DesignApi~designParameterCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Param}
     */
    designParameterClone(designid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designParameterClone");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designParameterClone");
      }

      let pathParams = {
        'designid': designid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Param;
      return this.apiClient.callApi(
        '/design/{designid}/parameter/{paramid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designParameterCreate operation.
     * @callback module:api/DesignApi~designParameterCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Param} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new parameter
     * @param {Number} designid 
     * @param {module:model/Param} data 
     * @param {module:api/DesignApi~designParameterCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Param}
     */
    designParameterCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designParameterCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designParameterCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Param;
      return this.apiClient.callApi(
        '/design/{designid}/parameter/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designParameterDelete operation.
     * @callback module:api/DesignApi~designParameterDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a parameter
     * @param {Number} designid 
     * @param {Number} paramid 
     * @param {module:api/DesignApi~designParameterDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designParameterDelete(designid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designParameterDelete");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designParameterDelete");
      }

      let pathParams = {
        'designid': designid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/parameter/{paramid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designParameterList operation.
     * @callback module:api/DesignApi~designParameterListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Param>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of params
     * @param {Number} designid 
     * @param {module:api/DesignApi~designParameterListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Param>}
     */
    designParameterList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designParameterList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Param];
      return this.apiClient.callApi(
        '/design/{designid}/parameter/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designParameterRead operation.
     * @callback module:api/DesignApi~designParameterReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Param} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a parameter
     * @param {Number} designid 
     * @param {Number} paramid 
     * @param {module:api/DesignApi~designParameterReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Param}
     */
    designParameterRead(designid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designParameterRead");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designParameterRead");
      }

      let pathParams = {
        'designid': designid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Param;
      return this.apiClient.callApi(
        '/design/{designid}/parameter/{paramid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designParameterUpdate operation.
     * @callback module:api/DesignApi~designParameterUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Param} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a parameter
     * @param {Number} designid 
     * @param {Number} paramid 
     * @param {module:model/Param} data 
     * @param {module:api/DesignApi~designParameterUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Param}
     */
    designParameterUpdate(designid, paramid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designParameterUpdate");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designParameterUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designParameterUpdate");
      }

      let pathParams = {
        'designid': designid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Param;
      return this.apiClient.callApi(
        '/design/{designid}/parameter/{paramid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPermissionsList operation.
     * @callback module:api/DesignApi~designPermissionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} designid 
     * @param {module:api/DesignApi~designPermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designPermissionsList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPermissionsList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPermissionsUpdate operation.
     * @callback module:api/DesignApi~designPermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} designid 
     * @param {module:api/DesignApi~designPermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designPermissionsUpdate(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPermissionsUpdate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/permissions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinCapsCreate operation.
     * @callback module:api/DesignApi~designPinCapsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinCap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pin cap
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {module:model/PinCap} data 
     * @param {module:api/DesignApi~designPinCapsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinCap}
     */
    designPinCapsCreate(designid, pinid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinCapsCreate");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinCapsCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPinCapsCreate");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PinCap;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/caps/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinCapsDelete operation.
     * @callback module:api/DesignApi~designPinCapsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pin cap
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Number} capid 
     * @param {module:api/DesignApi~designPinCapsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designPinCapsDelete(designid, pinid, capid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinCapsDelete");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinCapsDelete");
      }
      // verify the required parameter 'capid' is set
      if (capid === undefined || capid === null) {
        throw new Error("Missing the required parameter 'capid' when calling designPinCapsDelete");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid,
        'capid': capid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/caps/{capid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinCapsList operation.
     * @callback module:api/DesignApi~designPinCapsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PinCap>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of pin caps
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.process Model corner name
     * @param {String} opts.rc RC corner name
     * @param {Number} opts.voltage Voltage
     * @param {Number} opts.temperature Temperature
     * @param {module:api/DesignApi~designPinCapsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PinCap>}
     */
    designPinCapsList(designid, pinid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinCapsList");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinCapsList");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
        'process': opts['process'],
        'rc': opts['rc'],
        'voltage': opts['voltage'],
        'temperature': opts['temperature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PinCap];
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/caps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinCapsRead operation.
     * @callback module:api/DesignApi~designPinCapsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinCap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pin cap
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Number} capid 
     * @param {module:api/DesignApi~designPinCapsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinCap}
     */
    designPinCapsRead(designid, pinid, capid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinCapsRead");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinCapsRead");
      }
      // verify the required parameter 'capid' is set
      if (capid === undefined || capid === null) {
        throw new Error("Missing the required parameter 'capid' when calling designPinCapsRead");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid,
        'capid': capid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PinCap;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/caps/{capid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinCapsUpdate operation.
     * @callback module:api/DesignApi~designPinCapsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinCap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pin power
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Number} capid 
     * @param {module:model/PinCap} data 
     * @param {module:api/DesignApi~designPinCapsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinCap}
     */
    designPinCapsUpdate(designid, pinid, capid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinCapsUpdate");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinCapsUpdate");
      }
      // verify the required parameter 'capid' is set
      if (capid === undefined || capid === null) {
        throw new Error("Missing the required parameter 'capid' when calling designPinCapsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPinCapsUpdate");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid,
        'capid': capid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PinCap;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/caps/{capid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinCreate operation.
     * @callback module:api/DesignApi~designPinCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignPin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pin
     * @param {Number} designid 
     * @param {module:model/DesignPin} data 
     * @param {module:api/DesignApi~designPinCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignPin}
     */
    designPinCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPinCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignPin;
      return this.apiClient.callApi(
        '/design/{designid}/pin/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinDelete operation.
     * @callback module:api/DesignApi~designPinDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pin
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {module:api/DesignApi~designPinDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designPinDelete(designid, pinid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinDelete");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinDelete");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinEnergyCreate operation.
     * @callback module:api/DesignApi~designPinEnergyCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinEnergy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pin power
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {module:model/PinEnergy} data 
     * @param {module:api/DesignApi~designPinEnergyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinEnergy}
     */
    designPinEnergyCreate(designid, pinid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinEnergyCreate");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinEnergyCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPinEnergyCreate");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PinEnergy;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/energy/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinEnergyDelete operation.
     * @callback module:api/DesignApi~designPinEnergyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a pin power
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designPinEnergyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designPinEnergyDelete(designid, pinid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinEnergyDelete");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinEnergyDelete");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designPinEnergyDelete");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/energy/{powerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinEnergyList operation.
     * @callback module:api/DesignApi~designPinEnergyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PinEnergy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of pin powers
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.process Model corner name
     * @param {String} opts.rc RC corner name
     * @param {Number} opts.voltage Voltage
     * @param {Number} opts.temperature Temperature
     * @param {module:api/DesignApi~designPinEnergyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PinEnergy>}
     */
    designPinEnergyList(designid, pinid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinEnergyList");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinEnergyList");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
        'process': opts['process'],
        'rc': opts['rc'],
        'voltage': opts['voltage'],
        'temperature': opts['temperature']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PinEnergy];
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/energy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinEnergyRead operation.
     * @callback module:api/DesignApi~designPinEnergyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinEnergy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pin power
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designPinEnergyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinEnergy}
     */
    designPinEnergyRead(designid, pinid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinEnergyRead");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinEnergyRead");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designPinEnergyRead");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PinEnergy;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/energy/{powerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinEnergyUpdate operation.
     * @callback module:api/DesignApi~designPinEnergyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PinEnergy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pin power
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {Number} powerid 
     * @param {module:model/PinEnergy} data 
     * @param {module:api/DesignApi~designPinEnergyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PinEnergy}
     */
    designPinEnergyUpdate(designid, pinid, powerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinEnergyUpdate");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinEnergyUpdate");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designPinEnergyUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPinEnergyUpdate");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PinEnergy;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/energy/{powerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinList operation.
     * @callback module:api/DesignApi~designPinListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignPin>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of pins
     * @param {Number} designid 
     * @param {module:api/DesignApi~designPinListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignPin>}
     */
    designPinList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignPin];
      return this.apiClient.callApi(
        '/design/{designid}/pin/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinRead operation.
     * @callback module:api/DesignApi~designPinReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignPin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pin
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {module:api/DesignApi~designPinReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignPin}
     */
    designPinRead(designid, pinid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinRead");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinRead");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignPin;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPinUpdate operation.
     * @callback module:api/DesignApi~designPinUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignPin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pin
     * @param {Number} designid 
     * @param {Number} pinid 
     * @param {module:model/DesignPin} data 
     * @param {module:api/DesignApi~designPinUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignPin}
     */
    designPinUpdate(designid, pinid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPinUpdate");
      }
      // verify the required parameter 'pinid' is set
      if (pinid === undefined || pinid === null) {
        throw new Error("Missing the required parameter 'pinid' when calling designPinUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPinUpdate");
      }

      let pathParams = {
        'designid': designid,
        'pinid': pinid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignPin;
      return this.apiClient.callApi(
        '/design/{designid}/pin/{pinid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPowerCreate operation.
     * @callback module:api/DesignApi~designPowerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Power} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a power
     * @param {Number} designid 
     * @param {module:model/Power} data 
     * @param {module:api/DesignApi~designPowerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Power}
     */
    designPowerCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPowerCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPowerCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Power;
      return this.apiClient.callApi(
        '/design/{designid}/power/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPowerDelete operation.
     * @callback module:api/DesignApi~designPowerDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a power
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designPowerDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designPowerDelete(designid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPowerDelete");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designPowerDelete");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/power/{powerid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPowerList operation.
     * @callback module:api/DesignApi~designPowerListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Power>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of powers
     * @param {Number} designid 
     * @param {module:api/DesignApi~designPowerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Power>}
     */
    designPowerList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPowerList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Power];
      return this.apiClient.callApi(
        '/design/{designid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPowerRead operation.
     * @callback module:api/DesignApi~designPowerReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Power} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a power
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:api/DesignApi~designPowerReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Power}
     */
    designPowerRead(designid, powerid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPowerRead");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designPowerRead");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Power;
      return this.apiClient.callApi(
        '/design/{designid}/power/{powerid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designPowerUpdate operation.
     * @callback module:api/DesignApi~designPowerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Power} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a power
     * @param {Number} designid 
     * @param {Number} powerid 
     * @param {module:model/Power} data 
     * @param {module:api/DesignApi~designPowerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Power}
     */
    designPowerUpdate(designid, powerid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designPowerUpdate");
      }
      // verify the required parameter 'powerid' is set
      if (powerid === undefined || powerid === null) {
        throw new Error("Missing the required parameter 'powerid' when calling designPowerUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designPowerUpdate");
      }

      let pathParams = {
        'designid': designid,
        'powerid': powerid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Power;
      return this.apiClient.callApi(
        '/design/{designid}/power/{powerid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designRead operation.
     * @callback module:api/DesignApi~designReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Design} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get design
     * @param {Number} designid 
     * @param {module:api/DesignApi~designReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Design}
     */
    designRead(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designRead");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Design;
      return this.apiClient.callApi(
        '/design/{designid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designRestoreCreate operation.
     * @callback module:api/DesignApi~designRestoreCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Design} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore a design version as current version
     * @param {Number} designid 
     * @param {module:api/DesignApi~designRestoreCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Design}
     */
    designRestoreCreate(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designRestoreCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Design;
      return this.apiClient.callApi(
        '/design/{designid}/restore/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioClone operation.
     * @callback module:api/DesignApi~designScenarioCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a design scenario
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenario}
     */
    designScenarioClone(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioClone");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioClone");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenario;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioCreate operation.
     * @callback module:api/DesignApi~designScenarioCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scenario
     * @param {Number} designid 
     * @param {module:api/DesignApi~designScenarioCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenario}
     */
    designScenarioCreate(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenario;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioDelete operation.
     * @callback module:api/DesignApi~designScenarioDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designScenarioDelete(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioDelete");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioList operation.
     * @callback module:api/DesignApi~designScenarioListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignScenario>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of scenarios
     * @param {Number} designid 
     * @param {module:api/DesignApi~designScenarioListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignScenario>}
     */
    designScenarioList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignScenario];
      return this.apiClient.callApi(
        '/design/{designid}/scenario/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioModeConfigDelete operation.
     * @callback module:api/DesignApi~designScenarioModeConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a datasheet mode util
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} modeid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioModeConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioModeUtil}
     */
    designScenarioModeConfigDelete(designid, scenarioid, modeid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioModeConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioModeConfigDelete");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designScenarioModeConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioModeConfigDelete");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'modeid': modeid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioModeUtil;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioModeConfigRead operation.
     * @callback module:api/DesignApi~designScenarioModeConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get datasheet mode
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} modeid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioModeConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioModeUtil}
     */
    designScenarioModeConfigRead(designid, scenarioid, modeid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioModeConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioModeConfigRead");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designScenarioModeConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioModeConfigRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'modeid': modeid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioModeUtil;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioModeConfigUpdate operation.
     * @callback module:api/DesignApi~designScenarioModeConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a datasheet mode util
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} modeid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioModeConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioModeUtil}
     */
    designScenarioModeConfigUpdate(designid, scenarioid, modeid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioModeConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioModeConfigUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designScenarioModeConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioModeConfigUpdate");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'modeid': modeid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioModeUtil;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioModeCreate operation.
     * @callback module:api/DesignApi~designScenarioModeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scenario mode util
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designScenarioModeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioModeUtil}
     */
    designScenarioModeCreate(designid, scenarioid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioModeCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioModeCreate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designScenarioModeCreate");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioModeUtil;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioModeRead operation.
     * @callback module:api/DesignApi~designScenarioModeReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignScenarioModeUtil>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of scenario modes
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designScenarioModeReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignScenarioModeUtil>}
     */
    designScenarioModeRead(designid, scenarioid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioModeRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioModeRead");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designScenarioModeRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignScenarioModeUtil];
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/mode/{modeid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioParamConfigDelete operation.
     * @callback module:api/DesignApi~designScenarioParamConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario config
     * @param {String} configid 
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} paramid 
     * @param {Number} confgiid 
     * @param {module:api/DesignApi~designScenarioParamConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioConfig}
     */
    designScenarioParamConfigDelete(configid, designid, scenarioid, paramid, confgiid, callback) {
      let postBody = null;
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioParamConfigDelete");
      }
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioParamConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioParamConfigDelete");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designScenarioParamConfigDelete");
      }
      // verify the required parameter 'confgiid' is set
      if (confgiid === undefined || confgiid === null) {
        throw new Error("Missing the required parameter 'confgiid' when calling designScenarioParamConfigDelete");
      }

      let pathParams = {
        'configid': configid,
        'designid': designid,
        'scenarioid': scenarioid,
        'paramid': paramid,
        'confgiid': confgiid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioConfig;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioParamConfigRead operation.
     * @callback module:api/DesignApi~designScenarioParamConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getscenario configs
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} paramid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioParamConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioConfig}
     */
    designScenarioParamConfigRead(designid, scenarioid, paramid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioParamConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioParamConfigRead");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designScenarioParamConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioParamConfigRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'paramid': paramid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioConfig;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioParamConfigUpdate operation.
     * @callback module:api/DesignApi~designScenarioParamConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario config
     * @param {String} configid 
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} paramid 
     * @param {Number} confgiid 
     * @param {module:api/DesignApi~designScenarioParamConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioConfig}
     */
    designScenarioParamConfigUpdate(configid, designid, scenarioid, paramid, confgiid, callback) {
      let postBody = null;
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioParamConfigUpdate");
      }
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioParamConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioParamConfigUpdate");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designScenarioParamConfigUpdate");
      }
      // verify the required parameter 'confgiid' is set
      if (confgiid === undefined || confgiid === null) {
        throw new Error("Missing the required parameter 'confgiid' when calling designScenarioParamConfigUpdate");
      }

      let pathParams = {
        'configid': configid,
        'designid': designid,
        'scenarioid': scenarioid,
        'paramid': paramid,
        'confgiid': confgiid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioConfig;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/param/{paramid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioParamCreate operation.
     * @callback module:api/DesignApi~designScenarioParamCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scenario config
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} paramid 
     * @param {module:api/DesignApi~designScenarioParamCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioConfig}
     */
    designScenarioParamCreate(designid, scenarioid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioParamCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioParamCreate");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designScenarioParamCreate");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioConfig;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/param/{paramid}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioParamRead operation.
     * @callback module:api/DesignApi~designScenarioParamReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignScenarioConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of scenario configs
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} paramid 
     * @param {module:api/DesignApi~designScenarioParamReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignScenarioConfig>}
     */
    designScenarioParamRead(designid, scenarioid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioParamRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioParamRead");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling designScenarioParamRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignScenarioConfig];
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/param/{paramid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioPowerList operation.
     * @callback module:api/DesignApi~designScenarioPowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get power of design scenario
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioPowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designScenarioPowerList(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioPowerList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioPowerList");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioPowerdistributionList operation.
     * @callback module:api/DesignApi~designScenarioPowerdistributionListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get power distribution of a design scenario
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioPowerdistributionListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designScenarioPowerdistributionList(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioPowerdistributionList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioPowerdistributionList");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/powerdistribution/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioRead operation.
     * @callback module:api/DesignApi~designScenarioReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scenario
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenario}
     */
    designScenarioRead(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenario;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioSupplyConfigDelete operation.
     * @callback module:api/DesignApi~designScenarioSupplyConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario config
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioSupplyConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioSupply}
     */
    designScenarioSupplyConfigDelete(designid, scenarioid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioSupplyConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioSupplyConfigDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designScenarioSupplyConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioSupplyConfigDelete");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioSupply;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioSupplyConfigRead operation.
     * @callback module:api/DesignApi~designScenarioSupplyConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of scenario supplies
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioSupplyConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioSupply}
     */
    designScenarioSupplyConfigRead(designid, scenarioid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioSupplyConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioSupplyConfigRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designScenarioSupplyConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioSupplyConfigRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioSupply;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioSupplyConfigUpdate operation.
     * @callback module:api/DesignApi~designScenarioSupplyConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario config
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/DesignApi~designScenarioSupplyConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioSupply}
     */
    designScenarioSupplyConfigUpdate(designid, scenarioid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioSupplyConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioSupplyConfigUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designScenarioSupplyConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling designScenarioSupplyConfigUpdate");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioSupply;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioSupplyCreate operation.
     * @callback module:api/DesignApi~designScenarioSupplyCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenarioSupply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a scenario config
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} supplyid 
     * @param {module:api/DesignApi~designScenarioSupplyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenarioSupply}
     */
    designScenarioSupplyCreate(designid, scenarioid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioSupplyCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioSupplyCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designScenarioSupplyCreate");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignScenarioSupply;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioSupplyRead operation.
     * @callback module:api/DesignApi~designScenarioSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignScenarioSupply>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of scenario supplies
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {Number} supplyid 
     * @param {module:api/DesignApi~designScenarioSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignScenarioSupply>}
     */
    designScenarioSupplyRead(designid, scenarioid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioSupplyRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioSupplyRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designScenarioSupplyRead");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignScenarioSupply];
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/supply/{supplyid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioTrendList operation.
     * @callback module:api/DesignApi~designScenarioTrendListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scenario power trend
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioTrendListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designScenarioTrendList(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioTrendList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioTrendList");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/trend/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioUpdate operation.
     * @callback module:api/DesignApi~designScenarioUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignScenario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:model/DesignScenario} data 
     * @param {module:api/DesignApi~designScenarioUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignScenario}
     */
    designScenarioUpdate(designid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designScenarioUpdate");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignScenario;
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designScenarioUpdateList operation.
     * @callback module:api/DesignApi~designScenarioUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Number>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} designid 
     * @param {Number} scenarioid 
     * @param {module:api/DesignApi~designScenarioUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Number>}
     */
    designScenarioUpdateList(designid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designScenarioUpdateList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling designScenarioUpdateList");
      }

      let pathParams = {
        'designid': designid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];
      return this.apiClient.callApi(
        '/design/{designid}/scenario/{scenarioid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSensorClone operation.
     * @callback module:api/DesignApi~designSensorCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSensor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clode a sensor
     * @param {Number} designid 
     * @param {Number} sensorid 
     * @param {module:api/DesignApi~designSensorCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSensor}
     */
    designSensorClone(designid, sensorid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSensorClone");
      }
      // verify the required parameter 'sensorid' is set
      if (sensorid === undefined || sensorid === null) {
        throw new Error("Missing the required parameter 'sensorid' when calling designSensorClone");
      }

      let pathParams = {
        'designid': designid,
        'sensorid': sensorid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignSensor;
      return this.apiClient.callApi(
        '/design/{designid}/sensor/{sensorid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSensorCreate operation.
     * @callback module:api/DesignApi~designSensorCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSensor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new sensor
     * @param {Number} designid 
     * @param {module:model/DesignSensor} data 
     * @param {module:api/DesignApi~designSensorCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSensor}
     */
    designSensorCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSensorCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designSensorCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignSensor;
      return this.apiClient.callApi(
        '/design/{designid}/sensor/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSensorDelete operation.
     * @callback module:api/DesignApi~designSensorDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sensor
     * @param {Number} designid 
     * @param {Number} sensorid 
     * @param {module:api/DesignApi~designSensorDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designSensorDelete(designid, sensorid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSensorDelete");
      }
      // verify the required parameter 'sensorid' is set
      if (sensorid === undefined || sensorid === null) {
        throw new Error("Missing the required parameter 'sensorid' when calling designSensorDelete");
      }

      let pathParams = {
        'designid': designid,
        'sensorid': sensorid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/sensor/{sensorid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSensorList operation.
     * @callback module:api/DesignApi~designSensorListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignSensor>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of sensors
     * @param {Number} designid 
     * @param {module:api/DesignApi~designSensorListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignSensor>}
     */
    designSensorList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSensorList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignSensor];
      return this.apiClient.callApi(
        '/design/{designid}/sensor/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSensorRead operation.
     * @callback module:api/DesignApi~designSensorReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSensor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a sensor
     * @param {Number} designid 
     * @param {Number} sensorid 
     * @param {module:api/DesignApi~designSensorReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSensor}
     */
    designSensorRead(designid, sensorid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSensorRead");
      }
      // verify the required parameter 'sensorid' is set
      if (sensorid === undefined || sensorid === null) {
        throw new Error("Missing the required parameter 'sensorid' when calling designSensorRead");
      }

      let pathParams = {
        'designid': designid,
        'sensorid': sensorid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignSensor;
      return this.apiClient.callApi(
        '/design/{designid}/sensor/{sensorid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSensorUpdate operation.
     * @callback module:api/DesignApi~designSensorUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSensor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a sensor
     * @param {Number} designid 
     * @param {Number} sensorid 
     * @param {module:model/DesignSensor} data 
     * @param {module:api/DesignApi~designSensorUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSensor}
     */
    designSensorUpdate(designid, sensorid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSensorUpdate");
      }
      // verify the required parameter 'sensorid' is set
      if (sensorid === undefined || sensorid === null) {
        throw new Error("Missing the required parameter 'sensorid' when calling designSensorUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designSensorUpdate");
      }

      let pathParams = {
        'designid': designid,
        'sensorid': sensorid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignSensor;
      return this.apiClient.callApi(
        '/design/{designid}/sensor/{sensorid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designStatetableCreate operation.
     * @callback module:api/DesignApi~designStatetableCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignStateTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new ff
     * @param {Number} designid 
     * @param {module:model/DesignStateTable} data 
     * @param {module:api/DesignApi~designStatetableCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignStateTable}
     */
    designStatetableCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designStatetableCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designStatetableCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignStateTable;
      return this.apiClient.callApi(
        '/design/{designid}/statetable/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designStatetableDelete operation.
     * @callback module:api/DesignApi~designStatetableDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a ff
     * @param {Number} designid 
     * @param {Number} statetableid 
     * @param {module:api/DesignApi~designStatetableDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designStatetableDelete(designid, statetableid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designStatetableDelete");
      }
      // verify the required parameter 'statetableid' is set
      if (statetableid === undefined || statetableid === null) {
        throw new Error("Missing the required parameter 'statetableid' when calling designStatetableDelete");
      }

      let pathParams = {
        'designid': designid,
        'statetableid': statetableid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/statetable/{statetableid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designStatetableList operation.
     * @callback module:api/DesignApi~designStatetableListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignStateTable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of statetables
     * @param {Number} designid 
     * @param {module:api/DesignApi~designStatetableListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignStateTable>}
     */
    designStatetableList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designStatetableList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignStateTable];
      return this.apiClient.callApi(
        '/design/{designid}/statetable/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designStatetableRead operation.
     * @callback module:api/DesignApi~designStatetableReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignStateTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a statetable
     * @param {Number} designid 
     * @param {Number} statetableid 
     * @param {module:api/DesignApi~designStatetableReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignStateTable}
     */
    designStatetableRead(designid, statetableid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designStatetableRead");
      }
      // verify the required parameter 'statetableid' is set
      if (statetableid === undefined || statetableid === null) {
        throw new Error("Missing the required parameter 'statetableid' when calling designStatetableRead");
      }

      let pathParams = {
        'designid': designid,
        'statetableid': statetableid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignStateTable;
      return this.apiClient.callApi(
        '/design/{designid}/statetable/{statetableid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designStatetableUpdate operation.
     * @callback module:api/DesignApi~designStatetableUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignStateTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a ff
     * @param {Number} designid 
     * @param {Number} statetableid 
     * @param {module:model/DesignStateTable} data 
     * @param {module:api/DesignApi~designStatetableUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignStateTable}
     */
    designStatetableUpdate(designid, statetableid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designStatetableUpdate");
      }
      // verify the required parameter 'statetableid' is set
      if (statetableid === undefined || statetableid === null) {
        throw new Error("Missing the required parameter 'statetableid' when calling designStatetableUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designStatetableUpdate");
      }

      let pathParams = {
        'designid': designid,
        'statetableid': statetableid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignStateTable;
      return this.apiClient.callApi(
        '/design/{designid}/statetable/{statetableid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyClone operation.
     * @callback module:api/DesignApi~designSupplyCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clode a mode param
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {module:api/DesignApi~designSupplyCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supply}
     */
    designSupplyClone(designid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyClone");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplyClone");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Supply;
      return this.apiClient.callApi(
        '/design/{designid}/supply/{supplyid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyCreate operation.
     * @callback module:api/DesignApi~designSupplyCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a supply
     * @param {Number} designid 
     * @param {module:model/Supply} data 
     * @param {module:api/DesignApi~designSupplyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supply}
     */
    designSupplyCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designSupplyCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Supply;
      return this.apiClient.callApi(
        '/design/{designid}/supply/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyDelete operation.
     * @callback module:api/DesignApi~designSupplyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a supply
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {module:api/DesignApi~designSupplyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designSupplyDelete(designid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplyDelete");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/supply/{supplyid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyList operation.
     * @callback module:api/DesignApi~designSupplyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Supply>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of supplies
     * @param {Number} designid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Design name
     * @param {module:api/DesignApi~designSupplyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Supply>}
     */
    designSupplyList(designid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Supply];
      return this.apiClient.callApi(
        '/design/{designid}/supply/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyModestateList operation.
     * @callback module:api/DesignApi~designSupplyModestateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyModeState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supply states per mode
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designSupplyModestateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyModeState}
     */
    designSupplyModestateList(designid, supplyid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyModestateList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplyModestateList");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designSupplyModestateList");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyModeState;
      return this.apiClient.callApi(
        '/design/{designid}/supply/{supplyid}/modestate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyModestateUpdate operation.
     * @callback module:api/DesignApi~designSupplyModestateUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyModeState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a supply state per mode
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {Number} modeid 
     * @param {module:model/SupplyModeState} data 
     * @param {module:api/DesignApi~designSupplyModestateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyModeState>}
     */
    designSupplyModestateUpdate(designid, supplyid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyModestateUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplyModestateUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designSupplyModestateUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designSupplyModestateUpdate");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SupplyModeState];
      return this.apiClient.callApi(
        '/design/{designid}/supply/{supplyid}/modestate/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyRead operation.
     * @callback module:api/DesignApi~designSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a supply
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {module:api/DesignApi~designSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supply}
     */
    designSupplyRead(designid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplyRead");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Supply;
      return this.apiClient.callApi(
        '/design/{designid}/supply/{supplyid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplyUpdate operation.
     * @callback module:api/DesignApi~designSupplyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a supply
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {module:model/Supply} data 
     * @param {module:api/DesignApi~designSupplyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supply}
     */
    designSupplyUpdate(designid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplyUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplyUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designSupplyUpdate");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Supply;
      return this.apiClient.callApi(
        '/design/{designid}/supply/{supplyid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplymodestateList operation.
     * @callback module:api/DesignApi~designSupplymodestateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyModeState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supply states per mode
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {Number} modeid 
     * @param {module:api/DesignApi~designSupplymodestateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyModeState}
     */
    designSupplymodestateList(designid, supplyid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplymodestateList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplymodestateList");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designSupplymodestateList");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyModeState;
      return this.apiClient.callApi(
        '/design/{designid}/supplymodestate/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designSupplymodestateUpdate operation.
     * @callback module:api/DesignApi~designSupplymodestateUpdateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyModeState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a supply state per mode
     * @param {Number} designid 
     * @param {Number} supplyid 
     * @param {Number} modeid 
     * @param {module:model/SupplyModeState} data 
     * @param {module:api/DesignApi~designSupplymodestateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyModeState>}
     */
    designSupplymodestateUpdate(designid, supplyid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designSupplymodestateUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling designSupplymodestateUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling designSupplymodestateUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designSupplymodestateUpdate");
      }

      let pathParams = {
        'designid': designid,
        'supplyid': supplyid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SupplyModeState];
      return this.apiClient.callApi(
        '/design/{designid}/supplymodestate/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designTrendCreate operation.
     * @callback module:api/DesignApi~designTrendCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignTrend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a trend
     * @param {Number} designid 
     * @param {module:model/DesignTrend} data 
     * @param {module:api/DesignApi~designTrendCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignTrend}
     */
    designTrendCreate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designTrendCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designTrendCreate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignTrend;
      return this.apiClient.callApi(
        '/design/{designid}/trend/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designTrendDelete operation.
     * @callback module:api/DesignApi~designTrendDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a trend
     * @param {Number} designid 
     * @param {Number} trendid 
     * @param {module:api/DesignApi~designTrendDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designTrendDelete(designid, trendid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designTrendDelete");
      }
      // verify the required parameter 'trendid' is set
      if (trendid === undefined || trendid === null) {
        throw new Error("Missing the required parameter 'trendid' when calling designTrendDelete");
      }

      let pathParams = {
        'designid': designid,
        'trendid': trendid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/trend/{trendid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designTrendList operation.
     * @callback module:api/DesignApi~designTrendListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignTrend>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of saved trends
     * @param {Number} designid 
     * @param {module:api/DesignApi~designTrendListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignTrend>}
     */
    designTrendList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designTrendList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignTrend];
      return this.apiClient.callApi(
        '/design/{designid}/trend/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designTrendRead operation.
     * @callback module:api/DesignApi~designTrendReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignTrend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a trend
     * @param {Number} designid 
     * @param {Number} trendid 
     * @param {module:api/DesignApi~designTrendReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignTrend}
     */
    designTrendRead(designid, trendid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designTrendRead");
      }
      // verify the required parameter 'trendid' is set
      if (trendid === undefined || trendid === null) {
        throw new Error("Missing the required parameter 'trendid' when calling designTrendRead");
      }

      let pathParams = {
        'designid': designid,
        'trendid': trendid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignTrend;
      return this.apiClient.callApi(
        '/design/{designid}/trend/{trendid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designTrendUpdate operation.
     * @callback module:api/DesignApi~designTrendUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignTrend} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a trend
     * @param {Number} designid 
     * @param {Number} trendid 
     * @param {module:model/DesignTrend} data 
     * @param {module:api/DesignApi~designTrendUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignTrend}
     */
    designTrendUpdate(designid, trendid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designTrendUpdate");
      }
      // verify the required parameter 'trendid' is set
      if (trendid === undefined || trendid === null) {
        throw new Error("Missing the required parameter 'trendid' when calling designTrendUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designTrendUpdate");
      }

      let pathParams = {
        'designid': designid,
        'trendid': trendid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignTrend;
      return this.apiClient.callApi(
        '/design/{designid}/trend/{trendid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designUpdate operation.
     * @callback module:api/DesignApi~designUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Design} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update design
     * @param {Number} designid 
     * @param {module:model/Design} data 
     * @param {module:api/DesignApi~designUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Design}
     */
    designUpdate(designid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling designUpdate");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Design;
      return this.apiClient.callApi(
        '/design/{designid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designUpdateList operation.
     * @callback module:api/DesignApi~designUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of {current, last update} times
     * @param {Number} designid 
     * @param {module:api/DesignApi~designUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    designUpdateList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designUpdateList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/design/{designid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVerilogInstancesList operation.
     * @callback module:api/DesignApi~designVerilogInstancesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} designid 
     * @param {String} moduleid 
     * @param {module:api/DesignApi~designVerilogInstancesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designVerilogInstancesList(designid, moduleid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVerilogInstancesList");
      }
      // verify the required parameter 'moduleid' is set
      if (moduleid === undefined || moduleid === null) {
        throw new Error("Missing the required parameter 'moduleid' when calling designVerilogInstancesList");
      }

      let pathParams = {
        'designid': designid,
        'moduleid': moduleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/verilog/{moduleid}/instances/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVerilogList operation.
     * @callback module:api/DesignApi~designVerilogListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} designid 
     * @param {module:api/DesignApi~designVerilogListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designVerilogList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVerilogList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/verilog/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVerilogModuleStateList operation.
     * @callback module:api/DesignApi~designVerilogModuleStateListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} designid 
     * @param {String} moduleid 
     * @param {module:api/DesignApi~designVerilogModuleStateListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designVerilogModuleStateList(designid, moduleid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVerilogModuleStateList");
      }
      // verify the required parameter 'moduleid' is set
      if (moduleid === undefined || moduleid === null) {
        throw new Error("Missing the required parameter 'moduleid' when calling designVerilogModuleStateList");
      }

      let pathParams = {
        'designid': designid,
        'moduleid': moduleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/verilog/module/{moduleid}/state/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVerilogModulesList operation.
     * @callback module:api/DesignApi~designVerilogModulesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} designid 
     * @param {String} moduleid 
     * @param {module:api/DesignApi~designVerilogModulesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designVerilogModulesList(designid, moduleid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVerilogModulesList");
      }
      // verify the required parameter 'moduleid' is set
      if (moduleid === undefined || moduleid === null) {
        throw new Error("Missing the required parameter 'moduleid' when calling designVerilogModulesList");
      }

      let pathParams = {
        'designid': designid,
        'moduleid': moduleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/verilog/{moduleid}/modules/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVerilogWireStateList operation.
     * @callback module:api/DesignApi~designVerilogWireStateListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} designid 
     * @param {String} wireid 
     * @param {module:api/DesignApi~designVerilogWireStateListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designVerilogWireStateList(designid, wireid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVerilogWireStateList");
      }
      // verify the required parameter 'wireid' is set
      if (wireid === undefined || wireid === null) {
        throw new Error("Missing the required parameter 'wireid' when calling designVerilogWireStateList");
      }

      let pathParams = {
        'designid': designid,
        'wireid': wireid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/verilog/wire/{wireid}/state/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVerilogWiresList operation.
     * @callback module:api/DesignApi~designVerilogWiresListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} designid 
     * @param {String} moduleid 
     * @param {module:api/DesignApi~designVerilogWiresListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    designVerilogWiresList(designid, moduleid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVerilogWiresList");
      }
      // verify the required parameter 'moduleid' is set
      if (moduleid === undefined || moduleid === null) {
        throw new Error("Missing the required parameter 'moduleid' when calling designVerilogWiresList");
      }

      let pathParams = {
        'designid': designid,
        'moduleid': moduleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/design/{designid}/verilog/{moduleid}/wires/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVersionList operation.
     * @callback module:api/DesignApi~designVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of design versions
     * @param {Number} designid 
     * @param {module:api/DesignApi~designVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignVersion>}
     */
    designVersionList(designid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVersionList");
      }

      let pathParams = {
        'designid': designid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignVersion];
      return this.apiClient.callApi(
        '/design/{designid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the designVersionRead operation.
     * @callback module:api/DesignApi~designVersionReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a design version
     * @param {Number} designid 
     * @param {Number} versionid 
     * @param {module:api/DesignApi~designVersionReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignVersion>}
     */
    designVersionRead(designid, versionid, callback) {
      let postBody = null;
      // verify the required parameter 'designid' is set
      if (designid === undefined || designid === null) {
        throw new Error("Missing the required parameter 'designid' when calling designVersionRead");
      }
      // verify the required parameter 'versionid' is set
      if (versionid === undefined || versionid === null) {
        throw new Error("Missing the required parameter 'versionid' when calling designVersionRead");
      }

      let pathParams = {
        'designid': designid,
        'versionid': versionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignVersion];
      return this.apiClient.callApi(
        '/design/{designid}/version/{versionid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
