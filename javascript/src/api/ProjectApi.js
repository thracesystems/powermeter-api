/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Design from '../model/Design';
import DesignInstance from '../model/DesignInstance';
import DesignMaster from '../model/DesignMaster';
import DesignSupplyInst from '../model/DesignSupplyInst';
import DesignVersion from '../model/DesignVersion';
import PCBInstance from '../model/PCBInstance';
import PackageInstance from '../model/PackageInstance';
import PackageSupplyInst from '../model/PackageSupplyInst';
import PagedContribDevice from '../model/PagedContribDevice';
import Project from '../model/Project';
import Scenario from '../model/Scenario';
import ScenarioHierarchy from '../model/ScenarioHierarchy';
import ScenarioMaster from '../model/ScenarioMaster';
import ScenarioModeUtil from '../model/ScenarioModeUtil';
import ScenarioModeUtilConfig from '../model/ScenarioModeUtilConfig';
import ScenarioParam from '../model/ScenarioParam';
import ScenarioParamConfig from '../model/ScenarioParamConfig';
import ScenarioVersion from '../model/ScenarioVersion';
import SimMaster from '../model/SimMaster';
import SupplyInstConfig from '../model/SupplyInstConfig';
import SwaggerContrib from '../model/SwaggerContrib';
import UpdateData from '../model/UpdateData';
import VRInstance from '../model/VRInstance';
import VRSupplyInst from '../model/VRSupplyInst';
import WLMMaster from '../model/WLMMaster';

/**
* Project service.
* @module api/ProjectApi
* @version 2021.4.1
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectAccessCreate operation.
     * @callback module:api/ProjectApi~projectAccessCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project access
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectAccessCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectAccessCreate(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectAccessCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/access/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectClone operation.
     * @callback module:api/ProjectApi~projectCloneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a copy of project
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectCloneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectClone(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectClone");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectContribDeviceComputeList operation.
     * @callback module:api/ProjectApi~projectContribDeviceComputeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggerContrib} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute a contributor device
     * @param {Number} projectid 
     * @param {Number} deviceid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.p 
     * @param {Number} opts.v 
     * @param {Number} opts.t 
     * @param {module:api/ProjectApi~projectContribDeviceComputeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggerContrib}
     */
    projectContribDeviceComputeList(projectid, deviceid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectContribDeviceComputeList");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling projectContribDeviceComputeList");
      }

      let pathParams = {
        'projectid': projectid,
        'deviceid': deviceid
      };
      let queryParams = {
        'p': opts['p'],
        'v': opts['v'],
        't': opts['t']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwaggerContrib;
      return this.apiClient.callApi(
        '/project/{projectid}/contrib_device/{deviceid}/compute/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectContribDeviceCreate operation.
     * @callback module:api/ProjectApi~projectContribDeviceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggerContrib} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a contributor devices
     * @param {Number} projectid 
     * @param {module:model/SwaggerContrib} data 
     * @param {module:api/ProjectApi~projectContribDeviceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggerContrib}
     */
    projectContribDeviceCreate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectContribDeviceCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectContribDeviceCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwaggerContrib;
      return this.apiClient.callApi(
        '/project/{projectid}/contrib_device/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectContribDeviceDelete operation.
     * @callback module:api/ProjectApi~projectContribDeviceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a contributor devices
     * @param {Number} projectid 
     * @param {Number} deviceid 
     * @param {module:api/ProjectApi~projectContribDeviceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectContribDeviceDelete(projectid, deviceid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectContribDeviceDelete");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling projectContribDeviceDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/contrib_device/{deviceid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectContribDeviceList operation.
     * @callback module:api/ProjectApi~projectContribDeviceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedContribDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of contributor devices
     * @param {Number} projectid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts._number 
     * @param {module:api/ProjectApi~projectContribDeviceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedContribDevice}
     */
    projectContribDeviceList(projectid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectContribDeviceList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
        'page': opts['page'],
        'number': opts['_number']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedContribDevice;
      return this.apiClient.callApi(
        '/project/{projectid}/contrib_device/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectContribDeviceRead operation.
     * @callback module:api/ProjectApi~projectContribDeviceReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggerContrib} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a contributor device
     * @param {Number} projectid 
     * @param {Number} deviceid 
     * @param {module:api/ProjectApi~projectContribDeviceReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggerContrib}
     */
    projectContribDeviceRead(projectid, deviceid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectContribDeviceRead");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling projectContribDeviceRead");
      }

      let pathParams = {
        'projectid': projectid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwaggerContrib;
      return this.apiClient.callApi(
        '/project/{projectid}/contrib_device/{deviceid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectContribDeviceUpdate operation.
     * @callback module:api/ProjectApi~projectContribDeviceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggerContrib} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a contributor devices
     * @param {Number} projectid 
     * @param {Number} deviceid 
     * @param {module:model/SwaggerContrib} data 
     * @param {module:api/ProjectApi~projectContribDeviceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggerContrib}
     */
    projectContribDeviceUpdate(projectid, deviceid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectContribDeviceUpdate");
      }
      // verify the required parameter 'deviceid' is set
      if (deviceid === undefined || deviceid === null) {
        throw new Error("Missing the required parameter 'deviceid' when calling projectContribDeviceUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectContribDeviceUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'deviceid': deviceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwaggerContrib;
      return this.apiClient.callApi(
        '/project/{projectid}/contrib_device/{deviceid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCreate operation.
     * @callback module:api/ProjectApi~projectCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project
     * @param {module:model/Project} data 
     * @param {module:api/ProjectApi~projectCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDelete operation.
     * @callback module:api/ProjectApi~projectDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectDelete(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDelete");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignAccessCreate operation.
     * @callback module:api/ProjectApi~projectDesignAccessCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update design access
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:api/ProjectApi~projectDesignAccessCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectDesignAccessCreate(projectid, masterdesignid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignAccessCreate");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling projectDesignAccessCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/design/{masterdesignid}/access/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignClone operation.
     * @callback module:api/ProjectApi~projectDesignCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a copy of design
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:api/ProjectApi~projectDesignCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignMaster}
     */
    projectDesignClone(projectid, masterdesignid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignClone");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling projectDesignClone");
      }

      let pathParams = {
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/design/{masterdesignid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignCreate operation.
     * @callback module:api/ProjectApi~projectDesignCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a design, return master design
     * @param {Number} projectid 
     * @param {module:model/Design} data 
     * @param {module:api/ProjectApi~projectDesignCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignMaster}
     */
    projectDesignCreate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectDesignCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/design/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignDelete operation.
     * @callback module:api/ProjectApi~projectDesignDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a master design
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:api/ProjectApi~projectDesignDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectDesignDelete(projectid, masterdesignid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignDelete");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling projectDesignDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/design/{masterdesignid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignInstantiableList operation.
     * @callback module:api/ProjectApi~projectDesignInstantiableListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of designs that can be instantiated in the given design
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectDesignInstantiableListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignMaster>}
     */
    projectDesignInstantiableList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignInstantiableList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/design/instantiable/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignList operation.
     * @callback module:api/ProjectApi~projectDesignListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of master designs in projects
     * @param {Number} projectid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Design name
     * @param {module:api/ProjectApi~projectDesignListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignMaster>}
     */
    projectDesignList(projectid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/design/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignRead operation.
     * @callback module:api/ProjectApi~projectDesignReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a master design
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:api/ProjectApi~projectDesignReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignMaster}
     */
    projectDesignRead(projectid, masterdesignid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignRead");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling projectDesignRead");
      }

      let pathParams = {
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/design/{masterdesignid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignUpdate operation.
     * @callback module:api/ProjectApi~projectDesignUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a design master
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:model/DesignMaster} data 
     * @param {module:api/ProjectApi~projectDesignUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignMaster}
     */
    projectDesignUpdate(projectid, masterdesignid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignUpdate");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling projectDesignUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectDesignUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/design/{masterdesignid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectDesignVersionsList operation.
     * @callback module:api/ProjectApi~projectDesignVersionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of design versions
     * @param {Number} projectid 
     * @param {Number} masterdesignid 
     * @param {module:api/ProjectApi~projectDesignVersionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignVersion>}
     */
    projectDesignVersionsList(projectid, masterdesignid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectDesignVersionsList");
      }
      // verify the required parameter 'masterdesignid' is set
      if (masterdesignid === undefined || masterdesignid === null) {
        throw new Error("Missing the required parameter 'masterdesignid' when calling projectDesignVersionsList");
      }

      let pathParams = {
        'projectid': projectid,
        'masterdesignid': masterdesignid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignVersion];
      return this.apiClient.callApi(
        '/project/{projectid}/design/{masterdesignid}/versions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectList operation.
     * @callback module:api/ProjectApi~projectListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Project name
     * @param {module:api/ProjectApi~projectListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/project/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectPermissionsList operation.
     * @callback module:api/ProjectApi~projectPermissionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectPermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectPermissionsList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectPermissionsList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectPermissionsUpdate operation.
     * @callback module:api/ProjectApi~projectPermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectPermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectPermissionsUpdate(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectPermissionsUpdate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/permissions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectRead operation.
     * @callback module:api/ProjectApi~projectReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectRead(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectRead");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectReferenceCreate operation.
     * @callback module:api/ProjectApi~projectReferenceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a reference
     * @param {Number} projectid 
     * @param {module:model/Project} data 
     * @param {module:api/ProjectApi~projectReferenceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectReferenceCreate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectReferenceCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectReferenceCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectid}/reference/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectReferenceDelete operation.
     * @callback module:api/ProjectApi~projectReferenceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a reference
     * @param {Number} projectid 
     * @param {Number} refid 
     * @param {module:api/ProjectApi~projectReferenceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectReferenceDelete(projectid, refid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectReferenceDelete");
      }
      // verify the required parameter 'refid' is set
      if (refid === undefined || refid === null) {
        throw new Error("Missing the required parameter 'refid' when calling projectReferenceDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'refid': refid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/reference/{refid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectReferenceList operation.
     * @callback module:api/ProjectApi~projectReferenceListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of refernced projects
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectReferenceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectReferenceList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectReferenceList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/project/{projectid}/reference/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectReferenceRead operation.
     * @callback module:api/ProjectApi~projectReferenceReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a reference
     * @param {Number} projectid 
     * @param {Number} refid 
     * @param {module:api/ProjectApi~projectReferenceReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectReferenceRead(projectid, refid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectReferenceRead");
      }
      // verify the required parameter 'refid' is set
      if (refid === undefined || refid === null) {
        throw new Error("Missing the required parameter 'refid' when calling projectReferenceRead");
      }

      let pathParams = {
        'projectid': projectid,
        'refid': refid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectid}/reference/{refid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectReferenceableList operation.
     * @callback module:api/ProjectApi~projectReferenceableListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of projects referenceable by this project
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectReferenceableListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    projectReferenceableList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectReferenceableList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];
      return this.apiClient.callApi(
        '/project/{projectid}/referenceable/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioAccessCreate operation.
     * @callback module:api/ProjectApi~projectScenarioAccessCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project datasheet access
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioAccessCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioAccessCreate(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioAccessCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioAccessCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/access/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioCommitCreate operation.
     * @callback module:api/ProjectApi~projectScenarioCommitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit a version
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/ScenarioVersion} data 
     * @param {module:api/ProjectApi~projectScenarioCommitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioVersion}
     */
    projectScenarioCommitCreate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioCommitCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioCommitCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioCommitCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioVersion;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/commit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDelete operation.
     * @callback module:api/ProjectApi~projectScenarioDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDelete(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario PC instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/DesignInstance} data 
     * @param {module:api/ProjectApi~projectScenarioDesignCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignInstance}
     */
    projectScenarioDesignCreate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignDelete operation.
     * @callback module:api/ProjectApi~projectScenarioDesignDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario Design instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignDelete(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignDelete");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario Designs
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioDesignListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignInstance>}
     */
    projectScenarioDesignList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignInstance];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamConfigCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamConfigCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioParamConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {module:model/ScenarioParamConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignParamConfigCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioParamConfig}
     */
    projectScenarioDesignParamConfigCreate(projectid, scenarioid, designinstid, paramid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigCreate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigCreate");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignParamConfigCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioParamConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamConfigDelete operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioDesignParamConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignParamConfigDelete(projectid, scenarioid, designinstid, paramid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigDelete");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigDelete");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignParamConfigDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamConfigList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioParamConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {module:api/ProjectApi~projectScenarioDesignParamConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioParamConfig>}
     */
    projectScenarioDesignParamConfigList(projectid, scenarioid, designinstid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigList");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioParamConfig];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamConfigRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioParamConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioDesignParamConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioParamConfig}
     */
    projectScenarioDesignParamConfigRead(projectid, scenarioid, designinstid, paramid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigRead");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignParamConfigRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioParamConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamConfigUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioParamConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {Number} configid 
     * @param {module:model/ScenarioParamConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignParamConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioParamConfig}
     */
    projectScenarioDesignParamConfigUpdate(projectid, scenarioid, designinstid, paramid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamConfigUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamConfigUpdate");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignParamConfigUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignParamConfigUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioParamConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioParam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:model/ScenarioParam} data 
     * @param {module:api/ProjectApi~projectScenarioDesignParamCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioParam}
     */
    projectScenarioDesignParamCreate(projectid, scenarioid, designinstid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamCreate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignParamCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioParam;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioParam>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignParamListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioParam>}
     */
    projectScenarioDesignParamList(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioParam];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioParam>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get datasheet design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {module:api/ProjectApi~projectScenarioDesignParamReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioParam>}
     */
    projectScenarioDesignParamRead(projectid, scenarioid, designinstid, paramid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamRead");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioParam];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignParamUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignParamUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioParam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create datasheet supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} paramid 
     * @param {module:model/ScenarioParam} data 
     * @param {module:api/ProjectApi~projectScenarioDesignParamUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioParam}
     */
    projectScenarioDesignParamUpdate(projectid, scenarioid, designinstid, paramid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignParamUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignParamUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignParamUpdate");
      }
      // verify the required parameter 'paramid' is set
      if (paramid === undefined || paramid === null) {
        throw new Error("Missing the required parameter 'paramid' when calling projectScenarioDesignParamUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignParamUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'paramid': paramid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioParam;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/param/{paramid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignPowerList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignPowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project scenario power
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignPowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignPowerList(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignPowerList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignPowerList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignPowerList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignPowerdistributionList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignPowerdistributionListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project scenario power distribution
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignPowerdistributionListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignPowerdistributionList(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignPowerdistributionList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignPowerdistributionList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignPowerdistributionList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/powerdistribution/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scenario Design
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignInstance}
     */
    projectScenarioDesignRead(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyConfigCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyConfigCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {String} designinstid 
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} dsigninstid 
     * @param {Number} supplyid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyConfigCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioDesignSupplyConfigCreate(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigCreate");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigCreate");
      }
      // verify the required parameter 'dsigninstid' is set
      if (dsigninstid === undefined || dsigninstid === null) {
        throw new Error("Missing the required parameter 'dsigninstid' when calling projectScenarioDesignSupplyConfigCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignSupplyConfigCreate");
      }

      let pathParams = {
        'designinstid': designinstid,
        'projectid': projectid,
        'scenarioid': scenarioid,
        'dsigninstid': dsigninstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyConfigDelete operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignSupplyConfigDelete(projectid, scenarioid, designinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigDelete");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignSupplyConfigDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignSupplyConfigDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyConfigList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyInstConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyid 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyInstConfig>}
     */
    projectScenarioDesignSupplyConfigList(projectid, scenarioid, designinstid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupplyInstConfig];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyConfigRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioDesignSupplyConfigRead(projectid, scenarioid, designinstid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignSupplyConfigRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyConfigUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioDesignSupplyConfigUpdate(projectid, scenarioid, designinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyConfigUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyConfigUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignSupplyConfigUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignSupplyConfigUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {String} designinstid 
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} dsigninstid 
     * @param {Number} supplyid 
     * @param {module:model/DesignSupplyInst} data 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSupplyInst}
     */
    projectScenarioDesignSupplyCreate(designinstid, projectid, scenarioid, dsigninstid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyCreate");
      }
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyCreate");
      }
      // verify the required parameter 'dsigninstid' is set
      if (dsigninstid === undefined || dsigninstid === null) {
        throw new Error("Missing the required parameter 'dsigninstid' when calling projectScenarioDesignSupplyCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignSupplyCreate");
      }

      let pathParams = {
        'designinstid': designinstid,
        'projectid': projectid,
        'scenarioid': scenarioid,
        'dsigninstid': dsigninstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignSupplyRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DesignSupplyInst>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyid 
     * @param {module:api/ProjectApi~projectScenarioDesignSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DesignSupplyInst>}
     */
    projectScenarioDesignSupplyRead(projectid, scenarioid, designinstid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignSupplyRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignSupplyRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignSupplyRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioDesignSupplyRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DesignSupplyInst];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/supply/{supplyid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignThermalList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignThermalListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute project scenario steady state thermal
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignThermalListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignThermalList(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignThermalList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignThermalList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignThermalList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/thermal/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario Design instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:model/DesignInstance} data 
     * @param {module:api/ProjectApi~projectScenarioDesignUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignInstance}
     */
    projectScenarioDesignUpdate(projectid, scenarioid, designinstid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DesignInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationConfigCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationConfigCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioModeUtilConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {module:model/ScenarioModeUtilConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationConfigCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioModeUtilConfig}
     */
    projectScenarioDesignUtilizationConfigCreate(projectid, scenarioid, designinstid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigCreate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigCreate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationConfigCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioModeUtilConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationConfigDelete operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioDesignUtilizationConfigDelete(projectid, scenarioid, designinstid, modeid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigDelete");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigDelete");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignUtilizationConfigDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationConfigList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioModeUtilConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioModeUtilConfig>}
     */
    projectScenarioDesignUtilizationConfigList(projectid, scenarioid, designinstid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigList");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioModeUtilConfig];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationConfigRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioModeUtilConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioModeUtilConfig}
     */
    projectScenarioDesignUtilizationConfigRead(projectid, scenarioid, designinstid, modeid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigRead");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignUtilizationConfigRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioModeUtilConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationConfigUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioModeUtilConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {Number} configid 
     * @param {module:model/ScenarioModeUtilConfig} data 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioModeUtilConfig}
     */
    projectScenarioDesignUtilizationConfigUpdate(projectid, scenarioid, designinstid, modeid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationConfigUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationConfigUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioDesignUtilizationConfigUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationConfigUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioModeUtilConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationCreate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {module:model/ScenarioModeUtil} data 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioModeUtil}
     */
    projectScenarioDesignUtilizationCreate(projectid, scenarioid, designinstid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationCreate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationCreate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioModeUtil;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationList operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioModeUtil>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioModeUtil>}
     */
    projectScenarioDesignUtilizationList(projectid, scenarioid, designinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationList");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioModeUtil];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationRead operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design config data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioModeUtil}
     */
    projectScenarioDesignUtilizationRead(projectid, scenarioid, designinstid, modeid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationRead");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioModeUtil;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioDesignUtilizationUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioDesignUtilizationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioModeUtil} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} modeid 
     * @param {module:model/ScenarioModeUtil} data 
     * @param {module:api/ProjectApi~projectScenarioDesignUtilizationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioModeUtil}
     */
    projectScenarioDesignUtilizationUpdate(projectid, scenarioid, designinstid, modeid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioDesignUtilizationUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioDesignUtilizationUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioDesignUtilizationUpdate");
      }
      // verify the required parameter 'modeid' is set
      if (modeid === undefined || modeid === null) {
        throw new Error("Missing the required parameter 'modeid' when calling projectScenarioDesignUtilizationUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioDesignUtilizationUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'modeid': modeid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioModeUtil;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/design/{designinstid}/utilization/{modeid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyDesignSupplyRead operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyDesignSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario PCB package supply instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyinstid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyDesignSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSupplyInst}
     */
    projectScenarioHierarchyDesignSupplyRead(projectid, scenarioid, designinstid, supplyinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyDesignSupplyRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyDesignSupplyRead");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioHierarchyDesignSupplyRead");
      }
      // verify the required parameter 'supplyinstid' is set
      if (supplyinstid === undefined || supplyinstid === null) {
        throw new Error("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyDesignSupplyRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyinstid': supplyinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/design/{designinstid}/supply/{supplyinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyDesignSupplyUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyDesignSupplyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DesignSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario PCB package supply instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} designinstid 
     * @param {Number} supplyinstid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyDesignSupplyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DesignSupplyInst}
     */
    projectScenarioHierarchyDesignSupplyUpdate(projectid, scenarioid, designinstid, supplyinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyDesignSupplyUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyDesignSupplyUpdate");
      }
      // verify the required parameter 'designinstid' is set
      if (designinstid === undefined || designinstid === null) {
        throw new Error("Missing the required parameter 'designinstid' when calling projectScenarioHierarchyDesignSupplyUpdate");
      }
      // verify the required parameter 'supplyinstid' is set
      if (supplyinstid === undefined || supplyinstid === null) {
        throw new Error("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyDesignSupplyUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'designinstid': designinstid,
        'supplyinstid': supplyinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DesignSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/design/{designinstid}/supply/{supplyinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyList operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioHierarchy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario PCBs
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioHierarchy}
     */
    projectScenarioHierarchyList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioHierarchy;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyPackageSupplyRead operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyPackageSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario PCB package supply instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyinstid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyPackageSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageSupplyInst}
     */
    projectScenarioHierarchyPackageSupplyRead(projectid, scenarioid, packinstid, supplyinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyPackageSupplyRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyPackageSupplyRead");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioHierarchyPackageSupplyRead");
      }
      // verify the required parameter 'supplyinstid' is set
      if (supplyinstid === undefined || supplyinstid === null) {
        throw new Error("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyPackageSupplyRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyinstid': supplyinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/package/{packinstid}/supply/{supplyinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyPackageSupplyUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyPackageSupplyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update scenario PCB package supply instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyinstid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyPackageSupplyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageSupplyInst}
     */
    projectScenarioHierarchyPackageSupplyUpdate(projectid, scenarioid, packinstid, supplyinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyPackageSupplyUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyPackageSupplyUpdate");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioHierarchyPackageSupplyUpdate");
      }
      // verify the required parameter 'supplyinstid' is set
      if (supplyinstid === undefined || supplyinstid === null) {
        throw new Error("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyPackageSupplyUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyinstid': supplyinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/package/{packinstid}/supply/{supplyinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyVrSupplyRead operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyVrSupplyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create datasheet PCB package supply instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyinstid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyVrSupplyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRSupplyInst}
     */
    projectScenarioHierarchyVrSupplyRead(projectid, scenarioid, vrinstid, supplyinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyVrSupplyRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyVrSupplyRead");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioHierarchyVrSupplyRead");
      }
      // verify the required parameter 'supplyinstid' is set
      if (supplyinstid === undefined || supplyinstid === null) {
        throw new Error("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyVrSupplyRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyinstid': supplyinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VRSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/vr/{vrinstid}/supply/{supplyinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioHierarchyVrSupplyUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioHierarchyVrSupplyUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRSupplyInst} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create datasheet PCB package supply instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyinstid 
     * @param {module:api/ProjectApi~projectScenarioHierarchyVrSupplyUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRSupplyInst}
     */
    projectScenarioHierarchyVrSupplyUpdate(projectid, scenarioid, vrinstid, supplyinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioHierarchyVrSupplyUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioHierarchyVrSupplyUpdate");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioHierarchyVrSupplyUpdate");
      }
      // verify the required parameter 'supplyinstid' is set
      if (supplyinstid === undefined || supplyinstid === null) {
        throw new Error("Missing the required parameter 'supplyinstid' when calling projectScenarioHierarchyVrSupplyUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyinstid': supplyinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VRSupplyInst;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/hierarchy/vr/{vrinstid}/supply/{supplyinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryClone operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a scenario
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioLibraryCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioMaster}
     */
    projectScenarioLibraryClone(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryClone");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryClone");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScenarioMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/{scenarioid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryCreate operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new scenario
     * @param {Number} projectid 
     * @param {module:model/ScenarioMaster} data 
     * @param {module:api/ProjectApi~projectScenarioLibraryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioMaster}
     */
    projectScenarioLibraryCreate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioLibraryCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryDelete operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioLibraryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioLibraryDelete(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/{scenarioid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryList operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of project scenarios
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectScenarioLibraryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioMaster>}
     */
    projectScenarioLibraryList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryRead operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scenarios
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioLibraryReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioMaster>}
     */
    projectScenarioLibraryRead(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/{scenarioid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/ScenarioMaster} data 
     * @param {module:api/ProjectApi~projectScenarioLibraryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioMaster}
     */
    projectScenarioLibraryUpdate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioLibraryUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScenarioMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/{scenarioid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioLibraryVersionList operation.
     * @callback module:api/ProjectApi~projectScenarioLibraryVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of design versions
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioLibraryVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioVersion>}
     */
    projectScenarioLibraryVersionList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioLibraryVersionList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioLibraryVersionList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioVersion];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/library/{scenarioid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageCreate operation.
     * @callback module:api/ProjectApi~projectScenarioPackageCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario Package instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/PackageInstance} data 
     * @param {module:api/ProjectApi~projectScenarioPackageCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageInstance}
     */
    projectScenarioPackageCreate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPackageCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageDelete operation.
     * @callback module:api/ProjectApi~projectScenarioPackageDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario Package instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {module:api/ProjectApi~projectScenarioPackageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPackageDelete(projectid, scenarioid, packinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageDelete");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageList operation.
     * @callback module:api/ProjectApi~projectScenarioPackageListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PackageInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario Packages
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioPackageListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PackageInstance>}
     */
    projectScenarioPackageList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PackageInstance];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackagePowerList operation.
     * @callback module:api/ProjectApi~projectScenarioPackagePowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project scenario power
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {module:api/ProjectApi~projectScenarioPackagePowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPackagePowerList(projectid, scenarioid, packinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackagePowerList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackagePowerList");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackagePowerList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageRead operation.
     * @callback module:api/ProjectApi~projectScenarioPackageReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scenario Pckage
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {module:api/ProjectApi~projectScenarioPackageReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageInstance}
     */
    projectScenarioPackageRead(projectid, scenarioid, packinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageRead");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageSupplyConfigCreate operation.
     * @callback module:api/ProjectApi~projectScenarioPackageSupplyConfigCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create datasheet supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioPackageSupplyConfigCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioPackageSupplyConfigCreate(projectid, scenarioid, packinstid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigCreate");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPackageSupplyConfigCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageSupplyConfigDelete operation.
     * @callback module:api/ProjectApi~projectScenarioPackageSupplyConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioPackageSupplyConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPackageSupplyConfigDelete(projectid, scenarioid, packinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigDelete");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioPackageSupplyConfigDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPackageSupplyConfigDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageSupplyConfigList operation.
     * @callback module:api/ProjectApi~projectScenarioPackageSupplyConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyInstConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyid 
     * @param {module:api/ProjectApi~projectScenarioPackageSupplyConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyInstConfig>}
     */
    projectScenarioPackageSupplyConfigList(projectid, scenarioid, packinstid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigList");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupplyInstConfig];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageSupplyConfigRead operation.
     * @callback module:api/ProjectApi~projectScenarioPackageSupplyConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioPackageSupplyConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioPackageSupplyConfigRead(projectid, scenarioid, packinstid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigRead");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioPackageSupplyConfigRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageSupplyConfigUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioPackageSupplyConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioPackageSupplyConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioPackageSupplyConfigUpdate(projectid, scenarioid, packinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageSupplyConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageSupplyConfigUpdate");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageSupplyConfigUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPackageSupplyConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioPackageSupplyConfigUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPackageSupplyConfigUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPackageUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioPackageUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PackageInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario Package instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} packinstid 
     * @param {module:model/PackageInstance} data 
     * @param {module:api/ProjectApi~projectScenarioPackageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PackageInstance}
     */
    projectScenarioPackageUpdate(projectid, scenarioid, packinstid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPackageUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPackageUpdate");
      }
      // verify the required parameter 'packinstid' is set
      if (packinstid === undefined || packinstid === null) {
        throw new Error("Missing the required parameter 'packinstid' when calling projectScenarioPackageUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPackageUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'packinstid': packinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PackageInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/package/{packinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbCreate operation.
     * @callback module:api/ProjectApi~projectScenarioPcbCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PCBInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario PC instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/PCBInstance} data 
     * @param {module:api/ProjectApi~projectScenarioPcbCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PCBInstance}
     */
    projectScenarioPcbCreate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPcbCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PCBInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbDelete operation.
     * @callback module:api/ProjectApi~projectScenarioPcbDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a datasheet PCB instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {module:api/ProjectApi~projectScenarioPcbDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPcbDelete(projectid, scenarioid, pcbinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbDelete");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbList operation.
     * @callback module:api/ProjectApi~projectScenarioPcbListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PCBInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario PCBs
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioPcbListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PCBInstance>}
     */
    projectScenarioPcbList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PCBInstance];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbPowerList operation.
     * @callback module:api/ProjectApi~projectScenarioPcbPowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project scenario power
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {module:api/ProjectApi~projectScenarioPcbPowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPcbPowerList(projectid, scenarioid, pcbinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbPowerList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbPowerList");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbPowerList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbRead operation.
     * @callback module:api/ProjectApi~projectScenarioPcbReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PCBInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a datasheet PCB
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {module:api/ProjectApi~projectScenarioPcbReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PCBInstance}
     */
    projectScenarioPcbRead(projectid, scenarioid, pcbinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbRead");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PCBInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbSupplyConfigCreate operation.
     * @callback module:api/ProjectApi~projectScenarioPcbSupplyConfigCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {Number} supplyid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioPcbSupplyConfigCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioPcbSupplyConfigCreate(projectid, scenarioid, pcbinstid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigCreate");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPcbSupplyConfigCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbSupplyConfigDelete operation.
     * @callback module:api/ProjectApi~projectScenarioPcbSupplyConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create datasheet supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioPcbSupplyConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPcbSupplyConfigDelete(projectid, scenarioid, pcbinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigDelete");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioPcbSupplyConfigDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPcbSupplyConfigDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbSupplyConfigList operation.
     * @callback module:api/ProjectApi~projectScenarioPcbSupplyConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyInstConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {Number} supplyid 
     * @param {module:api/ProjectApi~projectScenarioPcbSupplyConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyInstConfig>}
     */
    projectScenarioPcbSupplyConfigList(projectid, scenarioid, pcbinstid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigList");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupplyInstConfig];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbSupplyConfigRead operation.
     * @callback module:api/ProjectApi~projectScenarioPcbSupplyConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get datasheet design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioPcbSupplyConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioPcbSupplyConfigRead(projectid, scenarioid, pcbinstid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigRead");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioPcbSupplyConfigRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbSupplyConfigUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioPcbSupplyConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create datasheet supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioPcbSupplyConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioPcbSupplyConfigUpdate(projectid, scenarioid, pcbinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbSupplyConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbSupplyConfigUpdate");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbSupplyConfigUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioPcbSupplyConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioPcbSupplyConfigUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPcbSupplyConfigUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPcbUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioPcbUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PCBInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a datasheet PCB instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} pcbinstid 
     * @param {module:model/PCBInstance} data 
     * @param {module:api/ProjectApi~projectScenarioPcbUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PCBInstance}
     */
    projectScenarioPcbUpdate(projectid, scenarioid, pcbinstid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPcbUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPcbUpdate");
      }
      // verify the required parameter 'pcbinstid' is set
      if (pcbinstid === undefined || pcbinstid === null) {
        throw new Error("Missing the required parameter 'pcbinstid' when calling projectScenarioPcbUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioPcbUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'pcbinstid': pcbinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PCBInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/pcb/{pcbinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPowerList operation.
     * @callback module:api/ProjectApi~projectScenarioPowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project scenario power
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioPowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPowerList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPowerList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPowerList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioPowerdistributionDownloadRead operation.
     * @callback module:api/ProjectApi~projectScenarioPowerdistributionDownloadReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} resolution 
     * @param {module:api/ProjectApi~projectScenarioPowerdistributionDownloadReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioPowerdistributionDownloadRead(projectid, scenarioid, resolution, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioPowerdistributionDownloadRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioPowerdistributionDownloadRead");
      }
      // verify the required parameter 'resolution' is set
      if (resolution === undefined || resolution === null) {
        throw new Error("Missing the required parameter 'resolution' when calling projectScenarioPowerdistributionDownloadRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'resolution': resolution
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/powerdistribution/download/{resolution}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioRead operation.
     * @callback module:api/ProjectApi~projectScenarioReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scenario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scenario}
     */
    projectScenarioRead(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Scenario;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioTrendList operation.
     * @callback module:api/ProjectApi~projectScenarioTrendListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a datasheet trend
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioTrendListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioTrendList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioTrendList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioTrendList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/trend/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scenario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/Scenario} data 
     * @param {module:api/ProjectApi~projectScenarioUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scenario}
     */
    projectScenarioUpdate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Scenario;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioUpdateList operation.
     * @callback module:api/ProjectApi~projectScenarioUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    projectScenarioUpdateList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioUpdateList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioUpdateList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVersionList operation.
     * @callback module:api/ProjectApi~projectScenarioVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ScenarioVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List of design versions
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ScenarioVersion>}
     */
    projectScenarioVersionList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVersionList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVersionList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ScenarioVersion];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrCreate operation.
     * @callback module:api/ProjectApi~projectScenarioVrCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario PC instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:model/VRInstance} data 
     * @param {module:api/ProjectApi~projectScenarioVrCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRInstance}
     */
    projectScenarioVrCreate(projectid, scenarioid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioVrCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrDelete operation.
     * @callback module:api/ProjectApi~projectScenarioVrDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scenario VR instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {module:api/ProjectApi~projectScenarioVrDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioVrDelete(projectid, scenarioid, vrinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrDelete");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrList operation.
     * @callback module:api/ProjectApi~projectScenarioVrListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VRInstance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario VRs
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {module:api/ProjectApi~projectScenarioVrListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VRInstance>}
     */
    projectScenarioVrList(projectid, scenarioid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VRInstance];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrPowerList operation.
     * @callback module:api/ProjectApi~projectScenarioVrPowerListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project scenario power
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {module:api/ProjectApi~projectScenarioVrPowerListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioVrPowerList(projectid, scenarioid, vrinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrPowerList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrPowerList");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrPowerList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/power/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrRead operation.
     * @callback module:api/ProjectApi~projectScenarioVrReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scenario VR
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {module:api/ProjectApi~projectScenarioVrReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRInstance}
     */
    projectScenarioVrRead(projectid, scenarioid, vrinstid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrRead");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VRInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrSupplyConfigCreate operation.
     * @callback module:api/ProjectApi~projectScenarioVrSupplyConfigCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioVrSupplyConfigCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioVrSupplyConfigCreate(projectid, scenarioid, vrinstid, supplyid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigCreate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigCreate");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigCreate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioVrSupplyConfigCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrSupplyConfigDelete operation.
     * @callback module:api/ProjectApi~projectScenarioVrSupplyConfigDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioVrSupplyConfigDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectScenarioVrSupplyConfigDelete(projectid, scenarioid, vrinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigDelete");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigDelete");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigDelete");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigDelete");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioVrSupplyConfigDelete");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioVrSupplyConfigDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrSupplyConfigList operation.
     * @callback module:api/ProjectApi~projectScenarioVrSupplyConfigListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SupplyInstConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyid 
     * @param {module:api/ProjectApi~projectScenarioVrSupplyConfigListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SupplyInstConfig>}
     */
    projectScenarioVrSupplyConfigList(projectid, scenarioid, vrinstid, supplyid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigList");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigList");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigList");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigList");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyid': supplyid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupplyInstConfig];
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrSupplyConfigRead operation.
     * @callback module:api/ProjectApi~projectScenarioVrSupplyConfigReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scenario design supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:api/ProjectApi~projectScenarioVrSupplyConfigReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioVrSupplyConfigRead(projectid, scenarioid, vrinstid, supplyid, configid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigRead");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigRead");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigRead");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigRead");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioVrSupplyConfigRead");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrSupplyConfigUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioVrSupplyConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupplyInstConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create scenario supply data
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {Number} supplyid 
     * @param {Number} configid 
     * @param {module:model/SupplyInstConfig} data 
     * @param {module:api/ProjectApi~projectScenarioVrSupplyConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupplyInstConfig}
     */
    projectScenarioVrSupplyConfigUpdate(projectid, scenarioid, vrinstid, supplyid, configid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrSupplyConfigUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrSupplyConfigUpdate");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrSupplyConfigUpdate");
      }
      // verify the required parameter 'supplyid' is set
      if (supplyid === undefined || supplyid === null) {
        throw new Error("Missing the required parameter 'supplyid' when calling projectScenarioVrSupplyConfigUpdate");
      }
      // verify the required parameter 'configid' is set
      if (configid === undefined || configid === null) {
        throw new Error("Missing the required parameter 'configid' when calling projectScenarioVrSupplyConfigUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioVrSupplyConfigUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid,
        'supplyid': supplyid,
        'configid': configid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SupplyInstConfig;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/supply/{supplyid}/config/{configid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectScenarioVrUpdate operation.
     * @callback module:api/ProjectApi~projectScenarioVrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VRInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a scenario VR instance
     * @param {Number} projectid 
     * @param {Number} scenarioid 
     * @param {Number} vrinstid 
     * @param {module:model/VRInstance} data 
     * @param {module:api/ProjectApi~projectScenarioVrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VRInstance}
     */
    projectScenarioVrUpdate(projectid, scenarioid, vrinstid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectScenarioVrUpdate");
      }
      // verify the required parameter 'scenarioid' is set
      if (scenarioid === undefined || scenarioid === null) {
        throw new Error("Missing the required parameter 'scenarioid' when calling projectScenarioVrUpdate");
      }
      // verify the required parameter 'vrinstid' is set
      if (vrinstid === undefined || vrinstid === null) {
        throw new Error("Missing the required parameter 'vrinstid' when calling projectScenarioVrUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectScenarioVrUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'scenarioid': scenarioid,
        'vrinstid': vrinstid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VRInstance;
      return this.apiClient.callApi(
        '/project/{projectid}/scenario/{scenarioid}/vr/{vrinstid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationCloneCreate operation.
     * @callback module:api/ProjectApi~projectSimulationCloneCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a simulation
     * @param {Number} projectid 
     * @param {Number} simid 
     * @param {module:api/ProjectApi~projectSimulationCloneCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectSimulationCloneCreate(projectid, simid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationCloneCreate");
      }
      // verify the required parameter 'simid' is set
      if (simid === undefined || simid === null) {
        throw new Error("Missing the required parameter 'simid' when calling projectSimulationCloneCreate");
      }

      let pathParams = {
        'projectid': projectid,
        'simid': simid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/{simid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationCreate operation.
     * @callback module:api/ProjectApi~projectSimulationCreateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new simulation
     * @param {Number} projectid 
     * @param {module:model/SimMaster} data 
     * @param {module:api/ProjectApi~projectSimulationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimMaster>}
     */
    projectSimulationCreate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectSimulationCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SimMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationDelete operation.
     * @callback module:api/ProjectApi~projectSimulationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a simulation
     * @param {Number} projectid 
     * @param {Number} simid 
     * @param {module:api/ProjectApi~projectSimulationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectSimulationDelete(projectid, simid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationDelete");
      }
      // verify the required parameter 'simid' is set
      if (simid === undefined || simid === null) {
        throw new Error("Missing the required parameter 'simid' when calling projectSimulationDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'simid': simid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/{simid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationList operation.
     * @callback module:api/ProjectApi~projectSimulationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of simulations
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectSimulationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimMaster>}
     */
    projectSimulationList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationRead operation.
     * @callback module:api/ProjectApi~projectSimulationReadCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SimMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of simulations
     * @param {Number} projectid 
     * @param {Number} simid 
     * @param {module:api/ProjectApi~projectSimulationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SimMaster>}
     */
    projectSimulationRead(projectid, simid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationRead");
      }
      // verify the required parameter 'simid' is set
      if (simid === undefined || simid === null) {
        throw new Error("Missing the required parameter 'simid' when calling projectSimulationRead");
      }

      let pathParams = {
        'projectid': projectid,
        'simid': simid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SimMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/{simid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationUpdate operation.
     * @callback module:api/ProjectApi~projectSimulationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a simulation
     * @param {Number} projectid 
     * @param {Number} simid 
     * @param {module:model/SimMaster} data 
     * @param {module:api/ProjectApi~projectSimulationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimMaster}
     */
    projectSimulationUpdate(projectid, simid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationUpdate");
      }
      // verify the required parameter 'simid' is set
      if (simid === undefined || simid === null) {
        throw new Error("Missing the required parameter 'simid' when calling projectSimulationUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectSimulationUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'simid': simid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/{simid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectSimulationUpdateList operation.
     * @callback module:api/ProjectApi~projectSimulationUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} projectid 
     * @param {Number} simid 
     * @param {module:api/ProjectApi~projectSimulationUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    projectSimulationUpdateList(projectid, simid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectSimulationUpdateList");
      }
      // verify the required parameter 'simid' is set
      if (simid === undefined || simid === null) {
        throw new Error("Missing the required parameter 'simid' when calling projectSimulationUpdateList");
      }

      let pathParams = {
        'projectid': projectid,
        'simid': simid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/project/{projectid}/simulation/{simid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUpdate operation.
     * @callback module:api/ProjectApi~projectUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a project
     * @param {Number} projectid 
     * @param {module:model/Project} data 
     * @param {module:api/ProjectApi~projectUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectUpdate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectUpdate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/project/{projectid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectUpdateTimes operation.
     * @callback module:api/ProjectApi~projectUpdateTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of {current, last update} times for current project
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectUpdateTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    projectUpdateTimes(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectUpdateTimes");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/project/{projectid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectVerilogCreate operation.
     * @callback module:api/ProjectApi~projectVerilogCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} projectid 
     * @param {module:api/ProjectApi~projectVerilogCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectVerilogCreate(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectVerilogCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/verilog/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWireLoadCreate operation.
     * @callback module:api/ProjectApi~projectWireLoadCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WLMMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a contributor devices
     * @param {Number} projectid 
     * @param {module:model/WLMMaster} data 
     * @param {module:api/ProjectApi~projectWireLoadCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WLMMaster}
     */
    projectWireLoadCreate(projectid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectWireLoadCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectWireLoadCreate");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WLMMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/wire_load/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWireLoadDelete operation.
     * @callback module:api/ProjectApi~projectWireLoadDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete wire load data
     * @param {Number} projectid 
     * @param {Number} wlmid 
     * @param {module:api/ProjectApi~projectWireLoadDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectWireLoadDelete(projectid, wlmid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectWireLoadDelete");
      }
      // verify the required parameter 'wlmid' is set
      if (wlmid === undefined || wlmid === null) {
        throw new Error("Missing the required parameter 'wlmid' when calling projectWireLoadDelete");
      }

      let pathParams = {
        'projectid': projectid,
        'wlmid': wlmid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectid}/wire_load/{wlmid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWireLoadList operation.
     * @callback module:api/ProjectApi~projectWireLoadListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WLMMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of wire load data
     * @param {Number} projectid 
     * @param {module:api/ProjectApi~projectWireLoadListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WLMMaster>}
     */
    projectWireLoadList(projectid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectWireLoadList");
      }

      let pathParams = {
        'projectid': projectid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WLMMaster];
      return this.apiClient.callApi(
        '/project/{projectid}/wire_load/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWireLoadRead operation.
     * @callback module:api/ProjectApi~projectWireLoadReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WLMMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get wire load data
     * @param {Number} projectid 
     * @param {Number} wlmid 
     * @param {module:api/ProjectApi~projectWireLoadReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WLMMaster}
     */
    projectWireLoadRead(projectid, wlmid, callback) {
      let postBody = null;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectWireLoadRead");
      }
      // verify the required parameter 'wlmid' is set
      if (wlmid === undefined || wlmid === null) {
        throw new Error("Missing the required parameter 'wlmid' when calling projectWireLoadRead");
      }

      let pathParams = {
        'projectid': projectid,
        'wlmid': wlmid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WLMMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/wire_load/{wlmid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectWireLoadUpdate operation.
     * @callback module:api/ProjectApi~projectWireLoadUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WLMMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update wireload data
     * @param {Number} projectid 
     * @param {Number} wlmid 
     * @param {module:model/WLMMaster} data 
     * @param {module:api/ProjectApi~projectWireLoadUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WLMMaster}
     */
    projectWireLoadUpdate(projectid, wlmid, data, callback) {
      let postBody = data;
      // verify the required parameter 'projectid' is set
      if (projectid === undefined || projectid === null) {
        throw new Error("Missing the required parameter 'projectid' when calling projectWireLoadUpdate");
      }
      // verify the required parameter 'wlmid' is set
      if (wlmid === undefined || wlmid === null) {
        throw new Error("Missing the required parameter 'wlmid' when calling projectWireLoadUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling projectWireLoadUpdate");
      }

      let pathParams = {
        'projectid': projectid,
        'wlmid': wlmid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WLMMaster;
      return this.apiClient.callApi(
        '/project/{projectid}/wire_load/{wlmid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdateTimes operation.
     * @callback module:api/ProjectApi~projectsUpdateTimesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of {current, last update} times for all projects
     * @param {module:api/ProjectApi~projectsUpdateTimesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    projectsUpdateTimes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/project/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
