/**
 * PowerMeter API
 * API
 *
 * The version of the OpenAPI document: 2021.4.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Heatsink from '../model/Heatsink';
import HeatsinkMaster from '../model/HeatsinkMaster';
import HeatsinkVersion from '../model/HeatsinkVersion';
import UpdateData from '../model/UpdateData';

/**
* Heatsink service.
* @module api/HeatsinkApi
* @version 2021.4.1
*/
export default class HeatsinkApi {

    /**
    * Constructs a new HeatsinkApi. 
    * @alias module:api/HeatsinkApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the haetsinkLibraryClone operation.
     * @callback module:api/HeatsinkApi~haetsinkLibraryCloneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatsinkMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a heat sink
     * @param {Number} heatsinkmasterid 
     * @param {module:api/HeatsinkApi~haetsinkLibraryCloneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatsinkMaster}
     */
    haetsinkLibraryClone(heatsinkmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkmasterid' is set
      if (heatsinkmasterid === undefined || heatsinkmasterid === null) {
        throw new Error("Missing the required parameter 'heatsinkmasterid' when calling haetsinkLibraryClone");
      }

      let pathParams = {
        'heatsinkmasterid': heatsinkmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HeatsinkMaster;
      return this.apiClient.callApi(
        '/heatsink/library/{heatsinkmasterid}/clone/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkCommitCreate operation.
     * @callback module:api/HeatsinkApi~heatsinkCommitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatsinkVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit a version
     * @param {Number} heatsinkid 
     * @param {module:model/HeatsinkVersion} data 
     * @param {module:api/HeatsinkApi~heatsinkCommitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatsinkVersion}
     */
    heatsinkCommitCreate(heatsinkid, data, callback) {
      let postBody = data;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkCommitCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling heatsinkCommitCreate");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HeatsinkVersion;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/commit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryCreate operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatsinkMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a heatsink
     * @param {module:model/HeatsinkMaster} data 
     * @param {module:api/HeatsinkApi~heatsinkLibraryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatsinkMaster}
     */
    heatsinkLibraryCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling heatsinkLibraryCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HeatsinkMaster;
      return this.apiClient.callApi(
        '/heatsink/library/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryDelete operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a heatsink
     * @param {Number} heatsinkmasterid 
     * @param {module:api/HeatsinkApi~heatsinkLibraryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    heatsinkLibraryDelete(heatsinkmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkmasterid' is set
      if (heatsinkmasterid === undefined || heatsinkmasterid === null) {
        throw new Error("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryDelete");
      }

      let pathParams = {
        'heatsinkmasterid': heatsinkmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/heatsink/library/{heatsinkmasterid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryList operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HeatsinkMaster>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of heat sinks
     * @param {module:api/HeatsinkApi~heatsinkLibraryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HeatsinkMaster>}
     */
    heatsinkLibraryList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HeatsinkMaster];
      return this.apiClient.callApi(
        '/heatsink/library/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryRead operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatsinkMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a heatsink
     * @param {Number} heatsinkmasterid 
     * @param {module:api/HeatsinkApi~heatsinkLibraryReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatsinkMaster}
     */
    heatsinkLibraryRead(heatsinkmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkmasterid' is set
      if (heatsinkmasterid === undefined || heatsinkmasterid === null) {
        throw new Error("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryRead");
      }

      let pathParams = {
        'heatsinkmasterid': heatsinkmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HeatsinkMaster;
      return this.apiClient.callApi(
        '/heatsink/library/{heatsinkmasterid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryUpdate operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatsinkMaster} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a heatsink
     * @param {Number} heatsinkmasterid 
     * @param {module:model/HeatsinkMaster} data 
     * @param {module:api/HeatsinkApi~heatsinkLibraryUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatsinkMaster}
     */
    heatsinkLibraryUpdate(heatsinkmasterid, data, callback) {
      let postBody = data;
      // verify the required parameter 'heatsinkmasterid' is set
      if (heatsinkmasterid === undefined || heatsinkmasterid === null) {
        throw new Error("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling heatsinkLibraryUpdate");
      }

      let pathParams = {
        'heatsinkmasterid': heatsinkmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HeatsinkMaster;
      return this.apiClient.callApi(
        '/heatsink/library/{heatsinkmasterid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryUpdateList operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {module:api/HeatsinkApi~heatsinkLibraryUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    heatsinkLibraryUpdateList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/heatsink/library/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkLibraryVersionList operation.
     * @callback module:api/HeatsinkApi~heatsinkLibraryVersionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HeatsinkVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heatsink versions
     * @param {Number} heatsinkmasterid 
     * @param {module:api/HeatsinkApi~heatsinkLibraryVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HeatsinkVersion}
     */
    heatsinkLibraryVersionList(heatsinkmasterid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkmasterid' is set
      if (heatsinkmasterid === undefined || heatsinkmasterid === null) {
        throw new Error("Missing the required parameter 'heatsinkmasterid' when calling heatsinkLibraryVersionList");
      }

      let pathParams = {
        'heatsinkmasterid': heatsinkmasterid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HeatsinkVersion;
      return this.apiClient.callApi(
        '/heatsink/library/{heatsinkmasterid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkPermissionsList operation.
     * @callback module:api/HeatsinkApi~heatsinkPermissionsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} heatsinkid 
     * @param {module:api/HeatsinkApi~heatsinkPermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    heatsinkPermissionsList(heatsinkid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkPermissionsList");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkPermissionsUpdate operation.
     * @callback module:api/HeatsinkApi~heatsinkPermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of permissions
     * @param {Number} heatsinkid 
     * @param {module:api/HeatsinkApi~heatsinkPermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    heatsinkPermissionsUpdate(heatsinkid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkPermissionsUpdate");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/permissions/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkRead operation.
     * @callback module:api/HeatsinkApi~heatsinkReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Heatsink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a heatsink
     * @param {Number} heatsinkid 
     * @param {module:api/HeatsinkApi~heatsinkReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Heatsink}
     */
    heatsinkRead(heatsinkid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkRead");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Heatsink;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkRestoreCreate operation.
     * @callback module:api/HeatsinkApi~heatsinkRestoreCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Heatsink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore a heatsink version as current version
     * @param {Number} heatsinkid 
     * @param {module:api/HeatsinkApi~heatsinkRestoreCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Heatsink}
     */
    heatsinkRestoreCreate(heatsinkid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkRestoreCreate");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Heatsink;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/restore/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkUpdate operation.
     * @callback module:api/HeatsinkApi~heatsinkUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Heatsink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a heatsink
     * @param {Number} heatsinkid 
     * @param {module:model/Heatsink} data 
     * @param {module:api/HeatsinkApi~heatsinkUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Heatsink}
     */
    heatsinkUpdate(heatsinkid, data, callback) {
      let postBody = data;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling heatsinkUpdate");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Heatsink;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkUpdateList operation.
     * @callback module:api/HeatsinkApi~heatsinkUpdateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of [current, last update] times
     * @param {Number} heatsinkid 
     * @param {module:api/HeatsinkApi~heatsinkUpdateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateData}
     */
    heatsinkUpdateList(heatsinkid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkUpdateList");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateData;
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/update/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the heatsinkVersionList operation.
     * @callback module:api/HeatsinkApi~heatsinkVersionListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HeatsinkVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Heatsink versions
     * @param {Number} heatsinkid 
     * @param {module:api/HeatsinkApi~heatsinkVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HeatsinkVersion>}
     */
    heatsinkVersionList(heatsinkid, callback) {
      let postBody = null;
      // verify the required parameter 'heatsinkid' is set
      if (heatsinkid === undefined || heatsinkid === null) {
        throw new Error("Missing the required parameter 'heatsinkid' when calling heatsinkVersionList");
      }

      let pathParams = {
        'heatsinkid': heatsinkid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HeatsinkVersion];
      return this.apiClient.callApi(
        '/heatsink/{heatsinkid}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
